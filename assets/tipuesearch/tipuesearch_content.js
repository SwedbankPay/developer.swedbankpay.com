var tipuesearch = {"pages": [{
    "title": "",
    "text": "Uh oh! Seems like you have taken a wrong turn somewhere :construction: Return home by clicking the logo in the upper left corner.",
    "tags": "",
    "url": "/404.html"
  },{
    "title": "Abort",
    "text": "Abort To abort a payment order, perform the abort operation that is returned in the payment order response. You need to include the following in the request body: Abort PATCH Request Request Copy json to clipboard 1 2 3 4 PATCH /psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.x/2.0 // Version optional for 3.0 and 2.0 1 2 3 4 5 6 7 { { \"paymentorder\": { \"operation\": \"Abort\", \"abortReason\": \"CancelledByConsumer\" } } Field Type Description paymentOrder object The payment order object. operation string Abort abortReason string CancelledByConsumer or CancelledByCustomer. Why the payment was aborted. Abort PATCH Response The response given when aborting a payment order is equivalent to a GET request towards the paymentorders resource, as displayed above, with its status set to Aborted. Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x/2.0 api-supported-versions: 3.x/2.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 { \"paymentOrder\": { \"id\": \"/psp/paymentorders/2c3f7a3e-65ca-4493-ac93-08d9dcb313fd\", \"created\": \"2022-01-24T10:54:05.6243371Z\", \"updated\": \"2022-01-24T10:54:19.2679591Z\", \"operation\": \"Purchase\", \"status\": \"Aborted\", \"currency\": \"SEK\", \"amount\": 32000, \"vatAmount\": 0, \"description\": \"Abort test\", \"initiatingSystemUserAgent\": \"swedbankpay-sdk-dotnet/3.0.1\", \"language\": \"sv-SE\", \"availableInstruments\": [ \"CreditCard\", \"Invoice-PayExFinancingSe\", \"Invoice-PayMonthlyInvoiceSe\", \"Swish\", \"CreditAccount\", \"Trustly\" ], \"instrumentMode\": false, \"guestMode\": false, \"orderItems\": { \"id\": \"/psp/paymentorders/2c3f7a3e-65ca-4493-ac93-08d9dcb313fd/orderitems\" }, \"urls\": { \"id\": \"/psp/paymentorders/2c3f7a3e-65ca-4493-ac93-08d9dcb313fd/urls\" }, \"payeeInfo\": { \"id\": \"/psp/paymentorders/2c3f7a3e-65ca-4493-ac93-08d9dcb313fd/payeeinfo\" }, \"payer\": { \"id\": \"/psp/paymentorders/2c3f7a3e-65ca-4493-ac93-08d9dcb313fd/payers\" }, \"history\": { \"id\": \"/psp/paymentorders/2c3f7a3e-65ca-4493-ac93-08d9dcb313fd/history\" }, \"failed\": { \"id\": \"/psp/paymentorders/2c3f7a3e-65ca-4493-ac93-08d9dcb313fd/failed\" }, \"aborted\": { \"id\": \"/psp/paymentorders/2c3f7a3e-65ca-4493-ac93-08d9dcb313fd/aborted\" }, \"paid\": { \"id\": \"/psp/paymentorders/2c3f7a3e-65ca-4493-ac93-08d9dcb313fd/paid\" }, \"cancelled\": { \"id\": \"/psp/paymentorders/2c3f7a3e-65ca-4493-ac93-08d9dcb313fd/cancelled\" }, \"financialTransactions\": { \"id\": \"/psp/paymentorders/2c3f7a3e-65ca-4493-ac93-08d9dcb313fd/financialtransactions\" }, \"failedAttempts\": { \"id\": \"/psp/paymentorders/2c3f7a3e-65ca-4493-ac93-08d9dcb313fd/failedattempts\" }, \"metadata\": { \"id\": \"/psp/paymentorders/2c3f7a3e-65ca-4493-ac93-08d9dcb313fd/metadata\" } }, \"operations\": [ ] } Show fields Hide fields Field Type Description paymentOrder object The payment order object. id string The relative URL and unique identifier of the paymentorder resource . Please read about URL Usage to understand how this and other URLs should be used in your solution. created string The ISO-8601 date of when the payment order was created. updated string The ISO-8601 date of when the payment order was updated. operation string Purchase status string Initialized, Paid, Failed, Cancelled or Aborted. Indicates the state of the payment order. currency string The currency of the payment order. amount integer The transaction amount (including VAT, if any) entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The amount displayed is the final amount the payer paid for their order, including any payment method specific discounts or fees. vatAmount integer The payment’s VAT (Value Added Tax) amount, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The vatAmount entered will not affect the amount shown on the payment page, which only shows the total amount. This field is used to specify how much of the total amount the VAT will be. Set to 0 (zero) if there is no VAT amount charged. description string(40) A textual description of the purchase. Maximum length is 40 characters. initiatingSystemUserAgent string The user agent of the HTTP client making the request, reflecting the value sent in the User-Agent header with the initial POST request which created the Payment Order. language string sv-SE, nb-NO, da-DK, en-US or fi-FI. availableInstruments string A list of payment methods available for this payment. implementation string The Digital Payments implementation type. Omit if the integration is for Payments Only. integration string The merchant’s Digital Payments integration type. HostedView (Seamless View) or Redirect. This field will not be populated until the payer has opened the payment UI, and the client script has identified if Swedbank Pay or another URI is hosting the container with the payment iframe. instrumentMode bool Set to true or false. Indicates if the payment is initialized with only one payment method available. guestMode bool Set to true or false. Indicates if the payer chose to pay as a guest or not. When using the Enterprise implementation, this is triggered by not including a payerReference or nationalIdentifier in the original payment order request. orderItems string The array of items being purchased with the order. Note that authorization orderItems will not be printed on invoices, so lines meant for print must be added in the Capture request. The authorization orderItems will, however, be used in the Merchant Portal when captures or reversals are performed, and might be shown other places later. It is required to use this field to be able to send Capture orderItems. Capture requests should only contain items meant to be captured from the order. urls string The URL to the urls resource where information about the urls can be retrieved. payeeInfo id The payeeInfo object, containing information about the payee (the recipient of the money). See payeeInfo for details. payer id The URL to the payer resource where information about the payer can be retrieved. history id The URL to the history resource where information about the payment’s history can be retrieved. failed id The URL to the failed resource where information about the failed transactions can be retrieved. aborted id The URL to the aborted resource where information about the aborted transactions can be retrieved. paid id The URL to the paid resource whereinformation about the paid transactions, including any possibly created tokens,can be retrieved. cancelled id The URL to the cancelled resource where information about the cancelled transactions can be retrieved. financialTransactions id The URL to the financialTransactions resource where information about the financial transactions can be retrieved. failedAttempts id The URL to the failedAttempts resource where information about the failed attempts can be retrieved. metadata id The URL to the metadata resource where information about the metadata can be retrieved. operations array The array of operations that are possible to perform on the payment order in its current state. See Operations for details. Abort Payment Attempt The abort-paymentattempt operation should be used when you want to abort a payment attempt, but not the whole payment order. It is returned in the payment order response, but is only available for Digital Payments v3.x. Include the following in the request body when perfoming it: Abort Payment Attempt PATCH Request Abort Payment Attempt PATCH Request Copy json to clipboard 1 2 3 4 PATCH /psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.x 1 2 3 4 5 6 7 { { \"paymentorder\": { \"operation\": \"PaymentAttemptAborted\", \"abortReason\": \"AbortedByUI\" } } Abort Payment Attempt PATCH Response The response after doing this PATCH will appear as an initial payment order response, since the payment order is still active and re-attempts are possible. To see traces of the aborted payment attempt, you need to perform the PATCH with history expanded. It will appear as shown below. Abort Payment Attempt Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x api-supported-versions: 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 { \"paymentOrder\": { \"id\": \"/psp/paymentorders/c37b8e5f-65a0-4a19-351b-08dd143bbe72\", \"created\": \"2024-12-05T14:19:17.1687855Z\", \"updated\": \"2024-12-05T14:20:34.3940075Z\", \"operation\": \"Purchase\", \"status\": \"Initialized\", \"currency\": \"SEK\", \"amount\": 15572, \"vatAmount\": 0, \"description\": \"Abort Payment Attempt Example\", \"initiatingSystemUserAgent\": \"PostmanRuntime/7.43.0\", \"language\": \"sv-SE\", \"availableInstruments\": [ \"CreditCard\", \"Invoice-PayExFinancingSe\", \"CarPay\", \"Swish\", \"CreditAccount-CreditAccountSe\", \"Trustly\", \"MobilePay\" ], \"viewableInstruments\": [ \"Swish\" ], \"implementation\": \"PaymentsOnly\", \"integration\": \"Redirect\", \"instrumentMode\": false, \"guestMode\": true, \"urls\": { \"id\": \"/psp/paymentorders/c37b8e5f-65a0-4a19-351b-08dd143bbe72/urls\" }, \"payeeInfo\": { \"id\": \"/psp/paymentorders/c37b8e5f-65a0-4a19-351b-08dd143bbe72/payeeinfo\" }, \"payer\": { \"id\": \"/psp/paymentorders/c37b8e5f-65a0-4a19-351b-08dd143bbe72/payers\" }, \"history\": { \"id\": \"/psp/paymentorders/c37b8e5f-65a0-4a19-351b-08dd143bbe72/history\", \"historyList\": [ { \"created\": \"2024-12-05T14:19:17.1687855Z\", \"name\": \"PaymentCreated\", \"initiatedBy\": \"Merchant\" }, { \"created\": \"2024-12-05T14:19:17.1687855Z\", \"name\": \"PaymentInstrumentSet\", \"instrument\": \"Swish\", \"initiatedBy\": \"Merchant\" }, { \"created\": \"2024-12-05T14:19:26.5750791Z\", \"name\": \"PaymentLoaded\", \"initiatedBy\": \"System\" }, { \"created\": \"2024-12-05T14:19:37.7938659Z\", \"name\": \"PaymentAttemptStarted\", \"instrument\": \"Swish\", \"prefill\": false, \"initiatedBy\": \"Payer\" }, { \"created\": \"2024-12-05T14:20:34.3879102Z\", \"name\": \"PaymentAttemptAborted\", \"instrument\": \"Swish\", \"initiatedBy\": \"Payer\" } ] }, \"failed\": { \"id\": \"/psp/paymentorders/c37b8e5f-65a0-4a19-351b-08dd143bbe72/failed\" }, \"aborted\": { \"id\": \"/psp/paymentorders/c37b8e5f-65a0-4a19-351b-08dd143bbe72/aborted\" }, \"paid\": { \"id\": \"/psp/paymentorders/c37b8e5f-65a0-4a19-351b-08dd143bbe72/paid\" }, \"cancelled\": { \"id\": \"/psp/paymentorders/c37b8e5f-65a0-4a19-351b-08dd143bbe72/cancelled\" }, \"reversed\": { \"id\": \"/psp/paymentorders/c37b8e5f-65a0-4a19-351b-08dd143bbe72/reversed\" }, \"financialTransactions\": { \"id\": \"/psp/paymentorders/c37b8e5f-65a0-4a19-351b-08dd143bbe72/financialtransactions\" }, \"failedAttempts\": { \"id\": \"/psp/paymentorders/c37b8e5f-65a0-4a19-351b-08dd143bbe72/failedattempts\", \"failedAttemptList\": [] }, \"postPurchaseFailedAttempts\": { \"id\": \"/psp/paymentorders/c37b8e5f-65a0-4a19-351b-08dd143bbe72/postpurchasefailedattempts\" }, \"metadata\": { \"id\": \"/psp/paymentorders/c37b8e5f-65a0-4a19-351b-08dd143bbe72/metadata\" } }, \"operations\": [ { \"method\": \"PATCH\", \"href\": \"https://api.stage.payex.com/psp/paymentorders/c37b8e5f-65a0-4a19-351b-08dd143bbe72\", \"rel\": \"update-order\", \"contentType\": \"application/json\" }, { \"method\": \"PATCH\", \"href\": \"https://api.stage.payex.com/psp/paymentorders/c37b8e5f-65a0-4a19-351b-08dd143bbe72\", \"rel\": \"abort\", \"contentType\": \"application/json\" }, { \"method\": \"PATCH\", \"href\": \"https://api.stage.payex.com/psp/paymentorders/c37b8e5f-65a0-4a19-351b-08dd143bbe72\", \"rel\": \"set-instrument\", \"contentType\": \"application/json\" }, { \"method\": \"GET\", \"href\": \"https://ecom.stage.payex.com/checkout/ecf2299debe471b2ade9df0e47e997dd590a7da62de1af4b5f71fc935227e996?_tc_tid=e8653437c60e410ca3fd3150395b1156\", \"rel\": \"redirect-checkout\", \"contentType\": \"text/html\" }, { \"method\": \"GET\", \"href\": \"https://ecom.stage.payex.com/checkout/client/ecf2299debe471b2ade9df0e47e997dd590a7da62de1af4b5f71fc935227e996?culture=sv-SE&amp;_tc_tid=e8653437c60e410ca3fd3150395b1156\", \"rel\": \"view-checkout\", \"contentType\": \"application/javascript\" }, { \"method\": \"GET\", \"href\": \"https://api.stage.payex.com/psp/paymentsessions/ecf2299debe471b2ade9df0e47e997dd590a7da62de1af4b5f71fc935227e996?_tc_tid=e8653437c60e410ca3fd3150395b1156\", \"rel\": \"view-paymentsession\", \"contentType\": \"application/json\" } ] } Show fields Hide fields Field Type Description paymentOrder object The payment order object. id string The relative URL and unique identifier of the paymentorder resource . Please read about URL Usage to understand how this and other URLs should be used in your solution. created string The ISO-8601 date of when the payment order was created. updated string The ISO-8601 date of when the payment order was updated. operation string Purchase status string Initialized, Paid, Failed, Cancelled or Aborted. Indicates the state of the payment order. currency string The currency of the payment order. amount integer The transaction amount (including VAT, if any) entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The amount displayed is the final amount the payer paid for their order, including any payment method specific discounts or fees. vatAmount integer The payment’s VAT (Value Added Tax) amount, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The vatAmount entered will not affect the amount shown on the payment page, which only shows the total amount. This field is used to specify how much of the total amount the VAT will be. Set to 0 (zero) if there is no VAT amount charged. description string(40) A textual description of the purchase. Maximum length is 40 characters. initiatingSystemUserAgent string The user agent of the HTTP client making the request, reflecting the value sent in the User-Agent header with the initial POST request which created the Payment Order. language string sv-SE, nb-NO, da-DK, en-US or fi-FI. availableInstruments string A list of payment methods available for this payment. viewableInstruments string A list of payment methods with viewable details for this payment. implementation string The Digital Payments implementation type. Omit if the integration is for Payments Only. integration string The merchant’s Digital Payments integration type. HostedView (Seamless View) or Redirect. This field will not be populated until the payer has opened the payment UI, and the client script has identified if Swedbank Pay or another URI is hosting the container with the payment iframe. instrumentMode bool Set to true or false. Indicates if the payment is initialized with only one payment method available. guestMode bool Set to true or false. Indicates if the payer chose to pay as a guest or not. When using the Enterprise implementation, this is triggered by not including a payerReference or nationalIdentifier in the original payment order request. orderItems string The array of items being purchased with the order. Note that authorization orderItems will not be printed on invoices, so lines meant for print must be added in the Capture request. The authorization orderItems will, however, be used in the Merchant Portal when captures or reversals are performed, and might be shown other places later. It is required to use this field to be able to send Capture orderItems. Capture requests should only contain items meant to be captured from the order. urls string The URL to the urls resource where information about the urls can be retrieved. payeeInfo id The payeeInfo object, containing information about the payee (the recipient of the money). See payeeInfo for details. payer id The URL to the payer resource where information about the payer can be retrieved. history id The URL to the history resource where information about the payment’s history can be retrieved. failed id The URL to the failed resource where information about the failed transactions can be retrieved. aborted id The URL to the aborted resource where information about the aborted transactions can be retrieved. paid id The URL to the paid resource whereinformation about the paid transactions, including any possibly created tokens,can be retrieved. cancelled id The URL to the cancelled resource where information about the cancelled transactions can be retrieved. financialTransactions id The URL to the financialTransactions resource where information about the financial transactions can be retrieved. failedAttempts id The URL to the failedAttempts resource where information about the failed attempts can be retrieved. metadata id The URL to the metadata resource where information about the metadata can be retrieved. operations array The array of operations that are possible to perform on the payment order in its current state. See Operations for details.",
    "tags": "",
    "url": "/checkout-v3/features/payment-operations/abort/"
  },{
    "title": "Abort",
    "text": "Signatures void Abort() async Task&lt;AbortRequestResult&gt; AbortAsync() Description The Abort/AbortAsync method will send an AbortRequest for the last issued request to the terminal. The Abort message itself is not responded to by the terminal, but the actual request being aborted is. warning warning: The result from AbortAsync will always have the ResponseResult “Failure”. Returns A AbortRequestResult 1 2 3 4 public class AbortRequestResult : NexoRequestResult { public AbortRequestResult(); } 1 2 3 4 5 6 7 public class NexoRequestResult { public string ResponseContent public NexoResponseResult ResponseResult { get; set; } public string ErrorCondition { get; set; } public string ResponseText { get; set; } }; string ErrorCondition; string ResponseContent; NexoResponseResult ResponseResult; string ResponseText;",
    "tags": "",
    "url": "/pax-terminal/NET/SwpTrmLib/Methods/essential/abortasync/"
  },{
    "title": "AbortRequest",
    "text": "AbortRequest may be sent for any ongoing request. Sample abort payment 1 2 3 4 5 6 7 &lt;SaleToPOIRequest&gt; &lt;MessageHeader MessageCategory=\"Abort\" MessageClass=\"Service\" MessageType=\"Request\" POIID=\"A-POIID\" SaleID=\"ECR1\" ServiceID=\"1524253498\"/&gt; &lt;AbortRequest&gt; &lt;MessageReference MessageCategory=\"Payment\" POIID=\"A-POIID\" SaleID=\"ECR1\" ServiceID=\"1524253497\"/&gt; &lt;AbortReason&gt;Abort by Sale System&lt;/AbortReason&gt; &lt;/AbortRequest&gt; &lt;/SaleToPOIRequest&gt; Name Attributes Description MessageReference MessageCategory Category of the request being aborted.   POIID POIID used in the request that is being aborted.   SaleID SaleID that was used in the request that is being aborted.   ServiceID ServiceID in the request that is being aborted. AbortReason   Text explaining the reason for the abortion. warning warning: The AbortRequest does not give a nexo message response. The Http status code will be 204-No content, but the actual request that is aborted will get a response with Result Failure. sequenceDiagram participant POS participant Terminal POS-&gt;&gt;+Terminal: Http POST PaymentRequest POS-&gt;&gt;+Terminal: Http POST AbortRequest Terminal-&gt;&gt;-POS: rsp 204 - no content Terminal-&gt;&gt;-POS: rsp 200 PaymentResponse Failure Back to PaymentRequest",
    "tags": "",
    "url": "/pax-terminal/Nexo-Retailer/Quick-guide/abortpayment/"
  },{
    "title": "AcquirerData",
    "text": "Special data sent to host This field is used for special purposes and is normally left empty. Possible values in AcquirerData. Either any of them or both 1 2 3 {\"purchaseOrderNumber\":\"&lt;ordernumber&gt;\",\"loyaltyPan\":\"&lt;pan&gt;\"}",
    "tags": "",
    "url": "/pax-terminal/NET/includes/acquirerdata/"
  },{
    "title": "Action Specific Text On Payment Button",
    "text": "Different transaction scenarios calls for different calls to action, for example asking the end-user to deposit instead of paying. That is why we have introduced a new field which changes the text acompanying the amount on the payment button. The field is named CallToActionType and can be included in the main paymentOrder node. It is only available when the operation is Purchase, and the two values you can select from is Pay and Deposit. This will generate “Pay [amount]” or “Deposit [amount]” on the payment button respectively. Adding anything else than these two values will result in an error message. If you include the field, but leave the value empty, or not include the field at all, the value will default to “Pay”. Please note that the value you enter in this field is not the text you want to appear, but the action. The text and action name just happen to correspond in English. If you use Deposit but have Swedish as the default payment UI language, it will appear translated to Swedish. Code Example This field will not result in any changes in the default response, but it will be visible if you expand the settings node. Request Copy json to clipboard 1 2 3 4 POST /psp/paymentorders HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.x/2.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 { \"paymentorder\": { \"callToActionType\": \"Deposit\", //Operation: \"Purchase\" only \"operation\": \"Purchase\", \"currency\": \"SEK\", \"amount\": 1500, \"vatAmount\": 375, \"description\": \"Test Purchase\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"sv-SE\", \"urls\": { \"hostUrls\": [ \"https://example.com\", \"https://example.net\" ], \"paymentUrl\": \"https://example.com/perform-payment\", //Seamless View only \"completeUrl\": \"https://example.com/payment-completed\", \"cancelUrl\": \"https://example.com/payment-cancelled\", //Redirect only \"callbackUrl\": \"https://api.example.com/payment-callback\", \"logoUrl\": \"https://example.com/logo.png\" }, \"payeeInfo\": { \"payeeId\": \"5cabf558-5283-482f-b252-4d58e06f6f3b\", \"payeeReference\": \"AB832\", \"payeeName\": \"Merchant1\", \"orderReference\": \"or-123456\" } } }",
    "tags": "",
    "url": "/checkout-v3/features/customize-ui/action-specific-text-on-payment-button/"
  },{
    "title": "Automated Fuel Dispenser Payments",
    "text": "Automated Fuel Dispenser Payments warning This feature is only available for merchants who have a specific agreement with Swedbank Pay. An Automated Fuel Dispenser (AFD) payment is a purchase where the merchant requests an authorization transaction for an automatic fuel dispenser. The request contains the maximum purchase amount, but the issuer can reply with a partial approval to lower the maximum purchase amount. This can be used to stop the fuel dispension at the maximum price. The only supported use case is automated fuel dispensers. To be able to verify this, it is required that the Merchant Category Code mcc is passed in the request under PayeeInfo. This feature is only supported with the Purchase operation. It does not support order items. By default the available payment methods and card types will be limited to those which support AFD payments. To enable other payment options for the payer, send in restrictedToAfdInstruments with the value false. See the abbreviated example below on how to implement AFD payments by setting the generateAfdPayment to true. Request Copy json to clipboard 1 2 3 4 POST /psp/paymentorders HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.x/2.0 // Version optional for 3.0 and 2.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 { \"paymentorder\": { \"generateAfdPayment\": true, \"restrictedToAfdInstruments\": true, \"operation\": \"Purchase\", \"currency\": \"SEK\", \"amount\": 10000, \"vatAmount\": 2500, \"description\": \"Test Purchase\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"sv-SE\", \"productName\": \"Checkout3\", // Removed in 3.1, can be excluded in 3.0 if version is added in header \"urls\": { \"hostUrls\": [ \"https://example.com\", \"https://example.net\" ], \"completeUrl\": \"https://example.com/payment-completed\", \"cancelUrl\": \"https://example.com/payment-cancelled\", \"callbackUrl\": \"https://api.example.com/payment-callback\", \"termsOfServiceUrl\": \"https://example.com/termsandconditions.pdf\" }, \"payeeInfo\": { \"mcc\": 5542, \"payeeId\": \"5cabf558-5283-482f-b252-4d58e06f6f3b\", \"payeeReference\": \"AB832\", \"payeeName\": \"Merchant1\", \"productCategory\": \"A123\", \"orderReference\": \"or-123456\" }, \"orderItems\": null } } Request fields not covered in the common Digital Payments Initialized redirect or seamless view table: Field Type Description generateAfdPayment bool Set to true if the payment order is an AFD payment, false if not. restrictedToAfdInstruments bool Set to true if the payment menu should show only payment options that support AFD, false to show all options. Default is true when using generateAfdPayment. payeeInfo object The payeeInfo object, containing information about the payee (the recipient of the money). See payeeInfo for details. mcc integer The merchant category code used for the purchase, 4 digits. Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x/2.0 api-supported-versions: 3.x/2.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 { \"paymentorder\": { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce\", \"created\": \"2020-06-22T10:56:56.2927632Z\", \"updated\": \"2020-06-22T10:56:56.4035291Z\", \"operation\": \"Purchase\", \"status\": \"Initialized\", \"currency\": \"SEK\", \"amount\": 10000, \"vatAmount\": 2500, \"description\": \"Test Purchase\", \"initiatingSystemUserAgent\": \"swedbankpay-sdk-dotnet/3.0.1\", \"language\": \"sv-SE\", \"availableInstruments\": [ \"CreditCard\" ], \"implementation\": \"PaymentsOnly\", \"instrumentMode\": false, \"guestMode\": false, \"orderItems\": { \"id\": \"/psp/paymentorders/08090909-626e-4b90-1943-08d9eaebca86/orderitems\" }, \"urls\": { \"id\": \"/psp/paymentorders/08090909-626e-4b90-1943-08d9eaebca86/urls\" }, \"payeeInfo\": { \"id\": \"/psp/paymentorders/08090909-626e-4b90-1943-08d9eaebca86/payeeinfo\" }, \"payer\": { \"id\": \"/psp/paymentorders/08090909-626e-4b90-1943-08d9eaebca86/payers\" }, \"history\": { \"id\": \"/psp/paymentorders/08090909-626e-4b90-1943-08d9eaebca86/history\" }, \"failed\": { \"id\": \"/psp/paymentorders/08090909-626e-4b90-1943-08d9eaebca86/failed\" }, \"aborted\": { \"id\": \"/psp/paymentorders/08090909-626e-4b90-1943-08d9eaebca86/aborted\" }, \"paid\": { \"id\": \"/psp/paymentorders/08090909-626e-4b90-1943-08d9eaebca86/paid\" }, \"cancelled\": { \"id\": \"/psp/paymentorders/08090909-626e-4b90-1943-08d9eaebca86/cancelled\" }, \"financialTransactions\": { \"id\": \"/psp/paymentorders/08090909-626e-4b90-1943-08d9eaebca86/financialtransactions\" }, \"failedAttempts\": { \"id\": \"/psp/paymentorders/08090909-626e-4b90-1943-08d9eaebca86/failedattempts\" }, \"metadata\": { \"id\": \"/psp/paymentorders/08090909-626e-4b90-1943-08d9eaebca86/metadata\" } }, \"operations\": [ { \"href\": \"https://api.payex.com/psp/paymentorders/222a50ca-b268-4b32-16fa-08d6d3b73224\", \"rel\":\"update-order\", \"method\":\"PATCH\", \"contentType\":\"application/json\" }, { \"href\": \"https://api.payex.com/psp/paymentorders/222a50ca-b268-4b32-16fa-08d6d3b73224\", \"rel\": \"abort\", \"method\": \"PATCH\", \"contentType\": \"application/json\" }, { \"href\": \"https://api.payex.com/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce\", \"rel\": \"abort-paymentattempt\", \"method\": \"PATCH\", \"contentType\": \"application/json\" } ] } When The Authorization Is Completed The authorized amount might be a lower value than the requested amount, known as partial approval. In this case, the original submitted amount might be found by requesting rel:paid-paymentorder and checking the field submittedAmount. Then the amount and vatAmount will contain the value that is authorized. The final amount to be paid must be passed in the capture request, and if the authorized amount is larger than the final amount the rest should be cancelled. Capture Captures are only possible when a payment has a successful Authorization transaction, naturally excluding one-phase payment methods like Swish and Trustly. They will be marked as a Sale transaction. Two-phase payment methods like card and Vipps however, require a Capture to be completed. Please note that you have a maximum of 5 consecutive failed attempts at a capture. The payment will be locked after the fifth, and you need to contact us for further attempts. In addition to full captures, it is possible to do partial captures of the authorized amount. You can do more captures on the same payment later, up to the total authorized amount. A useful tool for when you have to split orders into several shipments. First off, you must request the order information from the server to get the request link. With this, you can request the capture with the amount to capture, and get the status back. To capture the authorized payment, we need to perform capture against the accompanying href returned in the operations list. See the abbreviated request and response below: Capture Request Request Copy json to clipboard 1 2 3 4 POST /psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/captures HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.0/2.0 // Version optional 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 { \"transaction\": { \"description\": \"Capturing the authorized payment\", \"amount\": 1500, \"vatAmount\": 375, \"payeeReference\": \"AB832\", \"receiptReference\": \"AB831\", \"orderItems\": [ { \"reference\": \"P1\", \"name\": \"Product1\", \"type\": \"PRODUCT\", \"class\": \"ProductGroup1\", \"itemUrl\": \"https://example.com/products/123\", \"imageUrl\": \"https://example.com/product123.jpg\", \"description\": \"Product 1 description\", \"discountDescription\": \"Volume discount\", \"quantity\": 4, \"quantityUnit\": \"pcs\", \"unitPrice\": 300, \"discountPrice\": 200, \"vatPercent\": 2500, \"amount\": 1000, \"vatAmount\": 250 }, { \"reference\": \"P2\", \"name\": \"Product2\", \"type\": \"PRODUCT\", \"class\": \"ProductGroup1\", \"description\": \"Product 2 description\", \"quantity\": 1, \"quantityUnit\": \"pcs\", \"unitPrice\": 500, \"vatPercent\": 2500, \"amount\": 500, \"vatAmount\": 125 } ] } } Show fields Hide fields Required Field Type Description check transaction object The transaction object. check description string The description of the capture transaction. check amount integer The transaction amount (including VAT, if any) entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The amount displayed is the final amount the payer paid for their order, including any payment method specific discounts or fees. check vatAmount integer The payment’s VAT (Value Added Tax) amount, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The vatAmount entered will not affect the amount shown on the payment page, which only shows the total amount. This field is used to specify how much of the total amount the VAT will be. Set to 0 (zero) if there is no VAT amount charged. check payeeReference string A unique reference from the merchant system. Set per operation to ensure an exactly-once delivery of a transactional operation. Length and content validation depends on whether the transaction.number or the payeeReference is sent to the acquirer. If Swedbank Pay handles the settlement, the transaction.number is sent and the payeeReference must be in the format of A-Za-z0-9 and string(30). If you handle the settlement, Swedbank Pay will send the payeeReference and it will be limited to the format of string(12). All characters must be digits. In Invoice Payments payeeReference is used as an invoice/receipt number, if the receiptReference is not defined.   receiptReference string(30) A unique reference to the transaction, provided by the merchant. Can be used as an invoice or receipt number as a supplement to payeeReference. check orderItems array The array of items being purchased with the order. Note that authorization orderItems will not be printed on invoices, so lines meant for print must be added in the Capture request. The authorization orderItems will, however, be used in the Merchant Portal when captures or reversals are performed, and might be shown other places later. It is required to use this field to be able to send Capture orderItems. Capture requests should only contain items meant to be captured from the order. check reference string A reference that identifies the order item. check name string The name of the order item. check type enum PRODUCT, SERVICE, SHIPPING_FEE, PAYMENT_FEE, DISCOUNT, VALUE_CODE or OTHER. The type of the order item. check class string The classification of the order item. Can be used for assigning the order item to a specific product category, such as MobilePhone. Note that class cannot contain spaces and must follow the regex pattern [\\w-]*. Swedbank Pay may use this field for statistics.   itemUrl string The URL to a page that can display the purchased item, product or similar. ︎︎︎ imageUrl string The URL to an image of the order item.   description string The human readable description of the order item.   discountDescription string The human readable description of the possible discount. check quantity number The 4 decimal precision quantity of order items being purchased. check quantityUnit string The unit of the quantity, such as pcs, grams, or similar. This is used for your own book keeping. check unitPrice integer The price per unit of order item, including VAT.   discountPrice integer If the order item is purchased at a discounted price. This field should contain that price, including VAT. check vatPercent integer The percent value of the VAT multiplied by 100, so 25% becomes 2500. check amount integer The total amount including VAT to be paid for the specified quantity of this order item, in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 SEK and 5000 equals 50.00 SEK. check vatAmount integer The total amount of VAT to be paid for the specified quantity of this order item, in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 SEK and 5000 equals 50.00 SEK. check reference string A reference that identifies the order item. check name string The name of the order item. check type enum PRODUCT, SERVICE, SHIPPING_FEE, PAYMENT_FEE, DISCOUNT, VALUE_CODE or OTHER. The type of the order item. check class string The classification of the order item. Can be used for assigning the order item to a specific product category, such as MobilePhone. Note that class cannot contain spaces and must follow the regex pattern [\\w-]*. Swedbank Pay may use this field for statistics. ︎︎︎ itemUrl string The URL to a page that can display the purchased item, such as a product page ︎︎︎ imageUrl string The URL to an image of the order item. ︎︎︎ description string The human readable description of the order item. ︎︎︎ discountDescription string The human readable description of the possible discount. check quantity number The 4 decimal precision quantity of order items being purchased. check quantityUnit string The unit of the quantity, such as pcs, grams, or similar. check unitPrice integer The price per unit of order item, including VAT. ︎︎︎ discountPrice integer If the order item is purchased at a discounted price. This field should contain that price, including VAT. check vatPercent integer The percent value of the VAT multiplied by 100, so 25% becomes 2500. check amount integer The total amount including VAT to be paid for the specified quantity of this order item, in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 NOK and 5000 equals 50.00 NOK. check vatAmount integer The total amount of VAT to be paid for the specified quantity of this order item, in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 NOK and 5000 equals 50.00 NOK. Capture Response If the capture request succeeds, this should be the response: Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.0/2.0 api-supported-versions: 3.0/2.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 { \"payment\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"capture\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"transaction\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2020-06-22T10:56:56.2927632Z\", \"updated\": \"2020-06-22T10:56:56.4035291Z\", \"type\": \"Capture\", \"state\": \"Completed\", \"amount\": 1500, \"vatAmount\": 375, \"description\": \"Capturing the authorized payment\", \"payeeReference\": \"AB832\", \"receiptReference\": \"AB831\" } } } Show fields Hide fields Property Type Description payment string The relative URL of the payment this capture transaction belongs to. capture object The capture object, containing the information about the capture transaction. id string The relative URL of the created capture transaction. transaction object The object representation of the generic transaction resource, containing information about the current transaction. id string The relative URL of the current transaction resource. created string The ISO-8601 date and time of when the transaction was created. updated string The ISO-8601 date and time of when the transaction was updated. type string Indicates the transaction type. state string Indicates the state of the transaction, usually initialized, completed or failed. If a partial has been done and further transactions are possible, the state will be awaitingActivity. number integer The transaction number, useful when there’s need to reference the transaction in human communication. Not usable for programmatic identification of the transaction, where id should be used instead. amount integer The transaction amount (including VAT, if any) entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The amount displayed is the final amount the payer paid for their order, including any payment method specific discounts or fees. vatAmount integer The payment’s VAT (Value Added Tax) amount, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The vatAmount entered will not affect the amount shown on the payment page, which only shows the total amount. This field is used to specify how much of the total amount the VAT will be. Set to 0 (zero) if there is no VAT amount charged. description string A textual description of the purchase. Maximum length is 40 characters. payeeReference string A unique reference from the merchant system. Set per operation to ensure an exactly-once delivery of a transactional operation. Length and content validation depends on whether the transaction.number or the payeeReference is sent to the acquirer. If Swedbank Pay handles the settlement, the transaction.number is sent and the payeeReference must be in the format of A-Za-z0-9 and string(30). If you handle the settlement, Swedbank Pay will send the payeeReference and it will be limited to the format of string(12). All characters must be digits. In Invoice Payments payeeReference is used as an invoice/receipt number, if the receiptReference is not defined. receiptReference string(30) A unique reference from the merchant system. It is set per operation to ensure an exactly-once delivery of a transactional operation. It is used to supplement payeeReference as an additional receipt number. Capture Sequence Diagram sequenceDiagram participant Merchant participant SwedbankPay as Swedbank Pay rect rgba(81,43,43,0.1) activate Merchant note left of Payer: Capture Merchant -&gt;&gt;+ SwedbankPay: rel:capture deactivate Merchant SwedbankPay --&gt;&gt;- Merchant: Capture status note right of Merchant: Capture here only if the purchased&lt;br/&gt;goods don't require shipping.&lt;br/&gt;If shipping is required, perform capture&lt;br/&gt;after the goods have shipped.&lt;br&gt;Should only be used for &lt;br&gt;payment methods that support &lt;br&gt;Authorizations. end",
    "tags": "",
    "url": "/checkout-v3/features/optional/afd/"
  },{
    "title": "Age Restrictions",
    "text": "Restrict Payments To An Age Limit Swedbank Pay provides the possibility to restrict payments to an age limit with payment methods which support this. This can be used when you want to make sure you only accept payments from individuals over a certain age. You are currently only able to restrict Swish payments to an Age Limit, but we will add support for more payment methods going forward. No changes are required at your (the merchant’s) end to be able to offer more payment methods at a later time. The way you use this feature is by adding the field restrictedToAgeLimit in your payment order request and setting it to the age limit you wish to restrict your payments to. This will leave out all payment methods which do not support this feature. For instance, set restrictedToAgeLimit to 20 if you only want to accept payments from individuals over the age 20. Payment methods supporting the feature will reject payments that do not meet the restriction. Restrict Payments To An Age Limit Request You need to add an int field called restrictedToAgeLimit in your payment order request and set it to your desired age limit, i.e. 20. Below is a shortened example of a payment order request. Apart from the new field, the payment request is similar to a standard payment order request. For an example of a payment order request, The response will be similar to a standard payment order response, which is also documented on the page linked above. Request Copy json to clipboard 1 2 3 4 POST /psp/paymentorders HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.x/2.0 // Version optional for 3.0 and 2.0 1 2 3 4 5 { \"paymentorder\": { \"restrictedToAgeLimit\": 20, } } Required Field Type Description check paymentOrder object The payment order object.   restrictedToAgeLimit int Used for setting the age you want to restrict the payment to.",
    "tags": "",
    "url": "/checkout-v3/features/optional/age-restrictions/"
  },{
    "title": "Android Default UI",
    "text": "Android: Default UI PaymentFragment is very plain; in normal use it will only contain a progress indicator and/or a WebView. For error conditions that may be resolved by a simple retry, however, it will, by default show a message and a pull-to-refresh control. If desired, this UI can be disabled. In addition, is a completion message and an error message available. Those are unlikely to be useful in production, but can be enabled for development, if desired. This feature is also controller by an argument. This argument is an integer representing flag bits. Android 1 2 3 4 5 6 7 8 9 10 val arguments = PaymentFragment.ArgumentsBuilder() .paymentOrder(paymentOrder) .setEnabledDefaultUI() // enable nothing .build() val manualArguments = Bundle() manualArguments.putInt( PaymentFragment.ARG_ENABLED_DEFAULT_UI, PaymentFragment.RETRY_PROMPT or PaymentFragment.ERROR_MESSAGE )",
    "tags": "",
    "url": "/checkout-v3/modules-sdks/mobile-sdk/features/technical-reference/android-default-ui/"
  },{
    "title": "Android View Model Provider Key",
    "text": "Android: View Model Provider Key On Android, you communicate with a PaymentFragment through a PaymentViewModel that is stored in the FragmentActivity containing the PaymentFragment. Normally this means that a single Activity can only contain one PaymentFragment. This should not usually be a problem, but for advanced use cases, you can manually set the storage key for the PaymentViewModel of a given PaymentFragment, allowing for multiple instances to coexist in a single Activity. Further use of multiple simultaneous PaymentFragments is beyond the scope of this document. The key is set as an argument to the PaymentFragment. You can either use the PaymentFragment.ArgumentsBuilder to build the argument bundle (recommended), or you can manually set a value for the key PaymentFragment.ARG_VIEW_MODEL_PROVIDER_KEY. Android 1 2 3 4 5 6 7 8 9 10 val arguments = PaymentFragment.ArgumentsBuilder() .paymentOrder(paymentOrder) .viewModelProviderKey(\"PaymentViewModelOne\") .build() val manualArguments = Bundle() manualArguments.putString( PaymentFragment.ARG_VIEW_MODEL_PROVIDER_KEY, \"PaymentViewModelTwo\" )",
    "tags": "",
    "url": "/checkout-v3/modules-sdks/mobile-sdk/features/technical-reference/android-view-model-provider-key/"
  },{
    "title": "Android",
    "text": "This guide assumes that you are using the Merchant Backend Configuration and your backend implements the Merchant Backend API. If you are using a custom backend instead, the meaning of PaymentFragment arguments will be different, as well as any errors reported, but the basic process is the same. The differences will be highlighted in the chapter on custom backends. Installation The Android component of the Swedbank Pay Mobile SDK is distributed through Maven Central. It is split into two libraries in the com.swedbankpay.mobilesdk group: Core SDK: com.swedbankpay.mobilesdk:mobilesdk Merchant Backend Utilities: com.swedbankpay.mobilesdk:mobilesdk-merchantbackend If you are not using the Merchant Backend API in your backend, you only need to use the first one. Otherwise, you should add both libraries to your project to get utilities for interfacing with your Merchant Backend server. Most applications can integrate the SDK by simply adding the dependency in the build.gradle file: 1 2 3 4 dependencies { implementation 'com.swedbankpay.mobilesdk:mobilesdk:5.0.0' implementation 'com.swedbankpay.mobilesdk:mobilesdk-merchantbackend:5.0.0' } Or in your gradle.kts file: 1 2 3 4 dependencies { implementation(\"com.swedbankpay.mobilesdk:mobilesdk:5.0.0\") implementation(\"com.swedbankpay.mobilesdk:mobilesdk-merchantbackend:5.0.0\") } Please refer to Maven Central for the latest versions of the libraries. Custom URL Scheme The Payment Url handling in the Android SDK uses a custom URL scheme. You must therefore set this up using the template intent filter prepared in the SDK, that uses a Gradle Manifest Placeholder. You do this by specifying your custom URL scheme in you build.gradle file (in this example we’re preparing for a payment URL using examplepayment://): 1 2 3 defaultConfig { manifestPlaceholders = [swedbankPaymentUrlScheme:\"examplepayment\"] } Or in your gradle.kts file: 1 2 3 defaultConfig { manifestPlaceholders[\"swedbankPaymentUrlScheme\"] = \"examplepayment\" } Usage sequenceDiagram participant App participant SDK participant Merchant participant SwedbankPay as Swedbank Pay participant Ext as External App rect rgba(238, 112, 35, 0.05) note left of App: Configuration App -&gt;&gt; SDK: MerchantBackendConfiguration.Builder(\"https://example.com/swedbank-pay-mobile/\").build() SDK --&gt;&gt; App: configuration App -&gt;&gt; SDK: PaymentFragment.defaultConfiguration = configuration end opt Unless Guest Payment App -&gt;&gt; SDK: Consumer(language = ..., shippingAddressRestrictedToCountryCodes = ...) SDK --&gt;&gt; App: consumer end rect rgba(138, 205, 195, 0.1) note left of App: Prepare Payment App -&gt;&gt; SDK: PaymentOrderUrls(context, \"https://example.com/swedbank-pay-mobile/\") SDK --&gt;&gt; App: paymentOrderUrls App -&gt;&gt; SDK: PaymentOrder(urls = paymentOrderUrls, ...) SDK --&gt;&gt; App: paymentOrder end App -&gt;&gt; SDK: activity.paymentViewModel.[rich]state.observe(...) App -&gt;&gt; SDK: PaymentFragment.ArgumentsBuilder().consumer(consumer).paymentOrder(paymentOrder).build() SDK --&gt;&gt; App: arguments App -&gt;&gt; SDK: PaymentFragment() SDK --&gt;&gt; App: paymentFragment App -&gt;&gt; SDK: paymentFragment.arguments = arguments App -&gt;&gt; App: Show paymentFragment rect rgba(138, 205, 195, 0.1) note left of App: Discover Endpoints SDK -&gt;&gt; Merchant: GET /swedbank-pay-mobile/ Merchant --&gt;&gt; SDK: { \"consumers\": \"/swedbank-pay-mobile/consumers\", \"paymentorders\": \"/swedbank-pay-mobile/paymentorders\" } end opt Unless Guest Payment SDK -&gt;&gt; Merchant: POST /swedbank-pay-mobile/consumers Merchant -&gt;&gt; SwedbankPay: POST /psp/consumers SwedbankPay --&gt;&gt; Merchant: rel: view-consumer-identification Merchant --&gt;&gt; SDK: rel: view-consumer-identification SDK -&gt;&gt; SDK: Show html page with view-consumer-identification SwedbankPay -&gt;&gt; SDK: Consumer identification process SDK -&gt;&gt; SwedbankPay: Consumer identification process SwedbankPay -&gt;&gt; SDK: consumerProfileRef SDK -&gt;&gt; SDK: paymentOrder.payer = { consumerProfileRef } end rect rgba(138, 205, 195, 0.1) note left of App: Payment Menu SDK -&gt;&gt; Merchant: POST /swedbank-pay-mobile/paymentorders Merchant -&gt;&gt; SwedbankPay: POST /psp/paymentorders SwedbankPay --&gt;&gt; Merchant: rel: view-paymentorder Merchant --&gt;&gt; SDK: rel: view-paymentorder SDK -&gt;&gt; SDK: Show html page with view-paymentorder SwedbankPay -&gt;&gt; SDK: Payment process SDK -&gt;&gt; SwedbankPay: Payment process opt Redirect to Third-Party Page SDK -&gt;&gt; SDK: Show third-party page SDK -&gt;&gt; SDK: Intercept navigation to paymentUrl SDK -&gt;&gt; SDK: Reload html page with view-paymentorder end opt Launch External Application SDK -&gt;&gt; Ext: Start external application Ext -&gt;&gt; Merchant: Open paymentUrl Merchant -&gt;&gt; Ext: Redirect intent://&lt;...&gt;action=com.swedbankpay.mobilesdk.VIEW_PAYMENTORDER Ext -&gt;&gt; SDK: Start activity\\naction=com.swedbankpay.mobilesdk.VIEW_PAYMENTORDER SDK -&gt;&gt; SDK: Reload html page with view-paymentorder end SDK -&gt;&gt; SDK: Intercept navigation to completeUrl SDK -&gt;&gt; SDK: paymentViewModel.state &lt;- SUCCESS SDK -&gt;&gt; App: observer.onChanged(SUCCESS) end App -&gt;&gt; App: Remove paymentFragment The public API of the Android SDK is in the package com.swedbankpay.mobilesdk. The main component is PaymentFragment, a Fragment that handles a single payment order. To use a PaymentFragment, it must have a Configuration. In most cases it is enough to construct a single Configuration and set it as the default. In more advanced cases you will need to subclass PaymentFragment and override getConfiguration. For using a backend implementing the Merchant Backend API, the SDK also provides utility classes in the package com.swedbankpay.mobilesdk.merchantbackend. The examples on this page make use of these, including the Configuration implementation MerchantBackendConfiguration. 1 2 3 4 5 val backendUrl = \"https://example.com/swedbank-pay-mobile/\" val configuration = MerchantBackendConfiguration.Builder(backendUrl) .build() PaymentFragment.defaultConfiguration = configuration To start a payment, you need a PaymentOrder, and, unless making a guest payment, a Consumer. Using a Consumer makes future payments by the same payer easier. The semantics of Consumer properties are the same as the fields of the POST/psp/consumers request. There are default values for the operation and language properties (ConsumerOperation.INITIATE_CONSUMER_SESSION and Language.ENGLISH, respectively). 1 2 3 4 val consumer = Consumer( language = Language.SWEDISH, shippingAddressRestrictedToCountryCodes = listOf(\"NO\", \"SE\", \"DK\") ) Similarly, the semantics of PaymentOrder properties are the same as the fields of the POST /psp/paymentorders request. Sensible default values are provided for many of the properties. The urls property has no default per se, but there are convenience constructors available for it, and it is recommended that you use them. Assuming you have the Android Payment Url Helper endpoint set up with the specified static path relative to your backend url (i.e. sdk-callback/android-intent), then using the one of the PaymentOrderUrls(context: Context, backendUrl: String) variants will set the paymentUrl correctly. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 val paymentOrder = PaymentOrder( currency = Currency.getInstance(\"SEK\"), amount = 1500L, vatAmount = 375L, description = \"Test Purchase\", language = Language.SWEDISH, urls = PaymentOrderUrls(context, backendUrl), payeeInfo = PayeeInfo( // ① payeeName = \"Merchant1\", productCategory = \"A123\", orderReference = \"or-123456\", subsite = \"MySubsite\" ), orderItems = listOf( OrderItem( reference = \"P1\", name = \"Product1\", type = ItemType.PRODUCT, `class` = \"ProductGroup1\", itemUrl = \"https://example.com/products/123\", imageUrl = \"https://example.com/product123.jpg\", description = \"Product 1 description\", discountDescription = \"Volume discount\", quantity = 4, quantityUnit = \"pcs\", unitPrice = 300L, discountPrice = 200L, vatPercent = 2500, amount = 1000L, vatAmount = 250L ) ) ) ① payeeId and payeeReference are required fields, but default to the empty string. The assumption here is that your Merchant Backend will override the values set here. If your system works better with the Mobile Client setting them instead, they are available here also. To start a payment, create a PaymentFragment and set its arguments according to the payment. The PaymentFragment.ArgumentsBuilder class is provided to help with creating the argument bundle. In most cases you only need to worry about the paymentOrder property. The payment process starts as soon as the PaymentFragment is visible. Note that Digital Payments is currently opt-in, so that merchants can upgrade without too much breaking changes and start using the new Digital Payments when ready. 1 2 3 4 5 6 7 8 9 10 11 12 val arguments = PaymentFragment.ArgumentsBuilder() .checkoutV3(true) .paymentOrder(paymentOrder) .build() val paymentFragment = PaymentFragment() paymentFragment.arguments = arguments // Now use FragmentManager to show paymentFragment. // You can also make a navigation graph with PaymentFragment // and do something like // findNavController().navigate(R.id.showPaymentFragment, arguments) Note that the SDK only supports customer-checkin for version 2, and provides fallback for merchants in need of this. Then you need to supply a consumer and the Checkout v3 setting becomes irrelevant. 1 2 3 4 5 6 7 8 9 val arguments = PaymentFragment.ArgumentsBuilder() .consumer(consumer) .paymentOrder(paymentOrder) .build() val paymentFragment = PaymentFragment() paymentFragment.arguments = arguments // Now handle the fragment the same way as previously. To observe the payment process, use the PaymentViewModel of the containing Activity. When the PaymentViewModel signals that the payment process has reached a final state, you should remove the PaymentFragment and inform the user of the result. 1 2 3 4 5 6 7 paymentViewModel.state.observe(this, Observer { if (it.isFinal == true) { // Remove PaymentFragment // Check payment status from your backend // Notify user } }) Note that checking the payment status after completion is outside the scope of the Mobile SDK. Your backend should collect any information it needs to perform this check when it services the request to the Payment Orders endpoint made by the PaymentFragment. Errors If any errors happen in the payment, the PaymentViewModel will report a state of either FAILURE or RETRYABLE_ERROR. If the error is retryable, the PaymentFragment will show an error message and a retry control (this is configurable), but you can also trigger a retry by calling retryPreviousAction on the PaymentViewModel. When the state is FAILURE or RETRYABLE_ERROR, and the error condition was caused by an exception thrown from the Configuration, that exception is available in PaymentViewModel.richState.exception. The exception will be of any type throw by your Configuration. When using MerchantBackendConfiguration, this means it will be an IOException if there was a problem communicating with the backend, and an IllegalStateException if you have made a programming error (consult the exception message). A particular IOException to check for is RequestProblemException, which signals that the backend responded with a Problem message. Another one is UnexpectedResponseException, which signals that the SDK did not understand the backend response. Problems If errors are encountered in the payment process, the Merchant Backend is expected to respond with a Problem Details for HTTP APIs (RFC 7807) message. If a problem occurs, the application can receive it by observing the richState of the PaymentViewModel. If a problem has occurred, the exception property of the RichState will contain a RequestProblemException. The problem is then accessible as exception.problem. The Android SDK will parse any RFC 7807 problem, but it has specialized data types for known problem types, namely the Common Problems and the Merchand Backend Problems. Problems are presented as a class hierarchy representing different problem categories. All problems parsed from RFC 7807 messages are classified as either Client or Server problems. A Client problem is one caused by client behavior, and is to be fixed by changing the request made to the server. Generally, a Client problem is a programming error, with the possible exception of Problem.Client.MobileSDK.Unauthorized. A Server problem is one caused by a malfunction or lack of service in the server evironment. A Server problem is fixed by correcting the behavior of the malfunctioning server, or simply trying again later. Further, both Client and Server problems are categorized as MobileSDK, SwedbankPay, or Unknown. MobileSDK problems are ones with Merchant Backend problem types, while SwedbankPay problems have Swedbank Pay API problem types. Unknown problems are of types that the SDK has no knowledge of. There is also the interface SwedbankPayProblem, which encompasses both Client and Server type SwedbankPay problems. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 paymentViewModel.richState.observe(this, Observer { if (it.state.isFinal == true) { val exeption = it.exception as? RequestProblemException if (exception != null) ( when (val problem = exception.problem) { is MerchantBackendProblem.Client.MobileSDK.Unauthorized -&gt; Log.d(TAG, \"Credentials invalidated: ${problem.message}\") if MerchantBackendProblem.Client.MobileSDK -&gt; Log.d(TAG, \"Other client error at Merchant Backend: ${problem.raw}\") is MerchantBackendProblem.Client.SwedbankPay.InputError -&gt; Log.d(TAG, \"Payment rejected by Swedbank Pay: ${problem.detail}; Fix: ${problem.action}\") is MerchantBackendProblem.Client.Unknown -&gt; if (problem.type == \"https://example.com/problems/special-problem\") { Log.d(TAG, \"Special problem occurred: ${problem.detail}\") } else { Log.d(TAG, \"Unexpected problem: ${problem.raw}\") } is MerchantBackendProblem.Server.MobileSDK.BackendConnectionTimeout -&gt; Log.d(TAG, \"Swedbank Pay timeout: ${problem.message}\") is MerchantBackendProblem.Server.SwedbankPay.SystemError -&gt; Log.d(TAG, \"Generic server error at Swedbank Pay: ${problem.detail}\") is SwedbankPayProblem -&gt; Log.d(TAG, \"Other problem at Swedbank Pay: ${problem.detail}; Fix: ${problem.action}\") else -&gt; Log.d(TAG, \"Unexpected problem: ${problem.raw}\") } } } }) Payment URL And External Applications The payment process may involve navigating to third-party web pages, or even launching external applications. To resume processing the payment in the payment menu, each payment order must have a Payment Url. As mentioned above, the SDK has convenience constructors to set up a payment url for you, and as the SDK handles showing third-party web pages inside the PaymentFragment, it automatically intercepts any navigation to the payment url, and reloads the payment menu. This requires no additional setup. If a third party application is launched, it will signal the return to the payment menu by opening the payment url, using a standard ACTION_VIEW Intent. The payment URL should use a custom URL scheme unique to the app. The SDK has a template intent filter that uses a Gradle Manifest Placeholder, so the SDK will receive it, bringing the containing application to the foreground, and reloading the payment menu. Back: Custom Backend Next: iOS",
    "tags": "",
    "url": "/checkout-v3/modules-sdks/mobile-sdk/android/"
  },{
    "title": "APM Refund",
    "text": "The APM refund is almost like a card refund. When calling Refund/RefundAsync the APM-reference need to be supplied. The reference is received in the PaymentRequestResult as APMReference. The Refund may be on partial amount and the same reference is used if several refunds as long as the total amount of the referenced transaction is above 0. Refund of APMTransaction with reference from APM transaction result 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 ISwpTrmIf_1 Pax; . . . public async Task MakePayment(decimal Amount) { var result = await Pax.PaymentAsync(Amount); if (result.ResponseResult == NexoResponseResult.Success) { if (!String.IsNullOrEmpty(result.APMReference)) { // this is an APM transaction, save reference in case of refund. SaveApmReferenceForRefund(result.APMReference); string type = result.APMType; } . . . } PrintReceipt(result.ReceiptBlob); } public async Task MakeRefund(decimal Amount, string apmReference) { var result = await Pax.RefundAsync(Amount, apmReference) if (result.ResponseResult == NexoRequestResult.Success) { . // refund was successful . . } else { . . . } PrintReceipt(result.ReceiptBlob); }",
    "tags": "",
    "url": "/pax-terminal/NET/tutorial/apm-refund/"
  },{
    "title": "APM transaction",
    "text": "Alternative Payment Methods An APM transaction is started just like a card payment. The only thing that differs from a card payment is the content of the PaymentRequestResult. Payment started as a regular payment for 10 in currency of decided culture 1 2 3 4 5 6 7 8 9 var result = await pax.PaymentAsync(10); if (result.ResponseResult == NexoResponseResult.Success) { if (!String.IsNullOrEmpty(result.APMReference)) { // this is an APM transaction string type = result.APMType; } } The important thing from the result is the APMReference which needs to be on the receipt since it is used when making a refund. The type of APM that was used is retrieved from APMType. ReceiptBlob with APMReference as Ref.nr and APMType is Swish. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 Swedbank Pay Charity Kungsgatan 36 11135 Stockholm Org nr: 5567355671 Phone no.: Swedbank Butiksnr: 20001601 2024-01-18 11:40 Kvittonr.: 020424 KÖP SEK 1,00 Totalt: 1,00 SWISH BETALNING GENOMFÖRD Ref.nr: 3558174609679520 SPARA KVITTOT KUNDENS EX. The APMReference would be nice to have like a barcode, but the minimum is just print the ReceiptBlob as is. The PaymentRequestsResult contins more information but things will change in a near future so don’t do extensive coding on that information for a APM transaction without contacting SwedbankPay.",
    "tags": "",
    "url": "/pax-terminal/NET/tutorial/apmtransaction/"
  },{
    "title": "Apple Pay",
    "text": "Looking to streamline payments for your customers? With Apple Pay, you can offer a fast, secure, and seamless checkout experience that customers love. Speed: Transactions are completed with a single touch. Security: Built-in encryption and biometric authentication (Face ID or Touch ID) ensure every payment is safe. Your customer’s card details are never shared. Wide Reach: Apple Pay works online, in apps, and in stores, making it easier for customers to pay wherever they are. Higher Conversions: Customers are more likely to complete purchases with quick, frictionless checkouts. Active Users: 500 million active users worldwide. Domain Verification To ensure that we can enable Apple Pay for you, there are a few steps you may need to complete. If you’re using a Redirect integration, you are all set - no further action is needed. If you’re using a Seamless View integration, you need to complete the steps below to get started. Download the domain file (right click and “Save as”). Make sure you do not change, edit or manipulate the file in any way, shape or form. The file should have NO EXTENSION, meaning there should not be any “.txt”, “.doc”, “.mp4” or any other extension to the file. Upload the file to the following web path: https://[DOMAIN-NAME]/.well-known/apple-developer-merchantid-domain-association Replace [DOMAIN-NAME] with your own domain. If your website is https://example.com, then the site would be https://example.com/.well-known/apple-developer-merchantid-domain-association If you want to activate Apple Pay on multiple domains, for example https://ecom.payex.com and https://developer.swedbankpay.com, you need to upload the file to all of the unique domains. Verify that the file has been uploaded correctly by opening the site. You should see a series of letters and numbers. You can compare it to our own verification file, found on this site. If done correctly, they should look identical. If you’re using our iOS SDK, make sure that the webViewBaseURL is set to the same domain as where you host the file. If you’re presenting Seamless View payments in a custom plain web view implementation in your iOS application, you need to make sure that the provided baseURL in the call to loadHTMLString(_:baseURL:) is set to the same domain as where you host the file. If not, it may fail to validate, making it so payments with Apple Pay may not function. You also need to make sure that Apple Pay scripts are allowed to be loaded and executed in the web view (relevant if you’re implementing WKNavigationDelegate and your own webView(_:decidePolicyFor:decisionHandler:) implementation). Once the previous steps have been completed, get in touch with us to activate Apple Pay. The verification file is a hex string that contains a JSON. If the file is modified or the file is saved in a different format, this may cause the validation to fail. If you have further questions about how to upload the file and make it available, contact your domain administrator or provider for further instructions and assistance. Apple Pay Terms And Conditions Apple requires Swedbank Pay to identify whether and when you have accessed the Apple Pay Platform Web Merchant Terms and Conditions, and to record whether you have accepted and agreed to them. We also need to require you to periodically incorporate updates or amendments to the terms of the Apple Pay Web Terms and Conditions, Apple Pay Web Guidelines, Apple Pay HI Guidelines, Apple Pay Best Practices Guide, or Apple Marketing Guidelines. Unless you have already accepted as part of signing your agreement with Swedbank Pay, we can provide the following links for digital signature in Sweden and Norway. If you are unable to sign the Apple Pay Web Terms and Conditions in Swedish or Norwegian digitally, please use the supplementary agreement template (click to download) in English, and e-mail it to agreement@swedbankpay.com together with Name, Organizational and Customer number. Your acceptance is needed before we can activate Apple Pay for you. Accepting Donations Apple Pay provides nonprofit organizations a simple and secure way to accept donations. To register your nonprofit organization for Apple Pay, please visit Benevity. You’ll be asked to provide basic information about your organization. Note that the Apple Developer Team ID is an optional field, so this is not needed. When you get your approval from Benevity, you need to share it with Swedbank Pay before we can activate Apple Pay for you. You can e-mail it to agreement@swedbankpay.com together with Name, Organizational and Customer number. Back to Introduction",
    "tags": "",
    "url": "/checkout-v3/apple-pay-presentation/"
  },{
    "title": "Address of Terminal Sent To POS",
    "text": "When implementing the default mode where both the POS and the terminal are running as severs, there is a way to simplify the configuration. Since the POS system needs to know the address of the terminal and the terminal needs to know the address of the POS, it is possible to just add the address to POS in the terminal. When exiting the terminal’s admin menu by pressing Save button, a configuration message is sent to the just entered POS address and port. TransmitRequest sent from terminal’s Admin menu 1 2 3 4 5 &lt;SaleToPOIRequest&gt; &lt;MessageHeader MessageCategory=\"Transmit\" MessageClass=\"Device\" MessageType=\"Request\" POIID=\"A-POIID\" SaleID=\"\" /&gt; &lt;TransmitRequest DestinationAddress=\"127.0.0.1:15022\" MaximumTransmitTime=\"30\"&gt; &lt;Message&gt;ewogICAgInNhbGVUZXJtaW5hbGNvbmZpZ3VyYXRpb24iOiB7CiAgICAgICAgIm1lc3NhZ2VWZXJzaW9uIjogIjEuMC4wIiwKICAgICAgICAiaXBFbmRQb2ludCI6IHsKICAgICAgICAgICAgImlwVjRBZGRyZXNzIjogIjE5Mi4xNjguNzguMTUiLAogICAgICAgICAgICAiaXBQb3J0IjogIjExMDAwIgogICAgICAgIH0KICAgIH0KfQ==&lt;/Message&gt; &lt;/TransmitRequest&gt; The DestinationAddress and port 15022 indicates it is a configuration message and really has nothing to do with any IP or port. The base64 decoded Message element with IP and port to the terminal 1 2 3 4 5 6 7 8 9 &lt;Message&gt;{ \"saleTerminalconfiguration\": { \"messageVersion\": \"1.0.0\", \"ipEndPoint\": { \"ipV4Address\": \"192.168.78.15\", \"ipPort\": \"11000\" } } }&lt;/Message&gt; Pick up ipV4Address and ipPort and use it for connecting the terminal. info DHCP: If the terminal receives a new address a configuration message is sent automatically to the configured ECR IP and Port. This works fine when using static IP for the POS and DHCP for the terminal.",
    "tags": "",
    "url": "/pax-terminal/Nexo-Retailer/auto-configure-ecr-2-terminal/"
  },{
    "title": "Automatically Configure POS for Terminal",
    "text": "When implementing the default mode where both the POS and the terminal are running as severs, there is a way to simplify the configuration. Since the POS system needs to know the address of the terminal and the terminal needs to know the address of the POS, it is possible to just add the address to POS in the terminal. When exiting the terminal’s admin menu by pressing Save button, a configuration message is sent to the just entered POS address and port. From the .Net SDK the EventCallback is called with event object TerminalAddressObtainedEventCallback. lightbulb Even if TerminalAddressObtainedEventCallback is not implemented, the SDK will pick up the address and use it, but it will not remember it. Picking up the configuration could look something like this 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 public class PaxImplementation : ISwpTrmCallbackInterface { private string terminalIPnPort; public string TerminalIPnPort { get {return terminalIPnPort;} set { terminalIPnPort = value; SaveConfiguration(); } } public PaxImplementation() { ReadConfigration(); PAX = PAXTrmImp_1.Create( new SwpIfConfig(), this); PAX.TerminalAddress = TerminalIPnPort; } public void EventCallback(EventCallbackObject eventObject) { switch (eventObject.type) { . . . case EventCallbackTypes.TerminalAddressObtainedEventCallback: var ta = (TerminalAddressObtainedEventCallback)eventObject; TerminalIPnPort = $\"{ta.Ipv4}:{ta.Port}\"; break; } } . . . info DHCP: If the terminal receives a new address a configuration message is sent automatically to the configured ECR IP and Port. This works fine when using static IP for the POS and DHCP for the terminal.",
    "tags": "",
    "url": "/pax-terminal/NET/tutorial/autoconfigurepos/"
  },{
    "title": "Avoid Privilege Elevation",
    "text": "info Heads up: When running as a server the program needs elevated privileges. It may be avoided by entering the following command as administrator: 1 netsh http add urlacl url=http://*:11000/EPASSaleToPOI/3.1/ sddl=D:(A;;GX;;;WD) 1 where :11000 is the default port. If listening to another port the command must be changed.",
    "tags": "",
    "url": "/pax-terminal/NET/avoid-privilige-elevation/"
  },{
    "title": "Bare Minimum Implementation",
    "text": "In this chapter we provide the bare minimum implementation needed to present the Swedbank Pay UI using the Mobile SDK. There are several important limitations with this implementation that we’re listing at the end of the chapter. Payment To start off, you need a payment to present. If you already have a backend implementation of the Swedbank Pay APIs, you can use that to initialize a payment order. If you don’t have a backend implementation, you can manually create a payment order using Swagger or a similar tool. For simplicity, we’re specifying some simple placeholder values and URLs when creating the payment order that you can use as well. There is no need for the bare minimum implementation to provide URLs to actual working sites: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 POST /psp/paymentorders HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.1 { \"paymentorder\": { \"operation\": \"Purchase\", \"currency\": \"SEK\", \"amount\": 1500, \"vatAmount\": 375, \"description\": \"Test App Purchase\", \"userAgent\": \"SDK-Test\", \"language\": \"sv-SE\", \"urls\": { \"hostUrls\": [ \"https://example.com\" ], \"paymentUrl\": \"examplepayment://payment/\", \"completeUrl\": \"https://example.com/payment-completed\", \"cancelUrl\": \"https://example.com/payment-cancelled\", \"termsOfServiceUrl\": \"https://example.com/tos\", \"callbackUrl\": \"https://api.example.com/payment-callback\" }, \"payeeInfo\": { \"payeeId\": \"5cabf558-5283-482f-b252-4d58e06f6f3b\", \"payeeReference\": \"AB832\", \"payeeName\": \"Merchant1\", \"orderReference\": \"or-123456\" } } } After the payment order is created, you can fetch it to get the available operations. The operation you’re interested in for the sake of the bare minimum implementation is the view-paymentsession. 1 2 3 4 5 6 7 8 9 10 11 12 { \"paymentOrder\": { ... } \"operations\": [ { \"method\": \"GET\", \"href\": \"https://ecom.externalintegration.payex.com/psp/paymentsessions/5a17c24e-d459-4567-bbad-aa0f17a76119?_tc_tid=30f2168171e142d38bcd4af2c3721959\", \"rel\": \"view-paymentsession\", \"contentType\": \"application/json\" } ... ] } The href from the operation is then used in the Android and iOS implementations below. Android Integrate the SDK in your application by simply adding the dependency to the build.gradle file: 1 2 3 dependencies { implementation 'com.swedbankpay.mobilesdk:mobilesdk:5.0.0' } Or in your gradle.kts file: 1 2 3 dependencies { implementation(\"com.swedbankpay.mobilesdk:mobilesdk:5.0.0\") } Depending on your app, you might also need to add androidx.appcompat:appcompat:1.6.1 Android Setup If you would like the implementation to have basic return URL functionality (that is, having the ability for external apps like Vipps and BankID to return back to your app automatically after they are done) you need to make sure that the payment URL will launch the app. A basic way to enable this is a custom URL scheme (examplepayment://). You can set this up using the template intent filter prepared in the SDK, that uses a Gradle Manifest Placeholder. You do this by specifying your custom URL scheme in you build.gradle file: 1 2 3 defaultConfig { manifestPlaceholders = [swedbankPaymentUrlScheme:\"examplepayment\"] } Or in your gradle.kts file: 1 2 3 defaultConfig { manifestPlaceholders[\"swedbankPaymentUrlScheme\"] = \"examplepayment\" } If you plan to use something other than examplepayment://, make sure to modify the manifest placeholder value accordingly. Android SDK Payment Session Next, you provide the Session URL and initiate a fetch of the payment session. This will automatically configure the SDK with the URLs provided when creating the payment order. You need to provide the view-paymentsession operation href in the sessionURL parameter of fetchPaymentSession(). 1 2 3 val paymentSession = PaymentSession() paymentSession.fetchPaymentSession(sessionURL = \"https://ecom.externalintegration.payex.com/psp/paymentsessions/5a17c24e-d459-4567-bbad-aa0f17a76119?_tc_tid=30f2168171e142d38bcd4af2c3721959\") You have to wait until the payment session is fetched by the SDK, and can then continue with either making payment attempts for native payment instruments, or request a web view based payment flow. You need to listen to some state updates from the Payment session. You do this by observing PaymentSession.paymentSessionState. In the following example, we implement observers for the four required states. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 PaymentSession.paymentSessionState.observe(viewLifecycleOwner) { paymentState -&gt; when (paymentState) { is PaymentSessionState.PaymentSessionFetched -&gt; { Log.d(\"SwedbankPay\", \"Payment Session Fetched\") } is PaymentSessionState.PaymentSessionComplete -&gt; { Log.d(\"SwedbankPay\", \"Payment Session Complete\") } is PaymentSessionState.PaymentSessionCanceled -&gt; { Log.d(\"SwedbankPay\", \"Payment Session Canceled\") } is PaymentSessionState.SessionProblemOccurred -&gt; { Log.d(\"SwedbankPay\", \"Payment Session Problem Occurred\") } is PaymentSessionState.SdkProblemOccurred -&gt; { Log.d(\"SwedbankPay\", \"SDK Problem Occurred\") } else -&gt; {} } } Android Present Payment You are now ready to present the payment UI. You can ask the payment session class to create a PaymentFragment for web view based payments. We request a menu mode web view, without any restriction of instruments. 1 paymentSession.createPaymentFragment(mode = SwedbankPayPaymentSessionSDKControllerMode.Menu(null)) After getting back the PaymentFragment instance , you can present it in a way that works in your application. In this example we will be using Appcompat FragmentManager via supportFragmentManager to present the payment fragment, meaning this code is implemented in an Activity of the app. 1 2 3 4 val containerViewId = R.id.sdk_payment_fragment // Specify a container ID for the fragment supportFragmentManager.beginTransaction() .add(containerViewId, paymentFragment, \"PaymentFragment\") .commit() When the payment is finished, you need to remove the payment fragment from the screen (again, in this example we’re accessing the Appcompat FragmentManager via supportFragmentManager, so we’re removing the payment view in a fragment transaction to close it: 1 2 3 supportFragmentManager.beginTransaction() .remove(paymentFragment) .commit() Android Complete Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 class MainActivity : AppCompatActivity() { override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) setContentView(R.layout.activity_main) val paymentSession = PaymentSession() paymentSession.fetchPaymentSession(sessionURL = \"https://ecom.externalintegration.payex.com/psp/paymentsessions/5a17c24e-d459-4567-bbad-aa0f17a76119?_tc_tid=30f2168171e142d38bcd4af2c3721959\") PaymentSession.paymentSessionState.observe(this) { paymentState -&gt; when (paymentState) { is PaymentSessionState.PaymentSessionFetched -&gt; { Log.d(\"SwedbankPay\", \"Payment Session Fetched\") // Reqeust a web based payment fragment instance paymentSession.createPaymentFragment(mode = SwedbankPayPaymentSessionSDKControllerMode.Menu(null)) } is PaymentSessionState.ShowPaymentFragment -&gt; { Log.d(\"SwedbankPay\", \"Show Payment Fragment\") // Present payment fragment to user val containerViewId = R.id.sdk_payment_fragment // Specify a container ID for the fragment supportFragmentManager.beginTransaction() .add(containerViewId, paymentState.fragment, \"PaymentFragment\") .commit() } is PaymentSessionState.PaymentSessionComplete, is PaymentSessionState.PaymentSessionCanceled -&gt; { Log.d(\"SwedbankPay\", \"Payment Session Complete / Canceled\") // Remove the payment fragment val paymentFragment = supportFragmentManager.findFragmentByTag(\"PaymentFragment\") if (paymentFragment != null) { supportFragmentManager.beginTransaction() .remove(paymentFragment) .commit() } } is PaymentSessionState.SessionProblemOccurred -&gt; { Log.d(\"SwedbankPay\", \"Payment Session Problem Occurred\") } is PaymentSessionState.SdkProblemOccurred -&gt; { Log.d(\"SwedbankPay\", \"SDK Problem Occurred\") } else -&gt; {} } } } } iOS Integrate the SDK in your application by either using Swift Package Manager or CocoaPods. Swift Package Manager The package repository URL for the SDK is https://github.com/SwedbankPay/swedbank-pay-sdk-ios.git. Add the SwedbankPaySDK library, there is no need to add the SwedbankPaySDKMerchantBackend library for the bare minimum implementation. CocoaPods Add the dependency in your Podfile: 1 pod 'SwedbankPaySDK', '~&gt; 5.0.0' iOS Setup If you would like the implementation to have basic return URL functionality (that is, having the ability for external apps like Vipps and BankID to return back to your app automatically after they are done) you need to make sure that the payment URL will launch the app. A basic way to enable this is a custom URL scheme (examplepayment://). The easiest way to add a URL scheme to your app is to select the project file, go to the Info tab, scroll down to URL Types, and click the + button to add a new scheme. Insert examplepayment to the URL Schemes field. You can choose the URL Identifier freely, but remember that that it should be unique. The Role for the url type should be Editor. Finally, to mark this url type as the Swedbank Pay payment url scheme, open the Additional url type properties, and add a property with the key com.swedbank.SwedbankPaySDK.callback, type Boolean, and value YES. You can also edit the Info.plist file directly, if you wish. If you plan to use something other than examplepayment://, make sure to modify the URL scheme value accordingly. To forward the custom-scheme payment urls to the SDK, implement the application(_:open:options:) method in your application delegate, and call SwedbankPaySDK.open(url: url) to let the SDK handle the url. 1 2 3 func application(_ app: UIApplication, open url: URL, options: [UIApplication.OpenURLOptionsKey : Any] = [:]) -&gt; Bool { return SwedbankPaySDK.open(url: url) } iOS SDK Payment Session You need to listen to some state updates from the Payment session. You do this by implementing the SwedbankPaySDKPaymentSessionDelegate protocol. In the following example, we implement the delegate protocol and the required methods. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 func paymentSessionFetched(availableInstruments: [SwedbankPaySDK.AvailableInstrument]) { print(\"Available Instruments Fetched\") } func sessionProblemOccurred(problem: SwedbankPaySDK.ProblemDetails) { print(\"Session Problem Occurred\") } func sdkProblemOccurred(problem: SwedbankPaySDK.PaymentSessionProblem) { print(\"SDK Problem Occurred\") } func paymentSessionComplete() { print(\"Payment Session Complete\") } func paymentSessionCanceled() { print(\"Payment Session Canceled\") } func showSwedbankPaySDKController(viewController: SwedbankPaySDKController) { print(\"Show Swedbank Pay SDK Controller\") } func show3DSecureViewController(viewController: UIViewController) { print(\"Show 3D Secure View Controller\") } func dismiss3DSecureViewController() { print(\"Dismiss 3D Secure View Controller\") } func paymentSession3DSecureViewControllerLoadFailed(error: Error, retry: @escaping ()-&gt;Void) { print(\"3D Secure View Controller Load Failed\") } Next, you provide the Session URL and initiate a fetch of the payment session. This will automatically configure the SDK with the URLs provided when creating the payment order. You need to provide the view-paymentsession operation href in the sessionURL parameter of fetchPaymentSession(). 1 2 3 4 5 let paymentSession = SwedbankPaySDK.SwedbankPayPaymentSession() paymentSession.delegate = self paymentSession.fetchPaymentSession(sessionURL: URL(string: \"https://ecom.externalintegration.payex.com/psp/paymentsessions/5a17c24e-d459-4567-bbad-aa0f17a76119?_tc_tid=30f2168171e142d38bcd4af2c3721959\")!) You have to wait until the payment session is fetched by the SDK, and can then continue with either making payment attempts for native payment instruments, or request a web view based payment flow. For the bare minimum implementation, we’re only looking at the web view based payment flow, and you can therefore ignore the availableInstruments parameter. 1 2 3 func paymentSessionFetched(availableInstruments: [SwedbankPaySDK.AvailableInstrument]) { // No need to look at availableInstruments, continue with showing the payment menu } iOS Present Payment You want to listen to some basic state updates from the payment UI and dismiss the view when it’s finished. We will be presenting the payment view controller modally in the implementation further down, so we can use dismiss() to close it: 1 2 3 4 5 6 7 8 9 func paymentSessionComplete() { dismiss(animated: true) print(\"Payment Session Complete\") } func paymentSessionCanceled() { dismiss(animated: true) print(\"Payment Session Canceled\") } You are now ready to present the payment UI. You can ask the payment session class to create a SwedbankPaySDKController for web view based payments. We request a menu mode web view, without any restriction of instruments. 1 paymentSession.createSwedbankPaySDKController(mode: .menu(restrictedToInstruments: nil)) The SwedbankPaySDKController instance is returned via the showSwedbankPaySDKController(viewController:) delegate method. After getting back the SwedbankPaySDKController instance , you can present it in a way that works in your application (again, in the example we’re presenting the view controller modally): 1 2 3 4 func showSwedbankPaySDKController(viewController: SwedbankPaySDKController) { present(viewController, animated: true) print(\"Show Swedbank Pay SDK Controller\") } You can now finish the payment in the web based Swedbank Pay Menu, and when the payment is complete, you will be called with the paymentComplete() delegate method and the payment menu will close. iOS Complete Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 class ViewController: UIViewController, SwedbankPaySDKPaymentSessionDelegate { let paymentSession = SwedbankPaySDK.SwedbankPayPaymentSession() override func viewDidLoad() { super.viewDidLoad() paymentSession.delegate = self paymentSession.fetchPaymentSession(sessionURL: URL(string: \"https://ecom.externalintegration.payex.com/psp/paymentsessions/5a17c24e-d459-4567-bbad-aa0f17a76119?_tc_tid=30f2168171e142d38bcd4af2c3721959\")!) } func paymentSessionFetched(availableInstruments: [SwedbankPaySDK.AvailableInstrument]) { print(\"Available Instruments Fetched\") paymentSession.createSwedbankPaySDKController(mode: .menu(restrictedToInstruments: nil)) } func sessionProblemOccurred(problem: SwedbankPaySDK.ProblemDetails) { print(\"Session Problem Occurred\") } func sdkProblemOccurred(problem: SwedbankPaySDK.PaymentSessionProblem) { print(\"SDK Problem Occurred\") } func paymentSessionComplete() { dismiss(animated: true) print(\"Payment Session Complete\") } func paymentSessionCanceled() { dismiss(animated: true) print(\"Payment Session Canceled\") } func showSwedbankPaySDKController(viewController: SwedbankPaySDKController) { present(viewController, animated: true) print(\"Show Swedbank Pay SDK Controller\") } func show3DSecureViewController(viewController: UIViewController) { print(\"Show 3D Secure View Controller\") } func dismiss3DSecureViewController() { print(\"Dismiss 3D Secure View Controller\") } func paymentSession3DSecureViewControllerLoadFailed(error: Error, retry: @escaping ()-&gt;Void) { print(\"3D Secure View Controller Load Failed\") } } Limitations of the minimal implementation While you can use the steps above to present a payment UI in your apps with very little work, there are several limitations to the implementation that you should consider before choosing how to implement the full payment in your apps. Dynamic Session URL For simplicity, we’ve hardcoded the Session URL needed to fetch the payment session in the SDK. In an actual application, you instead need to fetch this URL from your own backend and supply it to the SDK. Cancelling payment In this implementation, we haven’t included a way for the user to cancel the payment order. You could achieve this functionality by adding a cancel button to your UI (for example providing a navigation bar with a close button for the payment UI view controller/fragment), and cancelling the payment order via your backend. Payment URL Handling In this minimal implementation, we used custom URL scheme for the payment URL. This causes several issues in a production environment: On iOS, using custom URL schemes instead of Universal Links comes with several drawbacks, including prompting the user with an additional confirmation popup as well as being unable to verify URL ownership to your specific app (other apps can declare the same custom URL scheme outside of your control). There are a few, albeit rare, scenarios where the user can end up launching the Payment URL in the mobile browser on their phone. For URLs with custom schemes that’s handled nicely, but for universal URLs, it’s more problematic. This means that browsing to the payment URL ideally should return a view that redirects the user to the app. We provide example on how to implement this in the next chapter Custom Backend. Back: Introduction Next: Custom Backend",
    "tags": "",
    "url": "/checkout-v3/modules-sdks/mobile-sdk/bare-minimum-implementation/"
  },{
    "title": "Callback",
    "text": "warning While the callback feature is mandatory, we would like to emphasize that it is mainly a fail-safe feature. We strongly advice that it is not your primary mean of checking for payment updates. When a change or update from the back-end system are made on a payment or transaction, Swedbank Pay will perform a callback to inform the payee (merchant) about this update. Why Is The Callback Important? Providing a callbackUrl in POST requests is mandatory. Below we provide three example scenarios of why this is important: If the payer closes the payment window, the merchant will never know what happened to the payment if callbackUrl is not implemented. If the payer stops up in a payment app such as Vipps or Swish, the payer will never come back to the merchant. This means that the merchant won’t know what happened to the payment unless callbackUrl is implemented. If a payer experiences a network error or something else happens that prevents the payer from being redirected from Swedbank Pay back to the merchant website, the callbackUrl is what ensures that you receive the information about what happened with the payment. Technical Information When a change or update from the back-end system is made on a payment or transaction, Swedbank Pay will perform an asynchronous server-to-server callback to inform the payee (merchant) about this update. It is important to know that the callback is asynchronous, and not real-time. As we can’t guarantee when you get the callback, there could be a delay between when the payer is returned back to the merchant and when the callback arrives. If the merchant chooses to wait for the callback, the payer might be left at the merchant’s page until the response comes. Swedbank Pay will make an HTTP POST to the callbackUrl that was specified when the payee (merchant) created the payment. When the callbackUrl receives such a callback, an HTTP GET request must be made on the payment or on the transaction. The retrieved payment or transaction resource will give you the necessary information about the recent change/update. For unscheduled and recur transactions, no callback will be given for card transactions, only Trustly. As it isn’t scaled to be a primary source of updates, no given response time can be guaranteed, and a callback might fail. It will be retried if that should happen. Below are the retry timings, in seconds from the initial transaction time: 30 seconds 60 seconds 360 seconds 432 seconds 864 seconds 1265 seconds A callback should return a 200 OK response. To understand the nature of the callback, the type of transaction, its status, etc., you need to perform a GET request on the received URL and inspect the response. The transaction type or any other information can not and should not be inferred from the URL. See URL usage for more information. For paymentOrder implementations (Digital Payments, Checkout v2 and Payment Menu v1), it is critical that you do not use the paymentId or transactionId when performing a GET to retrieve the payment’s status. Use the paymentOrderId. Callback IP Addresses The callbacks are currently sent from either 51.107.183.58 or 91.132.170.1 in both the test and production environment. Starting from March 12th 2025, callbacks will be sent from one of the following IP addresses, and we strongly advise you to whitelist them as soon as possible: 20.91.170.120 20.91.170.121 20.91.170.122 20.91.170.123 20.91.170.124 20.91.170.125 20.91.170.126 20.91.170.127 Callback Example Payment Order Callback Copy json to clipboard 1 2 3 4 5 6 7 8 9 10 11 12 13 14 { \"paymentOrder\": { \"id\": \"/psp/paymentorders/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"instrument\": \"paymentorders\" }, \"payment\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"number\": 222222222 }, \"transaction\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/authorizations/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"number\": 333333333 } } Callback Example v3.1 If you have implemented v3.1, the callback will only contain the paymentOrder node. This response format will only be triggered if you used version=3.1 in the original POST when you created the paymentOrder. Payment Order Callback v3.1 Copy json to clipboard 1 2 3 4 5 6 7 8 { \"orderReference\": \"549213\", \"paymentOrder\": { \"id\": \"/psp/paymentorders/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"instrument\": \"paymentorders\" \"number\": 12345678 } } Show fields Hide fields Field Type Description orderReference string The order reference found in the merchant’s systems. If included in the request, the orderReference will appear in the callback. paymentOrder object The payment order object. id string The relative URL and unique identifier of the paymentorder resource . Please read about URL Usage to understand how this and other URLs should be used in your solution. instrument string The payment method used in the payment. number string The attempt number which triggered the callback. GET Response When performing an HTTP GET request towards the URL found in the transaction.id field of the callback, the response is going to include the abbreviated example provided below. The created authorization resource contains information about the authorization transaction made against a paymentorders payment. Capture Response Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x/2.0 api-supported-versions: 3.x/2.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 { \"paymentorder\": \"/psp/paymentorders/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"authorization\": { \"id\": \"/psp/paymentorders/7e6cdfc3-1276-44e9-9992-7cf4419750e1/currentpayment/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"itemDescriptions\": { \"id\": \"/psp/paymentorders/7e6cdfc3-1276-44e9-9992-7cf4419750e1/currentpayment/ec2a9b09-601a-42ae-8e33-a5737e1cf177/itemDescriptions\" }, \"transaction\": { \"id\": \"/psp/paymentorders/7e6cdfc3-1276-44e9-9992-7cf4419750e1/currentpayment/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2016-09-14T01:01:01.01Z\", \"updated\": \"2016-09-14T01:01:01.03Z\", \"type\": \"Authorization\", \"state\": \"Completed\", \"number\": 1234567890, \"amount\": 1000, \"vatAmount\": 250, \"description\": \"Test transaction\", \"payeeReference\": \"ABC123\", \"isOperational\": false, \"problem\": { \"type\": \"https://api.payex.com/psp/errordetail/paymentorders/3DSECUREERROR\", \"title\": \"Error when complete authorization\", \"status\": 400, \"detail\": \"Unable to complete 3DSecure verification!\", \"problems\": [ ] \"operations\": [ { \"href\": \"/psp/paymentorders/7e6cdfc3-1276-44e9-9992-7cf4419750e1/currentpayment/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"rel\": \"edit-authorization\", \"method\": \"PATCH\" } ] } } } Show fields Hide fields Field Type Description   paymentOrder string The relative URL and unique identifier of the payment resource . Please read about URL Usage to understand how this and other URLs should be used in your solution.   id string The relative URL and unique identifier of the authorization resource . Please read about URL Usage to understand how this and other URLs should be used in your solution.   itemDescriptions object The object representation of the itemDescriptions resource.   id string The relative URL and unique identifier of the itemDescriptions resource . Please read about URL Usage to understand how this and other URLs should be used in your solution.   transaction object The object representation of the generic transaction resource, containing information about the current transaction.   id string The relative URL and unique identifier of the transaction resource . Please read about URL Usage to understand how this and other URLs should be used in your solution.   created string The ISO-8601 date and time of when the transaction was created.   updated string The ISO-8601 date and time of when the transaction was updated.   type string Indicates the transaction type.   state string Indicates the state of the transaction, usually initialized, completed or failed. If a partial authorization has been done and further transactions are possible, the state will be awaitingActivity.   number integer The transaction number, useful when there’s need to reference the transaction in human communication. Not usable for programmatic identification of the transaction, where id should be used instead.   amount integer The transaction amount (including VAT, if any) entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The amount displayed is the final amount the payer paid for their order, including any payment method specific discounts or fees.   vatAmount integer The payment’s VAT (Value Added Tax) amount, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The vatAmount entered will not affect the amount shown on the payment page, which only shows the total amount. This field is used to specify how much of the total amount the VAT will be. Set to 0 (zero) if there is no VAT amount charged.   description string A textual description of the purchase. Maximum length is 40 characters.   payeeReference string A unique reference from the merchant system. Set per operation to ensure an exactly-once delivery of a transactional operation. Length and content validation depends on whether the transaction.number or the payeeReference is sent to the acquirer. If Swedbank Pay handles the settlement, the transaction.number is sent and the payeeReference must be in the format of A-Za-z0-9 and string(30). If you handle the settlement, Swedbank Pay will send the payeeReference and it will be limited to the format of string(12). All characters must be digits. In Invoice Payments payeeReference is used as an invoice/receipt number, if the receiptReference is not defined.   receiptReference string A unique reference to the transaction, provided by the merchant. Can be used as an invoice or receipt number as a supplement to payeeReference.   failedReason string The human readable explanation of why the payment failed.   isOperational bool true if the transaction is operational; otherwise false.   operations array The array of operations that are possible to perform on the transaction in its current state.   Sequence Diagram The sequence diagram below shows the HTTP POST you will receive from Swedbank Pay, and the two GET requests that you make to get the updated status. sequenceDiagram Participant Merchant Participant SwedbankPay as Swedbank Pay activate SwedbankPay SwedbankPay-&gt;&gt;+Merchant: POST &lt;callbackUrl&gt; deactivate SwedbankPay note left of Merchant: Callback by Swedbank Pay Merchant--&gt;&gt;+SwedbankPay: HTTP response Merchant-&gt;&gt;+SwedbankPay: GET paymentorders payment deactivate Merchant note left of Merchant: First API request SwedbankPay--&gt;&gt;+Merchant: payment resource deactivate SwedbankPay",
    "tags": "",
    "url": "/checkout-v3/features/payment-operations/callback/"
  },{
    "title": "Cancel",
    "text": "Cancel The cancellations resource lists the cancellation transactions on a specific payment. Create Cancel Transaction To cancel a previously created payment, you must perform the cancel operation against the accompanying href returned in the operations list. You can only cancel a payment - or part of a payment - which has not been captured yet. There must be funds left that are only authorized. If you cancel before any capture has been done, no captures can be performed later. Cancel Request (All Versions) Request Copy json to clipboard 1 2 3 4 POST /psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/cancellations HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.x/2.0 // Version optional for 3.0 and 2.0 1 2 3 4 5 6 { \"transaction\": { \"description\": \"Test Cancellation\", \"payeeReference\": \"ABC123\" } } Required Field Type Description check transaction object The transaction object. check description string A textual description of why the transaction is cancelled. check payeeReference string A unique reference from the merchant system. Set per operation to ensure an exactly-once delivery of a transactional operation. Length and content validation depends on whether the transaction.number or the payeeReference is sent to the acquirer. If Swedbank Pay handles the settlement, the transaction.number is sent and the payeeReference must be in the format of A-Za-z0-9 and string(30). If you handle the settlement, Swedbank Pay will send the payeeReference and it will be limited to the format of string(12). All characters must be digits. Cancel Response If the cancel request succeeds, the response should be similar to the example below: Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.0/2.0 api-supported-versions: 3.0/2.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 { \"payment\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"cancellation\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/cancellations/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"transaction\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2022-01-31T09:49:13.7567756Z\", \"updated\": \"2022-01-31T09:49:14.7374165Z\", \"type\": \"Cancellation\", \"state\": \"Completed\", \"number\": 71100732065, \"amount\": 1500, \"vatAmount\": 375, \"description\": \"Test Cancellation\", \"payeeReference\": \"AB123\" } } } Show fields Hide fields Property Type Description payment string The relative URL of the payment this cancellation transaction belongs to. cancellation object The cancellation object, containing information about the cancellation transaction. id string The relative URL of the cancellation transaction. transaction object The object representation of the generic transaction resource, containing information about the current transaction. id string The relative URL of the current transaction resource. created string The ISO-8601 date and time of when the transaction was created. updated string The ISO-8601 date and time of when the transaction was updated. type string Indicates the transaction type. state string Initialized, Completed or Failed. Indicates the state of the transaction. number integer The transaction number, useful when there’s need to reference the transaction in human communication. Not usable for programmatic identification of the transaction, where id should be used instead. amount integer The transaction amount (including VAT, if any) entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The amount displayed is the final amount the payer paid for their order, including any payment method specific discounts or fees. vatAmount integer The payment’s VAT (Value Added Tax) amount, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The vatAmount entered will not affect the amount shown on the payment page, which only shows the total amount. This field is used to specify how much of the total amount the VAT will be. Set to 0 (zero) if there is no VAT amount charged. description string A human readable description of maximum 40 characters of the transaction. payeeReference string A unique reference from the merchant system. Set per operation to ensure an exactly-once delivery of a transactional operation. Length and content validation depends on whether the transaction.number or the payeeReference is sent to the acquirer. If Swedbank Pay handles the settlement, the transaction.number is sent and the payeeReference must be in the format of A-Za-z0-9 and string(30). If you handle the settlement, Swedbank Pay will send the payeeReference and it will be limited to the format of string(12). All characters must be digits. In Invoice Payments payeeReference is used as an invoice/receipt number, if the receiptReference is not defined. Cancel Response v3.1 If the cancel request succeeds, the response should be similar to the example below: Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.1 api-supported-versions: 3.1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 { \"paymentOrder\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d\", \"created\": \"2020-03-03T07:19:27.5636519Z\", \"updated\": \"2020-03-03T07:21:00.5605905Z\", \"operation\": \"Purchase\", \"status\": \"Cancelled\", \"currency\": \"SEK\", \"amount\": 1500, \"vatAmount\": 375, \"description\": \"Test Purchase\", \"initiatingSystemUserAgent\": \"&lt;should be set by the system calling POST:/psp/paymentorders&gt;\", \"language\": \"sv-SE\", \"availableInstruments\": [ \"CreditCard\", \"Invoice-PayExFinancingSe\", \"Invoice-PayMonthlyInvoiceSe\", \"Swish\", \"CreditAccount\", \"Trustly\" ], \"implementation\": \"PaymentsOnly\", \"integration\": \"HostedView|Redirect\", \"instrumentMode\": true, \"guestMode\": true, \"orderItems\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/orderitems\" }, \"urls\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/urls\" }, \"payeeInfo\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/payeeInfo\" }, \"payer\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/payers\" }, \"history\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/history\" }, \"failed\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/failed\" }, \"aborted\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/aborted\" }, \"paid\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/paid\" }, \"cancelled\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/cancelled\" }, \"financialTransactions\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/financialtransactions\" }, \"failedAttempts\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/failedattempts\" }, \"postPurchaseFailedAttempts\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/postpurchasefailedattempts\" }, \"metadata\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/metadata\" } }, \"operations\": [ ] } Show fields Hide fields Property Type Description paymentOrder string The relative URL of the payment order this capture transaction belongs to. id string The relative URL of the created capture transaction. created string The ISO-8601 date and time of when the transaction was created. updated string The ISO-8601 date and time of when the transaction was updated. operation string Determines the initial operation, defining the type of payment order created. status string Initialized, Paid, Failed, Reversed Cancelled, or Aborted. Indicates the payment order’s current status. currency string The currency of the payment order. amount integer The transaction amount (including VAT, if any) entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The amount displayed is the final amount the payer paid for their order, including any payment method specific discounts or fees. vatAmount integer The payment’s VAT (Value Added Tax) amount, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The vatAmount entered will not affect the amount shown on the payment page, which only shows the total amount. This field is used to specify how much of the total amount the VAT will be. Set to 0 (zero) if there is no VAT amount charged. remainingCaptureAmount integer The remaining authorized amount that is still possible to capture. remainingCancellationAmount integer The remaining authorized amount that is still possible to cancel. remainingReversalAmount integer The remaining captured amount that is still available for reversal. description string A textual description of the purchase. Maximum length is 40 characters. initiatingSystemUserAgent string The user agent of the HTTP client making the request, reflecting the value sent in the User-Agent header with the initial POST request which created the Payment Order. language string sv-SE, nb-NO, da-DK, en-US or fi-FI. availableInstruments string A list of payment methods available for this payment. implementation string The merchant’s Digital Payments implementation type. Enterprise or PaymentsOnly. We ask that you don’t build logic around this field’s response. It is mainly for information purposes, as the implementation types might be subject to name changes. If this should happen, updated information will be available in this table. integration string The merchant’s Digital Payments integration type. HostedView (Seamless View) or Redirect. This field will not be populated until the payer has opened the payment UI, and the client script has identified if Swedbank Pay or another URI is hosting the container with the payment iframe. We ask that you don’t build logic around this field’s response. It is mainly for information purposes. as the integration types might be subject to name changes, If this should happen, updated information will be available in this table. instrumentMode bool Set to true or false. Indicates if the payment is initialized with only one payment method available. guestMode bool Set to true or false. Indicates if the payer chose to pay as a guest or not. When using the Payments Only implementation, this is triggered by not including a payerReference in the original paymentOrder request. orderItems id The URL to the orderItems resource where information about the order items can be retrieved. urls id The URL to the urls resource where all URLs related to the payment order can be retrieved. payeeInfo id The URL to the payeeInfo resource where information related to the payee can be retrieved. payer id The URL to the payer resource where information about the payer can be retrieved. history id The URL to the history resource where information about the payment’s history can be retrieved. failed id The URL to the failed resource where information about the failed transactions can be retrieved. aborted id The URL to the aborted resource where information about the aborted transactions can be retrieved. paid id The URL to the paid resource where information about the paid transactions can be retrieved. cancelled id The URL to the cancelled resource where information about the cancelled transactions can be retrieved. financialTransactions id The URL to the financialTransactions resource where information about the financial transactions can be retrieved. failedAttempts id The URL to the failedAttempts resource where information about the failed attempts can be retrieved. postPurchaseFailedAttempts id The URL to the postPurchaseFailedAttempts resource where information about the failed capture, cancel or reversal attempts can be retrieved. metadata id The URL to the metadata resource where information about the metadata can be retrieved. operations array The array of operations that are possible to perform on the payment order in its current state. See Operations for details. Cancel Sequence Diagram Cancel can only be done on an authorized transaction. As a cancellation does not have an amount associated with it, it will release the entire reserved amount. If your intention is to make detailed handling, such as only capturing a partial amount of the transaction, you must start with the capture of the desired amount before performing a cancel for the remaining reserved funds. sequenceDiagram participant SwedbankPay as Swedbank Pay Merchant-&gt;&gt;SwedbankPay: POST &lt; cancellation&gt; activate Merchant activate SwedbankPay SwedbankPay--&gt;&gt;Merchant: transaction resource deactivate SwedbankPay deactivate Merchant",
    "tags": "",
    "url": "/checkout-v3/features/payment-operations/cancel/"
  },{
    "title": "Card",
    "text": "As a global payment solution, Swedbank Pay enables merchants to tap into international markets by seamlessly integrating card payments into their offering. With Swedbank Pay, you gain a one-stop shop solution – no need to juggle multiple acquirers or Payment Service Providers. We’ve brought all the expertise you need under one roof, simplifying your payment process and setting your business up for success. Availability We currently accept all leading card schemes operating globally and in the Nordics: VISA MasterCard American Express Dankort Fuel Cards (issued by our Value Added Services team) Gift Cards (issued by our Value Added Services team) Payment Types In addition to our one time payments, there are additional card features you can use to enhance the payment experience and make it an even better fit for your business needs: Stored card - Perfect for reducing friction for the payer. Recurring payments - For merchants with a subscription based service. Network tokenization - Tokenize the card so you, as a merchant, can continue providing service to the payer without them having to re-enter their card details if it has expired and a new card is generated. Back to Introduction",
    "tags": "",
    "url": "/checkout-v3/card-presentation/"
  },{
    "title": "Click to Pay",
    "text": "Pay smarter with Click to Pay! Click to Pay is a seamless, secure, and convenient payment solution designed for online shopping and digital transactions. It enables users to make purchases with just a few clicks, eliminating the need to manually enter card details every time. Built on industry-standard security protocols, Click to Pay supports tokenization, ensuring sensitive payment information remains encrypted and protected. Simplified Checkout: Save time with an intuitive, click-based payment process. No need to re-enter card numbers or billing addresses. Enhanced Security: Utilizes advanced encryption and tokenization to safeguard personal and financial data. Device Compatibility: Works across multiple devices, including smartphones, tablets, and desktops. Broad Acceptance: Supported by major credit card networks like Visa, Mastercard, American Express, and Discover. Unless you have requested Click to Pay as part of signing your agreement with Swedbank Pay, you can e-mail a request to agreement@swedbankpay.com together with Name, Organizational and Customer number. Back to Introduction",
    "tags": "",
    "url": "/checkout-v3/click-to-pay-presentation/"
  },{
    "title": "Close",
    "text": "Method Signatures void Close(bool MaintenanceAllowed = true) async Task CloseAsync(bool MaintenanceAllowed = true) Description The Close/CloseAsync method sends a LogoutRequest to terminate the login session and allow for maintenance. Call this method at least once every day to ensure that parameter updates are possible. Use the MaintenanceAllowed flag to ensure the terminal will not update. This is typically used during business hours.",
    "tags": "",
    "url": "/pax-terminal/NET/SwpTrmLib/Methods/essential/closeasync/"
  },{
    "title": "Code Of Conduct",
    "text": "It is important that the projects governed by Swedbank Pay foster a collaborative, open, inclusive, positive and tolerant community. To underscore this, a CODE_OF_CONDUCT.md file from Contributor Covenant should be added to the project: Contributor Code of Conduct As contributors and maintainers of this project, and in the interest of fostering an open and welcoming community, we pledge to respect all people who contribute through reporting issues, posting feature requests, updating documentation, submitting pull requests or patches, and other activities. We are committed to making participation in this project a harassment-free experience for everyone, regardless of level of experience, gender, gender identity and expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion, or nationality. Examples of unacceptable behavior by participants include: The use of sexualized language or imagery Personal attacks Trolling or insulting/derogatory comments Public or private harassment Publishing other’s private information, such as physical or electronic addresses, without explicit permission Other unethical or unprofessional conduct Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. By adopting this Code of Conduct, project maintainers commit themselves to fairly and consistently applying these principles to every aspect of managing this project. Project maintainers who do not follow or enforce the Code of Conduct may be permanently removed from the project team. This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting a project maintainer at opensource@payex.com. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. Maintainers are obligated to maintain confidentiality with regard to the reporter of an incident. This Code of Conduct is adapted from the Contributor Covenant, version 1.3.0, available at http://contributor-covenant.org/version/1/3/0/ The Code of Conduct should then be referenced from the CONTRIBUTING file, for example with the following paragraphs: Please note that this project is released with a Contributor Code of Conduct. By participating in this project you agree to abide by its terms.",
    "tags": "",
    "url": "/checkout-v3/modules-sdks/development-guidelines/code-of-conduct/"
  },{
    "title": "CompleteUrl",
    "text": "CompleteUrl This URL will be used by Swedbank Pay when a payment is Completed or Failed. If your integration subscribes to the onPaid and possibly the onFailed event, no redirect or use of the completeUrl will take place. But if you do not have any event handler for the onPaymentCompleted event, the Swedbank Pay JavaScript will perform an HTTP redirect in the top frame to the completeUrl. You will still need to do a GET request on the payment resource to find the final status (Completed or Failed).",
    "tags": "",
    "url": "/checkout-v3/features/technical-reference/complete-url/"
  },{
    "title": "Continue",
    "text": "Method Signature void Continue() Description When a card has been read using GetPaymentInstrument and the amount is still not known, this method will let the terminal to proceed with PIN dialog if appropriate. For contactless the terminal will wait for an amount. sequenceDiagram participant SaleSystem participant SDK participant Terminal activate SDK SaleSystem-&gt;&gt;SDK: GetPaymentInstrument() SDK-&gt;&gt;Terminal: CardAcquisition Note over Terminal: \"Wait for card\" Terminal-&gt;&gt;SDK: CardAcquisitionResponse deactivate SDK Note left of Terminal: Chip card read SDK-&gt;&gt;SaleSystem: GetPaymentInstrumentResult Note over Terminal: \"Please wait\" SaleSystem-&gt;&gt;SDK: Continue() Note over Terminal: \"Enter PIN\"",
    "tags": "",
    "url": "/pax-terminal/NET/SwpTrmLib/Methods/otheravailable/continue/"
  },{
    "title": "Contributing",
    "text": "To make it clear exactly how outside contributors should provide their contributions to the project, a CONTRIBUTING.md file should be created at the root of the repository. Once such a file exists, GitHub will present it to users creating new pull requests, issues, etc. in the repository. Here’s an example of how such a file can look like: How to contribute To contribute to the Swedbank Pay Development Guidelines, there’s just a few things you need to know. Getting Started Read and make sure you agree with the Code of Conduct. Make sure you have a GitHub account. Then, you have three options: Submit a ticket for your issue, assuming one does not already exist. Clearly describe the issue including steps to reproduce when it is a bug. Make sure you fill in the earliest version that you know has the issue. Edit the file you want to change directly on GitHub. Fork the repository on GitHub. If you choose option 3 (forking the repository), then please read on. Making Changes Create a new branch from where you want to base your work. This is usually the master or develop branch. Please avoid working directly on the master and develop branch. Make commits of logical units in the new branch. Check for unnecessary space with git diff --check before committing. Make sure your commit messages are well written and in the proper format. Push the branch to your forked repository (remote). Submit a pull request for the pushed branch.",
    "tags": "",
    "url": "/checkout-v3/modules-sdks/development-guidelines/contributing/"
  },{
    "title": "Corporate Limited Menu",
    "text": "Corporate Limited Menu Corporate Limited Menu allows you to limit the payment methods available when your customers pays through the menu. Please note that the payment method in question needs to support corporate payment methods and have the feature enabled during the contract setup to be shown in the menu. If you don’t invoke the restriction in your payment order request, every valid payment method will show up as usual in the payment menu. This is done by setting corporateMode to true. In this example the payment method is set to card. Request Copy json to clipboard 1 2 3 4 POST /psp/paymentorders HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.x/2.0 // Version optional for 3.0 and 2.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 { \"paymentorder\": { \"corporateMode\": \"true\", \"instrument\": \"CreditCard\", \"operation\": \"Purchase\", \"currency\": \"SEK\", \"amount\": 1500, \"vatAmount\": 375, \"description\": \"Test Purchase\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"sv-SE\", \"urls\": { \"hostUrls\": [ \"https://example.com\", \"https://example.net\" ], \"completeUrl\": \"https://example.com/payment-completed\", \"callbackUrl\": \"https://api.example.com/payment-callback\", \"termsOfServiceUrl\": \"https://example.com/termsandconditions.pdf\", \"logoUrl\": \"https://example.com/logo.png\" }, \"payeeInfo\": { \"payeeId\": \"5cabf558-5283-482f-b252-4d58e06f6f3b\", \"payeeReference\": \"AB832\" } } } Show fields Hide fields Required Field Type Description check paymentOrder object The payment order object. check corporateMode bool Determines if the menu should only show payment methods that support corporate payment methods and has been enabled in your contracts. check instrument string The payment methods you want to restrict to in corporate mode. Selected by using Instrument Mode . check operation string Determines the initial operation, defining the type of payment order created. check currency string The currency of the payment. check amount integer The transaction amount (including VAT, if any) entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The amount displayed is the final amount the payer paid for their order, including any payment method specific discounts or fees. check vatAmount integer The payment’s VAT (Value Added Tax) amount, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The vatAmount entered will not affect the amount shown on the payment page, which only shows the total amount. This field is used to specify how much of the total amount the VAT will be. Set to 0 (zero) if there is no VAT amount charged. check description string The description of the payment order. check userAgent string The user agent of the payer. Should typically be set to the value of the User-Agent header sent by the payer’s web browser. check language string The language of the payer. check urls object The urls object, containing the URLs relevant for the payment order. check hostUrls array The array of valid host URLs. check completeUrl string The URL that Swedbank Pay will redirect back to when the payer has completed their interactions with the payment. This does not indicate a successful payment, only that it has reached a final (complete) state. A GET request needs to be performed on the payment order to inspect it further. See completeUrl for details. check callbackUrl string The URL that Swedbank Pay will perform an HTTP POST against every time a transaction is created on the payment order. See callback for details. check termsOfServiceUrl string The URL to the terms of service document which the payer must accept in order to complete the payment. HTTPS is a requirement. check logoUrl string With permission and activation on your contract (if you are using Seamless View), sending in a logoUrl will replace the Swedbank Pay logo with the logo sent in. If you do not send in a logoUrl, then no logo and no text is shown. Without permission or activation on your contract, sending in a logoUrl has no effect. The logo must be a picture with maximum 50px height and 400px width. Requires HTTPS. Read more about this in Custom Logo . check payeeInfo object The payeeInfo object, containing information about the payee (the recipient of the money). See payeeInfo for details. check payeeId string The ID of the payee, usually the merchant ID. check payeeReference string A unique reference from the merchant system. Set per operation to ensure an exactly-once delivery of a transactional operation. Length and content validation depends on whether the transaction.number or the payeeReference is sent to the acquirer. If Swedbank Pay handles the settlement, the transaction.number is sent and the payeeReference must be in the format of A-Za-z0-9 and string(30). If you handle the settlement, Swedbank Pay will send the payeeReference and it will be limited to the format of string(12). All characters must be digits. In Invoice Payments payeeReference is used as an invoice/receipt number, if the receiptReference is not defined.",
    "tags": "",
    "url": "/checkout-v3/features/customize-ui/corporate-limited-menu/"
  },{
    "title": "Create",
    "text": "Method Signature ISwpTrmIf_1 Create(SwpIfConfig) Description Create is a static method that creates an instance and returns an ISwpTrmIf_1 interface. This is the first call to make. At the moment there is only one class available, PAXTrmImp_1. If more than one terminal will be used create one instance per terminal. Parameters SwpIfConfig - instance of a config object. ISwpTrmCallbackInterface - reference to an instance that handles available callbacks. Returns A reference to an instance implementing the ISwpTrmIf_1 interface. Example Create an instance to get an interface 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 using SwpTrmLib; public class MyImplementation : ISwpTrmCallbackInterface { ISwPTrmIf_1 Pax; public MyInit() { Pax = PAXTrmImp_1.Create( new SwpIfConfig() { LogPath = @\"C:\\myLogPath\" }, this ); } // ConfirmationHandler is used when the terminal asks the operator for // a confirmation. Eg. signature sales (rarely used). // Requires the implementation to run as a server. void ConfirmationHandler(string text, IConfirmationResult callback) {} // EventNotificationHandler occurs for some events that may be useful to // act upon // Requires the implementation to run as a server. void EventNotificationHandler(EventToNotifyEnumeration type, string text) {} // SyncRequestResult is called when a synchronous method has been called and // the terminal has responded. void SyncRequestResult(object result) {} } SwpIfConfig SwpIfConfig is only used when calling the Create method. There are default values and the most relevant to change is possibly LogPath and TerminalRxPort. TerminalRxPort is only used in server mode. The DraftCapture implies other changes that are not documented here as well, and should therefore be left as is. 1 2 3 4 5 6 7 8 9 public class SwpIfConfig { public string LogPath { get; set; } = \".\\\\\"; public int TerminalRxPort { get; set; } = 11000; public NLog.LogLevel LogLevel { get; set; } = NLog.LogLevel.Debug; public string UICulture { get; set; } = CultureInfo.CurrentCulture.Name; public bool DraftCapture { get; set; } = false; public bool LogTerminalHandler { get; set; } = false; }",
    "tags": "",
    "url": "/pax-terminal/NET/SwpTrmLib/Methods/essential/create/"
  },{
    "title": "Custom Backend",
    "text": "In this chapter we explore how to integrate the mobile SDK with a fully custom backend server. It is recommended that you also read through the chapters covering the example Merchant Backend API and gain an understanding of how the SDK works with that as backend. Basic Backend Requirements To support the SDK, your backend must be capable of at least creating a payment order. If you wish to use consumer identification, it must also be able to start an identification session. In addition to these, your backend should serve the appropriate html documents at urls used for the paymentUrl; the content of these html documents will be discussed below, but it is noteworthy that they are different for payments from Android applications and those from iOS applications. Further, the urls used for as paymentUrl on iOS should be configured as universal links for your iOS application. Android Configuration To bind the SDK to your custom backend, you must create a subclass of com.swedbankpay.mobilesdk.Configuration. This must be a Kotlin class. If you cannot use Kotlin, you can use the compatibility class com.swedbankpay.mobilesdk.ConfigurationCompat. Your subclass must provide implementations of postPaymentorders and postConsumers. These methods are named after the corresponding Swedbank Pay APIs they are intended to be forwarded to. If you do not intend to use consumer identification, you can have your postConsumers implementation throw an exception. The methods will be called with the arguments you give to the PaymentFragment. Therefore, the meaning of consumer, paymentOrder, and userData is up to you. If the consumer was identified before creating the paymentOrder, the consumer reference will be passed in the consumerProfileRef argument of postPaymentorders. The exact implementation of these methods is outside the scope of this document. You must return a ViewPaymentOrderInfo and optionally also a ViewConsumerIdentificationInfo object respectively; please refer to their class documentation on how to populate them from your backend responses. Any exception you throw from these methods will in turn be reported from the PaymentViewModel. Whether a given exception is treated as a retryable condition is controlled by the shouldRetryAfter&lt;Operation&gt;Exception methods; by default they only consider IllegalStateException as fatal. Please refer to the Configuration documentation on all the features. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 class MyConfiguration : Configuration() { override suspend fun postPaymentorders( context: Context, paymentOrder: PaymentOrder?, userData: Any?, consumerProfileRef: String? ): ViewPaymentOrderInfo { val viewPaymentOrder = post(\"https://example.com/pay/android\") return ViewPaymentOrderInfo( viewPaymentLink = \"https://example.com/\", viewPaymentOrder = viewPaymentOrder, completeUrl = \"https://example.com/complete\", cancelUrl = \"https://example.com/cancel\", paymentUrl = \"https://example.com/payment/android\", termsOfServiceUrl = \"https://example.com/tos\", isV3 = true ) } override suspend fun postConsumers( context: Context, consumer: Consumer?, userData: Any? ): ViewConsumerIdentificationInfo { val viewConsumerIdentification = post(\"https://example.com/identify\") return ViewConsumerIdentificationInfo( webViewBaseUrl = \"https://example.com/\", viewConsumerIdentification = viewConsumerIdentification ) // Or throw Exception() if not using consumer identification } } iOS Configuration On iOS you must conform to the SwedbankPaySDKConfiguration protocol. Just like on Android, you must provide implementations for the postPaymentorders and postConsumers methods. The consumer, paymentOrder, and userData arguments to those methods will be the values you initialize your SwedbankPaySDKController with, and their meaning is up to you. The postPaymentorders method will optionally receive a consumerProfileRef argument, if the consumer was identified before creating the payment order. The methods are asynchronous, and the result is reported by calling the completion callback with the result. Successful results have payloads of SwedbankPaySDK.ViewPaymentOrderInfo and SwedbankPaySDK.ViewConsumerIdentificationInfo, respectively; please refer to the type documentation on how to populate those types. If you do not intend to use consumer identification, your postConsumers should callback should be called with a failing result of SwedbankPayConfigurationError.notImplemented. The other errors of any failure result you report will be propagated back to your app in the paymentFailed(error:) delegate method. You must call the completion callback exactly once, multiple calls are a programming error. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 struct MyConfiguration : SwedbankPaySDKConfiguration { func postPaymentorders(paymentOrder: SwedbankPaySDK.PaymentOrder?, userData: Any?, consumerProfileRef: String?, options: SwedbankPaySDK.VersionOptions, completion: @escaping (Result&lt;SwedbankPaySDK.ViewPaymentOrderInfo, Error&gt;) -&gt; Void) { post(URL(string: \"https://example.com/pay/ios\")!) { result in do { let viewPaymentorder = try result.get() let info = SwedbankPaySDK.ViewPaymentOrderInfo(isV3: true, webViewBaseURL: URL(string: \"https://example.com/\"), viewPaymentLink: viewPaymentorder, completeUrl: URL(string: \"https://example.com/complete\")!, cancelUrl: URL(string: \"https://example.com/cancel\"), paymentUrl: URL(string: \"https://example.com/payment/ios\"), termsOfServiceUrl: URL(string: \"https://example.com/tos\")) completion(.success(info)) } catch { completion(.failure(error)) } } } func postConsumers(consumer: SwedbankPaySDK.Consumer?, userData: Any?, completion: @escaping (Result&lt;SwedbankPaySDK.ViewConsumerIdentificationInfo, Error&gt;) -&gt; Void) { post(URL(string: \"https://example.com/identify\")!) { result in do { let viewConsumerIdentification = try result.get() let info = SwedbankPaySDK.ViewConsumerIdentificationInfo(webViewBaseURL: URL(string: \"https://example.com/\"), viewConsumerIdentification: viewConsumerIdentification) completion(.success(info)) } catch let error { completion(.failure(error)) } } // Or completion(.failure(SwedbankPayConfigurationError.notImplemented)) if not using consumer identification } } Backend The code examples allude to a run-of-the-mill https API, but you can of course handle the communication in any way you see fit. The important part is that your backend must then communicate with the Swedbank Pay API using your secret token, and perform the requested operation. POST Consumers The “POST consumers” operation is simple, you must make a request to POST /psp/consumers with a payload of your choosing, and you must get the view-consumer-identification link back to the SDK. Consumer SDK Request SDK Request 1 2 POST /identify HTTP/1.1 Host: example.com Consumer SDK Response SDK Response 1 2 3 4 HTTP/1.1 200 OK Content-Type: text/plain https://ecom.externalintegration.payex.com/consumers/core/scripts/client/px.consumer.client.js?token=5a17c24e-d459-4567-bbad-aa0f17a76119 Consumer Swedbank Pay Request Swedbank Pay Request 1 2 3 4 5 6 7 8 9 10 POST /psp/consumers HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"operation\": \"initiate-consumer-session\", \"language\": \"sv-SE\", \"shippingAddressRestrictedToCountryCodes\" : [\"NO\", \"SE\", \"DK\"] } Consumer Swedbank Pay Response Swedbank Pay Response 1 2 3 4 5 6 7 8 9 10 11 12 13 HTTP/1.1 200 OK Content-Type: application/json { \"operations\": [ { \"method\": \"GET\", \"rel\": \"view-consumer-identification\", \"href\": \"https://ecom.externalintegration.payex.com/consumers/core/scripts/client/px.consumer.client.js?token=5a17c24e-d459-4567-bbad-aa0f17a76119\", \"contentType\": \"application/javascript\" } ] } This is, of course, an over-simplified protocol for documentation purposes. POST Payment Orders The “POST paymentorders” is a bit more complicated, as it needs to tie in with paymentUrl handling. Also, the full set of payment order urls must be made available to the app. In this simple example we use static urls for all of those, but in a real application you will want to create at least some of them dynamically, and will therefore need to incorporate them to your protocol. Payment Order SDK Request SDK Request 1 2 POST /pay/android HTTP/1.1 Host: example.com Payment Order SDK Response SDK Response 1 2 3 4 HTTP/1.1 200 OK Content-Type: text/plain https://ecom.externalintegration.payex.com/paymentmenu/core/scripts/client/px.paymentmenu.client.js?token=5a17c24e-d459-4567-bbad-aa0f17a76119&amp;culture=sv-SE Payment Order Swedbank Pay Request Swedbank Pay Request 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 POST /psp/paymentorders HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"paymentorder\": { \"urls\": { \"hostUrls\": [\"https://example.com/\"], \"completeUrl\": \"https://example.com/complete\", \"cancelUrl\": \"https://example.com/cancel\", \"paymentUrl\": \"https://example.com/payment/android\" } } } Payment Order Swedbank Pay Response Swedbank Pay Response 1 2 3 4 5 6 7 8 9 10 11 12 13 HTTP/1.1 201 Created Content-Type: application/json { \"operations\": [ { \"href\": \"https://ecom.externalintegration.payex.com/paymentmenu/core/scripts/client/px.paymentmenu.client.js?token=5a17c24e-d459-4567-bbad-aa0f17a76119&amp;culture=sv-SE&amp;_tc_tid=30f2168171e142d38bcd4af2c3721959\", \"rel\": \"view-paymentorder\", \"method\": \"GET\", \"contentType\": \"application/javascript\" } ] } Payment URL As discussed in previous chapters, in some situations the paymentUrl of a payment will be opened in the browser. When this happens, we need a way of returning the flow to the mobile application. We need to take a slightly different approach depending on the client platform. Android The SDK has an Intent Filter for the com.swedbankpay.mobilesdk.VIEW_PAYMENTORDER action. When it receives this action, if the Intent uri is equal to the paymentUrl of an ongoing payment (as reported by ViewPaymentOrderInfo), it will reload the payment menu of that payment. Therefore, if the paymentUrl is opened in the browser, that page must start an activity with such an Intent. This can be done by navigating to an intent scheme url. Note that the rules for following intent-scheme navigations can sometimes cause redirects to those url not to work. To work around this, the paymentUrl must serve a proper html page, which attempts to immediately redirect to the intent-scheme url, but also has a link the user can tap on. Refer to the intent scheme url documentation on how to form one. You should always include the package name so that your intent is not mistakenly routed to the wrong app. Request 1 2 GET /payment/android HTTP/1.1 Host: example.com Response 1 2 3 4 5 6 7 8 9 10 11 12 HTTP/1.1 200 OK Content-Type: text/html &lt;html&gt; &lt;head&gt; &lt;title&gt;Swedbank Pay Payment&lt;/title&gt; &lt;meta http-equiv=\"refresh\" content=\"0;url=intent://example.com/payment/android#Intent;scheme=https;action=com.swedbankpay.mobilesdk.VIEW_PAYMENTORDER;package=com.example.app;end;\"&gt; &lt;/head&gt; &lt;body&gt; &lt;a href=\"intent://example.com/payment/android#Intent;scheme=https;action=com.swedbankpay.mobilesdk.VIEW_PAYMENTORDER;package=com.example.app;end;\"&gt;Back to app&lt;/a&gt; &lt;/body&gt; &lt;/html&gt; iOS Switching apps on iOS is always done by opening a URL. urls. It is preferred to use a Universal Link URL. Your app and backend must be configured such that the paymentUrl used on iOS payments is registered as a universal link to your app. Then, on iOS 13.4 or later, in most cases when the paymentUrl is navigated to, it will be immediately given to your app to handle. However, Universal Links are not entirely reliable, in particular if you wish to support iOS earlier than 13.4, and we must still not get stuck if the paymentUrl is opened in the browser instead. Now, the most straightforward way of escaping this situation is to define a custom url scheme for your app, and do something similar to the Android solution, involving that scheme. If you plan to support only iOS 13.4 and up, where the situation is rather unlikely to occur, this can be sufficient. Doing this on earlier versions is likely to end up suboptimal, though, as doing this will cause an unsightly confirmation dialog to be shown before the app is actually launched. As the situation where paymentUrl is opened in the browser is actually quite likely to occur on iOS earlier than 13.4, this means you are more or less subjecting all users on those systems to sub-par user experience. To provide a workaround to the confirmation popup, we devise a system that allows the user to retrigger the navigation to paymentUrl in such a way as to maximize the likelihood that the system will let the app handle it. As one of the criteria is that the navigation must be to a domain different to the current one, the paymentUrl itsef will always redirect to a page on a different domain. That page is then able to link back to the paymentUrl and have that navigation be routed to the app. You could host this “trampoline” page yourself, but Swedbank Pay has a generic one available for use. The trampoline page takes three arguments, target, which should be set to your paymentUrl, language, which supports all the Checkout languages, and app, you app name that will be shown on the page. On iOS any URL the app is opened with is delivered to the UIApplicationDelegate by either the application(_:continue:restorationHandler:) method (for universal links) or application(_:open:options:). To let the SDK respond appropriately, you need to call SwedbankPaySDK.continue(userActivity:) or SwedbankPaySDK.open(url:) from those methods, respectively. Request 1 2 GET /payment/ios HTTP/1.1 Host: example.com Response 1 2 HTTP/1.1 301 Moved Permanently Location: https://ecom.stage.payex.com/externalresourcehost/trampoline?target=https%3A%2F%2Fexample.com%2Fpayment%2Fios%3Ffallback%3Dtrue&amp;language=en-US&amp;app=Example%20App The trampoline url will, in turn, serve an html page: Request 1 2 GET /externalresourcehost/trampoline?target=https%3A%2F%2Fexample.com%2Fpayment%2Fios%3Ffallback%3Dtrue&amp;language=en-US&amp;app=Example%20App HTTP/1.1 Host: ecom.stage.payex.com Response 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 HTTP/1.1 200 OK Content-Type: text/html &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\" /&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt; &lt;title&gt;Swedbank Pay Redirect&lt;/title&gt; &lt;link rel=\"icon\" type=\"image/png\" href=\"/externalresourcehost/content/images/favicon.png\"&gt; &lt;link rel=\"stylesheet\" href=\"/externalresourcehost/content/css/style.css\"&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=\"trampoline-container\" onclick=\"redirect()\"&gt; &lt;img alt=\"Swedbank Pay Logo\" src=\"/externalresourcehost/content/images/swedbank-pay-logo-vertical.png\" /&gt; &lt;span class=\"trampoline-text\"&gt; &lt;a&gt;Back to Example App&lt;/a&gt; &lt;/span&gt; &lt;/div&gt; &lt;script&gt; function redirect() { window.location.href = decodeURLComponent(\"https%3A%2F%2Fexample.com%2Fpayment%2Fios%3Ffallback%3Dtrue\"); }; &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; The page links back to https://example.com/payment/ios?fallback=true. Notice the additional parameter. This is, indeed, part of the target parameter, and under the control of your backend. The purpose of this is to allow for one final escape hatch, in case the universal link mechanism fails to work. If this url is yet again opened in the browser, the backend responds with a redirect to to a custom-scheme url. (This should only happen if your universal links configuration is broken, or if iOS has somehow failed to load the Apple App-Site Association file.) Request 1 2 GET /payment/ios?fallback=true HTTP/1.1 Host: example.com Response 1 2 HTTP/1.1 301 Moved Permanently Location: com.example.app://example.com/payment/ios?fallback=true From the app perspective, in our example, the url the app is opened with will be one these three: https://example.com/payment/ios, https://example.com/payment/ios?fallback=true, or com.example.app://example.com/payment/ios?fallback=true. When any of these is passed to the SDK from your UIApplicationDelegate, the SDK will then call into your Configuration to check if it matches the paymentUrl (https://example.com/payment/ios in this example). This can be customized, but by default it will allow the scheme to change and for additional query parameters to be added to the url, so this example would work with the default configuration. Apple App-Site Association As the iOS paymentUrl needs to be a universal link, the backend will also need an Apple App-Site Association file. This must be served at /.well-known/apple-app-site-association, and it must associate any url used as a paymentUrl with the app. Request 1 2 GET /.well-known/apple-app-site-association HTTP/1.1 Host: example.com Response 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 HTTP/1.1 200 OK Content-Type: application/json { \"applinks\": { \"apps\": [], \"details\": [ { \"appID\": \"ABCDE12345.com.example.app\", \"paths\": [ \"/payment/ios\" ], \"appIDs\": [ \"ABCDE12345.com.example.app\" ], \"components\": [ { \"/\": \"/payment/ios\" } ] } ] } } Note that the AASA file must be served over https, otherwise iOS will not load it. This example AASA file contains both old-style and new-style values for maximum compatibility. You may not need the old-style values in your implementation, depending on your situation. Updating The Payment Order The SDK includes a facility for updating a payment order after is has been created. The Merchant Backend Configuration uses this to allow setting the method of an instrument mode payment, but your custom Configuration can use it for whatever purpose you need. Android First, implement updatePaymentOrder in your Configuration subclass. This method returns the same data type as postPaymentorders, and when it does, the PaymentFragment reloads the payment menu according to the new data. The paymentOrder and userData arguments are what you set for the PaymentFragment, the viewPaymentOrderInfo argument is the current ViewPaymentOrderInfo (as returned from a previous call to this method, or, if this is the first update, the original postPaymentorders call). The updateInfo argument will be the value you call PaymentViewModel.updatePaymentOrder with, its meaning is therefore defined by you. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class MyConfiguration : Configuration() { override suspend fun updatePaymentOrder( context: Context, paymentOrder: PaymentOrder?, userData: Any?, viewPaymentOrderInfo: ViewPaymentOrderInfo, updateInfo: Any? ): ViewPaymentOrderInfo { val viewPaymentOrder = post(\"https://example.com/payment/android/frobnicate\") return ViewPaymentOrderInfo( viewPaymentLink = \"https://example.com/\", viewPaymentOrder = viewPaymentOrder, completeUrl = \"https://example.com/complete\", cancelUrl = \"https://example.com/cancel\", paymentUrl = \"https://example.com/payment/android\", termsOfServiceUrl = \"https://example.com/tos\", isV3 = true ) } } To trigger an update, call updatePaymentOrder on the PaymentViewModel of the active payment. The argument of that call will be passed to your Configuration.updatePaymentOrder as the updateInfo argument. 1 activity.paymentViewModel.updatePaymentOrder(\"frob\") iOS Implement updatePaymentOrder in your configuration. Rather like the Android method, this method takes a callback of the same type as postPaymentorders, and when that callback is invoked with a Success result, the SwedbankPaySDKController reloads the payment menu according to the new data. Unlike postPaymentorders, this method must also return a request handle, which can be used to cancel the request if needed. If the request is cancelled, the completion callback should not be called. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 func updatePaymentOrder(paymentOrder: SwedbankPaySDK.PaymentOrder?, options: SwedbankPaySDK.VersionOptions, userData: Any?, viewPaymentOrderInfo: SwedbankPaySDK.ViewPaymentOrderInfo, updateInfo: Any, completion: @escaping (Result&lt;SwedbankPaySDK.ViewPaymentOrderInfo, Error&gt;) -&gt; Void) -&gt; SwedbankPaySDKRequest? { var request = post(URL(string: \"https://example.com/payment/ios/frobnicate\")!) { result in do { let viewPaymentorder = try result.get() let info = SwedbankPaySDK.ViewPaymentOrderInfo(isV3: true, webViewBaseURL: URL(string: \"https://example.com/\"), viewPaymentLink: viewPaymentorder, completeUrl: URL(string: \"https://example.com/complete\")!, cancelUrl: URL(string: \"https://example.com/cancel\"), paymentUrl: URL(string: \"https://example.com/payment/ios\"), termsOfServiceUrl: URL(string: \"https://example.com/tos\")) completion(.success(info)) } catch NetworkError.cancelled { // no callback } catch { completion(.failure(error)) } } return request } To trigger an update, call updatePaymentOrder on the SwedbankPaySDKController. The argument will be passed to your configuration in the updateInfo argument. 1 2 3 swedbankPayController.updatePaymentOrder( updateInfo: \"frob\" ) Backend The backend implementation makes any needed calls to Swedbank Pay, and returns whatever your implementation expects. It is recommended to always use the view-paymentorder link from the update response, in case the update has caused a change to that url. Request 1 2 POST /payment/android/frobnicate HTTP/1.1 Host: example.com Response 1 2 3 4 HTTP/1.1 200 OK Content-Type: text/plain https://ecom.externalintegration.payex.com/paymentmenu/core/scripts/client/px.paymentmenu.client.js?token=5a17c24e-d459-4567-bbad-aa0f17a76119&amp;culture=sv-SE Errors Any exception you throw from your Configuration will be made available in PaymentViewModel.exception or SwedbankPaySDKDelegate.paymentFailed(error:). You are therefore fully in control of the model you wish to use to report errors. We recommend adopting the Problem Details for HTTP APIs convention for reporting errors from your backend. At the moment of writing, the Android SDK also contains a utility for parsing RFC 7807 messages to help with this. iOS Payment Menu Redirect Handling In many cases the payment menu will need to navigate to a different web page as part of the payment process. Unfortunately, testing has shown that not all such pages are happy about being opened in a WKWebView. To mitigate this, the SDK contains a list of pages we know to work, and any others will be opened in Safari (or whatever browser the user has set as default in recent iOS). If you wish, you can customize this behavior by overriding decidePolicyForPaymentMenuRedirect in your configuration. Note that you can also modify this behavior by the webRedirectBehavior property of SwedbankPaySDKController. 1 2 3 4 5 6 7 struct MyConfiguration : SwedbankPaySDKConfiguration { func decidePolicyForPaymentMenuRedirect(navigationAction: WKNavigationAction, completion: @escaping (SwedbankPaySDK.PaymentMenuRedirectPolicy) -&gt; Void) { // we like to live dangerously, allow everything completion(.openInWebView) } } iOS Payment URL Matching The iOS paymentUrl universal-link/custom-scheme contraption makes it so that your app must be able to accept some variations in the urls. The default behavior is to allow for a different scheme and additional query parameters. If these are not good for your app, you can override the url(_:matchesPaymentUrl:) method in your configuration. If you wish to simply specify the allowed custom scheme, you can conform to SwedbankPaySDKConfigurationWithCallbackScheme instead. 1 2 3 4 5 6 7 struct MyConfiguration : SwedbankPaySDKConfiguration { func url(_ url: URL, matchesPaymentUrl paymentUrl: URL) -&gt; Bool { // We trust universal links enough // so we do not need the custom-scheme fallback return url == paymentUrl } } 1 2 3 struct MyConfiguration : SwedbankPaySDKConfigurationWithCallbackScheme { let callbackScheme = \"com.example.app\" } Back: Bare Minimum Implementation Next: Android",
    "tags": "",
    "url": "/checkout-v3/modules-sdks/mobile-sdk/custom-backend/"
  },{
    "title": "Custom Logo",
    "text": "Custom Logo If you have permission and the feature has been activated in your contract, you can replace the Swedbank Pay logo in the Payment Menu. See the abbreviated example below with logoUrl present in the paymentOrder request’s urls. The logo URL ust be a picture with maximum 50px height and 400px width. Requires HTTPS. If the configuration is activated and you add a logoUrl, the Swedbank Pay logo will be replaced and the text changed accordingly. If the configuration is activated and you do not add a logoUrl, no logo or text will be shown. If the configuration is deactivated, adding a logoUrl has no effect. Request Copy json to clipboard 1 2 3 4 POST /psp/paymentorders HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.x/2.0 // Version optional for 3.0 and 2.0 1 2 3 4 5 6 7 8 9 10 11 12 13 { \"paymentorder\": { \"urls\": { \"logoUrl\": \"https://example.com/logo.png\", \"hostUrls\": [ \"https://example.com\", \"https://example.net\" ], \"completeUrl\": \"https://example.com/payment-completed\", \"cancelUrl\": \"https://example.com/payment-cancelled\", \"paymentUrl\": \"https://example.com/perform-payment\", \"callbackUrl\": \"https://api.example.com/payment-callback\", \"termsOfServiceUrl\": \"https://example.com/termsandconditions.pdf\" } } }",
    "tags": "",
    "url": "/checkout-v3/features/customize-ui/custom-logo/"
  },{
    "title": "Custom Styling",
    "text": "warning This feature is only available for merchants who have a specific agreement with Swedbank Pay. Custom styling allows you to make adjustments to the payment UI so it blends with your online store’s existing design. It is available for all implementations, but only when using Seamless View. Please note that it is your responsibility that a custom styled payment UI still meets the accessibility requirements (read more about WCAG by clicking the link below). Customizable Elements With the arrival of our accessibility compliant payment UI, the elements you can adjust are related to the CTA button. Available changes are: The background color of the CTA button The CTA button has three different states with different colors during the payment process. They are all adjustable. The states are disabled (before the payer has entered all their (valid) details), enabled (after all details have been entered and they are valid) and hover (when the payer hovers above the enabled button). The default color will be light gray for disabled, black for enabled and light brown for hover. CTA button text color You can also change the button text so it blends well with the new background color. The default is white (light gray for disabled). Border radius of the buttons The border radius of the buttons are adjustable to create a harder rectangle or a softer rounded shape, and better match your existing design. The default value will be 8px, the minimum is 0px, and the maximum is 30px. We also allow different values for each corner of the button. Please note that we do not allow percentages as input. The value has to be in px, rem or em. How To Customize You can make the adjustments you want in the style object and include it in the style node of the script that loads the UI. Do you want to see the changes live before you put them to use? Stop by the Swedbank Pay Playground and give it a go! Payment UI loading script 1 2 3 4 5 6 7 8 9 script.onload = function () { payex.hostedView.checkout({ container: { checkout: '&lt;&lt;your-container-id&gt;&gt;' }, culture: '&lt;&lt;your-culture&gt;&gt;', style: &lt;&lt;your-style-object&gt;&gt; }).open(); }; Custom styling object 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 { \"style\": { \"button\": { \"borderRadius\": \"8px\", \"enabled\": { \"backgroundColor\": \"#2F2424\", \"color\": \"#FFFFFF\", \"outline\": \"1px solid transparent\", \"hover\": { \"backgroundColor\": \"#72605E\", \"color\": \"#FFFFFF\" } }, \"disabled\": { \"backgroundColor\": \"#EBE7E2\", \"color\": \"#72605E\", \"outline\": \"1px solid transparent\" } }, \"secondaryButton\": { \"borderRadius\": \"8px\", \"enabled\": { \"backgroundColor\": \"#FFFFFF\", \"color\": \"#2f2424\", \"outline\": \"1px solid #72605e\", \"hover\": { \"backgroundColor\": \"#72605E\" } }, \"disabled\": { \"backgroundColor\": \"#FFFFFF\", \"color\": \"#c0bebe\" } } } }",
    "tags": "",
    "url": "/checkout-v3/features/customize-ui/custom-styling/"
  },{
    "title": "Signature Approved Transaction",
    "text": "The Flow The flow of a CVM signature transaction always needs to be implemented and works the same regardless if the default or client only implementation is made. The difference from a normal transaction is that the sale system first gets a PrintRequestEventCallback with the merchant receipt that needs to be signed. Then the sale system will get a callback to ConfirmationHandler with a text to be displayed to the operator in a YES/NO dialog box. The callback itself has a parameter called callback which must be used to deliver an answer true or false. When that callback has been called the sale system will get the final PaymentRequestResult. The following illustrates the flow when using async call sequenceDiagram participant POS participant NetSDK POS-&gt;&gt;+NetSDK: PaymentRequestAsync NetSDK-&gt;&gt;POS: EventCallback PrintRequestEventCallback Note over POS: Print the merchant's receipt NetSDK-&gt;&gt;POS: ConfirmationHandler Note over POS: Display message.&lt;br&gt;Let operator respond by&lt;br&gt;approving or refusing alt Note over POS: Signature accepted POS-&gt;&gt;NetSDK: callback(true) else Note over POS: Refuse signature POS-&gt;&gt;NetSDK: callback(false) end NetSDK-&gt;&gt;-POS: PaymentRequestResult Note over NetSDK: Success or Failure depending on above&lt;br&gt;call. Always print the customer receipt You must respond by using the callback and you must not call Abort. If synchronous calls are used the flow is the same but the PaymentRequestResult will appear in the SyncRequestResult callback. The flow works for both Client Only mode and when implementing the default mode. When Client Only mode, the SDK will fake the print- and input- requests from the terminal to make the flow identical. However when refusing the signature in Client Only mode a ReversalRequest is made and the customer receipt will indicate that the transaction was cancelled.",
    "tags": "",
    "url": "/pax-terminal/NET/tutorial/cvm-signature/"
  },{
    "title": "Debugging Features",
    "text": "Debugging Features To help with investigating problematic scenarios, the SDK has some debugging features. Android The SDK normally attempts to keep the payment flow inside a WebView as far as possible. In case some payment instrument fails to work properly, it may be helpful to see if it is related to the WebView. To allow this, you can set a flag to immediately move the payment process to the browser app when it navigates away from the payment menu. In particular, if some card issuer’s flow opens a third-party application, but the process fails to return to your app, you should see if this option makes any difference. Testing your application with this option enabled can also be useful in ascertaining that your “Android Intent callback” endpoint is working properly. Android 1 2 3 4 5 6 7 8 9 10 val arguments = PaymentFragment.ArgumentsBuilder() .paymentOrder(paymentOrder) .useBrowser(true) .build() val manualArguments = Bundle() manualArguments.putBoolean( PaymentFragment.ARG_USE_BROWSER, true ) If a payment flow should open a third-party application, but this does not happen as expected, you can set a flag to display error dialogs when web content attempts to start an Activity, but it fails. Android 1 2 3 4 5 6 7 8 9 10 val arguments = PaymentFragment.ArgumentsBuilder() .paymentOrder(paymentOrder) .debugIntentUris(true) .build() val manualArguments = Bundle() manualArguments.putBoolean( PaymentFragment.ARG_DEBUG_INTENT_URLS, true ) iOS As explained in the iOS documentation, the iOS SDK will, in some cases, open navigations out of the payment menu in Safari rather than the WKWebView. The SDK contains a list of redirects that we have tested to be working, but, of course, this list can be neither complete nor correct for all time. If you encounter a payment flow that opens in the WKWebView (i.e. does not open in Safari), but does not work correctly, you can make all navigations go to Safari to check if the flow has become incompatible with WKWebView. On the other hand, if you encounter a payment flow that opens in Safari and wish to investigate if it would work in the web view instead, you can make all navigations open in the web view. iOS 1 2 3 swedbankPaySDKController.webRedirectBehavior = .AlwaysUseWebView swedbankPaySDKController.webRedirectBehavior = .AlwaysUseBrowser If you have set .AlwaysUseBrowser and discovered a site that works with WKWebView, you can set a webNavigationLogger to your SwedbankPaySDKController and make note of the URL. Then, modify your Configuration to allow that URL to be opened in the WKWebView. If using the Merchant Backend Configuration, add a additionalAllowedWebViewRedirects argument to your initializer. If using a custom Configuration, change your decidePolicyForPaymentMenuRedirect implementation accordingly. iOS 1 2 3 swedbankPaySDKController.webNavigationLogger = { url in print(url) } 1 2 3 4 let configuration = SwedbankPaySDK.MerchantBackendConfiguration( backendUrl: backendUrl, additionalAllowedWebViewRedirects: [.Domain(\"example.com\")] ) After you have verified that a domain works with WKWebView, please file an issue to have it added to the SDK’s bundled list.",
    "tags": "",
    "url": "/checkout-v3/modules-sdks/mobile-sdk/features/optional/debugging/"
  },{
    "title": "Delete Token",
    "text": "Delete Unscheduled, Recurrence Or Payment Tokens Payers should be able to delete tokens connected to them. How to do this is described in the example below. Note that the different token types have different responses. The state field must have the state Deleted when deleting the token. No other states are supported. Delete recurrenceToken Request Request Copy json to clipboard 1 2 3 4 PATCH /psp/paymentorders/recurrenceTokens/5a17c24e-d459-4567-bbad-aa0f17a76119 HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.x/2.0 // Version optional for 3.0 and 2.0 1 2 3 4 { \"state\": \"Deleted\", \"comment\": \"Comment on why the deletion is happening\" } Delete recurrenceToken Response Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x/2.0 api-supported-versions: 3.x/2.0 1 2 3 4 5 6 { \"token\": \"5a17c24e-d459-4567-bbad-aa0f17a76119\", \"isDeleted\": true } Delete unscheduledToken Request Request Copy json to clipboard 1 2 3 4 PATCH /psp/paymentorders/unscheduledTokens/5a17c24e-d459-4567-bbad-aa0f17a76119 HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.x/2.0 // Version optional for 3.0 and 2.0 1 2 3 4 { \"state\": \"Deleted\", \"comment\": \"Comment on why the deletion is happening\" } Delete unscheduledToken Response The example shows a token connected to a card. The parameters and display name will vary depending on the payment method. Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x/2.0 api-supported-versions: 3.x/2.0 1 2 3 4 5 6 7 8 9 10 11 12 { \"token\": \"5a17c24e-d459-4567-bbad-aa0f17a76119\", \"instrument\": \"CreditCard\", \"instrumentDisplayName\": \"123456xxxxxx1111\" \"correlationId\": \"e2f06785-805d-4605-bf40-426a725d313d\", \"instrumentParameters\": { \"cardBrand\": \"Visa\", \"expiryDate\": \"MM/YYYY\" } } Delete paymentToken Request Request Copy json to clipboard 1 2 3 4 PATCH /psp/paymentorders/paymentTokens/5a17c24e-d459-4567-bbad-aa0f17a76119 HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.x/2.0 // Version optional for 3.0 and 2.0 1 2 3 4 { \"state\": \"Deleted\", \"comment\": \"Comment on why the deletion is happening\" } Delete paymentToken Response The example shows a token connected to a card. The parameters and display name will vary depending on the payment method. Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x/2.0 api-supported-versions: 3.x/2.0 1 2 3 4 5 6 7 8 9 10 11 12 13 { \"paymentToken\": \"5a17c24e-d459-4567-bbad-aa0f17a76119\", \"instrument\": \"CreditCard\", \"instrumentDisplayName\": \"123456xxxxxx1111\" \"correlationId\": \"e2f06785-805d-4605-bf40-426a725d313d\", \"instrumentParameters\": { \"cardBrand\": \"Visa\", \"expiryDate\": \"MM/YYYY\" } } Delete payerOwnedToken Request Request Copy json to clipboard 1 2 3 4 PATCH /psp/paymentorders/payerownedtokens/&lt;payerReference&gt; HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.1/2.0 1 2 3 4 { \"state\": \"Deleted\", \"comment\": \"Comment stating why this is being deleted\" } Delete payerownedToken Response Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.1 api-supported-versions: 3.x/2.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 { \"payerOwnedTokens\": { \"id\": \"/psp/paymentorders/payerownedtokens/{payerReference}\", \"payerReference\": \"{payerReference}\", \"tokens\": [ { \"tokenType\": \"Payment\", \"token\": \"{paymentToken}\", \"instrument\": \"Invoice-payexfinancingno\", \"instrumentDisplayName\": \"260267*****\", \"correlationId\": \"e2f06785-805d-4605-bf40-426a725d313d\", \"instrumentParameters\": { \"email\": \"hei@hei.no\", \"msisdn\": \"+4798765432\", \"zipCode\": \"1642\" } }, { \"tokenType\": \"Payment\", \"token\": \"{paymentToken}\", \"instrument\": \"CreditCard\", \"instrumentDisplayName\": \"492500******0004\", \"correlationId\": \"e2f06785-805d-4605-bf40-426a725d313d\", \"instrumentParameters\": { \"expiryDate\": \"12/2020\", \"cardBrand\": \"Visa\" } } ] } }",
    "tags": "",
    "url": "/checkout-v3/features/optional/delete-token/"
  },{
    "title": "Description",
    "text": "Description The description field is a 40 character length textual summary of the purchase. It is needed to specify what the payer is actually purchasing. You will find an abbreviated Purchase request below. As you can see the description field is set to be Test Description in the the code example. info Notice that for Redirect, the description will be shown as Test - Reference1583419461, as set in the code example. For the Seamless View scenario, the description is not shown in the payment window, but it is still required in the initial request. Description Request Request Copy json to clipboard 1 2 3 POST /psp/paymentorders/payments HTTP/1.1 Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json 1 2 3 4 5 6 7 8 9 10 11 12 13 { \"paymentorder\": { \"description\": \"Test Description\", \"operation\": \"Purchase\", \"intent\": \"Authorization\", \"currency\": \"SEK\", \"generateRecurrenceToken\": false, \"userAgent\": \"Mozilla/5.0...\", \"language\": \"sv-SE\", \"urls\": \"hostUrls\": [\"https://example.com\"] } } How It Looks",
    "tags": "",
    "url": "/checkout-v3/features/technical-reference/description/"
  },{
    "title": "Dialog with customer",
    "text": "The terminal offers at the moment three different possibilities to communicate with the customer. There is a DisplayRequest and then two types of InputRequest. One to get a response on a Yes/No question and the other to ask a customer to enter a digit string. The request may be sent during a login session when no other request is on going. sequenceDiagram participant POS participant Terminal participant Customer POS-&gt;&gt;Terminal: InputRequest type: Confirmation Note right of POS: Would you like membership? Note left of Terminal: Terminal displays the&lt;br/&gt;message together with two&lt;br/&gt;touch buttons on the display.&lt;br/&gt;Red and green Customer-&gt;&gt;Terminal: Green button pressed Terminal-&gt;POS: InputResponse Confirmation true POS-&gt;&gt;Terminal: InputRequest type DigitString Note right of POS: Please enter phone number Customer-&gt;&gt;Terminal: Digits entered on the terminal key board Terminal-&gt;&gt;POS: InputResponse string of digits POS-&gt;&gt;Terminal: DisplayRequest Note right of POS: Welcome! We have sent you an SMS Note over Terminal: The display message is erased by&lt;br/&gt;sending any new request.&lt;br/&gt;You may use LoginRequest. InputRequest The InputRequest has two parts. One for what to be displayed and one for the type of input requested. Note that when the InputRequest is responded to the terminal goes back to display what was displayed before the request. Name Lev Attribute Description InputRequest 1     DisplayOutput 2 Device Only value is CustomerDisplay.     InfoQuality Only value is Display. OutputContent 3 OutputFormat Only value is Text. OutputText 4   Question to be asked to the customer. InputData 2 Device Only value is CustomerInput.     InfoQualify Only value is Input.     InputCommand Either GetConfirmation or DigitString. Example of a Yes/No input request 1 2 3 4 5 6 7 8 9 10 11 &lt;SaleToPOIRequest&gt; &lt;MessageHeader ProtocolVersion=\"3.1\" MessageClass=\"Device\" MessageCategory=\"Input\" MessageType=\"Request\" ServiceID=\"45\" DeviceID=\"45\" SaleID=\"1\" POIID=\"A-POIID\"/&gt; &lt;InputRequest&gt; &lt;DisplayOutput Device=\"CustomerDisplay\" InfoQualify=\"Display\"&gt; &lt;OutputContent OutputFormat=\"Text\"&gt; &lt;OutputText&gt;Is this a good day?&lt;/OutputText&gt; &lt;/OutputContent&gt; &lt;/DisplayOutput&gt; &lt;InputData Device=\"CustomerInput\" InfoQualify=\"Input\" InputCommand=\"GetConfirmation\"/&gt; &lt;/InputRequest&gt; &lt;/SaleToPOIRequest&gt; InputResponse Worth mentioning about an InputResponse is that it has two results with a Result attribute. One for OutputResult and one for InputResult. This differs from other responses. The InputResult is the essential of this message. If the Result attribute is Failure the ConfirmedFlag is empty. A failure is probably due to abort from POS system. Example where customer pressed green button on the sceen or the key pad 1 2 3 4 5 6 7 8 9 10 11 12 13 14 &lt;SaleToPOIResponse&gt; &lt;MessageHeader MessageClass=\"Device\" MessageCategory=\"Input\" MessageType=\"Response\" ServiceID=\"45\" DeviceID=\"45\" SaleID=\"1\" POIID=\"A-POIID\"/&gt; &lt;InputResponse&gt; &lt;OutputResult Device=\"CustomerDisplay\" InfoQualify=\"Display\"&gt; &lt;Response Result=\"Success\"/&gt; &lt;/OutputResult&gt; &lt;InputResult Device=\"CustomerInput\" InfoQualify=\"Input\"&gt; &lt;Response Result=\"Success\"/&gt; &lt;Input InputCommand=\"GetConfirmation\"&gt; &lt;ConfirmedFlag&gt;true&lt;/ConfirmedFlag&gt; &lt;/Input&gt; &lt;/InputResult&gt; &lt;/InputResponse&gt; &lt;/SaleToPOIResponse&gt; Response asking for DigitString Example where customer enters digits on the key pad 1 2 3 4 5 6 7 8 9 10 11 12 13 14 &lt;SaleToPOIResponse&gt; &lt;MessageHeader MessageClass=\"Device\" MessageCategory=\"Input\" MessageType=\"Response\" ServiceID=\"52\" DeviceID=\"52\" SaleID=\"1\" POIID=\"A-POIID\"/&gt; &lt;InputResponse&gt; &lt;OutputResult Device=\"CustomerDisplay\" InfoQualify=\"Display\"&gt; &lt;Response Result=\"Success\"/&gt; &lt;/OutputResult&gt; &lt;InputResult Device=\"CustomerInput\" InfoQualify=\"Input\"&gt; &lt;Response Result=\"Success\"/&gt; &lt;Input InputCommand=\"DigitString\"&gt; &lt;DigitInput&gt;1234567890&lt;/DigitInput&gt; &lt;/Input&gt; &lt;/InputResult&gt; &lt;/InputResponse&gt; &lt;/SaleToPOIResponse&gt; DisplayRequest A display request is executed immediately and cannot be aborted. There will however always be a response with result Success or Failure. The display will remain until the next request is sent that changes the display. info Tips n Tricks: If there is a desire to display a message after a completed transaction the message will remain until next request from POS. To go back to idle screen you may use the LoginRequest. warning Heads up: Sending any request immediately after a PaymentResponse will result in Failure and error condition Busy. Wait awhile before retry. Name Lev Attribute Description DisplayRequest 1     DisplayOutput 2 Device Only value is CustomerDisplay.     InfoQuality Only value is Display. OutputContent 3 OutputFormat Only value is Text. OutputText 4   Message to display. Center alignment. Long lines will wrap. To control line breaks, make one OutputText per line. Example of a DisplayRequest with several lines 1 2 3 4 5 6 7 8 9 10 11 12 13 &lt;SaleToPOIRequest&gt; &lt;MessageHeader ProtocolVersion=\"3.1\" MessageClass=\"Device\" MessageCategory=\"Display\" MessageType=\"Request\" ServiceID=\"33\" DeviceID=\"33\" SaleID=\"1\" POIID=\"A-POIID\"/&gt; &lt;DisplayRequest&gt; &lt;DisplayOutput Device=\"CustomerDisplay\" InfoQualify=\"Display\"&gt; &lt;OutputContent OutputFormat=\"Text\"&gt; &lt;OutputText&gt;Message to be displayed&lt;/OutputText&gt; &lt;OutputText&gt;may have several lines&lt;/OutputText&gt; &lt;OutputText&gt;This is the third&lt;/OutputText&gt; &lt;OutputText&gt;However, a long line will automatically wrap&lt;/OutputText&gt; &lt;/OutputContent&gt; &lt;/DisplayOutput&gt; &lt;/DisplayRequest&gt; &lt;/SaleToPOIRequest&gt; The message would give the following on an A30 terminal.   Message to display may have several lines This is the third However, a long line will automatically wrap",
    "tags": "",
    "url": "/pax-terminal/Nexo-Retailer/dialog-in-terminal/"
  },{
    "title": "Event Notifications",
    "text": "EventNotification Event notifications are sent from the terminal to the POS to inform the POS about different things. They do not require a response message and it is not a must to implement any handeling of them, but it may be helpful and make a nice solution. They will only appear if the implementation has a listener for terminal requests. The most commonly used event notifications are those informing about parameter updates. 1 2 3 4 5 6 &lt;SaleToPOIRequest&gt; &lt;MessageHeader MessageClass=\"Event\" MessageCategory=\"Event\" MessageType=\"Notification\" ServiceID=\"20\" SaleID=\"1\" POIID=\"A-POIID\"/&gt; &lt;EventNotification TimeStamp=\"2023-10-06T07:24:14.473+02:00\" EventToNotify=\"SaleAdmin\" MaintenanceRequiredFlag=\"true\"&gt; &lt;EventDetails&gt;Maintenance Required&lt;/EventDetails&gt; &lt;/EventNotification&gt; &lt;/SaleToPOIRequest&gt; Name Lev Attribute Description EventNotification 1 TimeStamp Local time when the event occurred.     EventToNotify The essential attribute informing what it is about. Enumeration: SaleAdmin, BeginMaintenance, EndMaintenance, Reject, CardInserted, CardRemoved.     MaintenanceRequired true or false. If true, there are updates that will be implemented at next logout if maintenance allowed is set. EventDetails 2   Informational text about the event. Note! not always present. RejectedMessage 2   If EventToNotify is Reject. Example flow sequenceDiagram participant POS participant Terminal Terminal-&gt;&gt;POS: EventNotification SaleAdmin Note over Terminal: MaintenanceRequired=\"true\" POS-&gt;&gt;Terminal: LogoutRequest Note over POS: MaintenanceAllowed=\"true\" Terminal-&gt;&gt;POS: LogoutResponse Success Terminal-&gt;&gt;POS: EventNotification BeginMaintenance Note left of Terminal: Update from TMS is implemented Terminal-&gt;&gt;POS: EventNotification EndMaintenence POS-&gt;&gt;Terminal: LoginRequest",
    "tags": "",
    "url": "/pax-terminal/Nexo-Retailer/Quick-guide/eventnotification/"
  },{
    "title": "Expand The First Payment Method",
    "text": "Expand the First Payment Method A useful feature when customizing your payment UI, is auto-expanding the first payment method in the menu. By doing this you can guide the payer towards a specific payment method. This is done by adding the boolean field expandFirstInstrument and set it to true. The first payment method will be expanded when the payment UI is loaded. This can be used as a stand-alone feature, but can favourably be paired with customizing the order of the menu. Request Example The request with expandFirstInstrument set to true should look like the example below. The field will not be visible in the response, so we will only include the request here. The response will look like a basic paymentOrder response. Request Copy json to clipboard 1 2 3 4 POST /psp/paymentorders HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.1,3.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 { \"paymentorder\": { \"expandFirstInstrument\": true, \"operation\": \"Purchase\", \"currency\": \"SEK\", \"amount\": 1500, \"vatAmount\": 375, \"description\": \"Test Purchase\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"sv-SE\", \"urls\": { \"hostUrls\": [ \"https://example.com\", \"https://example.net\" ], \"paymentUrl\": \"https://example.com/perform-payment\", //Seamless View only \"completeUrl\": \"https://example.com/payment-completed\", \"cancelUrl\": \"https://example.com/payment-cancelled\", //Redirect only \"callbackUrl\": \"https://api.example.com/payment-callback\", \"logoUrl\": \"https://example.com/logo.png\" }, \"payeeInfo\": { \"payeeId\": \"5cabf558-5283-482f-b252-4d58e06f6f3b\", \"payeeReference\": \"AB832\", \"payeeName\": \"Merchant1\", \"orderReference\": \"or-123456\" } } }",
    "tags": "",
    "url": "/checkout-v3/features/customize-ui/expand-method/"
  },{
    "title": "Fees And Discounts",
    "text": "Fees And Discounts If you want to add fees or discounts to your payment order, this can be done by include them as orderItems in your request. The feature is currently available for Invoice, Installment Account and Monthly Payments. Use positive amounts for fees and negative amounts for discounts. Remember that the sum of the orderItems must match the total payment order amount. Restricting the fee or discount to certain payment methods is also possible. Simply add the restrictedToInstruments field and which payment method the fee or discount applies to. This is currently available for invoice only. The example below shows a fee which only applies to Swedish invoices. Other options for some of the fields are in the table below. Fee Request Request Copy json to clipboard 1 2 3 4 POST /psp/paymentorders HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.x/2.0 // Version optional for 3.0 and 2.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 { \"orderItems\": [ { \"reference\": \"I1\", \"name\": \"InvoiceFee\", \"type\": \"PAYMENT_FEE\", \"class\": \"Fees\", \"description\": \"Fee for paying with Invoice\", \"quantity\": 1, \"quantityUnit\": \"pcs\", \"unitPrice\": 1900, \"vatPercent\": 0, \"amount\": 1900, \"vatAmount\": 0, \"restrictedToInstruments\": [ \"Invoice-PayExFinancingSe\" ] } ] } Show fields Hide fields Field Type Description   check orderItems array The array of items being purchased with the order. Note that authorization orderItems will not be printed on invoices, so lines meant for print must be added in the Capture request. The authorization orderItems will, however, be used in the Merchant Portal when captures or reversals are performed, and might be shown other places later. It is required to use this field to be able to send Capture orderItems. Capture requests should only contain items meant to be captured from the order. check reference string A reference that identifies the order item. check name string The name of the order item. check type string PRODUCT, SERVICE, SHIPPING_FEE, PAYMENT_FEE DISCOUNT, VALUE_CODE or OTHER. The type of the order item. PAYMENT_FEE is the amount you are charged with when you are paying with invoice. The amount can be defined in the amount field below. check class string The classification of the order item. Can be used for assigning the order item to a specific product category, such as MobilePhone. Note that class cannot contain spaces and must follow the regex pattern [\\w-]*. Swedbank Pay may use this field for statistics.   itemUrl string The URL to a page that can display the purchased item, product or similar. ︎︎︎ imageUrl string The URL to an image of the order item.   description string A textual description of the purchase. Maximum length is 40 characters.   discountDescription string Used for discounts only. The human readable description of the possible discount. check quantity number The 4 decimal precision quantity of order items being purchased. check quantityUnit string The unit of the quantity, such as pcs, grams, or similar. This is used for your own book keeping. check unitPrice integer The price per unit of order item, including VAT.   discountPrice integer Used for discounts only. If the order item is purchased at a discounted price. This field should contain that price, including VAT. check vatPercent integer The percent value of the VAT multiplied by 100, so 25% becomes 2500. check amount integer The transaction amount (including VAT, if any) entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The amount displayed is the final amount the payer paid for their order, including any payment method specific discounts or fees. check vatAmount integer The payment’s VAT (Value Added Tax) amount, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The vatAmount entered will not affect the amount shown on the payment page, which only shows the total amount. This field is used to specify how much of the total amount the VAT will be. Set to 0 (zero) if there is no VAT amount charged.   restrictedToInstruments array A list of the payment methods you wish to restrict the payment to. Currently Invoice only. Invoice supports the subtypes PayExFinancingNo, PayExFinancingSe and PayMonthlyInvoiceSe, separated by a dash, e.g.; Invoice-PayExFinancingNo. The fee or discount applies to all payment methods if a restriction is not included. Use of this field requires an agreement with Swedbank Pay.",
    "tags": "",
    "url": "/checkout-v3/features/customize-payments/fees-discounts/"
  },{
    "title": "Login",
    "text": "LoginRequest LoginRequest is the first message towards the terminal and is required in order to start communicating. It carries information such as POIID and SalesCapabilites which decides what parameters to use and how the terminal will behave. A LoginRequest starts a so called Login Session in the terminal. A Login Session is active until a successful Logout or a new Login is made. There should always be a possibility to reset the state of the terminal by sending a new Login. However, that way should only be used if all else fails. The AbortRequest should be used for aborting an ongoing request. sample LoginRequest message 1 2 3 4 5 6 7 8 9 10 11 12 13 &lt;SaleToPOIRequest&gt; &lt;MessageHeader ProtocolVersion=\"3.1\" MessageClass=\"Service\" MessageCategory=\"Login\" MessageType=\"Request\" ServiceID=\"5\" SaleID=\"1\" POIID=\"A-POIID\"/&gt; &lt;LoginRequest OperatorLanguage=\"sv\"&gt; &lt;DateTime&gt;2023-09-26T13:57:31+02:00&lt;/DateTime&gt; &lt;SaleSoftware ProviderIdentification=\"Demo\" ApplicationName=\"Test SwpIf - SwpTrmLib.PAXTrmImp_1\" SoftwareVersion=\"1.0 - 1.1.23264.1309\"/&gt; &lt;SaleTerminalData TerminalEnvironment=\"Attended\"&gt; &lt;SaleCapabilities&gt;CashierStatus CashierError CashierDisplay POIReplication CustomerAssistance CashierInput PrinterReceipt&lt;/SaleCapabilities&gt; &lt;SaleProfile GenericProfile=\"Extended\"&gt; &lt;ServiceProfiles&gt;Loyalty PIN CardReader&lt;/ServiceProfiles&gt; &lt;/SaleProfile&gt; &lt;/SaleTerminalData&gt; &lt;/LoginRequest&gt; &lt;/SaleToPOIRequest&gt; Name Lev Attribute Description LoginRequest 1 OperatorLanguage Language used in the POS system. Supported: sv,no,fi,da.     OperatorID This is not used as of now. DateTime 2   Local time when request is made with time zone offset. SaleSoftware 3   Important information for SwedbankPay to be able to get an understanding of how different setups work.     ApplicationName Name of the POS application or the module communicating with the terminal.     ProviderIdentification POS producer name.     SoftwareVersion Important that this value changes if the software is updated. This helps us to track possible problem if they occur. SaleTerminalData 2 TerminalEnvironment Only supported value is Attended. SaleCapabilities 3   The values in this field affects the behavior of the terminal. If only PrinterReceipt is included the terminal won’t send any request to the POS system. Your application will work as a client-only. LoginResponse Login response with result Success is needed before any other message may be sent to the terminal. A Login success indicates a login session has been established in the terminal. The next message may still get a Failure with ErrorCondition Busy which then means the terminal is busy communicating with its hosts. On busy, wait and try again. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 &lt;?xml version='1.0' encoding='UTF-8'?&gt; &lt;SaleToPOIResponse&gt; &lt;MessageHeader ProtocolVersion=\"3.1\" MessageClass=\"Service\" MessageCategory=\"Login\" MessageType=\"Response\" ServiceID=\"5\" SaleID=\"1\" POIID=\"A-POIID\"/&gt; &lt;LoginResponse&gt; &lt;Response Result=\"Success\"/&gt; &lt;POISystemData&gt; &lt;DateTime&gt;2023-09-26T11:57:31.408Z&lt;/DateTime&gt; &lt;POISoftware ProviderIdentification=\"Optomany\" ApplicationName=\"axept® PRO\" SoftwareVersion=\"1.2.17.0\"/&gt; &lt;POITerminalData TerminalEnvironment=\"Attended\" POISerialNumber=\"1710000520\"&gt; &lt;POICapabilities&gt;CustomerDisplay CustomerError CustomerInput MagStripe ICC EMVContactless&lt;/POICapabilities&gt; &lt;/POITerminalData&gt; &lt;POIStatus GlobalStatus=\"OK\" SecurityOKFlag=\"true\" PEDOKFlag=\"true\" CardReaderOKFlag=\"true\" CommunicationOKFlag=\"true\"/&gt; &lt;/POISystemData&gt; &lt;/LoginResponse&gt; &lt;/SaleToPOIResponse&gt; Name Lev Attribute Description LoginResponse 1     Response 2 Result Success or Failure     ErrorCondition Only present if Failure: Common values are Busy- wait and try again, Refusal- Request not accepted AdditionalResponse 3   Only present if Failure and should be a describing text POISystemData 2     DateTime 3 ApplicationName Name of the POS application or the module communicating with the terminal POISoftware 3 ProviderIdentification Payment application producer POITerminalData 3         TerminalEnvironment Only value Attended     POISerialNumber Serial number of the terminal POICapabilities 4   Shows the capabilities of the terminal POIStatus 3   Different statuses Next",
    "tags": "",
    "url": "/pax-terminal/Nexo-Retailer/Quick-guide/first-message/"
  },{
    "title": "Frictionless Payments",
    "text": "Frictionless Payments 3-D Secure 2 is an improved version of the old protocol, now allowing frictionless payments where transactions can be completed without input from the cardholder. To increase the chances of a frictionless payment, there are certain fields that should be included in your request. The more information you add, the better. Payer Payer Node Copy json to clipboard 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 { \"payer\": { \"email\": \"olivia.nyhuus@payex.com\", \"msisdn\": \"+4798765432\", \"firstName\": \"Olivia\", \"lastName\": \"Nyhuus\", \"workPhoneNumber\" : \"+4787654321\", \"homePhoneNumber\" : \"+4776543210\", \"shippingAddress\": { \"addressee\": \"Olivia Nyhuus\", \"streetAddress\": \"Saltnestoppen 43\", \"coAddress\": \"\", \"city\": \"Saltnes\", \"zipCode\": \"1642\", \"countryCode\": \"NO\" }, \"billingAddress\": { \"firstName\": \"firstname/companyname\", \"lastName\": \"lastname\", \"email\": \"karl.anderssson@mail.se\", \"msisdn\": \"+46759123456\", \"streetAddress\": \"Helgestavägen 9\", \"coAddress\": \"\", \"city\": \"Solna\", \"zipCode\": \"17674\", \"countryCode\": \"SE\" }, \"accountInfo\": { \"accountAgeIndicator\": \"04\", \"accountChangeIndicator\": \"04\", \"accountPwdChangeIndicator\": \"01\", \"shippingAddressUsageIndicator\": \"01\", \"shippingNameIndicator\": \"01\", \"suspiciousAccountActivity\": \"01\" } }, } Field Type Description   payer object The payer object.   email string Payer’s registered email address.   msisdn string Payer’s registered mobile phone number.   firstname string Payers’s first name. Please note that this is not the addressee or from shippingAddress, as they might not be the same as the payer.   lastname string Payers’s last name. Please note that this is not the addressee or lastName from shippingAddress, as they might not be the same as the payer.   homePhoneNumber string Payer’s registered home phone number.   workPhoneNumber string Payer’s registered work phone number.   shippingAddress object The shipping address object related to the payer.   addressee string The name of the addressee – the receiver of the shipped goods.   coAddress string Payer’ s c/o address, if applicable.   streetAddress string Payer’s street address. Maximum 50 characters long.   zipCode string Payer’s zip code.   city string Payer’s city of residence.   countryCode string Country Code for the country of residence.   billingAddress object The billing address object containing information about the payer’s billing address.   firstName string The payer’s first name.   lastName string The payer’s last name.   ︎ streetAddress string The payer’a street address. Maximum 50 characters long.   coAddress string The payer’s CO-address (if used).   zipCode string The postal number (ZIP code) of the payer.   city string The city of the payer.   countryCode string SE, NO, or FI.   Risk Indicator Risk Indicator Node Copy json to clipboard 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 { \"riskIndicator\": { \"deliveryEmailAddress\": \"olivia.nyhuus@payex.com\", \"deliveryTimeFrameIndicator\": \"01\", \"preOrderDate\": \"19801231\", \"preOrderPurchaseIndicator\": \"01\", \"shipIndicator\": \"01\", \"giftCardPurchase\": false, \"reOrderPurchaseIndicator\": \"01\" \"pickUpAddress\" : { \"name\": \"Company Megashop Sarpsborg\", \"streetAddress\": \"Hundskinnveien 92\", \"coAddress\": \"\", \"city\": \"Sarpsborg\", \"zipCode\": \"1711\", \"countryCode\": \"NO\" } } } Field Type Description riskIndicator object This object consist of information that helps verifying the payer. Providing these fields decreases the likelihood of having to prompt for a 3-D Secure authentication of the payer when they are authenticating the purchase. deliveryEmailAdress string For electronic delivery, the email address to which the merchandise was delivered. deliveryTimeFrameIndicator string Indicates the merchandise delivery timeframe. 01 (Electronic Delivery) 02 (Same day shipping) 03 (Overnight shipping) 04 (Two-day or more shipping). preOrderDate string For a pre-ordered purchase. The expected date that the merchandise will be available. Format: YYYYMMDD. preOrderPurchaseIndicator string Indicates whether the payer is placing an order for merchandise with a future availability or release date. 01 (Merchandise available) 02 (Future availability). shipIndicator string Indicates shipping method chosen for the transaction. 01 (Ship to cardholder’s billing address) 02 (Ship to another verified address on file with merchant)03 (Ship to address that is different than cardholder’s billing address)04 (Ship to Store / Pick-up at local store. Store address shall be populated in the riskIndicator.pickUpAddress and payer.shippingAddress fields)05 (Digital goods, includes online services, electronic giftcards and redemption codes) 06 (Travel and Event tickets, not shipped) 07 (Other, e.g. gaming, digital service). giftCardPurchase bool true if this is a purchase of a gift card. reOrderPurchaseIndicator string Indicates if the cardholder is reordering previously purchased merchandise. 01 (First time ordered) 02 (Reordered). pickUpAddress object If the shipIndicator is set to 04, you can prefill these fields with the payer’s pickUpAddress of the purchase to decrease the risk factor of the purchase. name string If the shipIndicator is set to 04, prefill this with the payer’s name. streetAddress string If the shipIndicator is set to 04, prefill this with the payer’s streetAddress. Maximum 50 characters long. coAddress string If the shipIndicator is set to 04, prefill this with the payer’s coAddress. city string If the shipIndicator is set to 04, prefill this with the payer’s city. zipCode string If the shipIndicator is set to 04, prefill this with the payer’s zipCode. countryCode string If the shipIndicator is set to 04, prefill this with the payer’s countryCode.",
    "tags": "",
    "url": "/checkout-v3/features/customize-payments/frictionless-payments/"
  },{
    "title": "Fuel Functionality",
    "text": "To use Swedbank Pay PAX terminal for handling cards with certain product restrictions, such as fuel cards, only affects the implementation regarding the call to Payment and handling the response. When calling PaymentAsync or the synchronous version Payment the version using a TransactionSetup as parameter must be used in order to pass a list of products for the purchase. If the result has ResponseResult set to failure and the ErrorCondition is PaymentRestriction the list of AllowedProducts will indicate if any product may be purchase with the card. Product List The list of products that is passed in the TransactionSetup consists of one or more SaleItem objects. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 namespace SwpTrmLib.Nexo { public class SaleItem { public enum UnitsOfMeasure { None, Litre, Centilitre, Kilometre, Kilogram, Gram, Metre, Centimetre, Other}; public UnitsOfMeasure UnitOfMeasure { get; set; } = UnitsOfMeasure.None; public string Quantity { get; set; } = string.Empty; public Decimal UnitPrice { get; set; } = Decimal.Zero; public string ProductLabel { get; set; } = string.Empty; public string AdditionalProductInfo { get; set; } = string.Empty; //Attributes public int ItemID { get; set; } = int.MinValue ; //digit strings public string ProductCode { get; set; } = string.Empty; public Decimal ItemAmount { get; set; } = Decimal.Zero; public SaleItem(); public XElement XML(); public override string ToString(); } } Type Name Description   UnitsOfMeasure UnitOfMeasures Litre or Kilogram Mandatory Decimal Quantity   Mandatory string ProductLabel Name of product Optional string AdditionalProductInfo   Optional int ItemID 0-n Mandatory string ProductCode Digits Mandatory Decimal ItemAmount Total product price Mandatory Functions       XElement XML Returns the nexo SaleItem element used internally Start Payment Starting a payment would be done similar to the following: Example creating a list of sale items for a purchase 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 ISwpTrmIf_1 PAX; . . . List&lt;SaleItem&gt; saleItems = new List&lt;SaleItem&gt;(); saleItems.Add(new SaleItem() { ItemID = 0, ItemAmount = (decimal)25.5, ProductCode = \"24601\", UnitOfMeasure = SaleItem.UnitsOfMeasure.Litre, Quantity = \"10\", UnitPrice = (decimal)2.55, ProductLabel = \"Stellar\", AdditionalProductInfo = \"The best there is\" }); saleItems.Add(new SaleItem() { ItemID = 1, ItemAmount = (decimal)29.5, ProductCode = \"2564\", Quantity = \"1\", UnitPrice = (decimal)29.5 }); PaymentRequestResult r = await PAX.Payment(new TransactionSetup(){ Amount = (decimal)55, SaleItems = saleItems }); When Failure If the PaymentRequestResult.ResponseResult is Failure the transaction has failed either for a normal reason or, if ErrorCondition is PaymentRestriction, due to the restriction for the card used. The PaymentRequestResult has a property named AllowedProducts that is a list of product codes from the request that may be purchased using the same card. If the list is empty none of the products can be purchased with the card used. Let’s say the above example failed and the AllowedProducts has one item with value “24601”, then the customer may either change card or just buy that product. A new Payment must be issued with a new list of SaleItem with just that one product and the amount 25.5. This is also typically when you set the flag SplitPayment if the other goods are paid with an other card or cash.",
    "tags": "",
    "url": "/pax-terminal/NET/tutorial/fuel-card-functionality/"
  },{
    "title": "Fuel Functionality",
    "text": "What is Fuel Funtionality Fuel functionality in our PAX terminals is just a matter of supplying SaleItems in a payment request. If any of the SaleItems is not valid for the card used, the payment will fail and the response will contain product codes that are valid for the card. PaymentRequest for fuel Name Lev Attributes Description PaymentRequest 1     SaleData 2 TokenRequestedType This will give a token for the card used. Only value available is Customer which gives a Card Number Alias which is a one way hash computed locally in the terminal. The CNA is the same for a specific card in all SwedbankPay terminals. SaleTransactionID 3 TimeStamp Request timestamp local time with offset from GMT.     TransactionID ID of the transaction set by the POS. This value is sent to the PosPay server, but is unfortunately not forwarded to clearing. PaymentTransaction 2     AmountsReq 3 RequestedAmount The total amount of transaction as a decimal value. Use a ’.’ for decimal point if needed.     Currency As a 3 letter abbrivation - ISO-4217. Available are SEK, NOK, DKK, EUR.     CashBackAmount As whereofvalue. Is included in RequestedAmount. SaleItem 3 ItemId 0-n Required.     ProductCode DigitString 1-12 bytes. Required.     ItemAmount Decimal: Total amount of the SaleItem. Use a ’.’ for decimal point. Required. UnitOfMeasure 4   Only present together with Quantity. Enumeration: Litre or Kilogram. Quantity 4   Decimal: Product quantity. Use a ’.’ for decimal point. UnitPrice 4   Decimal: price per unit. Use a ’.’ for decimal point. Only if Quantity is present. ProductLabel 4   Name of product purchased. AdditionalProductInfo 4   Additional information about the product. PaymentData 2 PaymentType Type of transaction that is requested. Availabel values are Normal, which is a payment and Refund. Example of purchase request for two products 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 &lt;SaleToPOIRequest&gt; &lt;MessageHeader MessageCategory=\"Payment\" MessageClass=\"Service\" MessageType=\"Request\" POIID=\"A-POIID\" ProtocolVersion=\"3.1\" SaleID=\"1\" ServiceID=\"1524253497\"/&gt; &lt;PaymentRequest&gt; &lt;SaleData TokenRequestedType=\"Customer\"&gt; &lt;SaleTransactionID TimeStamp=\"2023-09-08T16:17:32.9834651+02:00\" TransactionID=\"1524253496\"/&gt; &lt;/SaleData&gt; &lt;PaymentTransaction&gt; &lt;AmountsReq CashBackAmount=\"0\" Currency=\"SEK\" RequestedAmount=\"514.90\"/&gt; &lt;SaleItem ItemID=\"0\" ItemAmount=\"446.90\" ProductCode=\"24601\"&gt; &lt;UnitOfMeasure&gt;LITRE&lt;/UnitOfMeasure&gt; &lt;Quantity&gt;20.5&lt;/Quantity&gt; &lt;UnitPrice&gt;21.8&lt;/UnitPrice&gt; &lt;ProductLabel&gt;Diesel&lt;/ProductLabel&gt; &lt;AdditionalProductInfo&gt;1541257424284&lt;/AdditionalProductInfo&gt; &lt;/SaleItem&gt; &lt;SaleItem ItemId=\"1\" ItemAmount=\"68.0\" ProductCode=\"1645\"&gt; &lt;Quantity&gt;1&lt;/Quantity&gt; &lt;UnitPrice&gt;68.0&lt;/UnitPrice&gt; &lt;/SaleItem&gt; &lt;/PaymentTransaction&gt; &lt;PaymentData PaymentType=\"Normal\"/&gt; &lt;/PaymentRequest&gt; &lt;/SaleToPOIRequest&gt; Payment Restrictions In case the card used for the purchase has restrictions and any product is not payable with the card, the payment will fail and the response will contain the product codes for those producs that are allowed to pay for. In such case the Result is Failure and ErrorCondition is PaymentRestriction. The difference from a normal purchase response is in the element CardData within the PaymentResult element. The following example shows the PaymentResult element if the above PaymentRequest failed due to payment restriction on the card for which only product code 24601 is allowed. Example of PaymentResult element if above payment failed with PaymentRestriction 1 2 3 4 5 6 7 8 9 &lt;PaymentResult PaymentType=\"Normal\"&gt; &lt;PaymentInstrumentData PaymentIntrumentType=\"Card\"&gt; &lt;CardData EntryMode=\"ICC\" PaymentBrand=\"02,TheBestFuelCard\" MaskedPAN=\"12345*******2020\" /&gt; &lt;PaymentToken TokenRequested=\"Customer\" TokenValue=\"6FD955C23A48A041D881003CDBF836DC59F89CE0ECA8288129696CDF9BB8B8DD67F233\" /&gt; &lt;AllowedProductCode&gt;24601&lt;/AllowedProductCode&gt; &lt;/CardData&gt; &lt;/PaymentIntrumentData&gt; &lt;/PaymentResult&gt; The response may contain several AllowedProductCode elements. One for each allowed product of those included in the payment request. Example of the complete payment response 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;SaleToPOIResponse&gt; &lt;MessageHeader MessageClass=\"Service\" MessageCategory=\"Payment\" MessageType=\"Response\" ServiceID=\"1524253497\" SaleID=\"1\" POIID=\"A-POIID\"/&gt; &lt;PaymentResponse&gt; &lt;Response ErrorCondition=\"PaymentRestriction\" Result=\"Failure\"&gt; &lt;AdditionalResponse&gt;Some Products not Payable by the TheBestFuelCard&lt;/AdditionalResponse&gt; &lt;/Response&gt; &lt;SaleData&gt; &lt;SaleTransactionID TimeStamp=\"2023-09-08T16:17:32.9834651+02:00\" TransactionID=\"1524253496\"/&gt; &lt;/SaleData&gt; &lt;POIData&gt; &lt;POITransactionID TransactionID=\"8778880185\" TimeStamp=\"2023-09-08T14:17:32.999Z\"/&gt; &lt;/POIData&gt; &lt;PaymentResult PaymentType=\"Normal\"&gt; &lt;PaymentInstrumentData PaymentIntrumentType=\"Card\"&gt; &lt;CardData EntryMode=\"ICC\" PaymentBrand=\"02,TheBestFuelCard\" MaskedPAN=\"12345*******2020\" /&gt; &lt;PaymentToken TokenRequested=\"Customer\" TokenValue=\"6FD955C23A48A041D881003CDBF836DC59F89CE0ECA8288129696CDF9BB8B8DD67F233\" /&gt; &lt;AllowedProductCode&gt;24601&lt;/AllowedProductCode&gt; &lt;/CardData&gt; &lt;/PaymentIntrumentData&gt; &lt;AmountsResp Currency=\"SEK\" AuthorizedAmount=\"56\" CashBackAmount=\"0.00\"/&gt; &lt;PaymentAcquirerData MerchantID=\"10020001\" AcquirerPOIID=\"877888\"&gt; &lt;ApprovalCode&gt;611506&lt;/ApprovalCode&gt; &lt;/PaymentAcquirerData&gt; &lt;/PaymentResult&gt; &lt;PaymentReceipt DocumentQualifier=\"CashierReceipt\"&gt; &lt;OutputContent OutputFormat=\"Text\"&gt; &lt;OutputText&gt;eyJNZXJjaGFudCI6e...Mocked-up-data&lt;/OutputText&gt; &lt;/OutputContent&gt; &lt;/PaymentReceipt&gt; &lt;PaymentReceipt DocumentQualifier=\"CustomerReceipt\"&gt; &lt;OutputContent OutputFormat=\"Text\"&gt; &lt;OutputText&gt;eyJDYXJkaG9sZGVy...Mocked-up-data&lt;/OutputText&gt; &lt;/OutputContent&gt; &lt;/PaymentReceipt&gt; &lt;/PaymentResponse&gt; &lt;/SaleToPOIResponse&gt;",
    "tags": "",
    "url": "/pax-terminal/Nexo-Retailer/fuelfunctionality/"
  },{
    "title": "Fundamental Principles",
    "text": "Foundation The Swedbank Pay API Platform is built using the REST architectural style and the request and responses come in the JSON format. The API has predictable, resource-oriented URLs and use default HTTP features, like HTTP authentication (using OAuth 2), HTTP methods and headers. These techniques are widely used and understood by most HTTP client libraries. Connection and Protocol All requests towards Swedbank Pay API Platform are made with HTTP/1.1 over a secure TLS 1.2 (or higher) connection. Older HTTP clients running on older operating systems and frameworks might receive connection errors when connecting to Swedbank Pay’s APIs. This is most likely due to the connection being made from the client with TLS 1.0 or even SSL, which are all insecure and deprecated. If such is the case, ensure that you are able to connect over a TLS 1.2 connection by reading information regarding your programming languages and environments (Java, PHP Curl, PHP Zend,{:target=”_blank”} Ruby, Python, Node.js Request). You can inspect Swedbank Pay’s TLS and cipher suite support at SSL Labs. Support for HTTP/2 in our APIs is being investigated. Postel’s Robustness Principle We encourage you to keep Postel’s robustness principle in mind. Build your integration in a way that is resilient to change, wherever it may come. Don’t confine yourself to the limits of our current documentation examples. A string looking like a guid must still be handled and stored like a string, not as a guid, as it could be a URL in the future. The day our transactionNumber ticks past 1,000,000, make sure your integration can handle 1,000,001. If some fields, operations or headers can’t be understood, you must be able to ignore them. We have built our requests in a way which allows the payeeInfo field to be placed before metadata, or vice versa if you want. We don’t expect a specific order of elements, so we ask that you shouldn’t either. Headers All requests against the API Platform should have a few common headers: HTTP Request 1 2 3 4 5 6 7 POST /some/resource HTTP/1.1 Content-Type: application/json;version=3.x/2.0 charset=utf-8 // Version optional except for 3.1 Authorization: \"Bearer 123456781234123412341234567890AB\" User-Agent: swedbankpay-sdk-dotnet/3.0.1 Accept: application/problem+json; q=1.0, application/json; q=0.9 Session-Id: 779da454399742248f2942bb064c4707 Forwarded: for=82.115.151.177; host=example.com; proto=https Required Header Description check︎ Content-Type The content type of the body of the HTTP request. Usually set to application/json. check︎ Authorization The OAuth 2 Access Token is generated in the Merchant Portal.   User-Agent The user agent of the HTTP client making the HTTP request. Should be set to identify the system performing requests towards Swedbank Pay. The value submitted here will be returned in the response field initiatingSystemUserAgent. check︎ Accept The content type accepted by the client. Usually set to application/json and application/problem+json so both regular responses as well as errors can be received properly.   Session-Id A trace identifier used to trace calls through the API Platform (ref RFC 7329). Each request must mint a new GUID/UUID. If no Session-Id is provided, Swedbank Pay will generate one for the request.   Forwarded The IP address of the payer as well as the host and protocol of the payer-facing web page. When the header is present, only the for parameter containing the payer’s IP address is required, the other parameters are optional. See RFC 7239 for details. URL Usage The base URLs of the API Platform are: Environment Base URL Test https://api.externalintegration.payex.com/ Production https://api.payex.com/ An important part of REST is its use of hypermedia. Instead of having to perform complex state management and hard coding URLs and the availability of different operations in the client, this task is moved to the server. The client simply follows links and performs operations provided by the API, given the current state of the resource. The server controls the state and lets the client know through hypermedia what’s possible in the current state of the resource. To get an introduction to hypermedia, please watch this 20 minute video. warning Don’t build URLs: It is very important that only the base URLs of Swedbank Pay’s APIs are stored in your system. All other URLs are returned dynamically in the response. Swedbank Pay cannot guarantee that your implementation will remain working if you store any other URLs in your system. When performing requests, please make sure to use the complete URLs that are returned in the response. Do not attempt to parse or build upon the returned data – you should not put any special significance to the information you might glean from an URL. URLs should be treated as opaque identifiers you can use to retrieve the identified resource – nothing more, nothing less. If you don’t follow this advice, your integration most assuredly will break when Swedbank Pay makes updates in the future. Storing URLs link Storing URLs: In general, URLs should be discovered in responses to previous requests, not stored. However, URLs that are used to create new resources can be stored or hard coded. Also, the URL of the generated resource can be stored on your end to GET it at a later point. Note that the URLs should be stored as opaque identifiers and should not be parsed or interpreted in any way. warning Operation URLs: URLs that are returned as part of the operations in each response should not be stored. See the abbreviated example below where psp/creditcard/payments from the POST header is an example of the URL that can be stored, as it is used to create a new resource. Also, the /psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1 URL can be stored in order to retrieve the created payment with an HTTP GET request later. The URLs found within operations such as the href of update-payment-abort, https://api.externalintegration.payex.com/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1 should not be stored. In order to find which operations you can perform on a resource and the URL of the operation to perform, you need to retrieve the resource with an HTTP GET request first and then find the operation in question within the operations field. Request Copy json to clipboard 1 2 3 POST /psp/creditcard/payments HTTP/1.1 Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.x/2.0 // Version optional except for 3.1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 { \"payment\": { \"operation\": \"Purchase\", \"intent\": \"Authorization\", \"currency\": \"SEK\", \"prices\": [{ \"type\": \"CreditCard\", \"amount\": 1500, \"vatAmount\": 0 } ], \"description\": \"Test Purchase\", \"generatePaymentToken\": false, \"generateRecurrenceToken\": false, \"userAgent\": \"Mozilla/5.0...\", \"language\": \"nb-NO\", } } Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x/2.0 api-supported-versions: 3.x/2.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 { \"payment\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"number\": 1234567890, \"instrument\": \"CreditCard\", \"created\": \"2016-09-14T13:21:29.3182115Z\", \"updated\": \"2016-09-14T13:21:57.6627579Z\", \"state\": \"Ready\", \"operation\": \"Purchase\", \"intent\": \"Authorization\", }, \"operations\": [ { \"rel\": \"update-payment-abort\", \"href\": \"https://api.externalintegration.payex.com/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"method\": \"PATCH\", \"contentType\": \"application/json\" }, { \"rel\": \"redirect-authorization\", \"href\": \"https://ecom.externalintegration.payex.com/creditcard/payments/authorize/5a17c24e-d459-4567-bbad-aa0f17a76119\", \"method\": \"GET\", \"contentType\": \"text/html\" }, { \"rel\": \"view-authorization\", \"href\": \"https://ecom.externalintegration.payex.com/creditcard/core/scripts/client/px.creditcard.client.js?token=5a17c24e-d459-4567-bbad-aa0f17a76119\", \"method\": \"GET\", \"contentType\": \"application/javascript\" } ] } Uniform Responses When a POST or PATCH request is performed, the whole target resource representation is returned in the response, as when performing a GET request on the resource URL. This is an economic approach that limits the number of necessary GET requests. Expansion The payment resource contain the ID of related sub-resources in its response properties. These sub-resources can be expanded inline by using the request parameter expand. The Paid resource would for example be expanded by adding ?$expand=paid after the paymentOrderId. This is an effective way to limit the number of necessary calls to the API, as you return several properties related to a Payment resource in a single request. Note that the expand parameter is available to all API requests but only applies to the request response. This means that you can use the expand parameter on a POST or PATCH request to get a response containing the target resource including expanded properties. This example below add the urls and authorizations field inlines to the response, enabling you to access information from these sub-resources. HTTP Request with expansion 1 2 GET /psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1?$expand=urls,authorizations HTTP/1.1 Host: api.externalintegration.payex.com To avoid unnecessary overhead, you should only expand the fields you need info about. Data Types Some datatypes, like currency, dates and amounts, are managed in a coherent manner across the entire API Platform. Currency All currencies are expressed according to the ISO 4217 standard, e.g SEK, EUR, NOK. Dates All dates are expressed according to the ISO 8601 standard that combine dates, time and timezone data into a string, e.g. 2018-09-14T13:21:57.6627579Z. Locale When defining locale, we use the combination of language and country codes. Our payment menu UI is currently limited to nb-NO, sv-SE, da-DK fi-FI and en-US. Monetary Amounts All monetary amounts are entered in the lowest momentary units of the selected currency. The amount of SEK and NOK are in ören/ører, and EUR is in cents. Another way to put it is that the code amount is expressed as if the true amount is multiplied by 100. True amount Code amount NOK 100.00 10000 SEK 50.00 5000 € 10.00 1000",
    "tags": "",
    "url": "/checkout-v3/get-started/fundamental-principles/"
  },{
    "title": "Advanced loyalty",
    "text": "The possibility to read one or more cards before the payment is actually made, makes it possible to know the customer and give a discount on the sale being made. With the possibility comes just a little bit more complexity and logic around messages. warning Heads up!: To use this feature the POS side needs to implement a server. Print request might be generated when aborting. Easy flow reading card before payment request sequenceDiagram participant POS participant Terminal POS-&gt;&gt;Terminal: EnableService Request StartTransaction Terminal-&gt;&gt;POS: EnableService Response success activate Terminal loop open all readers for card read POS-&gt;&gt;Terminal: CardAcquisition Request Terminal-&gt;&gt;POS: CardAcquisition Response Note left of Terminal: Response contains&lt;br/&gt;CNA,&lt;br/&gt;Masked PAN,&lt;br/&gt;Card type,&lt;br/&gt;Card product name Note left of Terminal: Terminal shows \"please wait\" end POS-&gt;&gt;Terminal: Payment Request deactivate Terminal Note right of POS: Normal procedure for payment request.&lt;br/&gt;Last payment card read is used The messages EnableService and CardAcquisition are key to this feature, but when aborting in different situations different messages are used depending on state. A CardAcquisition is aborted using an AbortRequest but the enabled service is aborted using the EnableServiceRequest AbortTransaction. Abort while waiting for a card sequenceDiagram participant POS participant Terminal POS-&gt;&gt;Terminal: EnableService Request StartTransaction Terminal-&gt;&gt;POS: EnableService Response success activate Terminal POS-&gt;&gt;Terminal: CardAcquisition Request POS-&gt;&gt;Terminal: AbortRequest Terminal--&gt;&gt;POS: Http response 204 deactivate Terminal Terminal-&gt;&gt;POS: CardAcquisition Response Note left of Terminal: Terminal shows transaction aborted Note left of Terminal: Terminal goes to idle state The enabled service Transaction state lasts from the EnableService response until it is aborted or a PaymentRequest is sent. During that state several cardacquisitions may be issued, but if abort is desired after a card acquisition response there is no ongoing request and the state is terminated by the EnableServiceRequest AbortTransaction Abort sequence after card has been read sequenceDiagram participant POS participant Terminal POS-&gt;&gt;Terminal: EnableService Request StartTransaction Terminal-&gt;&gt;POS: EnableService Response success activate Terminal POS-&gt;&gt;Terminal: CardAcquisition Request Terminal-&gt;&gt;POS: CardAcquisition Response POS-&gt;&gt;Terminal: EnableServiceRequest AbortTransaction Terminal-&gt;&gt;POS: EnableServiceResponse success deactivate Terminal alt payment card was read Note left of Terminal: Terminal shows transaction aborted Terminal-&gt;&gt;POS: PrintRequest with receipt information end Note left of Terminal: Terminal goes to idle state EnableService Request 1 2 3 4 5 6 &lt;SaleToPOIRequest&gt; &lt;MessageHeader ProtocolVersion=\"3.1\" MessageClass=\"Service\" MessageCategory=\"EnableService\" MessageType=\"Request\" ServiceID=\"3\" SaleID=\"1\" POIID=\"A-POIID\" /&gt; &lt;EnableServiceRequest TransactionAction=\"StartTransaction\"&gt; &lt;ServicesEnabled&gt;CardAcquisition&lt;/ServicesEnabled&gt; &lt;/EnableServiceRequest&gt; &lt;/SaleToPOIRequest&gt; Name Lev Attribute Description EnableServiceRequest 1 TransactionAction StartTransaction or AbortTransaction. ServiceEnabled 2   Only value used is CardAcquisition. Response 1 2 3 4 5 6 &lt;SaleToPOIResponse&gt; &lt;MessageHeader MessageClass=\"Service\" MessageCategory=\"EnableService\" MessageType=\"Response\" ServiceID=\"3\" SaleID=\"1\" POIID=\"A-POIID\" /&gt; &lt;EnableServiceResponse&gt; &lt;Response Result=\"Success\" /&gt; &lt;/EnableServiceResponse&gt; &lt;/SaleToPOIResponse&gt; Next request following a successful EnableServiceResponse for TransactionAction StartTransaction, is CardAcquisition or EnableService with TransactionAction AbortTransaction. CardAcquisition Request 1 2 3 4 5 6 7 8 9 &lt;SaleToPOIRequest&gt; &lt;MessageHeader ProtocolVersion=\"3.1\" MessageClass=\"Service\" MessageCategory=\"CardAcquisition\" MessageType=\"Request\" ServiceID=\"4\" SaleID=\"1\" POIID=\"A-POIID\"/&gt; &lt;CardAcquisitionRequest&gt; &lt;SaleData TokenRequestedType=\"Customer\"&gt; &lt;SaleTransactionID TransactionID=\"1212203\" TimeStamp=\"2023-10-18T12:12:20+02:00\"/&gt; &lt;/SaleData&gt; &lt;CardAcquisitionTransaction PaymentType=\"Normal\" TotalAmount=\"0\"/&gt; &lt;/CardAcquisitionRequest&gt; &lt;/SaleToPOIRequest&gt; Name Lev Attribute Description CardAcquisitionRequest 1     SaleData 2 TokenRequestedType Customer only value available and will generate a CNA. SaleTransactionID 3 TransactionID ID of transaction provided by the sale system and may be seen in PosPay reports. Information will not be past to clearing and is not seen in Merchant Portal.     TimeStamp Request timestamp local time with offset from GMT. CardAcquisitionTransaction 2 PaymentType Normal-purchase or Refund.     TotalAmount Normally set to zero. A value may affect behavior for a contactless card. Response 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 &lt;SaleToPOIResponse&gt; &lt;MessageHeader MessageClass=\"Service\" MessageCategory=\"CardAcquisition\" MessageType=\"Response\" ServiceID=\"4\" SaleID=\"1\" POIID=\"A-POIID\"/&gt; &lt;CardAcquisitionResponse&gt; &lt;Response Result=\"Success\"/&gt; &lt;SaleData&gt; &lt;SaleTransactionID TransactionID=\"1212203\" TimeStamp=\"2023-10-18T12:12:20+02:00\"/&gt; &lt;/SaleData&gt; &lt;POIData&gt; &lt;POITransactionID TransactionID=\"8778880092\" TimeStamp=\"2023-10-18T10:12:26.625Z\"/&gt; &lt;/POIData&gt; &lt;PaymentInstrumentData PaymentInstrumentType=\"Card\"&gt; &lt;CardData PaymentBrand=\"01,Mastercard Debit\" MaskedPAN=\"516815******9659\" EntryMode=\"Contactless\"&gt; &lt;PaymentToken TokenRequestedType=\"Customer\" TokenValue=\"6FD955C23A48A041D881003CDBF836DC59F89CE0ECA8288129696CDF9BB8B8DD67F233\"/&gt; &lt;/CardData&gt; &lt;/PaymentInstrumentData&gt; &lt;LoyaltyAccount LoyaltyBrand=\"01,Mastercard Debit\"&gt; &lt;LoyaltyAccountID EntryMode=\"Contactless\" IdentificationType=\"ISOTrack2\" IdentificationSupport=\"LoyaltyCard\"/&gt; &lt;/LoyaltyAccount&gt; &lt;/CardAcquisitionResponse&gt; &lt;/SaleToPOIResponse&gt; Name Lev Attribute Description CardAcquisitionResponse 1     Response 2 Result Success or Failure. SaleData 2   Echoed from request. POIData 2     POITransactionID 3 TransactionID ID of transaction set by the terminal. This is seen in PosPay reports as well as on Merchant Portal. The complete element is needed if the transaction needs to be reversed.     TimeStamp Timestamp set by terminal when the transaction is started. Note that the format is UTC. PaymentInstrumentData 2 PaymentInstrumentType Values: Card for any transaction made by the terminal with a card or any consumer device. Mobile for an alternative payment instrument made via the terminal. CardData 3 PaymentBrand Comma separated string where the first part is card type. 01-payment card. 02-Combined payment and Loyalty, 03-Loyalty, 04-Neither. May be used instead of 03 for controlling the dialog in the terminal. Second part is the product name.     MaskedPAN       EntryMode ICC, Contactless, Magstripe. PaymentToken 4 TokenRequestedType Customer.     TokenValue An irreversible 70 byte hash computed locally in the terminal. A specific card will get the same CNA in all SwedbankPay PAX terminals. LoyaltyAccount 2   Should only be present for card type 03. Proceed after card read Following a successful CardAcquisitionResponse the terminal will show “Please wait” and any of the messages EnableServiceRequest AbortTransaction, CardAcquisitionRequest, PaymentRequest, DisplayRequest or InputRequest is feasible. If the amount is still not available a DisplayRequest with text set to continue_processing will exit the enabled service state and let the terminal proceed with PIN dialog if appropriate. Proceed with PIN dialog if appropriate sequenceDiagram participant POS participant Terminal POS-&gt;&gt;Terminal: CardAcquisitionRequest Terminal-&gt;&gt;POS: CardAcquisitionResponse Success Note left of Terminal: Terminal shows \"Please wait\" POS-&gt;&gt;Terminal: DisplayRequest \"continue_processing\" alt Contactless Note left of Terminal: Terminal shows \"Awaiting amount\" else Chip inserted Note left of Terminal: Terminal shows \"Enter PIN\" end",
    "tags": "",
    "url": "/pax-terminal/Nexo-Retailer/get-card-ahead/"
  },{
    "title": "GetLastTransactionResult",
    "text": "Signatures void GetLastTransactionResult() Task&lt;TransactionStatusResult&gt; GetLastTransactionResultAsync() Description Requests a copy of the result for the last transaction, which is useful if the original result has been lost for some reason. Returns A TransactionStatusResult 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 public class TransactionStatusResult : PaymentRequestResult { public TransactionStatusResult(); public TransactionResults TransactionResult { get; } public override string ResponseContent { get; set; } public enum TransactionResults { PaymentApproved = 0, RefundApporved = 1, PaymentRejected = 2, RefundRejected = 3, ReversalMade = 4, ReversalRejected = 5 } } 1 2 3 4 5 6 7 8 9 10 11 public class PaymentRequestResult : NexoRequestResult { public JObject CustomerReceiptData { get; set; } public JObject MerchantReceiptData { get; set; } public string FormattedReceipt { get; set; } public string ReceiptBlob { get; set; } public JObject SettlementData { get; set; } public XElement OriginalTransaction { get; set; } public string UICulture { get; set; } public override string ResponseContent { get; set; } }",
    "tags": "",
    "url": "/pax-terminal/NET/SwpTrmLib/Methods/essential/getlasttransactionresult/"
  },{
    "title": "Get Payment Instrument",
    "text": "Method Signatures Synchronous void GetPaymentInstrument(Nexo.PaymentTypes type= Nexo.PaymentTypes.Normal) void GetPaymentInstrument(TransactionSetup setup) Asynchronous async Task&lt;GetPaymentInstrumentResult&gt; GetPaymentInstrumentAsync(Nexo.PaymentTypes type= Nexo.PaymentTypes.Normal) async Task&lt;GetPaymentInstrumentResult&gt; GetPaymentInstrumentAsync(TransactionSetup setup) Description Use GetPaymentInstrumentAsync to read a card before the amount is known. The call starts a payment transaction, and the card read will be held by the terminal until PaymentAsync or RefundAsync is called. When you have the response, a new card may be read. The last payment card read is the one that gets charged. Parameters type - Nexo.PaymentTypes.Normal or Nexo.PaymentTypes.Refund or setup - TransactionSetup. Use this to set a transacion id to track the transaction. Returns 1 2 3 4 5 6 7 8 9 10 11 public class GetPaymentInstrumentResult { public NexoResponseResult Result { get; set; } public string ErrorCondition { get; set; } public string Text { get; set; } public CardTypes Type { get; set; } public string Brand { get; set; } public string PAN { get; set; } public string CNA { get; set; } } Example of usage CardTypes 1 public enum CardTypes { Payment=1, Combined=2,Loyalty=3,Unspecified=4 }; Example nexo response The actual nexo message response looks as follows. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 &lt;SaleToPOIResponse&gt; &lt;MessageHeader MessageClass=\"Service\" MessageCategory=\"CardAcquisition\" MessageType=\"Response\" ServiceID=\"2010\" SaleID=\"2\" POIID=\"A-TEST-POIID\"/&gt; &lt;CardAcquisitionResponse&gt; &lt;Response Result=\"Success\"/&gt; &lt;SaleData&gt; &lt;SaleTransactionID TransactionID=\"28151231\" TimeStamp=\"2023-03-20T09:01:56+01:00\"/&gt; &lt;/SaleData&gt; &lt;POIData&gt; &lt;POITransactionID TransactionID=\"024195\" TimeStamp=\"2023-03-20T08:01:56.357Z\"/&gt; &lt;/POIData&gt; &lt;PaymentInstrumentData PaymentInstrumentType=\"Card\"&gt; &lt;CardData PaymentBrand=\"01,Visa\" MaskedPAN=\"453903******8373\" EntryMode=\"Contactless\"&gt; &lt;AllowedProduct ProductCode=\"1\"&gt; &lt;ProductLabel&gt;card:cashback&lt;/ProductLabel&gt; &lt;AdditionalProductInfo&gt;maxAmount:100000&lt;/AdditionalProductInfo&gt; &lt;/AllowedProduct&gt; &lt;PaymentToken TokenRequestedType=\"Customer\" TokenValue=\"E2648A1822580C93B79BDE7B22A134E85415F94DD6AF2325E1735E0722FDCB3BF8EA20\"/&gt; &lt;/CardData&gt; &lt;/PaymentInstrumentData&gt; &lt;/CardAcquisitionResponse&gt; &lt;/SaleToPOIResponse&gt;",
    "tags": "",
    "url": "/pax-terminal/NET/SwpTrmLib/Methods/handy/getpaymentinstrumentasync/"
  },{
    "title": "Good Commit Practice",
    "text": "The following document is a fork of OpenStack’s Git Commit Good Practice, rewritten to suit Swedbank Pay needs. It is based on experience doing code development, bug troubleshooting and code review across a number of projects using Git. Examination of other open source projects suggested they all follow a fairly common practice. It is motivated by a desire to improve the quality of the Git history in any repository. Quality is a hard term to define in computing; one person’s “Thing of Beauty” is another’s “Evil Hack”. We can, however, come up with some general guidelines for what to do, or conversely what not to do, when publishing Git commits for merge with a project. This topic can be split into two areas of concern: The structured set/split of the code changes The information provided in the commit message Executive Summary The points and examples that will be raised in this document ought to clearly demonstrate the value in splitting up changes into a sequence of individual commits, and the importance in writing good commit messages to go along with them. If these guidelines were widely applied it would result in a significant improvement in the quality of the Git history. Both a carrot and a stick will be required to effect changes. This document intends to be the carrot by alerting people to the benefits, while for anyone doing code reviews, it can act as the stick. In other words, when reviewing a change, do not simply look at the correctness of the code. Review the commit message itself and request improvements to its content. Look out for commits which are mixing multiple logical changes and require the submitter to split them into separate commits. Ensure space changes are not mixed in with functional changes. Ensure no-op code refactoring is done separately from functional changes. And so on. Software source code is “read mostly, write occasionally” and thus the most important criteria is to improve the long term maintainability by the large pool of developers in the community, and not to sacrifice too much for the sake of the single author who may never touch the code again. And now the long detailed guidelines and examples of good and bad practice. Structural split of changes The cardinal rule for creating good commits is to ensure there is only one “logical change” per commit. There are many reasons why this is an important rule: The smaller the amount of code being changed, the quicker and easier it is to review and identify potential flaws. If a change is found to be flawed later, it may be necessary to revert the broken commit. This is much easier to do if there are not other unrelated code changes entangled with the original commit. When troubleshooting problems using Git’s bisect capability, small well defined changes will aid in isolating exactly where the code problem was introduced. When browsing history using Git annotate/blame, small well defined changes also aid in isolating exactly where &amp; why a piece of code came from. Things to avoid when creating commits With that in mind, there are some commonly encountered examples of bad things to avoid: Mixing formatting changes with functional code changes The formatting (code style, space, etc.) changes will obscure the important functional changes, making it harder for a reviewer to correctly determine whether the change is correct. Solution: Create 2 commits, one with the formatting changes and one with the functional changes. Typically the formatting change would be done first, but that need not be a hard rule. Mixing two unrelated functional changes Again the reviewer will find it harder to identify flaws if two unrelated changes are mixed together. If it becomes necessary to later revert a broken commit, the two unrelated changes will need to be untangled, with further risk of bug creation. Sending large new features in a single giant commit It may well be the case that the code for a new feature is only useful when all of it is present. This does not, however, imply that the entire feature should be provided in a single commit. To group related code changes that for the reasons explained here are split up into several separate commits, intuitively named branches should be used instead. New features often entail refactoring existing code. It is highly desirable that any refactoring is done in commits which are separate from those implementing the new feature. This helps reviewers and test suites validate that the refactoring has no unintentional functional changes. Even the newly written code can often be split up into multiple pieces that can be independently reviewed. For example, changes which add new internal APIs/classes, can be in self-contained commits. Again this leads to easier code review. It also allows other developers to cherry-pick small parts of the work, if the entire new feature is not immediately ready for merge. Addition of new public HTTP APIs or RPC interfaces should be done in commits separate from the actual internal implementation. This will encourage the author &amp; reviewers to think about the generic API/RPC design, and not simply pick a design that is easier for their currently chosen internal implementation. If patch impacts a public HTTP, use the APIImpact flag (see including external references). The basic rule to follow is: If a code change can be split into a sequence of patches/commits, then it should be split. Less is not more. More is more. Examples of bad practice Now for some illustrations from Nova history. NB, although commit hashes are quoted for reference, author names are removed, since no single person needs to be blamed/picked on. Almost everybody is guilty of violating these good practice rules at some time or another. In addition the people who reviewed and approved these commits are just as guilty as the person who wrote/submitted them. Example 1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 commit ae878fc8b9761d099a4145617e4a48cbeb390623 Author: [removed] Date: Fri Jun 1 01:44:02 2012 +0000 Refactor libvirt create calls * minimizes duplicated code for create * makes wait_for_destroy happen on shutdown instead of undefine * allows for destruction of an instance while leaving the domain * uses reset for hard reboot instead of create/destroy * makes resume_host_state use new methods instead of hard_reboot * makes rescue/unrescue not use hard reboot to recreate domain Change-Id: I2072f93ad6c889d534b04009671147af653048e7 There are at least two independent changes made in this commit. The switch to use the new reset API for the hard_reboot method. The adjustment to internal driver methods to not use hard_reboot. What is the problem with this? First there is no compelling reason why these changes needed to be made at the same time. A first commit could have included the changes to stop calling hard_reboot in various places. A second commit could have re-written the hard_reboot impl. Second, as the switch to using the libvirt ##reset## method was buried in the large code refactoring, reviewers missed the fact that this was introducing a dependency on a newer libvirt API version. This commit was identified as the culprit reasonably quickly, but a trivial revert is not possible, due to the wide variety of unrelated changes included. Example 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 commit e0540dfed1c1276106105aea8d5765356961ef3d Author: [removed] Date: Wed May 16 15:17:53 2012 +0400 blueprint lvm-disk-images Add ability to use LVM volumes for VM disks. Implements LVM disks support for libvirt driver. VM disks will be stored on LVM volumes in volume group specified by `libvirt_images_volume_group` option. Another option `libvirt_local_images_type` specify which storage type will be used. Supported values are `raw`, `lvm`, `qcow2`, `default`. If `libvirt_local_images_type` = `default`, usual logic with `use_cow_images` flag is used. Boolean option `libvirt_sparse_logical_volumes` controls which type of logical volumes will be created (sparsed with virtualsize or usual logical volumes with full space allocation). Default value for this option is `False`. Commit introduce three classes: `Raw`, `Qcow2` and `Lvm`. They contain image creation logic, that was stored in `LibvirtConnection._cache_image` and `libvirt_info` methods, that produce right `LibvirtGuestConfigDisk` configurations for libvirt. `Backend` class choose which image type to use. Change-Id: I0d01cb7d2fd67de2565b8d45d34f7846ad4112c2 This is introducing one major new feature, so on the surface it seems reasonable to use a single commit, but looking at the patch, it clearly has entangled a significant amount of code refactoring with the new LVM feature code. This makes it hard to identify likely regressions in support for QCow2/Raw images. This should have been split into at least four separate commits: Replace the use_cow_images config FLAG with the new FLAG libvirt_local_images_type, with back-compat code for support of legacy use_cow_images FLAG 2. Creation of internal “Image” class and subclasses for Raw &amp; QCow2 image type impls. Refactor libvirt driver to replace raw/qcow2 image management code, with calls to the new Image class APIs. Introduce the new “LVM” Image class implementation. Examples of good practice Example 1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 commit 3114a97ba188895daff4a3d337b2c73855d4632d Author: [removed] Date: Mon Jun 11 17:16:10 2012 +0100 Update default policies for KVM guest PIT &amp; RTC timers commit 573ada525b8a7384398a8d7d5f094f343555df56 Author: [removed] Date: Tue May 1 17:09:32 2012 +0100 Add support for configuring libvirt VM clock and timers ```http Together these two changes provide support for configuring the KVM guest timers. The introduction of the new APIs for creating libvirt XML configuration have been clearly separated from the change to the KVM guest creation policy, which uses the new APIs. {:.code-view-header} **Example 2** ```http commit 62bea64940cf629829e2945255cc34903f310115 Author: [removed] Date: Fri Jun 1 14:49:42 2012 -0400 Add a comment to rpc.queue_get_for(). Change-Id: Ifa7d648e9b33ad2416236dc6966527c257baaf88 commit cf2b87347cd801112f89552a78efabb92a63bac6 Author: [removed] Date: Wed May 30 14:57:03 2012 -0400 Add shared_storage_test methods to compute rpcapi. ...snip... Add get_instance_disk_info to the compute rpcapi. ...snip... Add remove_volume_connection to the compute rpcapi. ...snip... Add compare_cpu to the compute rpcapi. ...snip... Add get_console_topic() to the compute rpcapi. ...snip... Add refresh_provider_fw_rules() to compute rpcapi. ...many more commits... This sequence of commits refactored the entire RPC API layer inside nova to allow pluggable messaging implementations. With such a major change in a core piece of functionality, splitting up the work into a large sequence of commits was key to be able to do meaningful code review, and track / identify possible regressions at each step of the process. Information in commit messages As important as the content of the change, is the content of the commit message describing it. When writing a commit message there are some important things to remember: Do not assume the reviewer understands what the original problem was When reading bug reports, after a number of back &amp; forth comments, it is often as clear as mud, what the root cause problem is. The commit message should have a clear statement as to what the original problem is. The bug is merely interesting historical background on how the problem was identified. It should be possible to review a proposed patch for correctness without needing to read the bug ticket. Do not assume the reviewer has access to external web services/site In 6 months time when someone is on a train/plane/coach/beach/pub troubleshooting a problem &amp; browsing Git history, there is no guarantee they will have access to the online bug tracker, or online blueprint documents. The great step forward with distributed SCM is that you no longer need to be “online” to have access to all information about the code repository. The commit message should be totally self-contained, to maintain that benefit. Do not assume the code is self-evident/self-documenting What is self-evident to one person, might be clear as mud to another person. Always document what the original problem was and how it is being fixed, for any change except the most obvious typos, or space only commits. Describe why a change is being made A common mistake is to just document how the code has been written, without describing why the developer chose to do it that way. By all means describe the overall code structure, particularly for large changes, but more importantly describe the intent/motivation behind the changes. Read the commit message to see if it hints at improved code structure Often when describing a large commit message, it becomes obvious that a commit should have in fact been split into 2 or more parts. Don’t be afraid to go back and rebase the change to split it up into separate commits. Ensure sufficient information to decide whether to review When Gerrit sends out email alerts for new patch submissions there is minimal information included, principally the commit message and the list of files changes. Given the high volume of patches, it is not reasonable to expect all reviewers to examine the patches in detail. The commit message must thus contain sufficient information to alert the potential reviewers to the fact that this is a patch they need to look at. The first commit line is the most important In Git commits the first line of the commit message has special significance. It is used as email subject line, git annotate messages, gitk viewer annotations, merge commit messages and many more places where space is at a premium. As well as summarizing the change itself, it should take care to detail what part of the code is affected. eg if it affects the libvirt driver, mention ‘libvirt’ somewhere in the first line. Describe any limitations of the current code If the code being changed still has future scope for improvements, or any known limitations then mention these in the commit message. This demonstrates to the reviewer that the broader picture has been considered and what tradeoffs have been done in terms of short term goals vs. long term wishes. Do not include patch set-specific comments In other words, if you rebase your change please don’t add “Patch set 2: rebased” to your commit message. That isn’t going to be relevant once your change has merged. Please do make a note of that in Gerrit as a comment on your change, however. It helps reviewers know what changed between patch sets. This also applies to comments such as “Added unit tests”, “Fixed localization problems”, or any other such patch set to patch set changes that don’t affect the overall intent of your commit. The main rule to follow is: The commit message must contain all the information required to fully understand &amp; review the patch for correctness. Less is not more. More is more. Including external references The commit message is primarily targeted towards human interpretation, but there is always some metadata provided for machine use. For source code hosted on GitHub, a reference to an issue can be made by simply writing #&lt;issue-number&gt;. All machine targeted metadata is of secondary consequence to humans and thus it should preferably be grouped together at the end of the commit message. For simple references like GitHub issues, this is not required. Note: Although it is common practice across many open source projects using Git to include a Signed-off-by tag (generated by ‘git commit -s’), this is not required. Prior to gaining the ability to submit code, it should rather be required that all contributors sign a CLA, which serves an equivalent purpose. We encourage the use of Co-Authored-By: name &lt;name@example.com&gt; in commit messages to indicate people who worked on a particular patch. It’s a convention for recognizing multiple authors, and our projects would encourage the stats tools to observe it when collecting statistics. Summary of Git commit message structure Provide a brief description of the change in the first line. Insert a single blank line after the first line. Provide a detailed description of the change in the following lines, breaking paragraphs where needed. The first line should be limited to 50 characters and should not end with a period. Subsequent lines should be wrapped at 72 characters. vim (the default $EDITOR on most distros) can wrap automatically lines for you. In most cases you just need to copy the example vimrc file (which can be found somewhere like /usr/share/vim/vim74/vimrc_example.vim) to /.vimrc if you don’t have one already. After editing a paragraph, you can re-wrap it by pressing escape, ensuring the cursor is within the paragraph and typing gqip. Put external references at the very end of the commit message. For example: 1 2 3 4 5 6 7 8 9 10 11 12 Switch libvirt get_cpu_info method over to use config APIs The get_cpu_info method in the libvirt driver currently uses XPath queries to extract information from the capabilities XML document. Switch this over to use the new config class LibvirtConfigCaps. Also provide a test case to validate the data being returned. DocImpact Closes-Bug: #1003373 Implements: blueprint libvirt-xml-cpu-model Change-Id: I4946a16d27f712ae2adf8441ce78e6c0bb0bb657 Some examples of bad practice Now for some illustrations from Nova history, again with authors names removed since no one person is to blame for these. Example 1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 commit 468e64d019f51d364afb30b0eed2ad09483e0b98 Author: [removed] Date: Mon Jun 18 16:07:37 2012 -0400 Fix missing import in compute/utils.py Fixes bug 1014829 Problem: this does not mention what imports where missing and why they were needed. This info was actually in the bug tracker, and should have been copied into the commit message, so that it would provide a self-contained description. e.g.: Add missing import of 'exception' in compute/utils.py nova/compute/utils.py makes a reference to exception.NotFound, however exception has not been imported. Example 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 commit 2020fba6731634319a0d541168fbf45138825357 Author: [removed] Date: Fri Jun 15 11:12:45 2012 -0600 Present correct ec2id format for volumes and snaps Fixes bug 1013765 * Add template argument to ec2utils.id_to_ec2_id() calls Change-Id: I5e574f8e60d091ef8862ad814e2c8ab993daa366 Problem: this does not mention what the current (broken) format is, nor what the new fixed format is. Again this info was available in the bug tracker and should have been included in the commit message. Furthermore, this bug was fixing a regression caused by an earlier change, but there is no mention of what the earlier change was. e.g.: Present correct ec2id format for volumes and snaps During the volume uuid migration, done by changeset XXXXXXX, ec2 id formats for volumes and snapshots was dropped and is now using the default instance format (i-xxxxx). These need to be changed back to vol-xxx and snap-xxxx. Adds a template argument to ec2utils.id_to_ec2_id() calls Fixes bug 1013765 Example 3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 commit f28731c1941e57b776b519783b0337e52e1484ab Author: [removed] Date: Wed Jun 13 10:11:04 2012 -0400 Add libvirt min version check. Fixes LP Bug #1012689. Change-Id: I91c0b7c41804b2b25026cbe672b9210c305dc29b Problem: This commit message is merely documenting what was done, and not why it was done. It should have mentioned what earlier changeset introduced the new min libvirt version. It should also have mentioned what behavior is when the check fails. e.g.: Add libvirt version check, min 0.9.7 The commit XXXXXXXX introduced use of the 'reset' API which is only available in libvirt 0.9.7 or newer. Add a check performed at startup of the compute server against the libvirt connection version. If the version check fails the compute service will shutdown. Fixes LP Bug #1012689. Change-Id: I91c0b7c41804b2b25026cbe672b9210c305dc29b Examples of good practice Example 1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 commit 3114a97ba188895daff4a3d337b2c73855d4632d Author: [removed] Date: Mon Jun 11 17:16:10 2012 +0100 Update default policies for KVM guest PIT &amp; RTC timers The default policies for the KVM guest PIT and RTC timers are not very good at maintaining reliable time in guest operating systems. In particular Windows 7 guests will often crash with the default KVM timer policies, and old Linux guests will have very bad time drift Set the PIT such that missed ticks are injected at the normal rate, ie they are delayed Set the RTC such that missed ticks are injected at a higher rate to \"catch up\" This corresponds to the following libvirt XML &lt;clock offset='utc'&gt; &lt;timer name='pit' tickpolicy='delay'/&gt; &lt;timer name='rtc' tickpolicy='catchup'/&gt; &lt;/clock&gt; And the following KVM options -no-kvm-pit-reinjection -rtc base=utc,driftfix=slew This should provide a default configuration that works acceptably for most OS types. In the future this will likely need to be made configurable per-guest OS type. Closes-Bug: #1011848 Change-Id: Iafb0e2192b5f3c05b6395ffdfa14f86a98ce3d1f Some things to note about this example commit message It describes what the original problem is (bad KVM defaults) It describes the functional change being made (the new PIT/RTC policies) It describes what the result of the change is (new the XML/QEMU args) It describes scope for future improvement (the possible per-OS type config) It uses the Closes-Bug notation Example 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 commit 31336b35b4604f70150d0073d77dbf63b9bf7598 Author: [removed] Date: Wed Jun 6 22:45:25 2012 -0400 Add CPU arch filter scheduler support In a mixed environment of running different CPU architecutres, one would not want to run an ARM instance on a X86_64 host and vice versa. This scheduler filter option will prevent instances running on a host that it is not intended for. The libvirt driver queries the guest capabilities of the host and stores the guest arches in the permitted_instances_types list in the cpu_info dict of the host. The Xen equivalent will be done later in another commit. The arch filter will compare the instance arch against the permitted_instances_types of a host and filter out invalid hosts. Also adds ARM as a valid arch to the filter. The ArchFilter is not turned on by default. Change-Id: I17bd103f00c25d6006a421252c9c8dcfd2d2c49b Some things to note about this example commit message It describes what the problem scenario is (mixed arch deployments) It describes the intent of the fix (make the schedular filter on arch) It describes the rough architecture of the fix (how libvirt returns arch) It notes the limitations of the fix (work needed on Xen)",
    "tags": "",
    "url": "/checkout-v3/modules-sdks/development-guidelines/good-commit-practice/"
  },{
    "title": "Google Pay™",
    "text": "info Google Pay™ in apps: We do not currently support launching Google Pay™ within an in-app solution. If you want to implement Google Pay™ in your web-view application, you will need to open it in a browser and open the Checkout from there. Pay Smarter with Google Pay&trade;! Simplify your checkout experience with Google Pay&trade; — the fast, secure, and hassle-free way to pay online, in-store and in apps. Fast Transactions: Tap, click, or swipe—pay in seconds. Secure Payments: Advanced encryption keeps your card details safe. Seamless Convenience: Save cards, loyalty programs and tickets all in one place. Widely Accepted: Use it anywhere Google Pay is supported.. Merchant ID You need to sign up for a Google Developer Account and create a business profile and payment profile. After creating the business profile, you will be able to see your Merchant ID on the top right corner of the page. We need that ID in order to activate Google Pay for you. However, be sure to register your domain/package and submit screenshots of your integration for approval. Login to Google Pay™ &amp; Wallet Console, go to the Google Pay™ API tab and upload the screenshots and submit your integration for approval. The screenshots should be of the entire buyflow process (ex: add to cart, checkout, payment, confirmation - if available). Your Merchant ID will only work in production environment once Google complete their review and approve your submitted integration. Unless you have provided us with your Merchant ID as part of signing your agreement with Swedbank Pay, you can e-mail us it at agreement@swedbankpay.com together with Name, Organizational and Customer number. Implementation Paths Which Google Pay™ documentation and guidelines should you use if you are an android merchant? Google Pay Android Developer Documentation, Google Pay Android Integration Checklist and the Google Pay Android Brand Guidelines. Which Google Pay™ documentation and guidelines should you use if you are a web merchant? Google Pay Web Developer Documentation, Google Pay Web Integration Checklist and the Google Pay Web Brand Guidelines.{:target=”_blank”} Do you as a merchant need to take additional steps with regards to the Google Pay™ payment button or other hosted components to your website? No additional steps are required. Contact Customer Operations after signing up with Google with your Merchant ID to setup your contract. Once set up, the option to pay with Google Pay™ should appear in your implementation, as long as your payer’s device supports Google Pay™. Please remember that you do must adhere to Google Pay™ API’s Acceptable Use Policy and accept the terms defined in the Google Pay™ API’s Terms of Service. If our SDK generates an IsReadyToPayRequest or a PaymentDataRequest on behalf of you as a merchant, do you need to take additional steps before the Google Pay™ functionality is available? No additional steps are required. Contact Customer Operations after signing up with Google with your Merchant ID to setup your contract. Once set up, the option to pay with Google Pay™ should appear in your implementation, as long as your payer’s device supports Google Pay™. Please remember that you do must adhere to Google Pay™ API’s Acceptable Use Policy and accept the terms defined in the Google Pay™ API’s Terms of Service. Implementation Details Do Swedbank Pay support 3-D Secure, and will merchants have to enable it for PAN_ONLY credentials themselves? 3DS is enabled by default. Merchants will not handle any payment details or sensitive data at all during the purchase process. The data is encrypted and sent to our PCI zone, where we decrypt and handle processing of the cards. Merchants cannot selectively enable/disable what types of authorization methods they receive. We handle all kinds on our end. How do merchants set the gateway and gatewayMerchantID values? Swedbank Pay will handle both gateway and gatewayMerchantID internally during merchant onboarding, and is not an issue you need to address. Please note that Merchant ID and gatewayMerchantID is not the same. The Merchant ID is given to you in the Google Console. The gatewayMerchantID is the ID given to a merchant from the gateway. Which authorization methods do Swedbank Pay accept? We accept both PAN_ONLY and CRYPTOGRAM_3DS cards in all countries where Google Pay is supported. Which card networks methods do Swedbank Pay accept? We support Visa, Mastercard and Amex in all countries where Google Pay™ is supported. Are there any requirements regarding the billing address to be submitted by the developer for address verification? Any merchant onboarded with Swedbank Pay who’s been given access to Google Pay™, can request the payer to provide billing address in relation to shipping them physical goods. These are encrypted and can only be accessed by the merchant that requested the billing details and is deleted after 30 days. How do merchants send Google encrypted payment data and transaction data to Swedbank Pay? Merchants will not handle any of the customers payment details. The encrypted details are passed on to our backend systems, where we pass them to our internal PCI environment for processing. Within the PCI environment, a tokenized representation of the card is created, which is then used outside of the PCI environment to ensure the customers details are kept safe. Back to Introduction",
    "tags": "",
    "url": "/checkout-v3/google-pay-presentation/"
  },{
    "title": "Quick Guide",
    "text": "Simplest Form of Integration This quick guide will take you through the essentials and hopefully speed up the process of getting your solution ready for the real action. It will show the basics and how a transaction is made and what the response looks like. It will also show how to abort and how to retrieve result of a priviously made transaction. Depending on the solution one wants to build, to make a payment just takes two requests with corresponding responses. A LoginRequest and a PaymentRequest with a happy flow that gives a successful LoginResponse and an approved payment that gives a successful PaymentResponse with the receipt data. To make it a little more acceptable one probably wants to be able to abort using an AbortRequest, and ask for a transaction status with a TransactionStatus request. Typical Happy Flow simple integration sequenceDiagram participant POS participant Terminal POS-&gt;&gt;+Terminal: Http POST LoginRequest Terminal-&gt;&gt;-POS: rsp 200 LoginResponse loop Login session until logout or new login Note right of POS: Login session started POS-&gt;&gt;+Terminal: Http POST PaymentRequest Terminal-&gt;&gt;-POS: rsp 200 PaymentResponse Note left of Terminal: Success or Failure end POS-&gt;&gt;+Terminal: Http POST LogoutRequest Terminal-&gt;&gt;-POS: rsp 200 LogoutResponse Note right of POS: Login session ended Intended Form of Integration When sending a LoginRequest message it is feasible to choose from two styles: Default integration, where POS act as both server and client Light integration, where POS acts as a client only The default form of integration, full integration, includes a listener on the POS side as well. This makes it possible for the terminal to send requests to the POS. Those requests are mostly display messages letting the POS operator to see what is happening on the terminal. In case a receipt needs to be signed by the customer, the terminal sends an input request together with a print request. The input request will ask for a confirmation from the operator that the signature is ok. When implementing a listener there will also be event notification messages such as card inserted, card removed, maintenance required, maintenance completed etc. The decision of having the terminal to send requests or not is made when sending the LoginRequest message. Typical Happy Flow full integration sequenceDiagram participant POS participant Terminal POS-&gt;&gt;+Terminal: Http POST LoginRequest Terminal-&gt;&gt;-POS: rsp 200 LoginResponse Success loop Login session started Terminal-&gt;&gt;POS: Http POST DisplayRequest note over Terminal: \"Please wait\" POS-&gt;&gt;Terminal: rsp 204 Terminal-&gt;&gt;POS: Http POST DisplayRequest note over Terminal: \"Welcome\" POS-&gt;&gt;Terminal: rsp 204 POS-&gt;&gt;+Terminal: Http POST PaymentRequest Terminal-&gt;&gt;POS: Http POST DisplayRequest note over Terminal: \"Present card\" POS-&gt;&gt;Terminal: rsp 204 Terminal-&gt;&gt;POS: Http POST DisplayRequest note over Terminal: \"Enter PIN\" POS-&gt;&gt;Terminal: rsp 204 Terminal-&gt;&gt;POS: Http POST DisplayRequest note over Terminal: \"Enter PIN: *\" POS-&gt;&gt;Terminal: rsp 204 Terminal-&gt;&gt;POS: Http POST DisplayRequest note over Terminal: \"Enter PIN: **\" POS-&gt;&gt;Terminal: rsp 204 Terminal-&gt;&gt;POS: Http POST DisplayRequest note over Terminal: \"Enter PIN: ***\" POS-&gt;&gt;Terminal: rsp 204 Terminal-&gt;&gt;POS: Http POST DisplayRequest note over Terminal: \"Enter PIN: ****\" POS-&gt;&gt;Terminal: rsp 204 Terminal-&gt;&gt;POS: Http POST DisplayRequest note over Terminal: \"Authorizing\" POS-&gt;&gt;Terminal: rsp 204 Terminal-&gt;&gt;POS: Http POST DisplayRequest note over Terminal: \"Approved\" POS-&gt;&gt;Terminal: rsp 204 Terminal-&gt;&gt;-POS: rsp 200 PaymentResponse Success/Failure Terminal-&gt;&gt;POS: Http POST DisplayRequest note over Terminal: \"Welcome\" POS-&gt;&gt;Terminal: rsp 204 end POS-&gt;&gt;+Terminal: Http POST LogoutRequest Terminal-&gt;&gt;-POS: rsp 200 LogoutResponse Success Next",
    "tags": "",
    "url": "/pax-terminal/Nexo-Retailer/Quick-guide/"
  },{
    "title": "Swedbank Pay nexo Retailer v3.1",
    "text": "The interface is based on nexo Retailer version 3.1 and uses XML message formats over HTTP/TCP. For reference it may be a good idea to download the nexo specifications from www.nexo-standards.org, but the essentials will be described here. Keep in mind that nexo Retailer is a large protocol standard and we do not currently support every aspect of it. nexo Sale to POI Protocol Specifications Version 3.1 nexo Sale to POI Transport Protocols v3.1 Download the full NIS V4.0 package to find the documents and schema files as well. Communication The terminals are communicating over IP LAN or WLAN and the intended style is that both the integrating party and the terminal implements a server and a client. There is however, a solution to let the sale system act as a client only. play_circle Quick Guide Start here. Fast track to go through the essentials for making a payment arrow_forward settings_suggest Address of Terminal Sent To POS Easier configuration of POS by picking up the terminal address from the configuration message sent from the terminal when pressing Save in terminal’s admin menu. arrow_forward card_membership Loyalty The Easy Way The simplest form of loyalty implementation using CNA from PaymentResponse arrow_forward credit_card Advanced loyalty Possibility to read one or more cards prior to payment request, makes it possible to give a discount for members at time of payment arrow_forward live_help Dialog with customer Possibility to display message or ask customer for information arrow_forward print Use A920pro printer Possibility send a PrintRequest with information to be printed on the integrated A920pro terminal printer arrow_forward local_gas_station Fuel Functionality A matter of adding SaleItem elements to the PaymentTransaction element in a PaymentRequest. arrow_forward bookmark_add Include Purchase Order Number A Purchase Order Number may be included in the PaymentRequest and will be forwarded to the aquirer host. arrow_forward keyboard Send Card Data Possibility to send a non-PCI regulated “card number” to the terminal arrow_forward",
    "tags": "",
    "url": "/pax-terminal/Nexo-Retailer/"
  },{
    "title": "Quick Guide",
    "text": "Create an instance of PAXTrmImp_1 PAXTrmImp_1 is the main class used and is created by calling the static method create which returns an interface, ISwpTrmIf_1, to the created instance. The create method requires a reference to an ISwpTrmCallbackInterface which in this case is implemented in the PaxImplementation class. Simplest way of createing an instance using default values 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 using SwpTrmLib; using SwpTrmLib.Nexo; // The PaxImplementation call implements the callback interface public class PaxImplementation : ISwpTrmCallBackInterface { public ISwpTrmIf_1 PAX = {get; internal set; } = null; // create an instance with default values void PaxImplementation() { PAX = PAXTrmImp_1.Create( new SwpIfConfig(), this); } . . . warning Important!: Remember that EventCallback and PrintRequestEventCallback must be implemented together with the ConfirmationHandler. They are needed in case a transaction need signature approval. Closer look at SwpIfConfig A peek at SwpIfConfig and the defaults 1 2 3 4 5 6 7 8 9 10 11 12 namespace SwpTrmLib { public class SwpIfConfig { public string LogPath { get; set; } = \".\\\\\"; public int TerminalRxPort { get; set; } = 11000; public LogLevel LogLevel { get; set; } = LogLevel.Debug; public string UICulture { get; set; } = CultureInfo.CurrentCulture.Name; public bool DraftCapture { get; set; } = false; public bool LogTerminalHandler { get; set; } = false; } } Next Back",
    "tags": "",
    "url": "/pax-terminal/NET/tutorial/quick-guide/"
  },{
    "title": "Tutorials and Use Cases",
    "text": "Click on cards to get detailed information play_circle Quick Guide Quick guide to get going from scratch making a transaction arrow_forward settings_suggest Automatically Configure POS for Terminal Easier configuration of POS by picking up the terminal address from the configuration message arrow_forward credit_card_off APM transaction APM - Alternative Payment Method. Let the customer choose a different payment method than card but keep the same flow towards the sale system as for a card payment. arrow_forward credit_card_off APM Refund APM Refund works almost like a card refund. arrow_forward draw Signature Approved Transaction Eventhough we do not allow CVM Signature in Europe, we still have to accept those transactions made with cards from other parts of the world. arrow_forward bookmark_add Make Payment Including Order Number A payment may include an order id that is forwarded to the acquirer host. arrow_forward local_gas_station Fuel Functionality Fuel functionality is about handling cards that has various restrictions. arrow_forward",
    "tags": "",
    "url": "/pax-terminal/NET/tutorial/"
  },{
    "title": "C# Code Examples",
    "text": "As Client Only The following is an example of the simplest form of making a program that actually makes a payment. It is a windows form with one button making a payment for 10 SEK and printing the receipt to a TextBox. The only methods used are Create, Start, OpenAsync and PaymentAsync. warning Warning: The IP address to terminal needs to be changed info Heads up: The first attempt will fail, since OpenAsync is successful but the terminal starts communicating with its host. Click the button again to start the payment. Simplest form of implementation, Client Only - Happy Flow 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 using System; using System.Collections.Generic; using System.ComponentModel; using System.Data; using System.Drawing; using System.Linq; using System.Text; using System.Threading.Tasks; using System.Windows.Forms; using SwpTrmLib; using SwpTrmLib.NexoTypes; namespace WindowsFormsApp1 { public partial class Form1 : Form, ISwpTrmCallbackInterface { ISwPTrmIf_1 PAX; public Form1() { InitializeComponent(); } private async void button1_Click(object sender, EventArgs e) { if (PAX == null) { LoginToTerminal(); } var result = await PAX.PaymentAsync(10); if (result.ResponseResult == NexoResponseResult.Success) { textBox1.AppendText(\"APPROVED TRANSACTION\" + Environment.NewLine); } else { textBox1.AppendText(\"REJECTED TRANSACTION\" + Environment.NewLine); textBox1.AppendText(result.ResponseText + Environment.NewLine); } // The result contains the receipt information textBox1.AppendText(result.ReceiptBlob + Environment.NewLine); } private void CreatePAXInstance() { PAX = PAXTrmImp_1.Create(new SwpIfConfig(), this); PAX.Start(new SaleApplInfo() { ApplicationName = \"Quick Demo-Client Only\", ProviderIdentification = \"SwP\", SoftwareVersion = \"0.1\", POIID = \"A-TEST-POIID\", SaleCapabilities = SaleCapabilitiesEnum.PrinterReceipt.ToString() // Client only mode! }); } private async void LoginToTerminal() { if (PAX == null) { CreatePAXInstance(); } PAX.TerminalAddress = \"192.168.1.34:11000\"; var res = await PAX.OpenAsync(); if (res.Result == ResponseResult.Success) { textBox1.AppendText(\"Terminal connected \" + Environment.NewLine); textBox1.AppendText(\"Terminal: \" + res.SerialNumber + Environment.NewLine); textBox1.AppendText(\"Terminal version: \" + res.SoftwareVersion + Environment.NewLine); } else { textBox1.AppendText(\"Failed to connect terminal \" + Environment.NewLine); textBox1.AppendText(res.Text + Environment.NewLine); } } // Occurs when customer need to sign the receipt public void ConfirmationHandler(string text, IConfirmationResult callback) { // Cashier needs to confirm the acceptance of signature and ID DialogResult result = MessageBox.Show(text, \"\", MessageBoxButtons.YesNo, MessageBoxIcon.Question); if (result == DialogResult.Yes) callback.Confirmation(true); else callback.Confirmation(false); } public void EventCallback(EventCallbackObject eventObject) { switch (eventObject.type) { case EventCallbackTypes.PrintRequestEventCallback: PrintRequestEventCallback po = (eventObject as PrintRequestEventCallback); { /* Code for printing the Cashier Receipt that needs to be signed by the card holder */} break; } } public void EventNotificationHandler(EventToNotifyEnumeration type, string text) { /* Won't happen in Client Only mode */ throw new NotImplementedException(); } public void SyncRequestResult(object result) { /* Won't if using the awaitable functions */ throw new NotImplementedException(); } private async void Form1_FormClosing(object sender, FormClosingEventArgs e) { await PAX.CloseAsync(); PAX.Stop(); } } } As Client and Server Based on Simplest Client only the following runs as a server too. The difference is: Removed SalesCapabilites in call to Start Subscribed to the OnTerminalDisplay event Added code to the callback EventNotificationHandler info Heads up: When running as a server the program needs elevated privileges. It may be avoided by entering the following command as administrator: 1 netsh http add urlacl url=http://*:11000/EPASSaleToPOI/3.1/ sddl=D:(A;;GX;;;WD) 1 where :11000 is the default port. If listening to another port the command must be changed. Simplest Client And Server form of implementation - Happy Flow 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 using System; using System.Collections.Generic; using System.ComponentModel; using System.Data; using System.Drawing; using System.Linq; using System.Text; using System.Threading.Tasks; using System.Windows.Forms; using SwpTrmLib; using SwpTrmLib.NexoTypes; namespace WindowsFormsApp1 { public partial class Form1 : Form, ISwpTrmCallbackInterface { ISwPTrmIf_1 PAX; public Form1() { InitializeComponent(); } private async void button1_Click(object sender, EventArgs e) { if (PAX == null) { LoginToTerminal(); } var res = await PAX.PaymentAsync(10); if (res.ResponseResult == NexoResponseResult.Success) { textBox1.AppendText(\"APPROVED TRANSACTION\" + Environment.NewLine); } else { textBox1.AppendText(\"REJECTED TRANSACTION\" + Environment.NewLine); textBox1.AppendText(res.ResponseText + Environment.NewLine); } // The result contains the receipt information textBox1.AppendText(res.ReceiptBlob + Environment.NewLine); } private void CreatePAXInstance() { PAX = PAXTrmImp_1.Create(new SwpIfConfig(), this); PAX.Start(new SaleApplInfo() { ApplicationName = \"Quick Demo\", ProviderIdentification = \"SwP\", SoftwareVersion = \"0.1\", POIID = \"A-TEST-POIID\", //SaleCapabilities = SaleCapabilitiesEnum.PrinterReceipt.ToString() }); } // A DisplayRequest from the terminal private void PAX_OnTerminalDisplay(string message) { textBox1.AppendText(message + Environment.NewLine); } private async void LoginToTerminal() { if (PAX == null) { CreatePAXInstance(); } PAX.TerminalAddress = \"192.168.1.34:11000\"; var res = await PAX.OpenAsync(); if (res.Result == ResponseResult.Success) { textBox1.AppendText(\"Terminal connected \" + Environment.NewLine); textBox1.AppendText(\"Terminal: \" + res.SerialNumber + Environment.NewLine); textBox1.AppendText(\"Terminal version: \" + res.SoftwareVersion + Environment.NewLine); } else { textBox1.AppendText(\"Failed to connect terminal \" + Environment.NewLine); textBox1.AppendText(res.Text + Environment.NewLine); } } public void ConfirmationHandler(string text, IConfirmationResult callback) { DialogResult result = MessageBox.Show(text, \"\", MessageBoxButtons.YesNo, MessageBoxIcon.Question); if (result == DialogResult.Yes) callback.Confirmation(true); else callback.Confirmation(false); } public void EventCallback(EventCallbackObject eventObject) { switch (eventObject.type) { case EventCallbackTypes.PrintRequestEventCallback: PrintRequestEventCallback po = (eventObject as PrintRequestEventCallback); { /* Code for printing the Cashier Receipt that needs to be signed by the card holder */} break; case EventCallbackTypes.DisplayEventCallback: textBox1.AppendText((eventObject as DisplayEventCallback).Text + Environment.NewLine); break; } } public void EventNotificationHandler(EventToNotifyEnumeration type, string text) { textBox1.AppendText($\"Event: {type} - {text}\" + Environment.NewLine); } public void SyncRequestResult(object result) { /* won't happen when using the awaiatable functions */ throw new NotImplementedException(); } private async void Form1_FormClosing(object sender, FormClosingEventArgs e) { if (PAX != null) { PAX.Stop(); await PAX.CloseAsync(); } } } } Changes From Client Only Use default values in SaleCapabilities 1 2 3 4 5 6 7 8 PAX.Start(new SaleApplInfo() { ApplicationName = \"Quick Demo\", ProviderIdentification = \"SwP\", SoftwareVersion = \"0.1\", POIID = \"A-POIID\", //SaleCapabilities = SaleCapabilitiesEnum.PrinterReceipt.ToString() }); Show the display messages from the terminal (optional) 1 2 3 case EventCallbackTypes.DisplayEventCallback: textBox1.AppendText((eventObject as DisplayEventCallback).Text + Environment.NewLine); break; Implement some code for Event messages from the terminal (optional) 1 2 3 4 public void EventNotificationHandler(EventToNotifyEnumeration type, string text) { textBox1.AppendText($\"Event: {type} - {text}\" + Environment.NewLine); } Using Synchronous Calls When using the synchronous calls the code is pretty much the same except that the results are receivied in the SyncRequestResult callback instead. Code when using asynchronous calls 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 private async Task LoginToTerminal() { var res = await PAX.OpenAsync(); if (res.Result == ResponseResult.Success) { /* Ready to use */} else { /* unable to login to terminal */} } private async Task MakePayment() { var res = await PAX.PaymentAsync(amount); if (res.ResponseResult == NexoResponseResult.Success) { /* Handle successful payment */ } else { /* Handle refused payment */ } } Same result but using synchronous calls 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 private void LoginToTerminal() { PAX.Open(); } private void MakePayment() { PAX.Payment(amount); } public void SyncRequestResult(object result) { switch (Enum.Parse(typeof(RequestResultTypes), result.GetType().Name)) { case RequestResultTypes.OpenResult: OpenResult or = result as OpenResult; if (or.Result == ResponseResult.Success) {/* Ready to use*/ } else { /* unable to login to terminal */} break; case RequestResultTypes.PaymentRequestResult: PaymentRequestResult pr = result as PaymentRequestResult; if (pr.ResponseResult == NexpResponseResult.Success) { /* Handle successful payment */ } else { /* Handle refused payment */ } break; } } Get CNA For Customer Based on either Client Only or Client And Server, let’s take it a bit further and find out who the customer is before starting the actual purchase transaction. The only change is in the button1_click where GetPaymentInstrumentAsync is called. The result contains among others masked PAN and CNA - CardNumberAlias. This is a very simple way to handle members. The CNA will be the same in all our PAX terminals. Get to know the customer before deciding amount - Happy Flow 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 private async void button1_Click(object sender, EventArgs e) { if (PAX == null) { LoginToTerminal(); } var cardres = await PAX.GetPaymentInstrumentAsync(); if (cardres.Result == NexoResponseResult.Success) { textBox1.AppendText($\"CNA: {cardres.CNA}\" + Environment.NewLine); textBox1.AppendText($\"for card: {cardres.PAN}\" + Environment.NewLine); var res = await PAX.PaymentAsync(10); if (res.ResponseResult == NexoResponseResult.Success) { textBox1.AppendText(\"APPROVED TRANSACTION\" + Environment.NewLine); } else { textBox1.AppendText(\"REJECTED TRANSACTION\" + Environment.NewLine); textBox1.AppendText(res.ResponseText + Environment.NewLine); } // The result contains the receipt information textBox1.AppendText(res.ReceiptBlob + Environment.NewLine); } } Handle Loyalty - Ask For Membership Based on the version Get CNA For Customer, let’s see if CNA exists in the database and if so, give the customer a better price. If the costumer is not a member, ask them to join so they can get a better price next time. The only change is to create a list of members and add CNA to that list if the customer wants to join. Other that creating the Members which is a list of strings, there are only changes in the button1_click. The important addition is the call to RequestCustomerConfirmationAsync. It requests the terminal to show a message and asks for a yes/no response. The member CustomerConfirmation of the result is true or false. warning Note!: The delay before a new request after a finished transaction is needed. If the delay is not added, the request will get a failure due to terminal being busy info Remember: to add List&lt;string&gt; Member; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 private async void button1_Click(object sender, EventArgs e) { decimal priceofproduct = 10; bool asktojoin = false; if (PAX == null) { LoginToTerminal(); if (Members == null) { Members = new List&lt;string&gt;(); } } var cardres = await PAX.GetPaymentInstrumentAsync(); if (cardres.Result == NexoResponseResult.Success) { textBox1.AppendText($\"CNA: {cardres.CNA}\" + Environment.NewLine); textBox1.AppendText($\"for card: {cardres.PAN}\" + Environment.NewLine); if (Members.Contains(cardres.CNA)) { priceofproduct = 8; } else { asktojoin = true; } var res = await PAX.PaymentAsync(priceofproduct); if (res.ResponseResult == NexoResponseResult.Success) { textBox1.AppendText(\"APPROVED TRANSACTION\" + Environment.NewLine); } else { textBox1.AppendText(\"REJECTED TRANSACTION\" + Environment.NewLine); textBox1.AppendText(res.ResponseText + Environment.NewLine); } // The result contains the receipt information textBox1.AppendText(res.ReceiptBlob + Environment.NewLine); if (asktojoin) { await Task.Delay(3000); var confirmres = await PAX.RequestCustomerConfirmationAsync(\"Would you like to join?\"); if (confirmres.ResponseResult == NexoResponseResult.Success &amp;&amp; confirmres.Confirmation == true) { Members.Add(cardres.CNA); } } } }",
    "tags": "",
    "url": "/pax-terminal/NET/CodeExamples/"
  },{
    "title": "ISwpTrmCallbackInterface",
    "text": "The callbacks are mostly used if running as a server or using the synchronous methods. There are however two callbacks that always need to be implemented and are used when the customer need to sign the receipt. Those two are ConfirmationHandler and EventCallback for the PrintRequestEventCallback. Sample code running client only. 1 2 3 4 5 6 7 public interface ISwpTrmCallbackInterface { void ConfirmationHandler(string text, IConfirmationResult callback); void EventCallback(EventCallbackObject eventObject); void EventNotificationHandler(EventToNotifyEnumeration type, string text); void SyncRequestResult(object result); } ConfirmationHandler void ConfirmationHandler(string text,IConfirmationResult callback); This callback must be implemented and occurs when a transaction receipt needs to be signed by the cardholder. 1 2 3 4 5 public void ConfirmationHandler(string text, IConfirmationResult callback) { bool response = ShowMessageAndGetResponseFromOperator(text); callback-&gt;Confirmation(response); } 1 2 3 4 public interface IConfirmationResult { void Confirmation(bool flag); } EventCallback The EventCallback replaces the events that may be subscribed to from the ISwpTrmIf_1 interface. If there is a subcription to an event this callback will not be used for that event. The EventCallback is essential if using more than one terminal where each terminal has its own instance. A MUST: The PrintRequestEventCallback must be implemented since it occurs for a transaction that needs customer signing. void EventCallback(EventCallbackObject eventObject) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 public void EventCallback(EventCallbackObject eventObject) { switch (eventObject.type) { case EventCallbackTypes.DisplayEventCallback: var d = eventObject as DisplayEventCallback ; break; case EventCallbackTypes.NewStatusEventCallback: var s = eventObject as NewStatusEventCallback; // Do something useful break; case EventCallbackTypes.PrintRequestEventCallback: var p = eventObject as PrintRequestEventCallback; // print receipt break; } } 1 2 3 4 5 6 7 public enum EventCallbackTypes { DisplayEventCallback = 0, NewStatusEventCallback = 1, TerminalAddressObtainedEventCallback = 2, PrintRequestEventCallback = 3 } EventNotificationHandler void EventNotificationHandler(NexoTypes.EventToNotifyEnumeration type, string text); The EventNotificationHandler callback occurs when running as a server and the terminal sends an event notification such as card insterted, card removed or a message to the operator about updates and such. EventTiNotifyEnumeration 1 2 3 4 5 6 7 public enum EventToNotifyEnumeration { BeginMaintenance, EndMaintenance, Shutdown, Initialised, OutOfOrder, Completed, Abort, SaleWakeUp, SaleAdmin, CustomerLanguage, KeyPressed, SecurityAlarm, StopAssistance, CardInserted, CardRemoved, Reject }; SyncRequestResult void SyncRequestResult(object result) This callback occurs when a synchronous method call has been used and that call has resulted in a response from the terminal. e.g. A call to Payment() will eventually result in this callback method with PaymentRequestResult as the result parameter. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 public void SyncRequestResult(object result) { switch (Enum.Parse(typeof(RequestResultTypes), result.GetType().Name)) { case RequestResultTypes.OpenResult: HandleOpenResult(result as OpenResult); break; case RequestResultTypes.PaymentRequestResult: HandlePaymentResult(result as PaymentRequestResult); break; case RequestResultTypes.CustomerConfirmationResult: HandleCustomerConfirmationResult(result as CustomerConfirmationResult); break; case RequestResultTypes.ReversalRequestResult: HandleReversalResult(result as ReversalRequestResult); break; . . . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 public enum RequestResultTypes { OpenResult = 0, PaymentRequestResult = 1, CustomerConfirmationResult = 2, GetPaymentInstrumentResult = 3, AbortRequestResult = 4, NexoResponseResult = 5, UpdateTerminalRequestResult = 6, ClearSnFRequestResult = 7, ReversalRequestResult = 8, TransactionStatusResult = 9, CustomerDigitStringResult = 10, NexoRequestResult = 11, PaymentInstrumentResult = 12 }",
    "tags": "",
    "url": "/pax-terminal/NET/SwpTrmLib/ISwpTrmCallbackInterface/"
  },{
    "title": "Events of ISwpTrmIf_1",
    "text": "Events The events may be replaced by the EventCallback OnTerminalDisplay OnTerminalDisplay occurs when the terminal sends a display request to the sale system. The event is only relevant if running as a server. A DisplayRequest is simply the message indicating what is shown in the terminal display, with the purpose of helping the operator to understand what is happening. delegate void TerminalDisplayEventHandler(string message) OnNewStatus OnNewStatus occurs when status changes according to TrmStatus shown below or if a CardInsterted or CardRemoved event notification is sent from terminal. When using Async calls these statuses are not really needed. Event notifications from terminal are only relevant if running as a server. delegate void NewStatusEventHandler(**TrmStatus** status) 1 enum TrmStatus { Initialized, Open, WaitForPaymentInstrument, CustomerKnown, PaymentStarted, CardInserted, CardRemoved, Closed }; OnTerminalAddressObtained OnTerminalAddressObtained occurs when the save button has been pressed in the terminal’s admin menu. The purpose is to inform the sale system of the terminal’s IP address and port. This way it is possible to configure the address to the terminal without logging in to the sale system. The event is only relevant when running as a server. delegate void TerminalAddressEventHandler(string ip4, int port)",
    "tags": "",
    "url": "/pax-terminal/NET/SwpTrmLib/Events/"
  },{
    "title": "Essential Methods",
    "text": "start Create Create is a static method that creates an instance and returns an ISwpTrmIf_1 interface arrow_forward flag Start The Start method initializes the created instance and starts a listener if desired and if not already started. arrow_forward lock_open Open This is the first method call that actually communicates with the terminal. It sends a LoginRequest which is needed before any other request. arrow_forward credit_card Payment The Payment method is called to make a purchase transaction when the amount is known. arrow_forward credit_card Refund The Refund method sends a PaymentRequest for refund and should be called when the amount is known. arrow_forward cancel Abort This method will send an AbortRequest for the last issued request to the terminal. arrow_forward replay GetLastTransactionResult GetLastTransactionResult / GetLastTransactionResultAsync is useful if the original payment or refund response is lost arrow_forward disabled_by_default Close This method sends a LogoutRequest to terminate the login session and allow for maintenance. arrow_forward",
    "tags": "",
    "url": "/pax-terminal/NET/SwpTrmLib/Methods/essential/"
  },{
    "title": "Available Worth Knowing About",
    "text": "arrow_forward Continue The Continue method is only relevant if card has been read before amount and lets the terminal proceed with PIN dialog. arrow_forward undo ReverseLast ReverseLast will reverse the last transaction made if it was approved. arrow_forward update UpdateTerminal The UpdateTerminalAsync method sends a status report to TMS to trigger possible program or parameter fetching arrow_forward",
    "tags": "",
    "url": "/pax-terminal/NET/SwpTrmLib/Methods/otheravailable/"
  },{
    "title": "Methods That May Be Handy",
    "text": "credit_score Get Payment Instrument Use this to read a card before the amount is known. This way it is easy to make a loyalty solution and to deduct the amount in case of a loyalty member. It may also speed ut the process in case contactless is used and PIN not required. arrow_forward support_agent Request Customer Confirmation Use this method to ask the customer a yes/no question. arrow_forward support_agent Request Customer DigitString Use this method to ask the customer to enter a string of digits arrow_forward cast Request To Display This method makes it possible to display a message on the terminal display. arrow_forward print Request To Print Call this method to use the A920pro printer for printing. arrow_forward add_card Set Payment Instrument SetPaymentInstrument starts a payment for supplied paymentInstrument. arrow_forward",
    "tags": "",
    "url": "/pax-terminal/NET/SwpTrmLib/Methods/handy/"
  },{
    "title": "ISwpTrmIf_1 Methods",
    "text": "Make sure to implement all the essentials. priority_high Essential Methods These messages are the least that needs to be implemented. arrow_forward library_add Methods That May Be Handy These methods may be handy when just doing payments isn’t enough. arrow_forward low_priority Available Worth Knowing About Check out these messages you might want to use them. arrow_forward",
    "tags": "",
    "url": "/pax-terminal/NET/SwpTrmLib/Methods/"
  },{
    "title": "Content of SwpTrmLib",
    "text": "menu ISwpTrmIf_1 Methods Several methods are available but of different importance. Find out what needs to be implemented. arrow_forward reply ISwpTrmCallbackInterface Two callbacks are a must to implement in order to pass tests for a signature verified transaction. arrow_forward flash_on Events of ISwpTrmIf_1 Events are mainly when the terminal sends request to the sale system. See also the callback EventCallback arrow_forward",
    "tags": "",
    "url": "/pax-terminal/NET/SwpTrmLib/"
  },{
    "title": ".Net SDK",
    "text": "Introduction SwpTrmLib is a Net Standard 2.0 nuget package that may be used when integrating Swedbank Pay terminal to a sale system. The package makes it simple and easy to get started. It has high abstraction and even if the actual protocol to the terminal changes this interface can stay the same. It offers both synchronous and asynchronous methods and for the simplest form of implementation it just takes a few calls to make a transaction. As of now the terminal is not prepared for a cloud connection, but by using this SDK it is possible to quickly make a small proxy service that makes whichever cloud connection that is desired. In the future there may be other variants of the interface and usage within the SDK, but this version will stay the same and once an implementation has been made, it should not have to be changed unless new requirements or new functionality is desired. The aim of the SDK is to minimize the total work effort for both users and Swedbank Pay. feed What's new The latest updates about the .Net SDK and documentation will be published on this page. arrow_forward info Basic Information Things to know before you start arrow_forward school Tutorials and Use Cases Easy understanding with tutorials. Quick guide to get started. arrow_forward verified_user Avoid Privilege Elevation When running as a server the HttpListener is used which normally requires an elevation of privileges arrow_forward menu Content of SwpTrmLib Methods, callbacks and properties arrow_forward code C# Code Examples Simple code examples without the aim of being state of the art. The code works, so feel free to copy and test. arrow_forward",
    "tags": "",
    "url": "/pax-terminal/NET/"
  },{
    "title": "Introduction",
    "text": "Swedbank Pay have designed the Swedbank Pay Payment Application solution using the nexo Retailer protocol for its API interface to integrated parties. The Swedbank Pay Payment Application implementation of nexo Retailer allows the integrated application to initiate the relevant functions within Swedbank Pay Payment Application. There are three options for integrating the Swedbank Pay terminals to a sale system. nexo Retailer - As implemented by Swedbank Pay. .Net SDK - abstract interface implementing the nexo Retailer. Java SDK - abstract interface implementing the nexo Retailer. The Swedbank Pay SDK contains one implementation for using a PAX A30, A35 or A920 PRO terminal, but makes it possible to vary the style of use by configuration. There are two major styles that is decided by the SalesCapabilities string sent in as a LoginRequest: Act as both server and client Act as client only The intended default style requires the consumer of the SwpTrmLib to act as both a server and a client. The server handles requests from the terminal, such as display information, events, and possible input request from the terminal, such as a request to confirm that a receipt has been signed if needed. The second style is to act as a client only and then lose information from terminal such as events informing that a card has been inserted or removed or display information helping the operator to see what is going on. Configure the terminal In order for the terminal to communicate with the ECR the IP address need to be set in the admin menu. To enter the admin menu, tap the three dots in the footer. Then enter the code. Set the ECR IP address and then press the save button.",
    "tags": "",
    "url": "/pax-terminal/"
  },{
    "title": "Optional Features",
    "text": "Optional Features local_gas_station Automated Fuel Dispenser Payments Payments for automated fuel dispensers. arrow_forward lock Age Restrictions Restricting payments to an age limit arrow_forward delete_sweep Delete Token How to delete tokens. arrow_forward dns MOTO Card-based home order (Mail Order / Telephone Order) transactions. arrow_forward touch_app One-Click Payments Prefilling the payment details using payment tokens. arrow_forward document_scanner Integrated Commerce A printable, scannable reference code for payment tracking. arrow_forward article Order Items Information about the order items arrow_forward event Payer Aware Payment Menu A payment menu tailored to the payer. arrow_forward lock Restricted To SSN Restricting payments to a specific Social Security Number (SSN) arrow_forward link Payment Link Sending the payment via mail or SMS. arrow_forward euro_symbol Payout Paying out funds to the consumer’s account. arrow_forward cached Recur Setting up subscriptions and recurring payments. arrow_forward local_shipping Request Delivery Information Request that payment methods return delivery information. arrow_forward report_problem Unscheduled Purchase Setting up subscriptions and merchant initiated payments. arrow_forward verified_user Verify Validating the payer’s payment details. arrow_forward",
    "tags": "",
    "url": "/checkout-v3/features/optional/"
  },{
    "title": "Customize Payments",
    "text": "Customize Payments discount Fees And Discounts How to add fees and discounts to payment orders. arrow_forward 3d_rotation Frictionless Payments Authenticating the cardholder. arrow_forward share Network Tokenization Stored cards made easier arrow_forward",
    "tags": "",
    "url": "/checkout-v3/features/customize-payments/"
  },{
    "title": "Customize The UI",
    "text": "Customize The UI call_to_action Action Specific Text On Payment Button Change the text on your payment button arrow_forward link Corporate Limited Menu Limit the menu to what is supported by corporate payment methods. arrow_forward copyright Custom Logo How to add your own logo. arrow_forward palette Custom Styling Styling your payment UI. arrow_forward format_list_numbered Customize Order Of Payment Menu Sort the order of and restrict your payment menu arrow_forward unfold_more Expand The First Payment Method Auto-expand the first payment method in your payment UI. arrow_forward looks_one Instrument Mode The Payment UI with one payment method arrow_forward public Terms of Service URL Displaying the merchant’s terms of service. arrow_forward",
    "tags": "",
    "url": "/checkout-v3/features/customize-ui/"
  },{
    "title": "Technical Reference",
    "text": "Technical Reference link CompleteUrl Where you go when the payment is completed. arrow_forward assignment Description The purchase summed up in a few words. arrow_forward code Metadata Store payment associated data for later use. arrow_forward settings Operations Possible operations for a payment order. arrow_forward account_box PayeeInfo Payment specific merchant information. arrow_forward assignment_ind PayeeReference The merchant’s reference for a specific payment. arrow_forward link PaymentUrl Redirecting the payer back to your site. arrow_forward report Problems Information when something goes wrong. arrow_forward send_time_extension Resource Models GET responses for the payment order resources. arrow_forward event Seamless View Events Possible events during Seamless View payments. arrow_forward rule Status Response Models Payment order responses with different payment statuses. arrow_forward public Urls The urls associated with the payment arrow_forward devices User Agent An introduction to user agents arrow_forward",
    "tags": "",
    "url": "/checkout-v3/features/technical-reference/"
  },{
    "title": "Payment Operations",
    "text": "Payment Operations pan_tool Abort Aborting a created payment or payment attempt. arrow_forward low_priority Callback Receive asynchronous, server-to-server updates from Swedbank Pay when transactions are performed on a payment. arrow_forward pan_tool Cancel Canceling the authorization and releasing the funds. arrow_forward compare_arrows Capture Capturing the authorized funds. arrow_forward keyboard_return Reversal How to reverse a payment. arrow_forward cached Update Payment Order Updating the payment order arrow_forward",
    "tags": "",
    "url": "/checkout-v3/features/payment-operations/"
  },{
    "title": "Balancing The Books",
    "text": "Balancing The Books description Settlement &amp; Reconciliation The settlement process and report examples. arrow_forward call_split Split Settlement A split option for merchants with several sub-merchants. arrow_forward",
    "tags": "",
    "url": "/checkout-v3/features/balancing-the-books/"
  },{
    "title": "Features",
    "text": "",
    "tags": "",
    "url": "/checkout-v3/features/"
  },{
    "title": "Display Payment UI",
    "text": "Display Payment UI There are a couple of decisions to be made when presenting your payment UI. You have the choice between a payment menu with all payment methods you want to offer, or with a single available payment method using instrument mode. Regardless of the number of payment methods available to the payer, you also need to choose between Redirect and Seamless View. With Redirect, the payer is sent to a Swedbank Pay page where we handle the purchase process. The payer is redirected back to you when the purchase is completed or if the payer aborts the purchase. The page will be styled by Swedbank Pay. With Seamless View, the payer stays at your site and you initiate the Swedbank Pay purchase module in an iframe. The purchase component will be styled by Swedbank Pay. Read about how you integrate them in the corresponding sections. Redirect Seamless View",
    "tags": "",
    "url": "/checkout-v3/get-started/display-payment-ui/"
  },{
    "title": "The Basics",
    "text": "Get Started is a guide for the native API implementation of Digital Payments. Modules and SDKs have their own section. Foundation To start integrating Swedbank Pay Digital Payments, you need the following: HTTPS enabled web server. Agreement that includes Swedbank Pay Checkout. Obtained credentials (Merchant Access Token) from Swedbank Pay through the Merchant Portal. There are two versions of Digital Payments available in production at the moment: v3.0 and v3.1. Collectively we refer to them as v3.x. If we use v3.x instead of a specific version number, this means that the text paragraph, feature section or code example applies to all Digital Payments versions. Unless stated otherwise by the presence of a separate v3.1 section, there are no differences between the two alternatives. If youre a new merchant currently getting started, you should implement v3.1. If you are an existing merchant we recommend migrating to v3.1, but you are still able to use v3.0. Reach out to your technical contact person for guidance regarding this. The Basic Implementation The basic payment integration consists of 4 main steps. Creating the payment, displaying the payment UI, verifying the payment status and post-purchase actions. Don’t hesitate with contacting us for further integration support. Depending on the payment method used, the payments are either one-phase or two-phase transactions. Swish and Trustly have one-phase payments, the rest of the payment methods are two-phased. One-phase payments are completed and the funds are transferred in one operation. They will be tagged as Sale transactions. Two-phase payments need two operations (Authorization and Capture) before funds are transferred. Read more about differences in handling when you get to the post-purchase section. Initiate a Payment The first step is to initiate a payment. You have a selection of setups and use cases depending on your business model, like recurring and one-click payments - for now we’ll stick to the basic payment. Display UI Present a UI for your end user and customize for your needs. The main choice you have to make is between the seamless view or redirect integration. There are pros and cons to both. Validate Status Validate the status of the purchase in order to take the right action before acting on the payment response. Post-Purchase actions After a successful purchase, you can perform actions like capturing the funds (Trustly and Swish do not require this), cancelling the transaction or do reversals. Get Ready To Go Live When you feel ready and have made transactions with all of your selected payment methods, there are a few more steps that remain before your integration is cleared to run in a production environment. Our teams are ready to assist you. Acceptance tests We need access to your test environment in order to perform transactions. Before we do acceptance tests you need to make sure the following is in place: That you receive order confirmations/receipts by e-mail that contain order number, transaction number, price and the merchant/store’s contact information. If you intend to use unscheduled or recur purchases, you need to be able to send requests for deleting tokens. Make sure that you can handle network tokens by using our test cards for that specific case. If you expose any transactional data or information such as masked PANs - an example could be a “My page” with content regarding stored details or subscriptions - make sure you display the correct information, and take into account that details can be changed by the issuer if the card is enrolled for network tokenization. Contract details If you are unsure if the contract is ready, you can check the status with our setup team by sending them an e-mail with your organization number included. Test in production We recommend you to test the integration and do transactions in a closed production environment before you go live. Settlement and reconciliation To see how your reports will look, you can check out our sample reports. You’ll find them in the Settlement &amp; Reconciliation section. No need to worry about these steps just yet. We will walk you through everything when we get there.",
    "tags": "",
    "url": "/checkout-v3/get-started/"
  },{
    "title": "Introduction",
    "text": "Swedbank Pay is committed to creating a vibrant community around its open source initiative on GitHub and will alongside its partners expose the Swedbank Pay Payment APIs in high quality client modules and libraries. The development of these modules and libraries should be as transparent and accessible to the public as possible. The consequence and meaning of this will be explained in the following chapters of this guideline. Having the source code, tests, documentation, issues and such all in one place makes the projects governing the modules and libraries easier to grasp and understand for new users. GitHub is the world’s most popular developer and source code hosting platform and offers everything we need in an easy to use package. It is therefore a great choice for hosting the source code for the open source modules and all of their related resources. Principles For an open source project to become successful, it should follow a few core principles: Transparency Being transparent is one of the most important virtues of an open source project. Being able to inspect the source code, read the documentation, view potentially reported bugs and understand the development process in an accessible and easy to understand way is critical to be able to assert the quality of the project. Being transparent also makes it apparent that we don’t have anything to hide, underlining our confidence in the quality of what we publish, which of course should be top notch. Quality An important factor to ensure the quality of any given piece of code is to test it. The test should preferably be automated and be run on every code check-in. The automation can be done through a language-native test framework like NUnit, JUnit or PHPUnit and then have a continuous integration system like Travis or TeamCity execute these tests every time code is pushed to the repository on GitHub. Code quality of course depends on a lot of other factors too, such as: Following best practice of the language and environment the code is being written in. Adhering to established style guides. Good understanding of The Principles of Object Oriented Design. A good domain architecture, modeled after Domain Driven Design. Accessibility The perhaps most important measure of success for an open source project is whether people outside of the project’s core development group contribute to it or not. The contributions can be everything from reported issues to correcting typographic errors in documentation to pull requests for minor or major code contributions. To be able to attract outside contributors, the project needs to be accessible. While accessibility is an abstract term, it can be broken down into smaller and more concrete parts that are easier to measure and understand. Is the development process for the project easy to understand? Where are outstanding features listed, who are the developers working on which features and where do they reside? How easy is it to fork the project and make a pull request that has a high chance of being merged? These are questions that should be asked and that can be answered confidently if the project is managed in a good and orderly fashion. The following list enumerates the most important aspects that a project should be governed by to be perceived as accessible: Outstanding features and bugs should be easy to find in the list of “issues” in the project’s repository. The project’s documentation should be easily accessible in or linked to from the project’s README file. The README file and associated documentation should be written in simple Markdown markup so it is easy to correct by anyone simply by using GitHub’s online Markdown editing features. How to contribute should be clearly explained in a CONTRIBUTING file. The process of contributing should be as simple as possible. The project should follow the norm and best practice of the language and environment it is written in. There should be tests in the project that are easy to get up and running on a developer machine without installing any external services, tools or libraries, unless they are handled by a package manager like NuGet. Contributed code should be checked by a continuous integration server that labels the status of pull request accordingly. If a test fails, the contributor should be alerted of its failure through GitHub’s interface. All code contributions should be run through a public continuous integration server so build failures are visible to the contributor such that it can be fixed without any project manager’s involvement. The development and branching process should preferably be based on an existing scheme such as GitFlow or GitHub Flow. All development should be done in public. Code should be pushed to GitHub regularly, so it’s possible to see progress. For incomplete features and bugfixes, GitFlow with branch prefixes such as feature/ and hotfix/ should be used All code in development should be pushed as often as possible. Security All source code should be written in a secure way so it avoids the problems enumerated in OWASP Top 10 and SANS 25. It should preferably exist a test for each of these problems such that it is continually verified that the code does not contain any of these problems now or in the future. No source code should contain secrets, passwords or otherwise sensitive information. If such code is committed by accident, history should be rewritten through interactive rebasing as soon as possible and force-pushed. Licensing All of Swedbank Pay’ open source software should be licensed under a liberal and enterprise, closed source-compatible software license. Copyright The copyright for code written in Swedbank Pay’s open source projects is shared between Swedbank Pay and the individual authors of the source code. This should be stated in the above mentioned LICENSE file as well as in each individual source code file and other metadata (such as .NET assembly information, etc.): Copyright © Swedbank Pay and Project Contributors How to Contribute Contributing details how we ensure that contributors to a project adheres to the rules and principles defined by the project. Code of Conduct Every project governed by Swedbank Pay or in its name should have a Code of Conduct. Release Management An essential part of any software project is having it released in one form or another so other people can use it. To be able to release software efficiently, several different strategies and methodologies need to exist and be followed. They will be described in the following chapters. Versioning To release software, it needs to be versioned. Swedbank Pay’s open source packages should be versioned according to semantic versioning. This means that whenever backward compatibility is broken, the major version should be incremented. When a new feature is added, the minor version should be incremented and when bug fixes and other minor changes are introduced, the revision number should be incremented. A version of the software should correspond to a commit in the Git repository. This commit should be tagged with the version number it represents and the commit should be in the branch corresponding with what’s being released; stable code should be in the master branch, while pre-release, alpha or beta code should be in the develop branch or in a release/ prefixed branch. If a stable version 1.2.5 of a project is to be released, the commit representing that version should be tagged in Git with the value 1.2.5 and the commit should exist in the master branch. To help with automating versioning in .NET based projects, GitVersion can be used. For most uses, GitVersionTask performs the job perfectly. It understands GitFlow and increments the version number automatically based on which branch the code being built exists on. Branching strategy To make versioning easier, the Git repository should follow GitFlow, GitHub Flow or derivates, so released and stable code is kept in the master branch, while unstable and pre-released code — if such is required — is kept in the develop branch. While they can be considered optional since all ongoing development can be done directly in the develop branch; features, hotfixes and such should preferably be done in separate branches using the GitFlow-standard branch prefixes feature, hotfix/, etc. Releases Software written for an environment that has a marketplace or other official storefront for applications (or “modules”, “extensions” and what have you) such as Apple’s App Store or Google Play, should try to publish the released software in these marketplaces. Releases should correspond to a tagged version number and a Release for the version should be created on GitHub. The GitHub Release should summarize all changes made since the last release and highlight new features, possibly by referring to blog entries or similar that describes them in more detail. To help with writing release notes, projects can use the tool GitReleaseNotes.",
    "tags": "",
    "url": "/checkout-v3/modules-sdks/development-guidelines/"
  },{
    "title": "Optional Features",
    "text": "Optional Features bug_report Debugging Features Helping you investigate when a bug appears arrow_forward looks_one Instrument Mode The Payment Menu with one payment instrument arrow_forward event Payer Aware Payment Menu A payment menu tailored to the payer arrow_forward event Payer Tokens Using the SDK to create recur or unscheduled tokens for later use arrow_forward verified_user Verify Verify purchase using the SDK arrow_forward",
    "tags": "",
    "url": "/checkout-v3/modules-sdks/mobile-sdk/features/optional/"
  },{
    "title": "Technical Reference",
    "text": "Technical Reference phone_android Android Default UI Controlling the default UI arrow_forward vpn_key Android View Model Provider Key Communicating with the payment fragment arrow_forward video_camera_back Observing The Payment Process Helping your app react to different payment states arrow_forward report Problems Information when something goes wrong arrow_forward",
    "tags": "",
    "url": "/checkout-v3/modules-sdks/mobile-sdk/features/technical-reference/"
  },{
    "title": "Core Features",
    "text": "Core Features shopping_basket Payment Orders Initiating the payment order arrow_forward shopping_basket Purchase Payments Setting the purchase operation arrow_forward",
    "tags": "",
    "url": "/checkout-v3/modules-sdks/mobile-sdk/features/core/"
  },{
    "title": "Features",
    "text": "",
    "tags": "",
    "url": "/checkout-v3/modules-sdks/mobile-sdk/features/"
  },{
    "title": "Introduction",
    "text": "The mobile libraries provide standard UI components (a Fragment on Android, a UIViewController on iOS) that you can integrate in your mobile application in the usual fashion. To work, these components need data from the Swedbank Pay APIs, which you must retrieve through your own servers. At the core, the libraries are agnostic as to how the communication between your app and your servers happens, but an example implementation is provided for a server that implements what we call the Merchant Backend API. The Merchant Backend API is designed to transparently reflect the Swedbank Pay API, and the data types used to configure the mobile libraries allow you to organically discover the capabilities of the system. The SDK is designed to integrate the Swedbank Pay Seamless View Payment UI inside your application’s native UI. It generates any html pages required to show the Swedbank Pay UI internally; it does not support using a Checkout or Payments web page that you host yourself. If doing the latter fits your case better, you can show your web page in a Web View instead. In that case, you may benefit from the collection of information about showing Checkout or Payments in a Web View. Prerequisites To start integrating the Swedbank Pay Mobile SDK, you need the following: An agreement that includes Swedbank Pay Digital Payments, specifically Enterprise or Payments Only. Obtained credentials (merchant Access Token) from Swedbank Pay through the Merchant Portal. Please observe that the Swedbank Pay Digital Payments implementations currently available encompasses the paymentmenu scope. Introduction As the Mobile SDK is built on top of Digital Payments. It is a good idea to familiarize yourself with it first, as the rest of this document will assume some familiarity with Checkout concepts. Note, however, that you need not build a working Digital Payments example with web technologies to use the Mobile SDK. The Mobile SDK currently provides a mobile component to show Digital Payments Enterprise or Payments Only in a mobile application. The Post-Purchase part is the same as when using Checkout on a web page, and is thus intentionally left out of the scope of the SDK. Next: Bare Minimum Implementation",
    "tags": "",
    "url": "/checkout-v3/modules-sdks/mobile-sdk/"
  },{
    "title": "Introduction",
    "text": "Swedbank Pay offers SDKs, libraries, modules, extensions and plugins as different ways to integrate and use our products and services. Platform specific packaging that handles a lot of the logic towards our REST API, so you don’t have to. Official Modules Modules, extensions and plugins are typically used as a way to extend webshop platforms such as WooCommerce with functionality that isn’t provided in the core platform. Such functionality may be to allow visitors of your website to pay with a payment provider such as Swedbank Pay. Platform Module Repository Swedbank Pay Payment Menu for WooCommerce …woocommerce-checkout Official SDKs Software Development Kits allow developers to integrate with Swedbank Pay’s APIs without having to write a lot of low-level code dealing with HTTP, status codes, problem messages, parsing, serializaiton, etc. Developers can use their language of choice and write against a set of typed objects native to their programming language and environment. SDKs are often used as a building block to construct a Module. The Android and iOS SDKs are our currently supported SDKs. They both run using our session API, and enable merchants to integrate their own design or UI into our SDK payments. Platform SDK Repository Swedbank Pay SDK for Android …sdk-android Swedbank Pay SDK for iOS …sdk-ios Unofficial SDKs warning Unsupported: These SDKs are at an early stage of development and are not supported as of yet by Swedbank Pay. They are provided as a convenience to speed up your development, so please feel free to play around. However, if you need support, please wait for a future, stable release. Platform SDK Repository Swedbank Pay SDK for .NET …sdk-dotnet Swedbank Pay SDK for PHP …sdk-php Official Libraries Software libraries are bundles of code often used by an SDK or in a Module to solve one or a set of specific problems. Unofficial Libraries warning Unsupported: These libraries are at an early stage of development and are not supported as of yet by Swedbank Pay. They are provided as a convenience to speed up your development, so please feel free to play around. However, if you need support, please wait for a future, stable release. Platform Library Repository Swedbank Pay Core plugin for WooCommerce …woocommerce-core Swedbank Pay SDK Extensions for .NET …sdk-dotnet",
    "tags": "",
    "url": "/checkout-v3/modules-sdks/"
  },{
    "title": "Introduction",
    "text": "Why Swedbank Pay? Get all your payment needs from one provider Manage all digital sales channels through one platform Customize your payment menu Ensure ease of use for everyone with the latest accessibility standards (WCAG) Simplify your financial management with one payout and one report Enjoy uninterrupted service Get started quickly There are three ways of implementing our digital payments, depending on what suits you best. The native implementation, which goes directly towards our APIs, modules (WooCommerce) or SDKs (.NET or PHP for web, iOS and Android for mobile apps). The modules and SDKs have their own section, which is where you need to go if you are planning on using them. A bit less flexible than the native API option, but a lower threshold to get going. If you are looking for the native implementation, we have everything you need in this section. We recommend getting started here. API Platform Use Cases storefront One-Time Payments Kick things off with our basic implementation for all payment methods. arrow_forward storefront Recurring Payments Start getting that steady cash flow with our subscription services. Card arrow_forward storefront One-Click Payments Save your customer's details and make their checkout faster. Card Invoice Swish Trustly Vipps arrow_forward Availability This implementation is available in Danish da-DK, English (US) en-US, Finnish fi-FI, Norwegian nb-NO, and Swedish sv-SE. You can choose the contents of your payment UI from the following payment methods, somewhat depending on which countries you are operating. info Digital Wallets: Some of the digital wallets we offer require you to take additional steps before we can activate them for you. Please follow the link(s) in the table below to read more.   Payment Method Region Apple Pay Card Click to Pay Google Pay™ MobilePay Swedbank Pay Installment Account Swedbank Pay Invoice Swedbank Pay Monthly Payments Swish Trustly Vipps Browser And Operative System Limitations We support all major browsers like (but not limited to) Edge, Firefox, Google Chrome and Safari. The same goes for mobile operative systems like Android or iOS. However, there are limitations for iOS versions older than 12.2 and all versions of Internet Explorer. Due to their age, they are unable to load our payment UI. Payers using these must update to a newer iOS or switch to a supported browser respectively. If their device is too old to update to a viable iOS, they need to use another device.",
    "tags": "",
    "url": "/checkout-v3/"
  },{
    "title": "Developer Portal",
    "text": "",
    "tags": "",
    "url": "/"
  },{
    "title": "Instrument Mode",
    "text": "Instrument Mode warning This feature is only available for merchants who have a specific agreement with Swedbank Pay. With “Instrument Mode”, the Payment Menu will display only one specific payment method instead of all those configured on your merchant account. The PaymentOrder resource works just like it otherwise would, allowing you to remain largely indifferent to the payment method in use. To use the feature you need to add the instrument field in the request as shown in the example below. It is important to only create one paymentOrder for each purchase, even if the payer changes their mind and wants to use another payment method. This is because we don’t allow creating multiple paymentOrders with the same payeeReference. If this happens, you should use the PATCH request below to reflect what the payer has chosen instead of creating a new paymentOrder. This way, you can still use the same payeeReference. If you don’t want to use Swedbank Pay’s Payment Menu (e.g. building your own payment menu), or have multiple payment providers on your site, we strongly recommend that you implement this functionality. In this case you should use the instrument field to enforce which payment method to show. If you have an agreement with Swedbank Pay for both Card and Swish/Vipps processing, and the payer chooses either of these payment methods, you should add the instrument parameter with the specific payment method. Eligibility Check If you want to build your own menu and display at least one wallet like Apple Pay, Click to Pay or Google Pay™, you need to do an eligibility check. This is to ensure that the wallet is supported on the payer’s device or browser. The check helps you streamline the process, removing payment methods that would give the payer an error message or not be displayed in the menu. Using The Script Swedbank Pay provides a script to do this check, with the URL ecom.&lt;environment&gt;.payex.com/checkout/core/integration. Environments available for you are externalintegration and production, and you can switch integration between checkout and paymentmenu. Follow these links for test environment and production environment Checkout scripts. Add the script tag to your website and perform the javascript call await payex.getAcceptedWallets(). We will return a string array with the wallets eligible for that purchase. The format will e.g. be [\"applepay\", \"googlepay\"]. The check should be done as close as possible to the moment the payer wants to open the payment UI. If the payer is in a situation where they may change their browser and/or device between the check is done to the payment UI is opened, the eligibility check may not be accurate to what the UI is displaying. Additional Details We strongly advice against using your own script to perform eligibility checks. Using our check will ensure that what we will display in the menu matches what you offer to the payer. If you do use your own, make sure that it is stricter than the one we provide. If you are not building your own menu or don’t offer these wallets, there is no need to run the script to do the check. Instrument Mode Request An example with invoice as the payment method of choice. Request Copy json to clipboard 1 2 3 4 POST /psp/paymentorders HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.x/2.0 // Version optional for 3.0 and 2.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 { \"paymentorder\": { \"instrument\": \"Invoice-PayExFinancingSe\", \"operation\": \"Purchase\", \"currency\": \"SEK\", \"amount\": 1500, \"vatAmount\": 375, \"description\": \"Test Purchase\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"sv-SE\", \"productName\": \"Checkout3\", // Removed in 3.1, can be excluded in 3.0 if version is added in header \"urls\": \"hostUrls\": [ \"https://example.com\", \"https://example.net\" ], \"paymentUrl\": \"https://example.com/perform-payment\", \"completeUrl\": \"https://example.com/payment-completed\", \"cancelUrl\": \"https://example.com/payment-cancelled\", \"callbackUrl\": \"https://api.example.com/payment-callback\", \"termsOfServiceUrl\": \"https://example.com/termsandconditions.pdf\" }, \"payeeInfo\": { \"payeeId\": \"5cabf558-5283-482f-b252-4d58e06f6f3b\", \"payeeReference\": \"AB832\", \"payeeName\": \"Merchant1\", \"productCategory\": \"A123\", \"orderReference\": \"or-123456\", \"subsite\": \"MySubsite\", \"siteId\": \"MySiteId\", }, \"payer\": { \"requireConsumerInfo\": true, \"digitalProducts\": false, \"shippingAddressRestrictedToCountryCodes\": [ \"NO\", \"US\" ] }, \"orderItems\": [ { \"reference\": \"P1\", \"name\": \"Product1\", \"type\": \"PRODUCT\", \"class\": \"ProductGroup1\", \"itemUrl\": \"https://example.com/products/123\", \"imageUrl\": \"https://example.com/product123.jpg\", \"description\": \"Product 1 description\", \"discountDescription\": \"Volume discount\", \"quantity\": 5, \"quantityUnit\": \"pcs\", \"unitPrice\": 300, \"discountPrice\": 0, \"vatPercent\": 2500, \"amount\": 1500, \"vatAmount\": 375 }, { \"reference\": \"I1\", \"name\": \"InvoiceFee\", \"type\": \"PAYMENT_FEE\", \"class\": \"Fees\", \"description\": \"Fee for paying with Invoice\", \"quantity\": 1, \"quantityUnit\": \"pcs\", \"unitPrice\": 1900, \"vatPercent\": 0, \"amount\": 1900, \"vatAmount\": 0, \"restrictedToInstruments\": [ \"Invoice-PayExFinancingSe\" ] } ], \"riskIndicator\": { \"deliveryEmailAddress\": \"olivia.nyhuus@payex.com\", \"deliveryTimeFrameIndicator\": \"01\", \"preOrderDate\": \"19801231\", \"preOrderPurchaseIndicator\": \"01\", \"shipIndicator\": \"01\", \"giftCardPurchase\": false, \"reOrderPurchaseIndicator\": \"01\", \"pickUpAddress\": { \"name\": \"Olivia Nyhus\", \"streetAddress\": \"Saltnestoppen 43\", \"coAddress\": \"\", \"city\": \"Saltnes\", \"zipCode\": \"1642\", \"countryCode\": \"NO\" } } } } Instrument Mode Response Note the implementation options Seamless View and Redirect (HostedView or Redirect in the response’s implementation field). Depending on which it is, either view-checkout (Seamless View) or redirect-checkout will appear in the response. Never both at the same time. Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x/2.0 api-supported-versions: 3.x/2.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 { \"paymentOrder\": { \"id\": \"/psp/paymentorders/2c3f7a3e-65ca-4493-ac93-08d9dcb313fd\", \"created\": \"2022-01-24T10:54:05.6243371Z\", \"updated\": \"2022-01-24T10:54:19.2679591Z\", \"operation\": \"Purchase\", \"status\": \"Initialized\", \"currency\": \"SEK\", \"amount\": 1500, \"vatAmount\": 375, \"description\": \"Test\", \"initiatingSystemUserAgent\": \"swedbankpay-sdk-dotnet/3.0.1\", \"language\": \"sv-SE\", \"availableInstruments\": [ \"Invoice-PayExFinancingSe\" ], \"integration\": \"HostedView|Redirect\", \"instrumentMode\": false, \"guestMode\": false, \"orderItems\": { \"id\": \"/psp/paymentorders/2c3f7a3e-65ca-4493-ac93-08d9dcb313fd/orderitems\" }, \"urls\": { \"id\": \"/psp/paymentorders/2c3f7a3e-65ca-4493-ac93-08d9dcb313fd/urls\" }, \"payeeInfo\": { \"id\": \"/psp/paymentorders/2c3f7a3e-65ca-4493-ac93-08d9dcb313fd/payeeinfo\" }, \"payer\": { \"id\": \"/psp/paymentorders/2c3f7a3e-65ca-4493-ac93-08d9dcb313fd/payers\" }, \"history\": { \"id\": \"/psp/paymentorders/2c3f7a3e-65ca-4493-ac93-08d9dcb313fd/history\" }, \"failed\": { \"id\": \"/psp/paymentorders/2c3f7a3e-65ca-4493-ac93-08d9dcb313fd/failed\" }, \"aborted\": { \"id\": \"/psp/paymentorders/2c3f7a3e-65ca-4493-ac93-08d9dcb313fd/aborted\" }, \"paid\": { \"id\": \"/psp/paymentorders/2c3f7a3e-65ca-4493-ac93-08d9dcb313fd/paid\" }, \"cancelled\": { \"id\": \"/psp/paymentorders/2c3f7a3e-65ca-4493-ac93-08d9dcb313fd/cancelled\" }, \"financialTransactions\": { \"id\": \"/psp/paymentorders/2c3f7a3e-65ca-4493-ac93-08d9dcb313fd/financialtransactions\" }, \"failedAttempts\": { \"id\": \"/psp/paymentorders/2c3f7a3e-65ca-4493-ac93-08d9dcb313fd/failedattempts\" }, \"metadata\": { \"id\": \"/psp/paymentorders/2c3f7a3e-65ca-4493-ac93-08d9dcb313fd/metadata\" } }, \"operations\": [ { \"method\": \"GET\", \"href\": \"https://ecom.externalintegration.payex.com/payment/menu/5a17c24e-d459-4567-bbad-aa0f17a76119?_tc_tid=30f2168171e142d38bcd4af2c3721959\", \"rel\": \"redirect-checkout\", \"contentType\": \"text/html\" }, { \"method\": \"GET\", \"href\": \"https://ecom.externalintegration.payex.com/payment/core/js/px.payment.client.js?token=5a17c24e-d459-4567-bbad-aa0f17a76119&amp;culture=nb-NO&amp;_tc_tid=30f2168171e142d38bcd4af2c3721959\", \"rel\": \"view-checkout\", \"contentType\": \"application/javascript\" }, { \"href\": \"https://api.payex.com/psp/paymentorders/222a50ca-b268-4b32-16fa-08d6d3b73224\", \"rel\":\"update-order\", \"method\":\"PATCH\", \"contentType\":\"application/json\" }, { \"href\": \"https://api.payex.com/psp/paymentorders/222a50ca-b268-4b32-16fa-08d6d3b73224\", \"rel\": \"abort\", \"method\": \"PATCH\", \"contentType\": \"application/json\" }, { \"href\": \"https://api.payex.com/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce\", \"rel\": \"abort-paymentattempt\", \"method\": \"PATCH\", \"contentType\": \"application/json\" }, { \"href\": \"https://api.payex.com/psp/paymentorders/222a50ca-b268-4b32-16fa-08d6d3b73224\", \"rel\": \"set-instrument\", \"method\": \"PATCH\", \"contentType\": \"application/json\" } ] } PATCH Payment Method Selection Note the rel named set-instrument, which appears among the available operations in the paymentOrder response when instrument mode is applied. To switch payment method after the paymentOrder has been created, you can use the following PATCH request, here with Swish as an example. Request Copy json to clipboard 1 2 3 4 PATCH /psp//paymentorders/7e6cdfc3-1276-44e9-9992-7cf4419750e1 HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.x/2.0 // Version optional for 3.0 and 2.0 1 2 3 4 5 6 { \"paymentorder\": { \"operation\": \"SetInstrument\", \"instrument\": \"Swish\" } } Available Payment Methods The valid payment methods for the paymentOrder can be retrieved from the availableInstruments parameter in the paymentOrder response. Using a merchant set up with contracts for Creditcard, Swish and Invoice, availableInstruments will look like this: Available Payment Methods Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x/2.0 api-supported-versions: 3.x/2.0 1 2 3 4 5 \"availableInstruments\": [ \"CreditCard\", \"Invoice-PayExFinancingSe\", \"Swish\" ]",
    "tags": "",
    "url": "/checkout-v3/features/customize-ui/instrument-mode/"
  },{
    "title": "Instrument Mode",
    "text": "Instrument Mode In “Instrument Mode” the Payment Menu will display only one specific payment instrument instead of all configured on your merchant account. Please refer to the Payment Menu documentation for more information on when you should use this feature. To use Instrument Mode with a Merchant Backend, set the instrument field of your payment order to a non-null value. On Android, instrument is a String, but some common instruments are available int the PaymentInstruments class: Android 1 2 3 4 5 6 7 8 9 val paymentOrder = PaymentOrder( ..., instrument = PaymentInstruments.CREDIT_CARD, ... ) val otherPaymentOrder = paymentOrder.copy( instrument = \"SomeInstrument\" ) On iOS, instrument is an struct that wraps a String, and provides common instruments as static constants: iOS 1 2 paymentOrder.instrument = .creditCard paymentOrder.instrument = Instrument(rawValue: \"SomeInstrument\") Changing The Instrument If a payment order is created in instrument mode, the Merchant Backend Configuration will populate the instrument and availableInstruments fields of the ViewPaymentOrderInfo. This is also recommended to do if using instrument mode with a custom Configuration. This way, the containing application can observe the payment process and determine if it is in instrument mode, and display additional UI accordingly. Android 1 2 3 4 5 6 7 // paymentViewModel is a property of FragmentActivity // lifecycleOwner should usually be viewLifecycleOwner if we are in a Fragment paymentViewModel.richState.observe(this) { richState -&gt; if (richState?.viewPaymentOrderInfo?.instrument != null) { // show instrument mode UI } } iOS 1 2 3 4 5 6 // paymentOrderDidShow is a part of the protocol SwedbankPaySDKDelegate func paymentOrderDidShow(info: SwedbankPaySDK.ViewPaymentOrderInfo) { if info.instrument != nil { // show instrument mode UI } } To change the instrument of an ongoing payment order, call the updatePaymentOrder method. Its argument is passed to your Configuration, which must know how to interpret it. If using the Merchant Backend Configuration, the argument should be the new instrument to set. Your Configuration should report the valid instruments for the ongoing payment order in the ViewPaymentOrderInfo.availableInstruments property. Your UI can observe this property to show only valid options to the user. The Merchant Backend Configuration populates this field when. Android 1 2 // On Android, updatePaymentOrder is part of PaymentViewModel paymentViewModel.updatePaymentOrder(PaymentInstruments.INVOICE) iOS 1 2 // On iOS, updatePaymentOrder is part of SwedbankPaySDKController swedbankPaySDKController.updatePaymentOrder(SwedbankPaySDK.Instrument.invoice) You should, of course, then observe when the update completes, and update your UI accordingly. Android 1 2 3 4 5 6 paymentViewModel.state.observe(this) { when (it) { UPDATING_PAYMENT_ORDER -&gt; showUpdatingUI() else -&gt; hideUpdatingUI() } } iOS 1 2 3 4 5 6 7 8 9 10 11 12 13 14 showUpdatingUI() swedbankPaySDKController.updatePaymentOrder(SwedbankPaySDK.Instrument.invoice) // ... elsewhere ... // paymentOrderDidShow is a part of the protocol SwedbankPaySDKDelegate func paymentOrderDidShow(info: SwedbankPaySDK.ViewPaymentOrderInfo) { // ...code... hideUpdatingUI() } func updatePaymentOrderFailed(updateInfo: Any, error: Error) { hideUpdatingUI() }",
    "tags": "",
    "url": "/checkout-v3/modules-sdks/mobile-sdk/features/optional/instrument-mode/"
  },{
    "title": "Integrated Commerce",
    "text": "Swedbank Pay’s Digital Payments API is built in a way that depends on that you, as a merchant, is able to store the paymentOrderId. The paymentOrderId is a URL which points to the specific instance of a payment order resource, but in some cases it will be hard to use it as a payment reference. To help you keep track of the transaction easier, we provide a unique identification called referenceCode in all v3 implementations. The code can then be printed and, for instance, used as a scannable barcode for future tracking. The referenceCode isn’t available by default, but needs to be activated by us to appear in your payment order responses. Reference Code Query When enabled, the referenceCode will appear as a 16 digit code in the expanded paid field when the payment is fully paid. In addition to the regular GET method, you may obtain information about the payment by doing a QUERY with the referenceCode in the JSON body as shown in the below example. Both GET and QUERY responses will look like the abbreviated paid example below. The parts omitted from this example will look like the response from a regular GET request. GET Request Request 1 2 3 4 GET /psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/paid HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.x/2.0 // Version optional for 3.0 and 2.0 QUERY Request Request Copy json to clipboard 1 2 3 4 QUERY /psp/paymentorders HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.x/2.0 // Version optional for 3.0 and 2.0 1 2 3 { \"referenceCode\": 1717224235360011 } GET And QUERY Response Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x/2.0 api-supported-versions: 3.x/2.0 1 2 3 4 5 6 7 8 9 10 11 12 { \"paymentOrder\": \"/psp/paymentorders/5adc265f-f87f-4313-577e-08d3dca1a26c\", \"paid\": { \"id\": \"/psp/paymentorders/1f8d409e-8d8c-4ba1-a3ab-08da8caf7918/paid\", \"instrument\": \"Creditcard\", \"number\": 80100001190, \"payeeReference\": \"1662360210\", \"amount\": 1500, \"referenceCode\": \"1717224235360011\" \"details\": {} } } Field Type Description paymentOrder object The payment order object. paid object The paid object. id string The relative URL and unique identifier of the paymentorder resource . Please read about URL Usage to understand how this and other URLs should be used in your solution. instrument string Payment method used in the cancelled payment. number integer The transaction number, useful when there’s need to reference the transaction in human communication. Not usable for programmatic identification of the transaction, where id should be used instead. payeeReference string A unique reference from the merchant system. Set per operation to ensure an exactly-once delivery of a transactional operation. Length and content validation depends on whether the transaction.number or the payeeReference is sent to the acquirer. If Swedbank Pay handles the settlement, the transaction.number is sent and the payeeReference must be in the format of A-Za-z0-9 and string(30). If you handle the settlement, Swedbank Pay will send the payeeReference and it will be limited to the format of string(12). All characters must be digits. amount integer The transaction amount (including VAT, if any) entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The amount displayed is the final amount the payer paid for their order, including any payment method specific discounts or fees. referenceCode string A 16 digit reference code which can be used for tracking payments. details integer Details connected to the payment.",
    "tags": "",
    "url": "/checkout-v3/features/optional/integrated-commerce/"
  },{
    "title": "iOS",
    "text": "This guide assumes that you are using the Merchant Backend Configuration and your backend implements the Merchant Backend API. If you are using a custom backend instead, the meaning of SwedbankPaySDKController arguments will be different, as well as any errors reported, but the basic process is the same. The differences will be highlighted in the chapter on custom backends. Installation The iOS component of the Swedbank Pay Mobile SDK is split into two libraries: SwedbankPaySDK contains the core SDK, while SwedbankPaySDKMerchantBackend contains utilities for interfacing with the Merchant Backend API. If you are using a custom backend, you to not need to install the SwedbankPaySDKMerchantBackend library. Swift Package Manager The SDK is available through the Swift Package Manager. This is the simplest way of adding the SDK to an Xcode project. Follow the Xcode documentation to add a SwiftPM dependency. The package repository URL for the SDK is https://github.com/SwedbankPay/swedbank-pay-sdk-ios.git. Add the SwedbankPaySDK library, and the SwedbankPaySDKMerchantBackend if needed. CocoaPods The SDK is also available through CocoaPods. There are two pods: SwedbankPaySDK for the core SDK, and SwedbankPaySDKMerchantBackend for the Merchant Backend utilities. Add the relevant dependencies in your Podfile: 1 pod 'SwedbankPaySDK', '~&gt; 5.0.0' 1 pod 'SwedbankPaySDKMerchantBackend', '~&gt; 5.0.0' Custom URL Scheme and Associated Domain The Payment Url handling in the iOS SDK uses Universal Links, and additionally a custom url scheme as a fallback mechanism. You must therefore set these up in the app before using the SDK. The easiest way to add a url scheme to your app is to select the project file, go to the Info tab, scroll down to URL Types, and click the + button to add a new scheme. Insert a single unique url scheme to the URL Schemes field. You can choose the url Identifier freely, but remember that that too should be unique. The Role for the url type should be Editor. Finally, to mark this url type as the Swedbank Pay payment url scheme, open the Additional url type properties, and add a property with the key com.swedbank.SwedbankPaySDK.callback, type Boolean, and value YES. You can also edit the Info.plist file directly, if you wish. To set up universal links in your application, you first need to add the Associated Domains capability. Then, add your Merchant Backend’s domain as an applinks associated domain. Additionally, your merchant backend must have the appropriate Apple App Site Association file configured. Usage sequenceDiagram participant App participant SDK participant Merchant participant SwedbankPay as Swedbank Pay participant Ext as External App rect rgba(238, 112, 35, 0.05) note left of App: Configuration App -&gt;&gt; SDK: SwedbankPaySDK.MerchantBackendConfiguration(backendUrl: \"https://example.com/swedbank-pay-mobile/\", headers: [:]) SDK --&gt;&gt; App: configuration end opt Unless Guest Payment App -&gt;&gt; SDK: SwedbankPaySDK.Consumer(language = ..., shippingAddressRestrictedToCountryCodes = ...) SDK --&gt;&gt; App: consumer end rect rgba(138, 205, 195, 0.1) note left of App: Prepare Payment App -&gt;&gt; SDK: PaymentOrderUrls(configuration: configuration, language: ...) SDK --&gt;&gt; App: paymentOrderUrls App -&gt;&gt; SDK: PaymentOrder(urls: paymentOrderUrls, ...) SDK --&gt;&gt; App: paymentOrder end App -&gt;&gt; SDK: SwedbankPaySDKController(configuration: configuration, consumer: consumer, paymentOrder: paymentOrder) SDK --&gt;&gt; App: swedbankPaySdkController App -&gt;&gt; SDK: swedbankPaySdkController.delegate = ... App -&gt;&gt; App: Show swedbankPaySdkController rect rgba(138, 205, 195, 0.1) note left of App: Discover Endpoints SDK -&gt;&gt; Merchant: GET /swedbank-pay-mobile/ Merchant --&gt;&gt; SDK: { \"consumers\": \"/swedbank-pay-mobile/consumers\", \"paymentorders\": \"/swedbank-pay-mobile/paymentorders\" } end opt Unless Guest Payment SDK -&gt;&gt; Merchant: POST /swedbank-pay-mobile/consumers Merchant -&gt;&gt; SwedbankPay: POST /psp/consumers SwedbankPay --&gt;&gt; Merchant: rel: view-consumer-identification Merchant --&gt;&gt; SDK: rel: view-consumer-identification SDK -&gt;&gt; SDK: Show html page with view-consumer-identification SwedbankPay -&gt;&gt; SDK: Consumer identification process SDK -&gt;&gt; SwedbankPay: Consumer identification process SwedbankPay -&gt;&gt; SDK: consumerProfileRef SDK -&gt;&gt; SDK: paymentOrder.payer = { consumerProfileRef } end rect rgba(138, 205, 195, 0.1) note left of App: Payment Menu SDK -&gt;&gt; Merchant: POST /swedbank-pay-mobile/paymentorders Merchant -&gt;&gt; SwedbankPay: POST /psp/paymentorders SwedbankPay --&gt;&gt; Merchant: rel: view-paymentorder Merchant --&gt;&gt; SDK: rel: view-paymentorder SDK -&gt;&gt; SDK: Show html page with view-paymentorder SwedbankPay -&gt;&gt; SDK: Payment process SDK -&gt;&gt; SwedbankPay: Payment process opt Redirect to Third-Party Page inside SwedbankPaySDKController ① SDK -&gt;&gt; SDK: Show third-party page SDK -&gt;&gt; SDK: Intercept navigation to paymentUrl SDK -&gt;&gt; SDK: Reload html page with view-paymentorder end opt Redirect to Third-Party Page in Safari ② SDK -&gt;&gt; Ext: Launch Safari Ext -&gt;&gt; SDK: Return from Safari end opt Launch External Application SDK -&gt;&gt; Ext: Start external application Ext -&gt;&gt; SDK: Return from external application ③ end SDK -&gt;&gt; SDK: Intercept navigation to completeUrl SDK -&gt;&gt; SDK: delegate.paymentComplete() end App -&gt;&gt; App: Remove paymentFragment ① Only pages tested to work with WKWebView are opened inside SwedbankPaySDKController. This list is updated as new pages are verified. ② Other pages are opened in Safari. See the section on external applications for details on how the process returns to the SDK afterwards. ③ See the section on external applications for details. The iOS SDK is contained in the module SwedbankPaySDK. 1 import SwedbankPaySDK The Merchant Backend utilities are contained in the module SwedbankPaySDKMerchantBackend. 1 import SwedbankPaySDKMerchantBackend The main component of the SDK is SwedbankPaySDKController, a UIViewController that handles a single payment order. When initializing a SwedbankPaySDKController, you must provide a SwedbankPaySDKConfiguration that describes the server environment the SwedbankPaySDKController is working with, along with a SwedbankPaySDK.PaymentOrder, and, unless making a guest payment, a SwedbankPaySDK.Consumer. Providing a SwedbankPaySDK.Consumer makes future payments by the same payer easier. The SwedbankPaySDKConfiguration is, in most cases, static for a given server environment. Therefore, it makes sense to keep it in a convenient constant. The SwedbankPaySDK.MerchantBackendConfiguration initializer can determine your application’s custom scheme for payment urls automatically, if you have set it up as described above. 1 2 3 4 5 6 7 let swedbankPayConfig = SwedbankPaySDK.MerchantBackendConfiguration( backendUrl: \"https://example.com/swedbank-pay-mobile/\", headers: [:] ) // Make it the default for all SDKControllers SwedbankPaySDKController.defaultConfiguration = swedbankPayConfig The semantics of SwedbankPaySDK.PaymentOrder properties are the same as the fields of the POST /psp/paymentorders request. Sensible default values are provided for many of the properties. In a similar fashion to how the Android SDK works, while there is no default value for the urls property, there are convenience constructors for the SwedbankPaySDK.PaymentOrderUrls type, which are recommended for general use. Assuming you have the iOS Payment Url Helper endpoint set up with the specified static path relative to your backend url (i.e. sdk-callback/ios-universal-link), then using one of the convenience constructors taking a SwedbankPaySDK.MerchantBackendConfiguration argument will set the paymentUrl correctly. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 let paymentOrder = SwedbankPaySDK.PaymentOrder( currency = \"SEK\", amount = 1500, vatAmount = 375, description = \"Test Purchase\", language = .Swedish, urls = SwedbankPaySDK.PaymentOrderUrls( configuration: swedbankPayConfig, language: .Swedish ), payeeInfo = SwedbankPaySDK.PayeeInfo( // ① payeeName = \"Merchant1\", productCategory = \"A123\", orderReference = \"or-123456\", subsite = \"MySubsite\" ), orderItems = [ SwedbankPaySDK.OrderItem( reference = \"P1\", name = \"Product1\", type = .Product, class = \"ProductGroup1\", itemUrl = URL(string: \"https://example.com/products/123\"), imageUrl = URL(string: \"https://example.com/product123.jpg\"), description = \"Product 1 description\", discountDescription = \"Volume discount\", quantity = 4, quantityUnit = \"pcs\", unitPrice = 300, discountPrice = 200, vatPercent = 2500, amount = 1000, vatAmount = 250 ) ] ) ① payeeId and payeeReference are required fields, but default to the empty string. The assumption here is that your Merchant Backend will override the values set here. If your system works better with the Mobile Client setting them instead, they are available here also. To start a payment, create a SwedbankPaySDKController and call startPayment. You can add it to the view hierarchy any way you like, and here we are using the present function. Note that this function always uses the new Digital Payments. 1 2 3 4 let paymentController = SwedbankPaySDKController() paymentController.startPayment(paymentOrder: payment) present(paymentController, animated: true, completion: nil) To start a payment with consumer-checkin, you need to use CheckoutV2 and supply a consumer value. This function also allows merchants to remain on V2 while updating the SDK, and then to opt-in to V3 when ready. 1 2 3 4 5 6 7 8 9 10 let paymentController = SwedbankPaySDKController() paymentController.startPayment( withCheckin: true, consumer: consumer, paymentOrder: payment, userData: nil ) present(paymentController, animated: true, completion: nil) // There are, of course, many other ways of displaying a view controller The semantics of SwedbankPaySDK.Consumer properties are the same as the fields of the POST /psp/consumers. There are default values for the operation and language properties (.InitiateConsumerSession and .English, respectively). 1 2 3 4 let consumer = SwedbankPaySDK.Consumer( language = .Swedish, shippingAddressRestrictedToCountryCodes: = [\"NO\", \"SE\", \"DK\"] ) To observe the payment process, set a delegate to the SwedbankPaySDKController. When the delegate is informed that the payment process is finished, you should remove the SwedbankPaySDKController and inform the user of the result. 1 paymentController.delegate = self 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 func paymentComplete() { dismiss(animated: true, completion: nil) // Check payment status from your backend // Notify user } func paymentcancelled() { dismiss(animated: true, completion: nil) // Notify user } func paymentFailed(error: Error) { dismiss(animated: true, completion: nil) // Notify user } Note that checking the payment status after completion is outside the scope of the Mobile SDK. Your backend should collect any information it needs to perform this check when it services the request to the Payment Orders endpoint made by the SwedbankPaySDKController. Problems If the payment fails for any reason, the cause will be made available as the argument of the paymentFailed(error:) delegate method. The error will be of any type thrown by your SwedbankPaySDKConfiguration. In the case of SwedbankPaySDK.MerchantBackendConfiguration this means SwedbankPaySDK.MerchantBackendError. If errors are encountered in the payment process, the Merchant Backend is expected to respond with a Problem Details for HTTP APIs (RFC 7807) message. If the payment fails because of a problem, the SwedbankPaySDK.MerchantBackendError will be .problem, the associated value being the problem as parsed from the response. The iOS SDK will parse any RFC 7807 problem, but it has specialized data types for known problem types, namely the Common Problems and the Merchand Backend Problems. Problems are expressed in Swift as enums with associated values, representing a hierarchy of problem types. At the root of the hierarchy is enum SwedbankPaySDK.Problem, with two cases: .Client and .Server. A .Client problem is one caused by client behavior, and is to be fixed by changing the request made to the server. Generally, a .Client problem is a programming error, with the possible exception of .Client(.MobileSDK(.Unauthorized)). A .Server problem is one caused by a malfunction or lack of service in the server evironment. A .Server problem is fixed by correcting the behavior of the malfunctioning server, or simply trying again later. Both .Client and .Server have an associated value, of type SwedbankPaySDK.ClientProblem and SwedbankPaySDK.ServerProblem respectively, that further classify the problems as .MobileSDK, .SwedbankPay, .Unknown or .UnexpectedContent. MobileSDK problems are ones with Merchant Backend problem types, while SwedbankPay problems have Swedbank Pay API problem types. Unknown problems are of types that the SDK has no knowledge of. .UnexpectedContent problems are not proper RFC 7807 problems, but are emitted when the SDK cannot make sense of the response it received from the backend. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 func paymentFailed(failureReason: SwedbankPaySDKController.FailureReason) { // remove SwedbankPaySDKController switch failureReason { case .Problem(.Client(.MobileSDK(.Unauthorized(let message, _)))): print(\"Credentials invalidated: \\(message)\") case .Problem(.Client(.MobileSDK)): print(\"Other client error at merchant backend\") case .Problem(.Client(.SwedbankPay(let problem))) where problem.type == .InputError: print(\"Payment rejected by Swedbank Pay: \\(problem.detail); Fix: \\(problem.action)\") case .Problem(.Client(.Unknown(let problem))): if problem.type == \"https://example.com/problems/special-problem\" { print(\"Special problem occurred: \\(problem.detail)\") } else { print(\"Unexpected problem: \\(problem.raw)\") } case .Problem(.Server(.MobileSDK(.BackendConnectionTimeout(let message, _)))): print(\"Swedbank Pay timeout: \\(message)\") case .Problem(.Server(.SwedbankPay(let problem))) where problem.type == .SystemError: print(\"Generic server error at Swedbank Pay: \\(problem.detail)\") default: break } } Payment URL And External Applications The payment process may involve navigating to third-party web pages, or even launching external applications. To resume processing the payment in the payment menu, each payment order must have a Payment Url. Let us now discuss how that payment url is used in the iOS environment. In any case, using the convenience constructors for SwedbankPaySDK.PaymentOrderUrls is recommended; they will generate a unique payment url, which will be routed to the application in all cases, assuming the application and the merchant backend are configured correctly. SwedbankPaySDKController internally uses a WKWebView, and in many cases third-party pages can be opened inside that web view. In these cases the SDK can intercept the navigation to the payment url and reload the payment menu without further setup. Unfortunately, our testing has revealed that some web pages used in confirmation flows are incompatible with being opened in a web view. Because of these cases, SwedbankPaySDKController will only open known-good pages internally, and will open other pages in Safari instead. The SDK contains a list of domain names of pages tested to work in the web view. You can also specify your own list of domains, and there are debugging features available for testin unknown pages in the web view. Pull requests updating the list of good domains in the SDK are welcome. sequenceDiagram participant SDK participant Web as Web View participant Safari Web -&gt;&gt; SDK: Navigate to third-party web page SDK -&gt;&gt; SDK: Check if page is in list of good domains alt Domain is good SDK -&gt;&gt; Web: Allow navigation Web -&gt;&gt; Web: Load third-party page else Domain is not good SDK -&gt;&gt; Web: Cancel navigation SDK -&gt;&gt; Safari: Open third-party page end Returning to the payment menu from inside the web view is simple: detect the navigation and override it to reload the payment menu instead. sequenceDiagram participant Page as 3rd Party Page participant Web as Web View participant SDK Page -&gt;&gt; Web: Navigate to payment url Web -&gt;&gt; SDK: Navigate to payment url SDK -&gt;&gt; Web: Cancel navigation SDK -&gt;&gt; SDK: Reload payment menu Returning to the payment menu from Safari is more involved. The merchant backend page explains the process from the backend perspective; let us now view it from the iOS side. When the third party page wants to return to the payment menu, it navigates to the payment url. As this navigation is happening inside Safari, the payment url must provide some meaningful respose when Safari makes the request. However, even before that happens, consider the case where the payment url is a universal link for the application using the SDK. Assuming the conditions for opening universal links in the registered application are met, then Safari will never actually request the payment url, but will instead open the application, giving it the universal link in its Application Delegate’s application(_:continue:restorationHandler:) method. Recall that we enabled universal links for the backend url’s domain in the installation instructions. Note that thevmerchant backend must also be properly configured to enable universal links. The application delegate is, of course, squarely in the domain of the application; the SDK cannot hook into it automatically. Therefore, you need to implement the application(_:continue:restorationHandler:) method, and pass control over to the SDK when a Swedbank Pay SDK Payment Url is passed into it. Do this by calling the SwedbankPaySDK.continue(userActivity:) method. 1 2 3 4 5 6 7 func application( _ application: UIApplication, continue userActivity: NSUserActivity, restorationHandler: @escaping ([UIUserActivityRestoring]?) -&gt; Void ) -&gt; Bool { return SwedbankPaySDK.continue(userActivity: userActivity) } sequenceDiagram participant Page as 3rd Party Page participant Safari participant App as Application participant SDK Page -&gt;&gt; Safari: Navigate to payment url Safari -&gt;&gt; Safari: Recognize universal link Safari -&gt;&gt; App: Bring to foreground Safari -&gt;&gt; App: application(application, continue: userActivity, restorationHandler: restorationHandler) App -&gt;&gt; SDK: SwedbankPaySDK.continue(userActivity: userActivity) SDK -&gt;&gt; SDK: Reload payment menu Testing has shown, however, that the navigation to the payment url is not always processed as a universal link, and is instead opened in Safari. A major reason for this happening are the conditions placed on routing a universal link to the registered application. A crucial condition to consider is that the navigation must have started from user interaction. It appears that many third party pages involved in verification flows will navigate to the payment url not from user interaction directly, but through e.g. timers. This will, unfortunately, prevent the link from being opened in the application. As it stands, we need a way to get back to the application even when the payment url is opened in Safari. The simplest way of accomplishing this is to respond with a redirect to a custom scheme url. Doing that will, however, always show an unattractive confirmation alert before the user is directed to the application. Therefore, let us first consider if there is a way to reattempt the universal link navigation, while attempting to maximize the chance of it being routed to the application. Reviewing the conditions for universal links opening in the registered application, we note two things: Firstly, the navigation must originate from user interaction. Thus, opening the payment url in Safari must produce a page with a control the user can interact with, which must trigger a navigation to the payment url. Secondly, the navigation must be to a domain different to the current page. This means that opening the payment url must redirect to a page on a different domain, so that a navigation back to the payment url from that page is given to the application to handle. As explained on the merchant backend page, we solve this by having the payment url respond with a redirect response to a page with a link to the payment url (but see below). sequenceDiagram participant User participant Page as 3rd Party Page participant Safari participant Merchant as Payment Url Host participant Trampoline as Payment Url Trampoline participant App as Application participant SDK Page -&gt;&gt; Safari: Navigate to payment url (at Merchant) Safari -&gt;&gt; Merchant: GET &lt;payment url&gt; Merchant -&gt;&gt; Safari: 301 Moved Permanently Location: &lt;redirect url&gt; Safari -&gt;&gt; Trampoline: GET &lt;redirect url&gt; Trampoline -&gt;&gt; Safari: &lt;http&gt;...&lt;a href=\"&lt;payment url&gt;\"&gt;...&lt;/http&gt; Safari -&gt;&gt; User: Page with \"Back to Application\" button User -&gt;&gt; Safari: Tap on button rect rgba(238, 112, 35, 0.05) note left of Safari: Same as direct path Safari -&gt;&gt; Safari: Recognize universal link Safari -&gt;&gt; App: Bring to foreground Safari -&gt;&gt; App: application(application, continue: userActivity, restorationHandler: restorationHandler) App -&gt;&gt; SDK: SwedbankPaySDK.continue(userActivity: userActivity) SDK -&gt;&gt; SDK: Reload payment menu end Finally, to prevent the user being stuck in a situation where universal links fail to work despite our efforts, and to help in the development phase where configurations may end up being broken from time to time, we also have a custom scheme fallback. The way this works is that the when the payment url link is tapped on the page where the payment url redirected to, then in that instance the payment url will redirect to a custom scheme url instead. Now this is, of course, more or less impossible to do, so we relax the requirements of the payment url slightly: In addition to the original payment url, the SDK accepts a payment url with any number of additional query parameters added (note that none may be removed or modified, though). This enables us to alter the behavior of the backend on the “same” payment url. To forward the custom-scheme payment urls to the SDK, implement the application(_:open:options:) method in your application delegate, and call SwedbankPaySDK.open(url: url) to let the SDK handle the url. 1 2 3 4 5 6 7 func application( _ app: UIApplication, open url: URL, options: [UIApplication.OpenURLOptionsKey : Any] = [:] ) -&gt; Bool { return SwedbankPaySDK.open(url: url) } sequenceDiagram participant User participant Page as 3rd Party Page participant Safari participant Merchant as Payment Url Host participant Trampoline as Payment Url Trampoline participant App as Application participant SDK Page -&gt;&gt; Safari: Navigate to payment url (at Merchant) Safari -&gt;&gt; Merchant: GET &lt;payment url&gt; Merchant -&gt;&gt; Safari: 301 Moved Permanently Location: &lt;redirect url&gt; Safari -&gt;&gt; Trampoline: GET &lt;redirect url&gt; Trampoline -&gt;&gt; Safari: &lt;http&gt;...&lt;a href=\"&lt;payment url with fallback flag&gt;\"&gt;...&lt;/http&gt; Safari -&gt;&gt; User: Page with \"Back to Application\" button User -&gt;&gt; Safari: Tap on button Safari -&gt;&gt; Merchant: GET &lt;payment url with fallback flag&gt; Merchant -&gt;&gt; Safari: 301 Moved Permanently Location: &lt;custom scheme url&gt; Safari -&gt;&gt; User: Confirmation Dialog User -&gt;&gt; Safari: Accept App Launch Safari -&gt;&gt; App: Bring to foreground Safari -&gt;&gt; App: application(application, open: url) App -&gt;&gt; SDK: SwedbankPaySDK.open(url: url) SDK -&gt;&gt; SDK: Reload payment menu Back: Android Next: Native Payments",
    "tags": "",
    "url": "/checkout-v3/modules-sdks/mobile-sdk/ios/"
  },{
    "title": "Java",
    "text": "Installation The SDK jar file is hosted on maven central. Look up the latest version. Add the following dependency to you application: 1 2 3 4 5 &lt;dependency&gt; &lt;groupId&gt;com.swedbankpay.pax&lt;/groupId&gt; &lt;artifactId&gt;swedbankpay-pax-sdk&lt;/artifactId&gt; &lt;version&gt;1.2.38&lt;/version&gt; &lt;/dependency&gt; How to use You need to implement the callback interface SwpTrmCallbackInterface to receive asynchronous callbacks from the terminal. This class then need to be provided when creating an instance of SwpTrmInterface. Once an instance is created call start. Supplied SaleApplInfo when calling Start method decides whether to implement a server or just run as a client. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 public class PaxController implements SwpTrmCallbackInterface { private SwpTrmInterface paxTerminal; public void initialize() { int port = 11000; SwpTrmCallbackInterface callbackInterface = this; Config config = new Config.ConfigBuilder(\"http://\" + ipTextField.getText(), port).build(); List&lt;SaleCapabilitiesEnumeration&gt; saleCapabilities = Arrays.asList(SaleCapabilitiesEnumeration.PRINTER_RECEIPT, ...); SwpTrmInterface paxTerminal = paxTerminal = PAXTrmImpl.create(config, callbackInterface); paxTerminal = paxTerminal.start(new SaleApplInfo(\"Demo\", \"Test SwpIf\", \"1.0\", \"poi-id\", saleCapabilities, TerminalEnvironmentEnumeration.ATTENDED)); } @Override void terminalDisplayEvent(int txtId, String text) {} @Override void terminalNotificationEvent(EventToNotifyEnumeration type, String eventDetails) {} @Override void terminalAddressObtainedEvent(String ipv4, int port) {} @Override boolean onPrintRequest(boolean transactionEnded, Receipt receipt) {} @Override void requestForConfirmationEvent(String message, ConfirmationResult cashierConfirmation) {} } There are two ways to call each method, synchronous and asynchronous. In the synchronous method call the program stops and waits until the response arrives. In the asynchronous method call the program continues to perform other tasks and when the response arrives the program handles it. The asynchronous call is especially useful for the PaymentRequest where the response arrives after the payment process is done. Open Call openAsync to send a login and wait for answer. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 public void onOpenButtonClick() { //Asynchronous example CompletableFuture&lt;OpenResult&gt; openResult=paxTerminal.openAsync(); //Register method to call when the response arrives openResult.thenAccept(this::onOpenResult); } //When the response arrives display it private void onOpenResult(OpenResult result) { if (result.isSuccess()) { logOutput(String.format(\"Login successful. (Software version: %s, Environment: %s, Serial number: %s)\", result.getSoftwareVersion(), result.getEnvironment(), result.getSerialNumber())); } else { logOutput(String.format(\"Login failed with error: %s. (%s)\", result.getErrorCondition(), result.getResponseText())); } } Payment &amp; refund Call paymentAsync or refundAsync to start a transaction and wait for response. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 public void onPayButtonClick() { try { CompletableFuture&lt;PaymentRequestResult&gt; payment = paxTerminal.paymentAsync(new BigDecimal(amountTextField.getText()), BigDecimal.ZERO, \"SEK\"); payment.thenAccept(this::showPaymentResultMessage); } catch (NumberFormatException e) { logOutput(\"Invalid amount!\"); } } private void showPaymentResultMessage(PaymentRequestResult paymentResult) { if (paymentResult.isSuccess()) { logOutput(\"Payment ok.\"); printReceipt(paymentResult.getReceipt()); } else { logOutput(\"Payment failed: \" + paymentResult.getErrorCondition() + \", (\" + paymentResult.getResponseText() + \")\"); } } public void onRefundButtonClick() { logOutput(\"Starting refund...\"); try { CompletableFuture&lt;PaymentRequestResult&gt; payment = paxTerminal.refundAsync(new BigDecimal(amountTextField.getText()), \"SEK\", referenceTextField.getText()); payment.thenAccept(this::showRefundResultMessage); } catch (NumberFormatException e) { logOutput(\"Invalid amount!\"); } } private void showRefundResultMessage(PaymentRequestResult refundResult) { if (refundResult.isSuccess()) { logOutput(\"Refund ok\"); printReceipt(refundResult.getReceipt()); } else { logOutput(\"Refund failed: \" + refundResult.getErrorCondition() + \", (\" + refundResult.getResponseText() + \")\"); } } Get payment instrument Call getPaymentInstrumentAsync to start a transaction when a card needs to be read before amount is known. Call either paymentAsync or refundAsync to proceed the actual payment. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 protected void onPaymentInstrumentButtonClick() { CompletableFuture&lt;PaymentInstrumentResult&gt; result = paxTerminal.getPaymentInstrumentAsync(); result.thenAccept(this::showPaymentInstrumentResultMessage); } private void showPaymentInstrumentResultMessage(PaymentInstrumentResult result) { if (result.isSuccess()) { logOutput(String.format(\"Payment instrument response successful: Type=%s, Brand=%s, CNA=%s, PAN=%s\" ,result.getCardType(), result.getBrand(), result.getCNA(), result.getPAN())); } else { logOutput(\"Payment instrument did not succeed: \" + result.getErrorCondition() + \". (\" + result.getResponseText() + \")\"); } } Close Call close to send logout. 1 2 3 4 5 6 7 8 9 10 11 protected void onCloseButtonClick() { logOutput(\"Closing terminal...\"); CompletableFuture&lt;NexoRequestResult&gt; result = paxTerminal.closeAsync(); result.thenAccept(r -&gt; { if (r.isSuccess()) { logOutput(\"Logout successful\"); } else { logOutput(\"Logout failed with the following error: \" + r.getErrorCondition()); } }); } Abort Call abort to abort a payment transaction. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 public void onAbortButtonClick() { logOutput(\"Aborting payment...\"); CompletableFuture&lt;AbortRequestResult&gt; payment = paxTerminal.abortAsync(); payment.thenAccept(this::showAbortResultMessage); } private void showAbortResultMessage(AbortRequestResult result) { if (result.isSuccess()) { logOutput(\"Abort ok\"); } else { logOutput(\"Abort was not ok. Try to reverse payment.\"); } } Callbacks To receive event callbacks from the terminal the following methods need to be implemented in the interface SwpTrmCallbackInterface. Terminal Display Event Get status information and displays from the terminal. 1 2 3 4 @Override public void terminalDisplayEvent(int txtId, String text) { LOG.info(\"Terminal event: id {}, text: {}\", txtId, text); } Terminal Notification Event The event function is used by Swedbank Pay Payment Application to communicate an ‘out of sequence’ event - the beginning of maintenance for example. 1 2 3 4 @Override public void terminalNotificationEvent(EventToNotifyEnumeration type, String eventDetails) { LOG.info(\"Terminal notification event: type {}, event details {}\", type, eventDetails); } Terminal Address Obtained Event Called when a new terminal is installed. 1 2 3 4 @Override public void terminalAddressObtainedEvent(String ipv4, int port) { LOG.info(\"Terminal address obtained event: ipv4 {}, port {}\", ipv4, port); } Print Request Called when a receipt is to be printed. The print result needs to be confirmed from the ECR. 1 2 3 4 5 6 7 8 9 @Override public boolean onPrintRequest(boolean transactionEnded, Receipt receipt) { LOG.info(\"Print receipt: \" + receipt.getCustomerFormattedReceipt()); if (transactionEnded) { logOutput(\"Transaction ended\"); } return true; } Request For Confirmation Event Called when there is a confirmation needed by the cashier, i.e when a signature purchase needs to be confirmed. Will soon be deprecated when signature purchase is removed. 1 2 3 4 5 6 @Override public void requestForConfirmationEvent(String message, ConfirmationResult cashierConfirmation) { LOG.info(\"Message: \" + message) //Confirm with true if the signature matches cashierConfirmation.confirm(true); } Logging Logging is done through Slf4j. To see what is going on set DEBUG level for the following package com.swedbankpay. When running the application standalone it can be handy to see the communication between the ECR and the terminal. To log communication between the ECR and terminal to some text window in the application the following can be used. This can be enabled or disabled runtime. It is disabled by default. 1 2 3 4 5 6 paxTerminal.addLoggAppender(this::appender); paxTerminal.enableTraceLog(true); ... private void appender(String text) { Platform.runLater(() -&gt; outputTextArea.appendText(text)); } Error handling When an error occurs either in the terminal or within this codebase, the framework will handle it and always return a result object with the following three fields populated: 1 2 3 result = FAILURE statusCode = 500 errorCondition = \"The nature of the error\" There are five cases where the error can occur: Communication error with the terminal Ex connection timeout Terminal error response There was an error in the terminal resulting in a failure response. Parsing terminal response There was an error when parsing the response from the terminal. Creating result object There was an error when creating the result object. User error The user has provided faulty input. Receipts Receipts are created when a payment or reversal has been completed or on the request from the terminal. The receipt contains both the raw customer and/or merchant data in json format. It also contains a preformatted printable string for each of the two. The preformatted receipts are localized using the locale provided in the terminal config. In the future hopefully we can take the locale from the payment response if the customer chooses a different language during the payment process. There is also the possibility to create your own formatter by extending the class AbstractReceiptFormatter and then use the format(...) method on the Receipt object from the payment. 1 2 3 PaymentRequestResult payment = paxTerminal.paymentAsync(...).join(); Receipt receipt = payment.getReceipt().format(new MyCustomReceiptFormatter()); String customerReceipt = receipt.getCustomerFormattedReceipt(); You also have access to the receipt data object to extract the information you need. 1 JSONObject json = receitp.getCustomerReceiptData();",
    "tags": "",
    "url": "/pax-terminal/java/"
  },{
    "title": "Send Card Data",
    "text": "Manually Entered Card Data There is a possibility to send card data for payment from the sale system to the terminal. This applies only to non PCI regulated cards and the prefix of the card must be set up correctly in the parameters of the terminal. This is all done in the Terminal Management System. When that is in place it is just a matter of including the element PaymentInstrumentData in the PaymentRequest. Required attributes are PaymentInstrumentType set to Card and EntryMode set to Keyed. Typical use for this is financing where where the cashier receives a reference to be entered. Eg. PaymentRequest with manually entered card data 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 &lt;SaleToPOIRequest&gt; &lt;MessageHeader MessageCategory=\"Payment\" MessageClass=\"Service\" MessageType=\"Request\" POIID=\"A-POIID\" ProtocolVersion=\"3.1\" SaleID=\"ECR1\" ServiceID=\"2656977967\"/&gt; &lt;PaymentRequest&gt; &lt;SaleData TokenRequestedType=\"Customer\"&gt; &lt;SaleTransactionID TimeStamp=\"2023-12-20T14:38:34.7001923+01:00\" TransactionID=\"2656977968\"/&gt; &lt;/SaleData&gt; &lt;PaymentTransaction&gt; &lt;AmountsReq CashBackAmount=\"0\" Currency=\"SEK\" RequestedAmount=\"100\"/&gt; &lt;/PaymentTransaction&gt; &lt;PaymentData PaymentType=\"Normal\"&gt; &lt;PaymentInstrumentData PaymentInstrumentType=\"Card\"&gt; &lt;CardData EntryMode=\"Keyed\"&gt; &lt;SensitiveCardData PAN=\"&lt;a payment instrument reference&gt;\" ExpiryDate=\"2401\"/&gt; &lt;/CardData&gt; &lt;/PaymentInstrumentData&gt; &lt;/PaymentData&gt; &lt;/PaymentRequest&gt; &lt;/SaleToPOIRequest&gt;",
    "tags": "",
    "url": "/pax-terminal/Nexo-Retailer/keyin-paymentinstrument/"
  },{
    "title": "License",
    "text": "Licensing The licensing of Swedbank Pay’s open source software should be one approved by the Open Source Initiative and preferably one that is compatible with closed source, enterprise software. The Apache 2.0 License is therefore a good fit and should be chosen when possible: Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives. Copyright 2025 Swedbank Pay and contributors Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at https://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. The license should be placed in a file called LICENSE in the root of the repository and preferably be included as a header in all source code files in the same repository.",
    "tags": "",
    "url": "/checkout-v3/modules-sdks/development-guidelines/license/"
  },{
    "title": "Logout",
    "text": "LogoutRequest Logout request terminates the login session and makes it possible for parameter or program updates. The POS system may no cannot communicate with the terminal unless new LoginRequest is accepted. If a logout is needed during business hours but updates are not desired, there is an attribute MaintenanceAllowed that may be set False. warning warning: Make sure to have the terminal logged out with maintenance allowed at least one hour every day, to let it update parameters and possibly software. 1 2 3 4 &lt;SaleToPOIRequest&gt; &lt;MessageHeader ProtocolVersion=\"3.1\" MessageClass=\"Service\" MessageCategory=\"Logout\" MessageType=\"Request\" ServiceID=\"21\" SaleID=\"1\" POIID=\"A-POIID\"/&gt; &lt;LogoutRequest MaintenanceAllowed=\"true\"/&gt; &lt;/SaleToPOIRequest&gt; Logout Response 1 2 3 4 5 6 &lt;SaleToPOIResponse&gt; &lt;MessageHeader MessageClass=\"Service\" MessageCategory=\"Logout\" MessageType=\"Response\" ServiceID=\"21\" SaleID=\"1\" POIID=\"A-POIID\"/&gt; &lt;LogoutResponse&gt; &lt;Response Result=\"Success\"/&gt; &lt;/LogoutResponse&gt; &lt;/SaleToPOIResponse&gt;",
    "tags": "",
    "url": "/pax-terminal/Nexo-Retailer/Quick-guide/logout/"
  },{
    "title": "Make a Payment",
    "text": "PaymentRequest Send a PaymentRequest to make a payment or refund when there is a LoginSession. Make sure to save the MessageHeader since that is needed if abort is needed. 1 2 3 4 5 6 7 8 9 10 11 12 &lt;SaleToPOIRequest&gt; &lt;MessageHeader MessageCategory=\"Payment\" MessageClass=\"Service\" MessageType=\"Request\" POIID=\"A-POIID\" ProtocolVersion=\"3.1\" SaleID=\"ECR1\" ServiceID=\"1524253497\"/&gt; &lt;PaymentRequest&gt; &lt;SaleData TokenRequestedType=\"Customer\"&gt; &lt;SaleTransactionID TimeStamp=\"2023-09-08T16:17:32.9834651+02:00\" TransactionID=\"1524253496\"/&gt; &lt;/SaleData&gt; &lt;PaymentTransaction&gt; &lt;AmountsReq CashBackAmount=\"0\" Currency=\"SEK\" RequestedAmount=\"38\"/&gt; &lt;/PaymentTransaction&gt; &lt;PaymentData PaymentType=\"Normal\"/&gt; &lt;/PaymentRequest&gt; &lt;/SaleToPOIRequest&gt; Name Lev Attributes Description PaymentRequest 1     SaleData 2 TokenRequestedType This will give a token for the card used. Only value available is Customer which gives a Card Number Alias which is a one way hash computed locally in the terminal. The CNA is the same for a specific card in all SwedbankPay terminals. SaleTransactionID 3 TimeStamp Request timestamp local time with offset from GMT.     TransactionID ID of the transaction set by the POS. This value is sent to the PosPay server, but is unfortunately not forwarded to clearing. PaymentTransaction 2     AmountsReq   RequestedAmount The total amount of transaction as a decimal value. Use a ’.’ for decimal point if needed.     Currency As a 3 letter abbrivation - ISO-4217. Available are SEK, NOK, DKK, EUR.     CashBackAmount As whereofvalue. Is included in RequestedAmount. PaymentData 2 PaymentType Type of transaction that is requested. Availabel values are Normal, which is a payment and Refund. Following a PaymentRequest Payment response is received Abort payment with an AbortRequest Transaction status is asked for LoginRequest if all else fail",
    "tags": "",
    "url": "/pax-terminal/Nexo-Retailer/Quick-guide/make-payment/"
  },{
    "title": "Message Format",
    "text": "Message Format All messages are wrapped in either SaleToPOIRequest or SaleToPOIResponse. Each of thoose contain two major elements. A MessageHeader and the element carrying the actual request or response. warning Heads up!: The XML parser in the terminal requires that elements are in the same order as in the schema definition. All examples on this site has the correct order. Message Header All messages have a MessageHeader element with the following attributes: Attributes Description ProtocolVersion Text string “3.1”. MessageClass Enumeration: Service, Device or Event. MessageCategory Enumeration: Event, Login, Logout, Payment, Abort, EnableService, CardAcquisition, TransactionStatus,Reversal, Input, Display, Admin. MessageType Enumeration: Request, Response or Notification. ServiceID Max length 10 bytes. Unique per terminal for each Service message within a login session and identifies the request response message pair. Echoed back in the response. Make it simple. Use hours, minute and second for the Login and then increment by one for each message. DeviceID Unique per terminal for each Device message within a login session and identifies the request response message pair. Echoed back in the response. POIID Max length 32 bytes. A unique ID of the Point of Interaction within an organization, that is known and registered in TMS. This id decides the configuration of the terminal. Prefere to use the same id as for the actual POS. This is decided by the POS and makes sure the correct configuration is used by the terminal. The POIID is also used in communication with the supporting staff. SaleID An ID of less interest but should be the same through out a login session. Concatenate the MessageCategory with the MessageType to find the actual message element. The following has Login and Response and the essential element is LoginResponse. Sample message LoginResponse 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 &lt;?xml version='1.0' encoding='UTF-8'?&gt; &lt;SaleToPOIResponse&gt; &lt;MessageHeader ProtocolVersion=\"3.1\" MessageClass=\"Service\" MessageCategory=\"Login\" MessageType=\"Response\" ServiceID=\"533\" SaleID=\"1\" POIID=\"A-POIID\"/&gt; &lt;LoginResponse&gt; &lt;Response Result=\"Success\"/&gt; &lt;POISystemData&gt; &lt;DateTime&gt;2023-09-06T07:48:52.02Z&lt;/DateTime&gt; &lt;POISoftware ProviderIdentification=\"Optomany\" ApplicationName=\"axept® PRO\" SoftwareVersion=\"1.2.17.0\"/&gt; &lt;POITerminalData TerminalEnvironment=\"Attended\" POISerialNumber=\"1710000520\"&gt; &lt;POICapabilities&gt;CustomerDisplay CustomerError CustomerInput MagStripe ICC EMVContactless&lt;/POICapabilities&gt; &lt;/POITerminalData&gt; &lt;POIStatus GlobalStatus=\"OK\" SecurityOKFlag=\"true\" PEDOKFlag=\"true\" CardReaderOKFlag=\"true\" CommunicationOKFlag=\"true\"/&gt; &lt;/POISystemData&gt; &lt;/LoginResponse&gt; &lt;/SaleToPOIResponse&gt; Message Responses All nexo message responses carry a Response element with the attribute Result which contains the value Success or Failure. If Failure, the the Response element will also have the attribute ErrorCondition and a child element, AdditionalResponse with a somewhat describing text of the failure. Sample message response with Failure 1 2 3 4 5 6 7 8 9 &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;SaleToPOIResponse&gt; &lt;MessageHeader ProtocolVersion=\"3.1\" MessageClass=\"Service\" MessageCategory=\"Login\" MessageType=\"Response\" ServiceID=\"2\" SaleID=\"1\" POIID=\"SthlmBA\"/&gt; &lt;LoginResponse&gt; &lt;Response Result=\"Failure\" ErrorCondition=\"Busy\"&gt; &lt;AdditionalResponse&gt;POI Terminal Temporarily Unavailable: New Poi ID detected, updating parameters&lt;/AdditionalResponse&gt; &lt;/Response&gt; &lt;/LoginResponse&gt; &lt;/SaleToPOIResponse&gt; Consideration when implementing a listener Some messages optionally require a response. E.g a display request from the terminal has a ResponseRequired boolean flag, a PrintRequest has a ResponseMode attribute and there may be other messages as well. Make sure to consider those values from the beginning so that the implementation stays robust even if the value may change in the future. Next",
    "tags": "",
    "url": "/pax-terminal/Nexo-Retailer/Quick-guide/messageformat/"
  },{
    "title": "Message Transport",
    "text": "All messages are sent using HTTP/1.1 protocol, Post and the URL /EPASSaleToPOI/3.1. 1 2 3 4 5 6 POST /EPASSaleToPOI/3.1 HTTP/1.1 Accept: */* Content-type: application/xml; charset=utf-8 Host: 192.168.78.5:11000 Content-Length: 700 Make sure to only send one request at a time. The exception to that rule is AbortRequest, LoginRequest and TransactionStatusRequest, which may be sent when there is an unanswered request ongoing. A nexo response is received in the Http Response for the request. Http status code is 200 - OK, for any Http Response carrying a nexo Response message. Http status 204 - No Content, is received when there is no nexo message response to a request. warning warning: Make sure to wait for the http response long enough. If the socket drops during a PaymentRequest, the terminal is still able to make a transaction but the response cannot be sent. In that perticular case you need to make TransactionStatusRequest. Next",
    "tags": "",
    "url": "/pax-terminal/Nexo-Retailer/Quick-guide/messagetransportation/"
  },{
    "title": "Metadata",
    "text": "Metadata Metadata can be used to store data associated to a payment that can be retrieved later by performing a GET. Swedbank Pay does not use or process metadata, it is only stored on the payment so it can be retrieved later. An example where metadata might be useful is when several internal systems are involved in the payment process, and the payment creation is done in one system and post-purchases take place in another. In order to transmit data between these two internal systems, the data can be stored in metadata on the payment so the internal systems do not need to communicate with each other directly. The usage of metadata field is shown in the abbreviated Purchase request below. Metadata Request Request Copy json to clipboard 1 2 3 4 POST /psp/paymentorders/7e6cdfc3-1276-44e9-9992-7cf4419750e1/ HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 { \"payment\": { \"operation\": \"Purchase\", \"intent\": \"Authorization\", \"currency\": \"SEK\", \"description\": \"Test Purchase\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"sv-SE\", \"metadata\": { \"key1\": \"value1\", \"key2\": 2, \"key3\": 3.1, \"key4\": false }, \"urls\": { \"hostUrls\": [\"https://example.com\"], \"completeUrl\": \"https://example.com/payment-completed\" }, \"payeeInfo\": { \"payeeId\": \"5cabf558-5283-482f-b252-4d58e06f6f3b\", \"payeeReference\": \"CD1234\", }, \"payer\": { \"payerReference\": \"AB1234\", }, \"prefillInfo\": { \"msisdn\": \"+4798765432\" } } } Parameter Type metadata string, boolean, integer,decimal GET Request GET Request 1 2 3 4 GET /psp/paymentorders/7e6cdfc3-1276-44e9-9992-7cf4419750e1/ HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json GET Response Response Copy json to clipboard 1 2 HTTP/1.1 200 OK Content-Type: application/json 1 2 3 4 5 6 7 8 9 10 { \"payment\": \"/psp/paymentorders/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"metadata\": { \"id\": \"/psp/paymentorders/7e6cdfc3-1276-44e9-9992-7cf4419750e1/metadata\", \"key1\": \"value1\", \"key2\": 2, \"key3\": 3.1, \"key4\": false } }",
    "tags": "",
    "url": "/checkout-v3/features/technical-reference/metadata/"
  },{
    "title": "Migration Guides",
    "text": "storefront Digital Payments v2.0 to v3.1 How to migrate from Digital Payments v2 to the newest edition of v3. arrow_forward storefront Seamless View to Redirect How to migrate from Digital Payments Seamless View to Digital Payments Redirect. arrow_forward storefront Payment Methods v1 to Digital Payments v3.1 How to migrate from Payment Methods v1 to the newest edition of v3. arrow_forward",
    "tags": "",
    "url": "/checkout-v3/migrate/"
  },{
    "title": "From Payment Methods v1 to Digital Payments v3.1",
    "text": "Why The first reason for migrating is the access to new development. All fresh features and capabilities are exclusively released to Digital Payments, and will not be available when using payment methods v1. Likewise, new payment method additions like Google Pay, Apple Pay and Click to Pay are only available when using the paymentOrder API, and can’t be set up as individual payment methods. The second reason would be maintenance. With an integration made towards v1 and each individual method’s unique API, when new functionality, changes in behavior or new instruments are introduced, they both come with their own separate need for maintaining the existing integration. By switching to Digital Payments v3.1, you will eliminate the need for maintenance on multiple integrations due to the design of v3.1 and its one-size fits all structure. How Migrating from individual payment methods to Digital Payments v3 does require a full new integration. The good news is that even if you are working with a new (paymentOrder) resource, the integration is very similar to what you are used to with payment method integrations. We still have support for both Seamless View and Redirect, and the payment flow is similar to payment methods – with authorizations, captures, cancellations and reversals. Check in with the setup team to find out what needs to be changed in the merchant setup at our end, then head over to Get Started, and we’ll walk the steps with you.",
    "tags": "",
    "url": "/checkout-v3/migration-guide-v1/"
  },{
    "title": "From Checkout v2 to Digital Payments v3.1",
    "text": "Introduction to v3.1 With our latest API version, v3.1, we have significantly improved the checkout experience for both merchants and payers. This version simplifies the integration process by reducing the size and complexity of response models, addressing gaps identified in v2. Instead of segregating integrations based on configurations or product packages, v3.1 provides a unified solution where features are controlled through parameters in your requests. This design promotes reusability and ease of integration without requiring major changes or concessions when adding new features, as the base API remains consistent. Upgrade Process If you have already integrated with our Checkout v2 API, transitioning to v3.1 is a straightforward process. The URI and request body remain unchanged from Checkout v2, with the only required modification being the addition of ;version=3.1 in the HTTP request headers (see the request example below). This adjustment ensures that your payment order requests generate the new response scheme and functionality seamlessly. The upgrade has backwards compatibility, allowing you to generate v3.1 responses for transactions conducted through your v2 implementation. Instead of making a new integration each time, this eliminates the need to maintain legacy code, streamlining your system for a seamless transition. Additionally, this approach establishes a foundation for future versions, enabling you - as the merchant - to designate the desired version and make adjustments to response processing as needed when newer versions are released. Request Headers v3.1 New Request Headers 1 2 3 4 POST /psp/paymentorders HTTP/1.1 Host: api.payex.com Authorization: Bearer Content-Type: application/json;version=3.1 Order Items Sending orderItems is no longer mandatory for your requests. If you prefer not to include this information in your transactions, feel free to omit them from your requests. However, if your selection of offering includes an invoice, it is highly recommended to provide orderItems. These fields are utilized to specify details about the purchased products. In the absence of this information, we will create the necessary order line using the details provided in the description parameter along with the value in the amount parameter. Response Fields Changes In Digital Payments v3.1, response fields have been restructured. Fields removed since v2 include: currentPayment,instrument, payments and state. Response Fields Changes Copy json to clipboard 1 2 3 4 5 6 7 8 9 10 11 12 13 14 \"paymentorder\": { \"currentPayment\": //Removed in Checkout v3.1 \"instrument\": //Removed in Checkout v3.1 \"payments\": //Removed in Checkout v3.1 \"settings\": //Removed in Checkout v3.1 \"state\": //Removed in Checkout v3.1 \"nonPaymentToken\": //Moved to `paid` resource in Checkout v3.1 \"recurrenceToken\": //Moved to `paid` resource in Checkout v3.1 \"unscheduledToken\": //Moved to `paid` resource in Checkout v3.1 \"paymentToken\": //Moved to `paid` resource in Checkout v3.1 \"externalNonPaymentToken\": //Moved to `paid` resource in Checkout v3.1 \"transactionsOnFileToken\": //Moved to `paid` resource in Checkout v3.1 Instead, new fields including history, failed, aborted, paid, and others, have been introduced. An example of the complete array of selections is provided below. New Response Fields Copy json to clipboard 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 { \"urls\": { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/urls\" }, \"payeeInfo\": { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/payeeinfo\" }, \"payer\": { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/payers\" }, \"history\": { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/history\" }, \"failed\": { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/failed\" }, \"aborted\": { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/aborted\" }, \"paid\": { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/paid\" }, \"cancelled\": { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/cancelled\" }, \"financialTransactions\": { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/financialtransactions\" }, \"failedAttempts\": { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/failedattempts\" }, \"postPurchaseFailedAttempts\": { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/failedattempts\" }, \"metadata\": { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/metadata\" } } Endpoints Name Description Urls This will provide a report indicating the URLs you have supplied for this paymentOrder. PayeeInfo This will provide a report detailing the account and Merchant references that were utilized. Payers If you have provided us with Payer data, it will be attached and stored here. History Here, you can track every aspect of the transaction lifecycle. This includes all actions initiated by the Payer within our UI and your management of the transaction (Capture, Cancel, Reversal, etc.), from its initiation to completion. Failed MIT transactions, denoting “Merchant Initiated Transactions,” are exclusively presented here if they result in a Failed status, along with the corresponding failure reason. Aborted If the transaction is aborted on your end, you can find the details submitted with the request in this section. Paid In the event of a successful transaction, details about the utilized method, its associated references, and related information will be available here. As a point of reference, this serves as the replacement for currentPayment. Cancelled Information will be available under this node exclusively when a PaymentOrder has been completely canceled and has received the status Canceled. FinancialTransactions All post-purchase actions and their references, such as captures and reversals, can be accessed here. This section also serves as the replacement for currentPayment. FailedAttempts All instances of PaymentOrders marked as Failed will be in this section. Currently, this pertains specifically to transactions utilizing S2S (server-to-server) functionality, with subscriptions (Recur &amp; Unscheduled Purchase) serving as an example. PostPurchaseFailedAttempts All failed attempts made by the Payer at a third-party will be documented in this section. For instance, if the Payer is denied due to reasons like “Insufficient funds,” such instances will be recorded here. Metadata If you provide us with information in this object, the details will be reported back to you in this section. Status Parameter In v3.1, we have updated the parameter formerly named state from v2 to status, also expanding the range of values that are given to reflect more accurately what stage the transaction is in. Initialized This status is returned upon the initial creation of the paymentOrder and remains applicable throughout the active period when the paymentOrder is open for conversion into a payment by the payer. Paid The Paid status is granted in response only when an actual amount has been charged and processed. This information becomes visible in the subsequent GET call on the paymentOrder after receipt of either the CompleteUrl or our Callback, providing you with the opportunity to verify the transaction details. Additionally, Paid will be directly returned in the response when conducting post-purchase actions and if there is an associated amount that has been paid. Aborted This value becomes accessible only following the execution of an abort operation by either you, the merchant, or if the payer opts for “Cancel payment” within our domain. The latter scenario is applicable solely if you have implemented a redirect integration. Failed Currently, the value in this field will be returned exclusively for MIT (Merchant Initiated Transactions) transactions and other server-to-server requests. Please note that this condition may evolve in the future. Reversed When a paymentOrder has been entirely refunded, the corresponding value will be Reversed. In the case of partial refunds, the returned value will persist as Paid. Cancelled If you initiate a cancellation for the entire authorized amount (reserved funds), the returned value will be Cancelled. However, if you have conducted any captures on the authorized funds before releasing the remaining amount, the returned value will be Paid. Cosmetic Response Changes You will find the following fields present in your new response. They have been introduced to enhance our tracking and obtain more precise data regarding the integration types or implementation styles adopted by our customers. They do not directly affect your responsibilities as an integrator and can be disregarded. Response Fields Excerpt Copy json to clipboard 1 2 3 4 5 6 { \"implementation\": \"PaymentsOnly\", \"integration\": \"\", \"instrumentMode\": false, \"guestMode\": false, } Field Description &amp; Value “implementation” PaymentsOnly will be the default returned value. “integration” The value will be either Redirect or HostedView and will be revealed after the initial attempt. “instrumentMode” The value displayed here will be either true or false, depending on whether the feature was utilized. It is important to note that this is a distinct feature from the regular menu, and in most cases, it will be returned as false. “guestMode” By default, this value will be set to true. However, if you have implemented our “Payer Aware Menu” feature, the value will be returned as false for returning customers who have stored payment details with you. Events available in v3.1 Further reading available in the Events section. Event Description onCheckoutLoaded This event will trigger the first time the Checkout is loaded. Subscribe to this event if you need total control over the height of Swedbank Pay’s payment frame. This is the initial height of the frame when loaded. onCheckoutResized This event will trigger every time a UI element changes size.Subscribe to this event if you need total control over the height of Swedbank Pay’s payment frame. The payment methods require individual heights when rendering their content. onError This event will be triggered during terminal errors or if the configuration fails validation. Subscribe to this event if you want some action to occur on your site when an error happens during the payment. onOutOfViewRedirect Triggered when a user is redirected to a separate web page, like 3-D Secure or BankID signing. Subscribe to this event if it is not possible to redirect the payer directly from within Swedbank Pay’s payment frame. onAborted This will be triggered when the payer clicks the “Abort” button. This is only present in the Redirect-implementation and if you have integrated Seamless View (menu embedded), you will need to supply this button/action. When the payer presses your cancel button, we recommend sending an API request aborting the payment so it can’t be completed at a later time. When we receive the request, an abort event will be raised the next time the UI fetches information from the server. Because of that, you should also refresh the script after aborting, as this will trigger the event. onPaymentAttemptAborted This event will trigger when an attempt has been aborted from an external party. One of these examples is from a card-issuers ACS service (3D-Secure verification). This does not mean the transaction in its entirety has failed. It is just the singular attempt that was aborted. More attempts are available to the payer. onPaymentAttemptStarted Triggered when the payer has selected a payment method and actively attempts to perform a payment. onPaid This event triggers when the payer successfully completes their interaction with us. Subscribe to this event if actions are needed on you side other than the default handling of redirecting the payer to your completeUrl. Call GET on the paymentOrder to receive the actual payment status and take appropriate actions according to the information displayed here. onPaymentAttemptFailed Triggered when a payment has failed, disabling further attempts to perform a payment. onInstrumentSelected Triggered when a user actively changes payment method in the Payment Menu. onTermsOfServiceRequested Triggered when the user clicks on the “Display terms and conditions” link. Subscribe to this event if you do not want the default handling of the termsOfServiceUrl. Swedbank Pay will open the termsOfServiceUrl in a new tab within the same browser by default. onEventNotification Triggered whenever any other public event is called. It does not prevent their handling. Subscribe to this event in order to log actions that are happening in the payment flow at Swedbank Pay. Events no longer needed and/or supported onBillingDetailsAvailable (Starter/Business) onShippingDetailsAvailable (Starter/Business) Payer identification (Checkin) Checkin is no longer supported in its previous form. Payer identification now falls under the merchant’s responsibility and is executed through the Payer Aware Payment Menu feature. While this feature retains the functionality of storing payment details for various payment methods, the primary responsibility for the identification process lies with you as the merchant. This identification is accomplished by assigning a value within the payerReference parameter, serving as a pseudo-“profile” unique to your account. It is crucial to ensure that each reference is distinct for every consumer. Failure to correctly identify and provide the appropriate reference for a consumer may lead to the display of another customer’s details or trigger the creation of a new profile, activating guestMode. For more detailed information, see the payer aware payment menu section. Post-Purchase Changes Captures, Reversals, and Cancellations will now be returned with the intended response template provided by us. The information structure remains identical to the initial PaymentOrder request you already receive when creating the Purchase request. This means you are already familiar with the structure, but the difference now is that it also applies to the response for post-purchase actions. The new response will not naturally include the same method data as it did with v2. However, you can extend the information by adding ?$expand=financialtransactions to the request path (URL). If you require even more data in your responses, you can continue extending the output by adding a , followed by the node you desire to be included. As an example, ?$expand=financialtransactions,paid would give you both the node for the initial Purchase and the node for the Capture/Reversal operation. Response example from existing versions Copy json to clipboard 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 { \"payment\": \"/psp/creditcard/payments/b2409f06-4944-4b2b-78d8-08dbf7d4b7e9\", \"capture\": { \"id\": \"/psp/creditcard/payments/b2409f06-4944-4b2b-78d8-08dbf7d4b7e9/captures/b15c1f9c-ad6b-4193-dabe-08dbf7d4b80a\", \"transaction\": { \"id\": \"/psp/creditcard/payments/b2409f06-4944-4b2b-78d8-08dbf7d4b7e9/transactions/b15c1f9c-ad6b-4193-dabe-08dbf7d4b80a\", \"created\": \"2023-12-08T11:53:08.8102555Z\", \"updated\": \"2023-12-08T11:53:08.8810258Z\", \"type\": \"Capture\", \"state\": \"Completed\", \"number\": 40128369639, \"amount\": 100, \"vatAmount\": 0, \"description\": \"Capturing the authorized payment\", \"payeeReference\": \"1702036388\", \"isOperational\": false, \"operations\": [] } } } Response Example from v3.1 (Capture with no expansions) Copy json to clipboard 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 { \"paymentOrder\": { \"id\": \"/psp/paymentorders/a8d963ee-4749-4b3c-9f31-08dbf62d5f1c\", \"created\": \"2023-12-08T13:42:08.1297502Z\", \"updated\": \"2023-12-08T13:43:10.8951496Z\", \"operation\": \"Purchase\", \"status\": \"Paid\", \"currency\": \"SEK\", \"amount\": 100, \"vatAmount\": 0, \"remainingReversalAmount\": 100, \"description\": \"Test Purchase\", \"initiatingSystemUserAgent\": \"PostmanRuntime/7.35.0\", \"language\": \"sv-SE\", \"availableInstruments\": [ \"CreditCard\", \"Invoice-PayExFinancingSe\", \"Swish\", \"CreditAccount-CreditAccountSe\", \"Trustly\", \"MobilePay\", \"GooglePay\", \"ClickToPay\" ], \"implementation\": \"PaymentsOnly\", \"integration\": \"Redirect\", \"instrumentMode\": false, \"guestMode\": false, \"orderItems\": { \"id\": \"/psp/paymentorders/a8d963ee-4749-4b3c-9f31-08dbf62d5f1c/orderitems\" }, \"urls\": { \"id\": \"/psp/paymentorders/a8d963ee-4749-4b3c-9f31-08dbf62d5f1c/urls\" }, \"payeeInfo\": { \"id\": \"/psp/paymentorders/a8d963ee-4749-4b3c-9f31-08dbf62d5f1c/payeeinfo\" }, \"payer\": { \"id\": \"/psp/paymentorders/a8d963ee-4749-4b3c-9f31-08dbf62d5f1c/payers\" }, \"history\": { \"id\": \"/psp/paymentorders/a8d963ee-4749-4b3c-9f31-08dbf62d5f1c/history\" }, \"failed\": { \"id\": \"/psp/paymentorders/a8d963ee-4749-4b3c-9f31-08dbf62d5f1c/failed\" }, \"aborted\": { \"id\": \"/psp/paymentorders/a8d963ee-4749-4b3c-9f31-08dbf62d5f1c/aborted\" }, \"paid\": { \"id\": \"/psp/paymentorders/a8d963ee-4749-4b3c-9f31-08dbf62d5f1c/paid\" }, \"cancelled\": { \"id\": \"/psp/paymentorders/a8d963ee-4749-4b3c-9f31-08dbf62d5f1c/cancelled\" }, \"reversed\": { \"id\": \"/psp/paymentorders/a8d963ee-4749-4b3c-9f31-08dbf62d5f1c/reversed\" }, \"financialTransactions\": { \"id\": \"/psp/paymentorders/a8d963ee-4749-4b3c-9f31-08dbf62d5f1c/financialtransactions\" }, \"failedAttempts\": { \"id\": \"/psp/paymentorders/a8d963ee-4749-4b3c-9f31-08dbf62d5f1c/failedattempts\" }, \"postPurchaseFailedAttempts\": { \"id\": \"/psp/paymentorders/a8d963ee-4749-4b3c-9f31-08dbf62d5f1c/postpurchasefailedattempts\" }, \"metadata\": { \"id\": \"/psp/paymentorders/a8d963ee-4749-4b3c-9f31-08dbf62d5f1c/metadata\" } }, \"operations\": [ { \"method\": \"POST\", \"href\": \"https://api.externalintegration.payex.com/psp/paymentorders/a8d963ee-4749-4b3c-9f31-08dbf62d5f1c/reversals\", \"rel\": \"reversal\", \"contentType\": \"application/json\" }, { \"method\": \"GET\", \"href\": \"https://ecom.externalintegration.payex.com/checkout/16e2b575fb662a7864d5fac28f9e9dd7e264fb8d934850c6dc38ea2be18cc973?_tc_tid=9401c5a368e04ffe9361a604eca15652\", \"rel\": \"redirect-checkout\", \"contentType\": \"text/html\" }, { \"method\": \"GET\", \"href\": \"https://ecom.externalintegration.payex.com/checkout/client/16e2b575fb662a7864d5fac28f9e9dd7e264fb8d934850c6dc38ea2be18cc973?culture=sv-SE&amp;_tc_tid=9401c5a368e04ffe9361a604eca15652\", \"rel\": \"view-checkout\", \"contentType\": \"application/javascript\" } ] } Response Example from v3.1 (Capture with Paid and FinancialTransactions expanded) Copy json to clipboard 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 { \"paymentOrder\": { \"id\": \"/psp/paymentorders/d4c5684f-c2dc-4c18-680d-08dbf62de407\", \"created\": \"2023-12-08T14:06:29.0250114Z\", \"updated\": \"2023-12-08T14:07:48.9872240Z\", \"operation\": \"Purchase\", \"status\": \"Paid\", \"currency\": \"SEK\", \"amount\": 100, \"vatAmount\": 0, \"remainingReversalAmount\": 100, \"description\": \"Test Purchase\", \"initiatingSystemUserAgent\": \"PostmanRuntime/7.35.0\", \"language\": \"sv-SE\", \"availableInstruments\": [ \"CreditCard\", \"Invoice-PayExFinancingSe\", \"Swish\", \"CreditAccount-CreditAccountSe\", \"Trustly\", \"MobilePay\", \"GooglePay\", \"ClickToPay\" ], \"implementation\": \"PaymentsOnly\", \"integration\": \"Redirect\", \"instrumentMode\": false, \"guestMode\": false, \"orderItems\": { \"id\": \"/psp/paymentorders/d4c5684f-c2dc-4c18-680d-08dbf62de407/orderitems\" }, \"urls\": { \"id\": \"/psp/paymentorders/d4c5684f-c2dc-4c18-680d-08dbf62de407/urls\" }, \"payeeInfo\": { \"id\": \"/psp/paymentorders/d4c5684f-c2dc-4c18-680d-08dbf62de407/payeeinfo\" }, \"payer\": { \"id\": \"/psp/paymentorders/d4c5684f-c2dc-4c18-680d-08dbf62de407/payers\" }, \"history\": { \"id\": \"/psp/paymentorders/d4c5684f-c2dc-4c18-680d-08dbf62de407/history\" }, \"failed\": { \"id\": \"/psp/paymentorders/d4c5684f-c2dc-4c18-680d-08dbf62de407/failed\" }, \"aborted\": { \"id\": \"/psp/paymentorders/d4c5684f-c2dc-4c18-680d-08dbf62de407/aborted\" }, \"paid\": { \"id\": \"/psp/paymentorders/d4c5684f-c2dc-4c18-680d-08dbf62de407/paid\", \"number\": 40128372054, \"instrument\": \"CreditCard\", \"payeeReference\": \"1702044389\", \"transactionType\": \"Authorization\", \"amount\": 100, \"submittedAmount\": 100, \"feeAmount\": 0, \"discountAmount\": 0, \"details\": { \"nonPaymentToken\": \"6e7f3a0b-3d4d-46a7-8d13-6b15180896a2\", \"externalNonPaymentToken\": \"91dd1ea0eeafc2ac397d24e80abdc\", \"cardBrand\": \"MasterCard\", \"cardType\": \"Credit\", \"maskedPan\": \"522661******3406\", \"expiryDate\": \"12/2033\", \"issuerAuthorizationApprovalCode\": \"L25647\", \"acquirerTransactionType\": \"3DSECURE\", \"acquirerStan\": \"25647\", \"acquirerTerminalId\": \"40128372054\", \"acquirerTransactionTime\": \"2023-12-08T14:06:46.536Z\", \"transactionInitiator\": \"CARDHOLDER\", \"bin\": \"522661\" } }, \"cancelled\": { \"id\": \"/psp/paymentorders/d4c5684f-c2dc-4c18-680d-08dbf62de407/cancelled\" }, \"reversed\": { \"id\": \"/psp/paymentorders/d4c5684f-c2dc-4c18-680d-08dbf62de407/reversed\" }, \"financialTransactions\": { \"id\": \"/psp/paymentorders/d4c5684f-c2dc-4c18-680d-08dbf62de407/financialtransactions\", \"financialTransactionsList\": [ { \"id\": \"/psp/paymentorders/d4c5684f-c2dc-4c18-680d-08dbf62de407/financialtransactions/3477dfdc-097f-4a1f-de15-08dbf7d5c914\", \"created\": \"2023-12-08T14:07:48.889224Z\", \"updated\": \"2023-12-08T14:07:48.971819Z\", \"type\": \"Capture\", \"number\": 40128372069, \"amount\": 100, \"vatAmount\": 0, \"description\": \"Capturing the authorized payment\", \"payeeReference\": \"1702044467\", \"orderItems\": { \"id\": \"/psp/paymentorders/d4c5684f-c2dc-4c18-680d-08dbf62de407/financialtransactions/3477dfdc-097f-4a1f-de15-08dbf7d5c914/orderitems\" } } ] }, \"failedAttempts\": { \"id\": \"/psp/paymentorders/d4c5684f-c2dc-4c18-680d-08dbf62de407/failedattempts\" }, \"postPurchaseFailedAttempts\": { \"id\": \"/psp/paymentorders/d4c5684f-c2dc-4c18-680d-08dbf62de407/postpurchasefailedattempts\" }, \"metadata\": { \"id\": \"/psp/paymentorders/d4c5684f-c2dc-4c18-680d-08dbf62de407/metadata\" } }, \"operations\": [ { \"method\": \"POST\", \"href\": \"https://api.externalintegration.payex.com/psp/paymentorders/d4c5684f-c2dc-4c18-680d-08dbf62de407/reversals\", \"rel\": \"reversal\", \"contentType\": \"application/json\" }, { \"method\": \"GET\", \"href\": \"https://ecom.externalintegration.payex.com/checkout/8a18154cd0eb695537d871ab9936bd16f2a05cdaf42b84b4d027bdd843de4d09?_tc_tid=05f06eeeb05e4d188dc9a8a22bad1a3d\", \"rel\": \"redirect-checkout\", \"contentType\": \"text/html\" }, { \"method\": \"GET\", \"href\": \"https://ecom.externalintegration.payex.com/checkout/client/8a18154cd0eb695537d871ab9936bd16f2a05cdaf42b84b4d027bdd843de4d09?culture=sv-SE&amp;_tc_tid=05f06eeeb05e4d188dc9a8a22bad1a3d\", \"rel\": \"view-checkout\", \"contentType\": \"application/javascript\" } ] } Callback Information Starting from v3.1 and in future API versions, we will no longer expose the underlying URLs for individual API methods. Consequently, you will rely solely on the paymentOrderId provided. If information has been included in the orderReference field in the initial purchase request, this value will still be reported, allowing you to easily identify the transaction associated with a Callback. Note that the payment and transaction fields have been removed. Callback Example v3.1 Copy json to clipboard 1 2 3 4 5 6 7 8 { \"orderReference\":\"PO-638423890947905216\", \"paymentOrder\":{ \"id\":\"/psp/paymentorders/a9bd5ea2-d2b0-48d1-59c8-08dc230b04ba\", \"instrument\":\"CreditCard\", \"number\":40129161258 } } Callback Example Previous Versions Copy json to clipboard 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 { \"orderReference\":\"ABC123\", \"paymentOrder\": { \"id\": \"/psp/paymentorders/c3ac1392-35b0-43a6-8f27-08dbce43b47c\", \"instrument\": \"paymentorders\" }, \"payment\": { \"id\": \"/psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"number\": 222222222 }, \"transaction\": { \"id\": \"/psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/sale/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"number\": 333333333 } } Sources For a more in-depth understanding of each specific instance, we have compiled relevant documentation below. Standard v3.1 documentation Post-purchase documentation Callback (asynchronous update) Payer identification (Payer Aware Menu) Seamless view events (Embedded menu)",
    "tags": "",
    "url": "/checkout-v3/migration-guide-v2/"
  },{
    "title": "MobilePay",
    "text": "Pay anywhere, anytime with Mobile Pay! Streamline your payments with Mobile Pay — the quick, secure, and effortless way to pay using your smartphone. Fast &amp; Easy: Make payments with a simple tap or scan. Secure &amp; Reliable: Bank-level encryption protects your data. Safe &amp; Secure: Your transactions are encrypted for peace of mind. Widely Accepted: Works with thousands of merchants worldwide. Back to Introduction",
    "tags": "",
    "url": "/checkout-v3/mobilepay-presentation/"
  },{
    "title": "MOTO",
    "text": "MOTO warning This feature is only available for merchants who have a specific agreement with Swedbank Pay. Card-based home orders, also known as MOTO (Mail Order / Telephone Order), is a purchase where you, as a merchant, enter the payer’s card details in order to make a payment. The payer provides the card details to the sales representative by telephone or in writing. The sales representative will then enter the details into the payment interface. Common use cases are travel or hotel bookings, where the payer calls the sales representative to make a booking. This feature is only supported with the Purchase operation. See the example below on how to implement MOTO by setting the generateMotoPayment to true. MOTO Request Request Copy json to clipboard 1 2 3 4 POST /psp/paymentorders HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.x/2.0 // Version optional for 3.0 and 2.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 { \"paymentorder\": { \"generateMotoPayment\": true, \"operation\": \"Purchase\", \"currency\": \"SEK\", \"amount\": 1500, \"vatAmount\": 375, \"description\": \"Test Purchase\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"sv-SE\", \"productName\": \"Checkout3\", // Removed in 3.1, can be excluded in 3.0 if version is added in header \"urls\": { \"hostUrls\": [ \"https://example.com\", \"https://example.net\" ], \"completeUrl\": \"https://example.com/payment-completed\", \"cancelUrl\": \"https://example.com/payment-cancelled\", \"callbackUrl\": \"https://api.example.com/payment-callback\", \"termsOfServiceUrl\": \"https://example.com/termsandconditions.pdf\" }, \"payeeInfo\": { \"payeeId\": \"5cabf558-5283-482f-b252-4d58e06f6f3b\", \"payeeReference\": \"AB832\", \"payeeName\": \"Merchant1\", \"productCategory\": \"A123\", \"orderReference\": \"or-123456\", \"subsite\": \"MySubsite\", \"siteId\": \"MySiteId\" }, \"payer\": { \"digitalProducts\": false, \"nationalIdentifier\": { \"socialSecurityNumber\": \"199710202392\", \"countryCode\": \"SE\" }, \"firstName\": \"Leia\", \"lastName\": \"Ahlström\", \"email\": \"leia@payex.com\", \"msisdn\": \"+46787654321\", \"shippingAddress\": { \"firstName\": \"firstname/companyname\", \"lastName\": \"lastname\", \"email\": \"karl.anderssson@mail.se\", \"msisdn\": \"+46759123456\", \"streetAddress\": \"Helgestavägen 9\", \"coAddress\": \"\", \"city\": \"Solna\", \"zipCode\": \"17674\", \"countryCode\": \"SE\" }, \"billingAddress\": { \"firstName\": \"firstname/companyname\", \"lastName\": \"lastname\", \"email\": \"karl.anderssson@mail.se\", \"msisdn\": \"+46759123456\", \"streetAddress\": \"Helgestavägen 9\", \"coAddress\": \"\", \"city\": \"Solna\", \"zipCode\": \"17674\", \"countryCode\": \"SE\" }, \"accountInfo\": { \"accountAgeIndicator\": \"04\", \"accountChangeIndicator\": \"04\", \"accountPwdChangeIndicator\": \"01\", \"shippingAddressUsageIndicator\": \"01\", \"shippingNameIndicator\": \"01\", \"suspiciousAccountActivity\": \"01\", } }, \"orderItems\": [ { \"reference\": \"P1\", \"name\": \"Product1\", \"type\": \"PRODUCT\", \"class\": \"ProductGroup1\", \"itemUrl\": \"https://example.com/products/123\", \"imageUrl\": \"https://example.com/product123.jpg\", \"description\": \"Product 1 description\", \"discountDescription\": \"Volume discount\", \"quantity\": 5, \"quantityUnit\": \"pcs\", \"unitPrice\": 300, \"discountPrice\": 0, \"vatPercent\": 2500, \"amount\": 1500, \"vatAmount\": 375 } ], \"riskIndicator\": { \"deliveryEmailAddress\": \"olivia.nyhuus@payex.com\", \"deliveryTimeFrameIndicator\": \"01\", \"preOrderDate\": \"19801231\", \"preOrderPurchaseIndicator\": \"01\", \"shipIndicator\": \"01\", \"giftCardPurchase\": false, \"reOrderPurchaseIndicator\": \"01\", \"pickUpAddress\": { \"name\": \"Olivia Nyhus\", \"streetAddress\": \"Saltnestoppen 43\", \"coAddress\": \"\", \"city\": \"Saltnes\", \"zipCode\": \"1642\", \"countryCode\": \"NO\" } } } } Request field not covered in the common Checkout redirect or seamless view table: Field Type Description generateMotoPayment bool Set to true if the payment order is a MOTO payment, false if not. MOTO Response Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x/2.0 api-supported-versions: 3.x/2.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 { \"paymentorder\": { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce\", \"created\": \"2020-06-22T10:56:56.2927632Z\", \"updated\": \"2020-06-22T10:56:56.4035291Z\", \"operation\": \"Purchase\", \"status\": \"Initialized\", \"currency\": \"SEK\", \"amount\": 1500, \"vatAmount\": 375, \"description\": \"Test Purchase\", \"initiatingSystemUserAgent\": \"swedbankpay-sdk-dotnet/3.0.1\", \"language\": \"sv-SE\", \"availableInstruments\": [ \"CreditCard\" ], \"implementation\": \"PaymentsOnly\", { { \"instrumentMode\": false, \"guestMode\": false, \"orderItems\": { \"id\": \"/psp/paymentorders/08090909-626e-4b90-1943-08d9eaebca86/orderitems\" }, \"urls\": { \"id\": \"/psp/paymentorders/08090909-626e-4b90-1943-08d9eaebca86/urls\" }, \"payeeInfo\": { \"id\": \"/psp/paymentorders/08090909-626e-4b90-1943-08d9eaebca86/payeeinfo\" }, \"payer\": { \"id\": \"/psp/paymentorders/08090909-626e-4b90-1943-08d9eaebca86/payers\" }, \"history\": { \"id\": \"/psp/paymentorders/08090909-626e-4b90-1943-08d9eaebca86/history\" }, \"failed\": { \"id\": \"/psp/paymentorders/08090909-626e-4b90-1943-08d9eaebca86/failed\" }, \"aborted\": { \"id\": \"/psp/paymentorders/08090909-626e-4b90-1943-08d9eaebca86/aborted\" }, \"paid\": { \"id\": \"/psp/paymentorders/08090909-626e-4b90-1943-08d9eaebca86/paid\" }, \"cancelled\": { \"id\": \"/psp/paymentorders/08090909-626e-4b90-1943-08d9eaebca86/cancelled\" }, \"financialTransactions\": { \"id\": \"/psp/paymentorders/08090909-626e-4b90-1943-08d9eaebca86/financialtransactions\" }, \"failedAttempts\": { \"id\": \"/psp/paymentorders/08090909-626e-4b90-1943-08d9eaebca86/failedattempts\" }, \"metadata\": { \"id\": \"/psp/paymentorders/08090909-626e-4b90-1943-08d9eaebca86/metadata\" } }, \"operations\": [ { \"href\": \"https://api.payex.com/psp/paymentorders/222a50ca-b268-4b32-16fa-08d6d3b73224\", \"rel\":\"update-order\", \"method\":\"PATCH\", \"contentType\":\"application/json\" }, { \"href\": \"https://api.payex.com/psp/paymentorders/222a50ca-b268-4b32-16fa-08d6d3b73224\", \"rel\": \"abort\", \"method\": \"PATCH\", \"contentType\": \"application/json\" }, { \"href\": \"https://api.payex.com/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce\", \"rel\": \"abort-paymentattempt\", \"method\": \"PATCH\", \"contentType\": \"application/json\" } ] } Capture Captures are only possible when a payment has a successful Authorization transaction, naturally excluding one-phase payment methods like Swish and Trustly. They will be marked as a Sale transaction. Two-phase payment methods like card and Vipps however, require a Capture to be completed. Please note that you have a maximum of 5 consecutive failed attempts at a capture. The payment will be locked after the fifth, and you need to contact us for further attempts. In addition to full captures, it is possible to do partial captures of the authorized amount. You can do more captures on the same payment later, up to the total authorized amount. A useful tool for when you have to split orders into several shipments. First off, you must request the order information from the server to get the request link. With this, you can request the capture with the amount to capture, and get the status back. To capture the authorized payment, we need to perform capture against the accompanying href returned in the operations list. See the abbreviated request and response below: Capture Request Request Copy json to clipboard 1 2 3 4 POST /psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/captures HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.0/2.0 // Version optional 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 { \"transaction\": { \"description\": \"Capturing the authorized payment\", \"amount\": 1500, \"vatAmount\": 375, \"payeeReference\": \"AB832\", \"receiptReference\": \"AB831\", \"orderItems\": [ { \"reference\": \"P1\", \"name\": \"Product1\", \"type\": \"PRODUCT\", \"class\": \"ProductGroup1\", \"itemUrl\": \"https://example.com/products/123\", \"imageUrl\": \"https://example.com/product123.jpg\", \"description\": \"Product 1 description\", \"discountDescription\": \"Volume discount\", \"quantity\": 4, \"quantityUnit\": \"pcs\", \"unitPrice\": 300, \"discountPrice\": 200, \"vatPercent\": 2500, \"amount\": 1000, \"vatAmount\": 250 }, { \"reference\": \"P2\", \"name\": \"Product2\", \"type\": \"PRODUCT\", \"class\": \"ProductGroup1\", \"description\": \"Product 2 description\", \"quantity\": 1, \"quantityUnit\": \"pcs\", \"unitPrice\": 500, \"vatPercent\": 2500, \"amount\": 500, \"vatAmount\": 125 } ] } } Show fields Hide fields Required Field Type Description check transaction object The transaction object. check description string The description of the capture transaction. check amount integer The transaction amount (including VAT, if any) entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The amount displayed is the final amount the payer paid for their order, including any payment method specific discounts or fees. check vatAmount integer The payment’s VAT (Value Added Tax) amount, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The vatAmount entered will not affect the amount shown on the payment page, which only shows the total amount. This field is used to specify how much of the total amount the VAT will be. Set to 0 (zero) if there is no VAT amount charged. check payeeReference string A unique reference from the merchant system. Set per operation to ensure an exactly-once delivery of a transactional operation. Length and content validation depends on whether the transaction.number or the payeeReference is sent to the acquirer. If Swedbank Pay handles the settlement, the transaction.number is sent and the payeeReference must be in the format of A-Za-z0-9 and string(30). If you handle the settlement, Swedbank Pay will send the payeeReference and it will be limited to the format of string(12). All characters must be digits. In Invoice Payments payeeReference is used as an invoice/receipt number, if the receiptReference is not defined.   receiptReference string(30) A unique reference to the transaction, provided by the merchant. Can be used as an invoice or receipt number as a supplement to payeeReference. check orderItems array The array of items being purchased with the order. Note that authorization orderItems will not be printed on invoices, so lines meant for print must be added in the Capture request. The authorization orderItems will, however, be used in the Merchant Portal when captures or reversals are performed, and might be shown other places later. It is required to use this field to be able to send Capture orderItems. Capture requests should only contain items meant to be captured from the order. check reference string A reference that identifies the order item. check name string The name of the order item. check type enum PRODUCT, SERVICE, SHIPPING_FEE, PAYMENT_FEE, DISCOUNT, VALUE_CODE or OTHER. The type of the order item. check class string The classification of the order item. Can be used for assigning the order item to a specific product category, such as MobilePhone. Note that class cannot contain spaces and must follow the regex pattern [\\w-]*. Swedbank Pay may use this field for statistics.   itemUrl string The URL to a page that can display the purchased item, product or similar. ︎︎︎ imageUrl string The URL to an image of the order item.   description string The human readable description of the order item.   discountDescription string The human readable description of the possible discount. check quantity number The 4 decimal precision quantity of order items being purchased. check quantityUnit string The unit of the quantity, such as pcs, grams, or similar. This is used for your own book keeping. check unitPrice integer The price per unit of order item, including VAT.   discountPrice integer If the order item is purchased at a discounted price. This field should contain that price, including VAT. check vatPercent integer The percent value of the VAT multiplied by 100, so 25% becomes 2500. check amount integer The total amount including VAT to be paid for the specified quantity of this order item, in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 SEK and 5000 equals 50.00 SEK. check vatAmount integer The total amount of VAT to be paid for the specified quantity of this order item, in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 SEK and 5000 equals 50.00 SEK. check reference string A reference that identifies the order item. check name string The name of the order item. check type enum PRODUCT, SERVICE, SHIPPING_FEE, PAYMENT_FEE, DISCOUNT, VALUE_CODE or OTHER. The type of the order item. check class string The classification of the order item. Can be used for assigning the order item to a specific product category, such as MobilePhone. Note that class cannot contain spaces and must follow the regex pattern [\\w-]*. Swedbank Pay may use this field for statistics. ︎︎︎ itemUrl string The URL to a page that can display the purchased item, such as a product page ︎︎︎ imageUrl string The URL to an image of the order item. ︎︎︎ description string The human readable description of the order item. ︎︎︎ discountDescription string The human readable description of the possible discount. check quantity number The 4 decimal precision quantity of order items being purchased. check quantityUnit string The unit of the quantity, such as pcs, grams, or similar. check unitPrice integer The price per unit of order item, including VAT. ︎︎︎ discountPrice integer If the order item is purchased at a discounted price. This field should contain that price, including VAT. check vatPercent integer The percent value of the VAT multiplied by 100, so 25% becomes 2500. check amount integer The total amount including VAT to be paid for the specified quantity of this order item, in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 NOK and 5000 equals 50.00 NOK. check vatAmount integer The total amount of VAT to be paid for the specified quantity of this order item, in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 NOK and 5000 equals 50.00 NOK. Capture Response If the capture request succeeds, this should be the response: Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.0/2.0 api-supported-versions: 3.0/2.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 { \"payment\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"capture\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"transaction\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2020-06-22T10:56:56.2927632Z\", \"updated\": \"2020-06-22T10:56:56.4035291Z\", \"type\": \"Capture\", \"state\": \"Completed\", \"amount\": 1500, \"vatAmount\": 375, \"description\": \"Capturing the authorized payment\", \"payeeReference\": \"AB832\", \"receiptReference\": \"AB831\" } } } Show fields Hide fields Property Type Description payment string The relative URL of the payment this capture transaction belongs to. capture object The capture object, containing the information about the capture transaction. id string The relative URL of the created capture transaction. transaction object The object representation of the generic transaction resource, containing information about the current transaction. id string The relative URL of the current transaction resource. created string The ISO-8601 date and time of when the transaction was created. updated string The ISO-8601 date and time of when the transaction was updated. type string Indicates the transaction type. state string Indicates the state of the transaction, usually initialized, completed or failed. If a partial has been done and further transactions are possible, the state will be awaitingActivity. number integer The transaction number, useful when there’s need to reference the transaction in human communication. Not usable for programmatic identification of the transaction, where id should be used instead. amount integer The transaction amount (including VAT, if any) entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The amount displayed is the final amount the payer paid for their order, including any payment method specific discounts or fees. vatAmount integer The payment’s VAT (Value Added Tax) amount, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The vatAmount entered will not affect the amount shown on the payment page, which only shows the total amount. This field is used to specify how much of the total amount the VAT will be. Set to 0 (zero) if there is no VAT amount charged. description string A textual description of the purchase. Maximum length is 40 characters. payeeReference string A unique reference from the merchant system. Set per operation to ensure an exactly-once delivery of a transactional operation. Length and content validation depends on whether the transaction.number or the payeeReference is sent to the acquirer. If Swedbank Pay handles the settlement, the transaction.number is sent and the payeeReference must be in the format of A-Za-z0-9 and string(30). If you handle the settlement, Swedbank Pay will send the payeeReference and it will be limited to the format of string(12). All characters must be digits. In Invoice Payments payeeReference is used as an invoice/receipt number, if the receiptReference is not defined. receiptReference string(30) A unique reference from the merchant system. It is set per operation to ensure an exactly-once delivery of a transactional operation. It is used to supplement payeeReference as an additional receipt number. Capture Sequence Diagram sequenceDiagram participant Merchant participant SwedbankPay as Swedbank Pay rect rgba(81,43,43,0.1) activate Merchant note left of Payer: Capture Merchant -&gt;&gt;+ SwedbankPay: rel:capture deactivate Merchant SwedbankPay --&gt;&gt;- Merchant: Capture status note right of Merchant: Capture here only if the purchased&lt;br/&gt;goods don't require shipping.&lt;br/&gt;If shipping is required, perform capture&lt;br/&gt;after the goods have shipped.&lt;br&gt;Should only be used for &lt;br&gt;payment methods that support &lt;br&gt;Authorizations. end",
    "tags": "",
    "url": "/checkout-v3/features/optional/moto/"
  },{
    "title": "Native Payments",
    "text": "In this chapter we demonstrate how the Native Payments feature can be used to create a custom checkout experience for your customers, directly integrated into your own app UI. The Native Payments feature does not provide any interface components, but instead gives you the full ability to control the look and feel of your checkout, seamless and quick payments. Currently, the following payment methods are supported by the Native Payments feature: Swish Credit cards Apple Pay Google Pay Usage The Native Payments feature consists of a set of SDK methods and callbacks that are used to control the flow of a payment session, including making multiple payment attempts in case attempts are failed or canceled. The Swedbank Pay Mobile SDKs automatically handle the routines for communicating with the payment session APIs, querying and providing payment methods compatible with the mobile device, launches external apps (such as Swish local start) as well as providing detailed event logging to ease troubleshooting. In a nutshell, the payment flow for Native Payments is very simple. A best case happy flow would look like this: sequenceDiagram participant App participant SDK App -&gt;&gt; SDK: fetchPaymentSession() activate SDK App -&gt;&gt; App: Show loading indicator SDK -&gt;&gt; App: paymentSessionFetched() deactivate SDK App -&gt;&gt; App: Present available payment methods to user App -&gt;&gt; SDK: makeNativePaymentAttempt() activate SDK App -&gt;&gt; App: Show loading indicator SDK -&gt;&gt; App: paymentSessionComplete() deactivate SDK We will expand on this further with more detailed usage flows below. The Session URL For native payments, we need the href for the view-paymentsession operation of a payment order. If you have already implemented web view based payments, you will find the Session URL next to the previously used view-checkout operation href of a payment order. 1 2 3 4 5 6 7 8 9 10 11 12 { \"paymentOrder\": { ... } \"operations\": [ { \"method\": \"GET\", \"href\": \"https://ecom.externalintegration.payex.com/psp/paymentsessions/5a17c24e-d459-4567-bbad-aa0f17a76119?_tc_tid=30f2168171e142d38bcd4af2c3721959\", \"rel\": \"view-paymentsession\", \"contentType\": \"application/javascript\" }, ... ] } The href from the operation is used in the Android and iOS implementations below. Android For this documentation, we’re assuming a basic setup is done for the Android SDK. You can achieve this by following the steps Android Setup and Android SDK Payment Session of the Bare Minimum Implementation chapter. You need to listen to some state updates from the Native Payment session, updating your UI and informing the user according to the events. You do this by observing the PaymentSession.paymentSessionState LiveData. In the following example, we implement the five base payment states. Note that the actions to perform in these callbacks are completely dependent on the checkout user experience of your application. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 PaymentSession.paymentSessionState.observe(viewLifecycleOwner) { paymentState -&gt; when (paymentState) { is PaymentSessionState.PaymentSessionFetched -&gt; { Log.d(\"SwedbankPay\", \"Payment Session Fetched\") } is PaymentSessionState.PaymentSessionComplete -&gt; { Log.d(\"SwedbankPay\", \"Payment Session Complete\") } is PaymentSessionState.PaymentSessionCanceled -&gt; { Log.d(\"SwedbankPay\", \"Payment Session Canceled\") } is PaymentSessionState.SessionProblemOccurred -&gt; { Log.d(\"SwedbankPay\", \"Payment Session Problem Occurred\") } is PaymentSessionState.SdkProblemOccurred -&gt; { Log.d(\"SwedbankPay\", \"SDK Problem Occurred\") } else -&gt; {} } } The main component for Native Payments in the Android SDK is the class PaymentSession, a helper class that makes it possible to start and interact with a native payment session. To start a native payment session, simply create a PaymentSession and call the fetchPaymentSession() method. Provide the view-paymentsession operation href in the sessionURL parameter. 1 2 3 val paymentSession = PaymentSession() paymentSession.fetchPaymentSession(sessionURL = \"https://ecom.externalintegration.payex.com/psp/paymentsessions/5a17c24e-d459-4567-bbad-aa0f17a76119?_tc_tid=30f2168171e142d38bcd4af2c3721959\") This will fetch the session information and initiate the Native Payment routine. It is advisable to present a loading indicator at this stage. As a next step, you can expect the PaymentSessionFetched state to be called with the payment methods available to use. 1 2 3 4 5 6 7 8 9 PaymentSession.paymentSessionState.observe(viewLifecycleOwner) { paymentState -&gt; when (paymentState) { is PaymentSessionState.PaymentSessionFetched -&gt; { // TODO: Present `paymentState.availableInstruments` list to user } else -&gt; {} } } After receiving the available payment methods and presenting these to the user in your own app UI, the user is able to pick the method to use. You then call makePaymentAttempt() and provide a PaymentAttemptInstrument configured for the users choice. In the following example, we assume the user wish to do a local Swish payment on the same device (for which you need to provide the application context). 1 paymentSession.makeNativePaymentAttempt(instrument = PaymentAttemptInstrument.Swish(localStartContext = context)) You should once again show indication of loading in the app. Calling the method with these parameters will start a Swish payment attempt and automatically launch the Swish app. After the user is sent back to your app, you will receive PaymentComplete or SessionProblemOccurred depending on the result of the payment attempt. 1 2 3 4 5 6 7 8 9 10 11 12 13 PaymentSession.paymentSessionState.observe(viewLifecycleOwner) { paymentState -&gt; when (paymentState) { is PaymentSessionState.PaymentSessionComplete -&gt; { // TODO: Continue checkout flow } is PaymentSessionState.SessionProblemOccurred -&gt; { // TODO: Inform user of problem details for `paymentState.problem.type`, give option to make new payment attempt or cancel } else -&gt; {} } } If there was a problem, you should inform the user and give them the ability to either make a new attempt (with any available payment method) or to abort the whole payment session. 1 paymentSession.abortPaymentSession() 1 2 3 4 5 6 7 8 9 PaymentSession.paymentSessionStatenativePaymentState.observe(viewLifecycleOwner) { paymentState -&gt; when (paymentState) { is PaymentSessionState.PaymentSessionCanceled -&gt; { // TODO: Return to cart } else -&gt; {} } } Android Payment methods The AvailableInstrumentsFetched state contains a list of AvailableInstrument on the availableInstruments parameter. This list of payment methods that can be used for payments. These instrument object also contain saved payment method data. This could be saved credit cards or known MSISDN for the user. Swish The Swish payment method is represented as an available instrument through AvailableInstrument.Swish(prefills). The prefills contains SwishPrefill that can give you the known MSISDN for the user. To make a Swish payment attempt, you use PaymentAttemptInstrument.Swish and either provide a context as localStartContext to start Swish locally on the users device, or set to an MSISDN as msisdn for the Swish payment to be started on another device. 1 2 3 4 5 // Local start of the Swish app on the users device paymentSession.makeNativePaymentAttempt(instrument = PaymentAttemptInstrument.Swish(localStartContext = context)) // Start on another device using a specific MSISDN paymentSession.makeNativePaymentAttempt(instrument = PaymentAttemptInstrument.Swish(msisdn = \"+46739000001\")) If you are starting the payment on another device, you need to specify the MSISDN starting with + and include the country code. The string must not contain any whitespace. If you choose to let your users specify their MSISDN without country code (and instead have a leading zero), it’s up to you to modify the MSISDN string before making the native Swish payment attempt. When requesting local start, the SDK will automatically launch the Swish app on the local device. If an error occurred when starting the app, your app will be informed by the problem by receiving the SessionProblemOccurred payment state, where the problem parameter will have the type value \"https://api.payex.com/psp/errordetail/paymentorders/clientapplaunchfailed\". Saved Credit Cards If you have created your payment order as payer aware by providing a payerReference value, the payment session might contain previously saved payment cards belonging to the user. The saved credit cards payment method is represented as an available instrument through AvailableInstrument.CreditCard(prefills). The prefills contains CreditCardPrefill that represents the users saved cards. You should present these saved cards to the user, so that they can pick what card to pay with. To make a saved credit card payment, you use PaymentAttemptInstrument.CreditCard and provide prefill for the credit card picked by the user. 1 2 // Start saved credit card paymnent paymentSession.makeNativePaymentAttempt(PaymentAttemptInstrument.CreditCard(prefill = pickedCard, localStartContext = context)) After starting a saved credit card payment, there is a possibility that the user will have to identify themselves in a SCA (Strong Customer Authentication) 3D Secure process. Since 3D Secure is partly handled by the card issuers, and the actual UI and UX of the process varies, the user completes the process in a web view provided by the SDK. Your app will be informed by the SCA process by receiving the Show3DSecureFragment payment state. In this example we will be using Appcompat FragmentManager via supportFragmentManager to present the 3D Secure web view fragment, meaning this code is implemented in an Activity of the app. 1 2 3 4 5 6 7 8 9 10 11 12 13 PaymentSession.paymentSessionState.observe(viewLifecycleOwner) { paymentState -&gt; when (paymentState) { is PaymentSessionState.Show3DSecureFragment -&gt; { val containerViewId = R.id.sdk_3d_secure_fragment // Specify a container ID for the fragment supportFragmentManager.beginTransaction() .add(containerViewId, paymentState.fragment, \"3DSecureFragment\") .commit() Log.d(\"SwedbankPay\", \"Show 3D Secure Fragment\") } else -&gt; {} } } When the SCA process has completed, you will receive the Dismiss3DSecureFragment payment state, informing your app that the view can be closed. In the following example, we remove the web view fragment from the screen after the SCA process is finalized (again, in this example we’re accessing the Appcompat FragmentManager via supportFragmentManager, so we’re removing the payment view in a fragment transaction to close it. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 PaymentSession.paymentSessionState.observe(viewLifecycleOwner) { paymentState -&gt; when (paymentState) { is PaymentSessionState.Dismiss3DSecureFragment -&gt; { val paymentFragment = supportFragmentManager.findFragmentByTag(\"3DSecureFragment\") if (paymentFragment != null) { supportFragmentManager.beginTransaction() .remove(paymentFragment) .commit() } Log.d(\"SwedbankPay\", \"Dismiss 3D Secure Fragment\") } else -&gt; {} } } We also need to be on the lookout for problems loading the 3D Secure view (for example due to poor internet connectivity). If the web view fails to load the 3D Secure content, you will receive the SdkProblemOccurred payment state where the problem parameter will be PaymentSessionProblem.PaymentSession3DSecureFragmentLoadFailed. The retry parameter is a callback function that you can call to retry the underlying web view request. You should inform the user of the error and give the option to either abort the payment session or retry the request. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 PaymentSession.paymentSessionState.observe(viewLifecycleOwner) { paymentState -&gt; when (paymentState) { is PaymentSessionState.SdkProblemOccurred -&gt; { when (paymentState.problem) { is PaymentSessionProblem.PaymentSession3DSecureFragmentLoadFailed -&gt; { val error = (paymentState.problem as PaymentSessionProblem.PaymentSession3DSecureFragmentLoadFailed).error val retry = (paymentState.problem as PaymentSessionProblem.PaymentSession3DSecureFragmentLoadFailed).retry // TODO: Inform user of an error loading the 3D Secure view and provide the option to retry or cancel Log.d(\"SwedbankPay\", \"3D Secure Fragment Load Failed\") } else -&gt; {} } } else -&gt; {} } } New Credit Card Apart from saved credit cards, you can also give the user the option to enter new credit card details to perform the payment. There are several scenarios where this is relevant: When you want to give a user (with or without existing saved credit cards) the option to perform the payment with a “New Credit Card”, and give them the option to save the new card for future payments. For verify payment orders. If you haven’t created your payment order as payer aware and want to offer credit card “guest” payments, without the option to save the card for future payments. The new credit card payment method is represented as an available instrument through AvailableInstrument.NewCreditCard, and to make a new credit card payment, you use PaymentAttemptInstrument.NewCreditCard. You also provide enabledPaymentDetailsConsentCheckbox parameter controls if the consent checkbox for storing the card for future payments is shown or not. If you specify false in this parameter, it is up to you to collect consent from the user directly in your app. Hiding the consent checkbox places the responsibility on you to specify if the payment should generate a card payment token or not, you can read more about Store details and toggle consent checkbox. 1 2 3 4 5 // Start new credit card paymnent, showing the consent checkbox paymentSession.makeNativePaymentAttempt(PaymentAttemptInstrument.NewCreditCard(enabledPaymentDetailsConsentCheckbox = true)) // Start new credit card paymnent, hiding the consent checkbox and using the Payment Order `generatePaymentToken` parameter instead paymentSession.makeNativePaymentAttempt(PaymentAttemptInstrument.NewCreditCard(enabledPaymentDetailsConsentCheckbox = false)) To simplify PCI-DSS compliance, the collection of credit card details is managed completely by the Swedbank Pay Mobile SDK. At this time, this is done with a web view, where the same UI as the regular web based payment menu is used. After making a payment attempt with AvailableInstrument.NewCreditCard, you will receive the ShowPaymentFragment state, and you are responsible for presenting it to the user. In this example we will be using Appcompat FragmentManager via supportFragmentManager to present the payment fragment, meaning this code is implemented in an Activity of the app. Don’t forget to dismiss the payment fragment when the payment ends. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 PaymentSession.paymentSessionState.observe(viewLifecycleOwner) { paymentState -&gt; when (paymentState) { is PaymentSessionState.ShowPaymentFragment -&gt; { Log.d(\"SwedbankPay\", \"Show Payment Fragment\") val containerViewId = R.id.sdk_payment_fragment // Specify a container ID for the fragment supportFragmentManager.beginTransaction() .add(containerViewId, paymentState.fragment, \"PaymentFragment\") .commit() } is PaymentSessionState.PaymentSessionComplete, is PaymentSessionState.PaymentSessionCanceled -&gt; { Log.d(\"SwedbankPay\", \"Payment Session Complete / Canceled\") val paymentFragment = supportFragmentManager.findFragmentByTag(\"PaymentFragment\") if (paymentFragment != null) { supportFragmentManager.beginTransaction() .remove(paymentFragment) .commit() } } else -&gt; {} } } Note that if a SCA 3D Secure process is required, it will be completed directly inside the PaymentFragment. So the 3D Secure fragment states will not be sent, as they are when making payment attempts with saved credit cards. Google Pay The Google Pay payment method is represented as an available instrument through AvailableInstrument.GooglePay. Before making Google Pay payments, you need to enable the Android Wallet API in your AndroidManifest.xml file. 1 2 3 &lt;meta-data android:name=\"com.google.android.gms.wallet.api.enabled\" android:value=\"true\" /&gt; To make an Google Pay payment attempt, you use PaymentAttemptInstrument.GooglePay. You need to specify activity as a parameter, that represents the activity where the Google Pay payment overlay UI should be shown. 1 2 // Start Google Pay payment paymentSession.makeNativePaymentAttempt(instrument = PaymentAttemptInstrument.GooglePay(activity = activity)) The Google Pay interface will automatically be shown over your application UI, where the user can choose credit card. One important note is that after starting a Google Pay payment, there is a possibility that the user will have to identify themselves in a SCA (Strong Customer Authentication) 3D Secure process. This means that you have to be ready to possibly show a web view fragment containing the 3D Secure process. For SCA on Google Pay payments, the process in the SDK is identical to when paying with Saved Credit Cards. For Google Pay payments in test environments, you need to follow the Google Test Card suite guidelines. This involves adding the email of your Google Account that is logged in on your Android test device to the test card suite group and using one of the Mock test cards that are automatically available when performing payments. When testing Google Pay, you must use a the Mock test cards. Production Google Pay cards will not work and you should never use production credit cards in testing environments. iOS For this documentation, we’re assuming a basic setup is done for the iOS SDK. You can achieve this by following the steps iOS Setup and iOS SDK Payment Session of the Bare Minimum Implementation chapter. You need to listen to some state updates from the Payment session, updating your UI and informing the user according to the events. You do this by implementing the SwedbankPaySDKPaymentSessionDelegate protocol. In the following example, we implement the delegate protocol and the eight required methods. Note that the actions to perform in these callbacks are completely dependent on the checkout user experience of your application. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 func paymentSessionFetched(availableInstruments: [SwedbankPaySDK.AvailableInstrument]) { print(\"Available Instruments Fetched\") } func sessionProblemOccurred(problem: SwedbankPaySDK.ProblemDetails) { print(\"Session Problem Occurred\") } func sdkProblemOccurred(problem: SwedbankPaySDK.PaymentSessionProblem) { print(\"SDK Problem Occurred\") } func paymentSessionComplete() { print(\"Payment Session Complete\") } func paymentSessionCanceled() { print(\"Payment Session Canceled\") } func showSwedbankPaySDKController(viewController: SwedbankPaySDKController) { print(\"Show Swedbank Pay SDK Controller\") } func show3DSecureViewController(viewController: UIViewController) { print(\"Show 3D Secure View Controller\") } func dismiss3DSecureViewController() { print(\"Dismiss 3D Secure View Controller\") } The main component for Native Payments in the iOS SDK is the class SwedbankPaySDK.SwedbankPayPaymentSession, a helper class that makes it possible to start and interact with a native payment session. To start a native payment session, simply create a SwedbankPaySDK.SwedbankPayPaymentSession, set a delegate and call the fetchPaymentSession(sessionURL:) method. Provide the view-paymentsession operation href in the sessionURL parameter. 1 2 3 4 5 let paymentSession = SwedbankPaySDK.SwedbankPayPaymentSession() paymentSession.delegate = self paymentSession.fetchPaymentSession(sessionURL: URL(string: \"https://ecom.externalintegration.payex.com/psp/paymentsessions/5a17c24e-d459-4567-bbad-aa0f17a76119?_tc_tid=30f2168171e142d38bcd4af2c3721959\")!) This will fetch the session information and initiate the Native Payment routine. It is advisable to present a loading indicator at this stage. As a next step, you can expect the paymentSessionFetched(_:) delegate method to be called with the payment methods available to use. 1 2 3 func paymentSessionFetched(availableInstruments: [SwedbankPaySDK.AvailableInstrument]) { // TODO: Present `availableInstruments` array to user } After receiving the available payment methods and presenting these to the user in your own app UI, the user is able to pick the method to use. You then call makeNativePaymentAttempt(instrument:) and provide a SwedbankPaySDK.PaymentAttemptInstrument configured for the users choice. In the following example, we assume the user wish to do a local Swish payment on the same device. 1 paymentSession.makeNativePaymentAttempt(instrument: .swish(msisdn: nil)) You should once again show indication of loading in the app. Calling the method with these parameters will start a Swish payment attempt and automatically launch the Swish app. After the user is sent back to your app, you will receive paymentComplete() or sessionProblemOccurred(problem:) depending on the result of the payment attempt. 1 2 3 4 5 6 7 func paymentSessionComplete() { // TODO: Continue checkout flow } func sessionProblemOccurred(problem: SwedbankPaySDK.ProblemDetails) { // TODO: Inform user of problem details for `problem`, give option to make new payment attempt or cancel } If there was a problem, you should inform the user and give them the ability to either make a new attempt (with any available payment method) or to abort the whole payment session. 1 paymentSession.abortPaymentSession() 1 2 3 func paymentSessionCanceled() { // TODO: Return to cart } iOS Payment methods The availableInstruments array provided in the paymentSessionFetched(_:) delegate method is an array of SwedbankPaySDK.AvailableInstrument with information of payment methods that can be used for payments. These instrument object also contain saved payment method data. This could be saved credit cards or known MSISDN for the user. Swish The Swish payment method is represented as an available instrument through SwedbankPaySDK.AvailableInstrument.swish(prefills:). The prefills contains SwishMethodPrefillModel that can give you the known MSISDN for the user. To make a Swish payment attempt, you use SwedbankPaySDK.PaymentAttemptInstrument.swish(msisdn:) where msisdn can be set to nil to start the Swish app locally on the users device, or set to an MSISDN for the Swish payment to be started on another device. 1 2 3 4 5 // Start Swish payment with local start of the Swish app on the users device paymentSession.makeNativePaymentAttempt(instrument: .swish(msisdn: nil)) // Start Swish payment with the Swish app on another device using a specific MSISDN paymentSession.makeNativePaymentAttempt(instrument: .swish(msisdn: \"+46739000001\")) If you are starting the payment on another device, you need to specify the MSISDN starting with + and include the country code. The string must not contain any whitespace. If you choose to let your users specify their MSISDN without country code (and instead have a leading zero), it’s up to you to modify the MSISDN string before making the native Swish payment attempt. When requesting local start, the SDK will automatically launch the Swish app on the local device. If an error occurred when starting the app, the SDK will call the sessionProblemOccurred(problem:) delegate method, and provide a problem with type type parameter set to \"https://api.payex.com/psp/errordetail/paymentorders/clientapplaunchfailed\". Saved Credit Cards If you have created your payment order as payer aware by providing a payerReference value, the payment session might contain previously saved payment cards belonging to the user. The saved credit cards payment method is represented as an available instrument through SwedbankPaySDK.AvailableInstrument.creditCard(prefills:). The prefills contains CreditCardMethodPrefillModel that represents the users saved cards. You should present these saved cards to the user, so that they can pick what card to pay with. To make a saved credit card payment, you use SwedbankPaySDK.PaymentAttemptInstrument.creditCard(prefill:) where prefill must be set to the credit card picked by the user. 1 2 // Start saved credit card paymnent paymentSession.makeNativePaymentAttempt(instrument: .creditCard(prefill: pickedCard)) After starting a saved credit card payment, there is a possibility that the user will have to identify themselves in a SCA (Strong Customer Authentication) 3D Secure process. Since 3D Secure is partly handled by the card issuers, and the actual UI and UX of the process varies, the user completes the process in a web view provided by the SDK. Your app will be informed by the SCA process via the show3DSecureViewController(viewController:) delegate method. In the example code below, we simply present the 3D Secure web view controller modally, but you can choose freely how to present the view. 1 2 3 4 func show3DSecureViewController(viewController: UIViewController) { present(viewController, animated: true) print(\"Show 3D Secure View Controller\") } When the SCA process has completed, the dismiss3DSecureViewController() delegate method is called, informing your app that the view can be closed. Since we presented the view controller modally in this example, we can simply dismiss it. 1 2 3 4 func dismiss3DSecureViewController() { dismiss(animated: true) print(\"Dismiss 3D Secure View Controller\") } We also need to be on the lookout for problems loading the 3D Secure view (for example due to poor internet connectivity). If the web view fails to load the 3D Secure content, the sdkProblemOccurred(problem:) delegate method will be called. In this case, the problem parameter will be of the type PaymentSession3DSecureFragmentLoadFailed. The problem instance will in turn contain an error parameter that indicates the underlying loading error. There is also a retry parameter, in the form of a closure that you can call to retry the underlying web view request. You should inform the user of the error and give the option to either abort the payment session or retry the request. 1 2 3 4 5 6 func sdkProblemOccurred(problem: SwedbankPaySDK.PaymentSessionProblem) { if case .paymentSession3DSecureViewControllerLoadFailed(let error, let retry) = problem { // TODO: Inform user of an error loading the 3D Secure view and provide the option to retry or cancel print(\"3D Secure View Controller Load Failed\") } } New Credit Card Apart from saved credit cards, you can also give the user the option to enter new credit card details to perform the payment. There are several scenarios where this is relevant: When you want to give a user (with or without existing saved credit cards) the option to perform the payment with a “New Credit Card”, and give them the option to save the new card for future payments. For verify payment orders. If you haven’t created your payment order as payer aware and want to offer credit card “guest” payments, without the option to save the card for future payments. The new credit card payment method is represented as an available instrument through SwedbankPaySDK.AvailableInstrument.newCreditCard(), and to make a new credit card payment, you use SwedbankPaySDK.PaymentAttemptInstrument.newCreditCard(enabledPaymentDetailsConsentCheckbox:). The enabledPaymentDetailsConsentCheckbox parameter controls if the consent checkbox for storing the card for future payments is shown or not. If you specify false in this parameter, it is up to you to collect consent from the user directly in your app. Hiding the consent checkbox places the responsibility on you to specify if the payment should generate a card payment token or not, you can read more about Store details and toggle consent checkbox. 1 2 3 4 5 // Start new credit card paymnent, showing the consent checkbox paymentSession.makeNativePaymentAttempt(instrument: .newCreditCard(enabledPaymentDetailsConsentCheckbox: true)) // Start new credit card paymnent, hiding the consent checkbox and using the Payment Order `generatePaymentToken` parameter instead paymentSession.makeNativePaymentAttempt(instrument: .newCreditCard(enabledPaymentDetailsConsentCheckbox: false)) To simplify PCI-DSS compliance, the collection of credit card details is managed completely by the Swedbank Pay Mobile SDK. At this time, this is done with a web view, where the same UI as the regular web based payment menu is used. After making a payment attempt with SwedbankPaySDK.PaymentAttemptInstrument.newCreditCard(), you will receive the showSwedbankPaySDKController(viewController:) delegate method, and you are responsible for presenting it to the user. In this example, we’ll simply present the view controller modally. Don’t forget to dismiss it when the payment ends. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 func showSwedbankPaySDKController(viewController: SwedbankPaySDKController) { present(viewController, animated: true) print(\"Show Swedbank Pay SDK Controller\") } func paymentSessionComplete() { dismiss(animated: true) print(\"Payment Session Complete\") } func paymentSessionCanceled() { dismiss(animated: true) print(\"Payment Session Canceled\") } Note that if a SCA 3D Secure process is required, it will be completed directly inside the SwedbankPaySDKController. So the 3D Secure view controller delegate methods will not be called, as they are when making payment attempts with saved credit cards. Apple Pay The Apple Pay payment method is represented as an available instrument through SwedbankPaySDK.AvailableInstrument.applePay. Before making Apple Pay payments, you need to set up an Apple Pay Merchant ID and connect it to your application. You should follow Apples documentation for this, but the base steps are as follows: Create a Merchant Identifier in the Certificates, Identifiers &amp; Profiles part of the Apple developer portal. This will generally be a reverse URL identifier, for example merchant.com.swedbankpay.exampleapp. Note that you need separate merchant IDs for testing and production (one Apple Pay Merchant ID for every Swedbank Pay Merchant you want to use). Upload the payment processing certificate signing request to Apple and download the certificate issued by Apple. You need to contact Swedbank Pay for further instructions and the files needed. Enable the Apple Pay capability in Xcode and add your Apple Pay Merchant IDs. Note, that when updating app capabilities, there might be a need to generate new provisioning profiles for your app signing process. To make an Apple Pay payment attempt, you use SwedbankPaySDK.PaymentAttemptInstrument.applePay(merchantIdentifier:). The merchantIdentifier parameter should be specified to the Apple Pay Merchant ID to use for the payment. Note, that in an upcoming version of the Swedbank Pay iOS Mobile SDK, this value will be automatically grabbed from the payment session. 1 2 // Start Apple Pay payment paymentSession.makeNativePaymentAttempt(instrument: .applePay(merchantIdentifier: \"merchant.com.swedbankpay.exampleapp\")) The Apple Pay interface will automatically be shown over your application UI, where the user can choose credit card. For Apple Pay payments in test environments, you need to follow the Apple Guidelines for Sandbox Testing. This involves creating a Sandbox Tester Apple ID Account, signing in on that Apple ID on your iOS test device and finally adding one or more of the available Test Card Numbers in the Wallet app of the device. When testing Apple Pay, you must use a Sandbox Apple ID and Test Cards. Production Apple Pay Cards will not work and you should never use production credit cards in testing environments. Problem handling There are two categories of problems that can occur during a payment session, Session problems and local SDK problems. Session problems are problems with payment attempts, and contain information from the payment order specific to the payment attempt instrument in question. An index and further description of problems can be found in the Technical Reference. Session problems are communicated via the sessionProblemOccurred(problem:) delegate method on iOS and via the SessionProblemOccurred state on Android. The problem parameter contains problem information, consisting of type, title, status and detail. Local SDK problems are either inconsistency errors or communication errors occurring inside the SDK. These problems are communicated via the sdkProblemOccurred(problem:) delegate method on iOS and via the SdkProblemOccurred state on Android. The problem parameters is a SwedbankPaySDK.PaymentSessionProblem enum value on iOS and a PaymentSessionProblem class on Android. The different SDK problems should be handled in the following ways: PaymentSessionAPIRequestFailed indicates a problem with the underlying API communication. This is most likely due to network errors, such as poor cell phone coverage. The SDK will automatically attempt retries of failing API calls up to a point, where it finally gives up and informs you via this value. The error parameter contains the underlying Swift Error object received from the system. The retry parameter is a closure on iOS and a callback function on Android that you can call to retry the underlying API call. You should inform the user of the error and give the option to either abort the payment session or retry the call. InternalInconsistencyError is the result of an logic inconsistency problem in the SDK. An example of this would be to call abortPaymentSession() before startPaymentSession(). If you receive this error during development, you should make sure that you follow the usage flow correctly. If you get this error in your production app, you should inform the user of a generic technical error and restart the checkout process. PaymentSessionEndReached is the result of a native payment session that has reached a state that isn’t supported by the SDK. Since payment orders can be consumed either on the web, as a web based mobile app payment or as an app native payment, you could theoretically modify the state of a payment order on two different devices at the same time, or start on one device and try to continue on another. If you get this error during development, you should make sure that you follow the usage flow correctly, and that you are always starting native payment sessions on a newly created payment order that is only consumed in your app. You should also make sure that you’ve correctly configured the SDK with the same completeURL, cancelURL and paymentURL as you are creating the payment order with on your backend. If you get this error in your production app, you should inform the user of a generic technical error and restart the checkout process. Alternative checkout flows Depending on the checkout flow in your app, there might be a need to implement the Native Payment feature slightly different. Payment menu fallback You might want to give the user an option to make payments in the regular, web view based, payment menu using the SDK. You can easily achieve this by reusing the same session and present the web view based SDK UI as a fallback depending on the user choice. You can also use this functionality to directly present one specific instrument for the user in the web view. This supports all instruments, including the instruments not supported as native payments, such as Invoice payments. In the availableInstruments array you receive from the session, you will find instruments indicated as “Web Based”. These don’t have a corresponding PaymentAttemptInstrument, and can therefore not be used to make native payment attempts. They can instead be used to configure the web view based SDK UI. An example flow for presenting a “More payment methods” for the user: sequenceDiagram participant App participant SDK App -&gt;&gt; SDK: fetchPaymentSession() activate SDK App -&gt;&gt; App: Show loading indicator SDK -&gt;&gt; App: paymentSessionFetched() deactivate SDK App -&gt;&gt; App: Present available payment methods to user note over App: Include custom option&lt;br/&gt;\"More payment methods\" opt If a native payment instrument is picked by user App -&gt;&gt; SDK: makeNativePaymentAttempt() activate SDK App -&gt;&gt; App: Show loading indicator SDK -&gt;&gt; App: paymentComplete() deactivate SDK end opt If \"More payment methods\" option is picked by user App -&gt;&gt; SDK: Create payment menu activate SDK note over App, SDK: Android: createPaymentFragment()&lt;br/&gt;iOS: createSwedbankPaySDKController() SDK -&gt;&gt; App: Show payment menu note over App, SDK: Android: ShowPaymentFragment&lt;br/&gt;iOS: showSwedbankPaySDKController() App -&gt;&gt; App: Present web based payment menu SDK -&gt;&gt; App: paymentComplete() deactivate SDK end You request a web view based payment menu, and specify the mode, using the SDK with an ongoing session. This web based payment can be presented in three ways: As a payment menu, displaying all available instruments for the payment order. As a payment menu, restricting the instruments to a specific subset of the available instruments for the payment order. As instrument mode, displaying only one specific instrument. Payment menu For a payment menu with all available instruments for the payment order, we specify the mode to menu and restrictedToInstruments to an empty value. 1 paymentSession.createSwedbankPaySDKController(mode: .menu(restrictedToInstruments: nil)) 1 paymentSession.createPaymentFragment(mode = SwedbankPayPaymentSessionSDKControllerMode.Menu(null)) Payment menu, restricted to instruments For a payment menu restricted to specific instruments, we specify the mode to menu and restrictedToInstruments to an array with the instruments that you want to show in the menu. In the example below, we filter out so that only the purely web based instruments are shown, but you are free to specify any logic. You are free to include both instruments that are web based and those that can be performed as native payments. 1 2 3 4 5 6 7 8 let restrictedToInstruments = availableInstruments.filter { if case .webBased = $0 { return true } return false } paymentSession.createSwedbankPaySDKController(mode: .menu(restrictedToInstruments: restrictedToInstruments)) 1 2 val restrictedToInstruments = availableInstruments.filterIsInstance&lt;AvailableInstrument.WebBased&gt;() paymentSession.createPaymentFragment(mode = SwedbankPayPaymentSessionSDKControllerMode.Menu(restrictedToInstruments = restrictedToInstruments)) Instrument mode For instrument mode, we specify mode to instrumentMode and instrument to the specific instrument that was picked by the user. Note that the SDK exposes the instrument paymentMethod identifiers as strings, and it’s up to you to identify the relevant instrument from the list of available instruments. In the example below, we explicitly look for the Invoice-PayExFinancingSe instrument. 1 2 3 if let instrument = availableInstruments.first(where: { $0.paymentMethod == \"Invoice-PayExFinancingSe\" }) { paymentSession.createSwedbankPaySDKController(mode: .instrumentMode(instrument: instrument)) } 1 2 3 availableInstruments.firstOrNull { it.paymentMethod == \"Invoice-PayExFinancingSe\" }?.let { instrument -&gt; paymentSession.createPaymentFragment(SwedbankPayPaymentSessionSDKControllerMode.InstrumentMode(instrument = instrument)) } Detailed usage flows To expand on the simple happy flow, there are a few more possible scenarios when making Native Payments. Below you can find a more complete flow with notes and multiple outcomes: sequenceDiagram participant App participant SDK participant Ext as External App participant Backend as Merchant Backend participant SWP as Payment Order API App -&gt;&gt; Backend: Initiate checkout activate Backend Backend -&gt;&gt; SWP: Create Payment Order ① deactivate Backend activate SWP SWP -&gt;&gt; Backend: Payment Order information deactivate SWP activate Backend Backend -&gt;&gt; App: Payment Order information deactivate Backend App -&gt;&gt; SDK: fetchPaymentSession() ② activate SDK App -&gt;&gt; App: Show loading indicator SDK -&gt;&gt; App: paymentSessionFetched() deactivate SDK App -&gt;&gt; App: Present available payment methods to user App -&gt;&gt; SDK: makeNativePaymentAttempt() activate SDK App -&gt;&gt; App: Show loading indicator opt Low friction Complete SDK -&gt;&gt; App: paymentSessionComplete() note over SDK, App: Very low friction payments can finish here end opt Payments in External App SDK -&gt;&gt; Ext: Start external app deactivate SDK activate Ext Ext -&gt;&gt; SDK: Return from external app deactivate Ext activate SDK opt On iOS App -&gt;&gt; SDK: SwedbankPaySDK.open(url:) ③ end end opt External App Complete SDK -&gt;&gt; App: paymentSessionComplete() note over SDK, App: Payments completed in external apps can finish here end opt On payment problems SDK -&gt;&gt; App: sessionProblemOccurred() ④ App -&gt;&gt; App: Present problem description to user note over SDK, App: User can either make a new payment attempt&lt;br/&gt;with any available instrument, or abort the session end opt On SDK problems SDK -&gt;&gt; App: sdkProblemOccurred() ④ App -&gt;&gt; App: Present problem description to user note over SDK, App: Depending on the SDK problem, the user can either&lt;br/&gt;retry, make a new payment attempt, or you need to&lt;br/&gt;restart the payment session. end opt If user aborts session App -&gt;&gt; SDK: abortPaymentSession() App -&gt;&gt; App: Show loading indicator SDK -&gt;&gt; App: paymentSessionCanceled() deactivate SDK end ① Just as with regular non-native payments in the Swedbank Pay Mobile SDK, there is no option to create payment orders directly. You need to create your payment orders with your own backend. ② Starting a Native Session in the SDK requires a Session URL. ③ Just as with non-native payments, the SwedbankPaySDK.open(url:) method needs to be called from the App Delegate, see iOS Setup. This is not needed on Android. ④ See Problem handling for different considerations and outcomes. Present methods before payment order creation There might be scenarios where you want to presenting payment methods to your user before creating your payment order. This could be because you have payment methods not using Swedbank Pay, or because you need to create your payment order in different ways depending on the choice of payment method by the user. You can achieve this by simply presenting available payment methods to the user in your UI and saving the picked method to a local cache. When the SDK callback paymentSessionFetched() is called, you match the available instruments to the saved cache and make a payment attempt on that instrument, without any user interaction. You can combine this with One-Click Payment tokens for credit card where you can fetch the users saved payment tokens before creating your payment order. sequenceDiagram participant App participant SDK participant Backend as Merchant Backend participant SWP as Payment Order API opt If you want to present saved tokens App -&gt;&gt; Backend: Fetch saved credit cards activate Backend Backend -&gt;&gt; SWP: Fetch Payer Owned Tokens deactivate Backend activate SWP SWP -&gt;&gt; Backend: Payer Owned Tokens deactivate SWP activate Backend Backend -&gt;&gt; App: Saved payment token list deactivate Backend end App -&gt;&gt; App: Present available payment methods to user App -&gt;&gt; App: Save payment method picked by user to local cache App -&gt;&gt; Backend: Initiate checkout activate Backend Backend -&gt;&gt; SWP: Create Payment Order deactivate Backend activate SWP SWP -&gt;&gt; Backend: Payment Order information deactivate SWP activate Backend Backend -&gt;&gt; App: Payment Order information deactivate Backend App -&gt;&gt; SDK: fetchPaymentSession() activate SDK App -&gt;&gt; App: Show loading indicator SDK -&gt;&gt; App: paymentSessionFetched() deactivate SDK note over App: Match previously picked payment&lt;br/&gt;method in local cache to list of&lt;br/&gt;available instruments, without&lt;br/&gt;any user interaction App -&gt;&gt; App: Automatically choose instrument App -&gt;&gt; SDK: makeNativePaymentAttempt() activate SDK App -&gt;&gt; App: Show loading indicator SDK -&gt;&gt; App: paymentSessionComplete() deactivate SDK Back: iOS Next: Features",
    "tags": "",
    "url": "/checkout-v3/modules-sdks/mobile-sdk/native-payments/"
  },{
    "title": "Network Tokenization",
    "text": "What Is Network Tokenization? The reason behind network tokenization is to shift the processing of stored cards from card numbers (PAN) to tokens. Card details are replaced by the token and a cryptogram. The tokens are generated by the card networks (Visa and MasterCard) when an end-user signs up for a service using a stored card. Tokens are global within the network, where Merchants, PSPs and issuers can connect to them. The merchant and PSP are provided with the token attached to a card, while the issuer is able to update the card information attached to the token. The result is a token which lives after a card expires, since the card information connected to it is updated seamlessly by the issuer. This will improve the user experience for the end-user, as they no longer have to take action when their card reaches the expiry date. As the card connected to the token will be valid at all times, this will reduce churn and improve approval rates for merchants and PSPs as well, especially for subscription and one-click services. How It Works This functionality is available through both our payment order implementations and card implementation for recurring transactions, one-click and unscheduled purchases. We strongly recommend paymentOrder to ensure that you get access to capabilities coming in later deliveries, such as card art, shared tokens and notifications. It is only available with Swedbank Pay as acquirer for the time being. When you choose to add this functionality, we activate Network Tokenization for your merchant account and initiate onboarding towards VISA and Mastercard. Once we get onboarding confirmation from Visa and Mastercard, Network Tokenization will be enabled and used for future card storage and stored card processing. Cards that have previously been stored with card details only, will be network tokenized next time they are charged. Once the setup is completed, the transactions themselves run as normal unscheduled, one-click or recurring purchases. The difference is that Network Tokenization replaces the card number behind the token. Do you want to give it a go? Test cards and a guide is in the test data section. Recommendations To You As A Merchant If you are displaying the last four digits of your customers stored cards, we highly recommend refreshing these numbers when a card has been updated or replaced by the issuer. This would help the customer to understand that a new and valid card is stored. It is also recommended that you add information that the card has been updated automatically by the issuer. Retrieving the updated card information is done using payerOwnedTokens, and should be done when the end-user logs in, goes to “My cards” or at a similar point that makes sense in your portal. The GET request to retrieve updated card information should look similar to this. GET Tokens Request 1 2 3 4 GET /psp/paymentorders/payerownedtokens/&lt;payerReference&gt; HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.x/2.0 // Version optional for 3.0 and 2.0 GET Tokens Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x/2.0 api-supported-versions: 3.x/2.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 { \"payerOwnedTokens\": { \"id\": \"/psp/paymentorders/payerownedtokens/{payerReference}\", \"payerReference\": \"{payerReference}\", \"tokens\": [ { \"token\": \"{token}\", \"tokenType\": \"Unscheduled\", \"instrument\": \"CreditCard\", \"instrumentDisplayName\": \"492500******0004\", \"correlationId\": \"e2f06785-805d-4605-bf40-426a725d313d\", \"instrumentParameters\": { \"expiryDate\": \"12/2025\", \"cardBrand\": \"Visa\", \"lastFourPan\": \"0004\", \"lastFourDPan\": \"8188\", \"issuerName\": \"BankName\" }, \"operations\": [ { \"method\": \"PATCH\", \"href\": \"https://api.internaltest.payex.com/psp/paymentorders/unscheduledtokens/e2f06785-805d-4605-bf40-426a725d313d\", \"rel\": \"delete-unscheduledtokens\", \"contentType\": \"application/json\" } ] } ] }, \"operations\": [ { \"method\": \"PATCH\", \"href\": \"https://api.internaltest.payex.com/psp/paymentorders/payerOwnedPaymentTokens/{payerReference}\", \"rel\": \"delete-payerownedtokens\", \"contentType\": \"application/json\" } ] } Field Type Description instrumentParameters integer A list of additional information connected to the token. Depending on the payment method, it can e.g. be expiryDate, cardBrand, email, msisdn or zipCode. expiryDate string The expiry date of the card currently connected to the network token. cardBrand string The brand of the card currently connected to the network token. lastFourPan string The last four digits of the PAN connected to the network token. lastFourDpan string The last four digits of the DPAN (Network Token). issuerName string The name of the issuer. We advise you to implement automatic deletion of tokens when end-users choose to end the service with the you. This is to avoid unnecessary cost on your end, as you are invoiced monthly for each active token. Please note that the new field maskedDpan is present when using Network Tokenization. DPAN is the network token representing the card and thus, maskedDpan is a masked version of the network token. It will only appear if the card is tokenized by Visa or Mastercard. The end-user will not normally know what maskedDpan is or that it’s being used, but you as a merchant need to keep track of it. See the Paid resource for cards.",
    "tags": "",
    "url": "/checkout-v3/features/customize-payments/network-tokenization/"
  },{
    "title": "",
    "text": "Sample Payment Response for approved payment with physical payment card 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;SaleToPOIResponse&gt; &lt;MessageHeader MessageClass=\"Service\" MessageCategory=\"Payment\" MessageType=\"Response\" ServiceID=\"3\" SaleID=\"1\" POIID=\"A-POIID\"/&gt; &lt;PaymentResponse&gt; &lt;Response Result=\"Success\"/&gt; &lt;SaleData&gt; &lt;SaleTransactionID TransactionID=\"1703372\" TimeStamp=\"2023-08-24T17:03:37+02:00\"/&gt; &lt;/SaleData&gt; &lt;POIData&gt; &lt;POITransactionID TransactionID=\"8778880185\" TimeStamp=\"2023-08-24T15:04:00.498Z\"/&gt; &lt;/POIData&gt; &lt;PaymentResult PaymentType=\"Normal\"&gt; &lt;PaymentInstrumentData PaymentInstrumentType=\"Card\"&gt; &lt;CardData PaymentBrand=\"01,Mastercard Debit\" MaskedPAN=\"516815******9659\" EntryMode=\"Contactless\"&gt; &lt;PaymentToken TokenRequestedType=\"Customer\" TokenValue=\"6FD955C23A48A041D881003CDBF836DC59F89CE0ECA8288129696CDF9BB8B8DD67F233\"/&gt; &lt;/CardData&gt; &lt;/PaymentInstrumentData&gt; &lt;AmountsResp Currency=\"SEK\" AuthorizedAmount=\"56\" CashBackAmount=\"0.00\"/&gt; &lt;PaymentAcquirerData MerchantID=\"10020001\" AcquirerPOIID=\"877888\"&gt; &lt;ApprovalCode&gt;611506&lt;/ApprovalCode&gt; &lt;/PaymentAcquirerData&gt; &lt;/PaymentResult&gt; &lt;PaymentReceipt DocumentQualifier=\"CashierReceipt\"&gt; &lt;OutputContent OutputFormat=\"Text\"&gt; &lt;OutputText&gt;eyJNZXJjaGFudCI6eyJNYW5kYXRvcnkiOnsiQWNxdWlyZXIiOnsiQ2FyZEFjY2VwdG9yTnVtYmVyIjoiMTAwMjAwMDEiLCJUZXJtaW5hbElEIjoiODc3ODg4In0sIkNhcmRBY2NlcHRvciI6eyJBZGRyZXNzMSI6IkjDpGxsZXNrw6VyYW4gMjkiLCJCYW5rQWdlbnROYW1lIjoiYmFua3ktYmFuayIsIk5hbWUiOiJUZXN0IHNob3AiLCJPcmdhbmlzYXRpb25OdW1iZXIiOiI1NTY1NjcxLTYxNjUiLCJQb3N0WmlwQ29kZSI6IjUwNTAiLCJUb3duQ2l0eSI6Im1lcmNoYW50LUJhc2UyNC1DaXR5In0sIkNhcmREZXRhaWxzIjp7IkFwcGxpY2F0aW9uSWRlbnRpZmllciI6IkEwMDAwMDAwMDQxMDEwIiwiQ2FyZFNjaGVtZU5hbWUiOnsiQXBwbGljYXRpb25MYWJlbCI6Ik1hc3RlcmNhcmQifSwiUHJpbWFyeUFjY291bnROdW1iZXIiOiI1MTY4MTUqKioqKio5NjU5IiwiVGVybWluYWxWZXJpZmljYXRpb25SZXN1bHQiOiIwMDAwMDA4MDAxIiwiVHJhbnNhY3Rpb25TdGF0dXNJbmZvcm1hdGlvbiI6IjAwMDAifSwiT3V0Y29tZSI6eyJBcHByb3ZhbENvZGUiOiI2MTE1MDYiLCJBdXRob3Jpc2F0aW9uUmVzcG9uZGVyIjoiMyIsIkF1dGhvcmlzYXRpb25SZXNwb25zZUNvZGUiOiIwMCIsIkRlYml0U3RhdHVzIjoiMDAifSwiUGF5bWVudCI6eyJBdXRob3Jpc2F0aW9uQ2hhbm5lbCI6IjEiLCJDYXJkaG9sZGVyVmVyaWZpY2F0aW9uTWV0aG9kIjoiLyIsIkN1cnJlbmN5IjoiU0VLIiwiRmluYW5jaWFsSW5zdGl0dXRpb24iOiJTV0UiLCJQYXltZW50QW1vdW50IjoiNTYsMDAiLCJSZWNlaXB0TnVtYmVyIjoiODc3ODg4MDE4NSIsIlNpZ25hdHVyZUJsb2NrIjpmYWxzZSwiVG90YWxBbW91bnQiOiI1NiwwMCIsIlRyYW5zYWN0aW9uU291cmNlIjoiSyIsIlRyYW5zYWN0aW9uVHlwZSI6IjAwIn0sIlRpbWVTdGFtcCI6eyJEYXRlT2ZQYXltZW50IjoiMjAyMy0wOC0yNCIsIlRpbWVPZlBheW1lbnQiOiIxNzowNiJ9fSwiT3B0aW9uYWwiOnsiQ2FyZEFjY2VwdG9yIjp7IkNvdW50cnlOYW1lIjoiNzUyIiwiUGhvbmVOdW1iZXIiOiIrNDY4NDA1MTAwMCJ9LCJDYXJkRGV0YWlscyI6eyJDYXJkU2NoZW1lTmFtZSI6eyJBcHBsaWNhdGlvbkxhYmVsIjoiTWFzdGVyY2FyZCJ9fSwiUGF5bWVudCI6eyJSZWZlcmVuY2UiOiIxNzAzMzcyIn0sIlJlY2VpcHRTdHJpbmciOlsiVGVzdCBzaG9wIiwiSMOkbGxlc2vDpXJhbiAyOSIsIjUwNTAgbWVyY2hhbnQtQmFzZTI0LUNpdHkiLCIyMDIzLTA4LTI0IDE3OjA2IiwiIiwiTWFzdGVyY2FyZCIsIkNvbnRhY3RsZXNzIiwiNTE2ODE1KioqKioqOTY1OSIsIiIsIksvMSAzIDAwIFNXRSIsIkFJRDogQTAwMDAwMDAwNDEwMTAiLCJUVlI6IDAwMDAwMDgwMDEiLCJUU0k6IDAwMDAiLCJSUk46IDg3Nzg4ODAxODUiLCJBdXRoIGNvZGU6IDYxMTUwNiIsIkFSQzogMDAiLCIiLCJLw5ZQOiAgICAgICAgIDU2LDAwIFNFSyIsIkdvZGvDpG5kIiwiIiwiIiwiIiwiRsO2cnPDpGxqYXJlbnMga3ZpdHRvIl19fX0=&lt;/OutputText&gt; &lt;/OutputContent&gt; &lt;/PaymentReceipt&gt; &lt;PaymentReceipt DocumentQualifier=\"CustomerReceipt\"&gt; &lt;OutputContent OutputFormat=\"Text\"&gt; &lt;OutputText&gt;eyJDYXJkaG9sZGVyIjp7Ik1hbmRhdG9yeSI6eyJBY3F1aXJlciI6eyJDYXJkQWNjZXB0b3JOdW1iZXIiOiIxMDAyMDAwMSIsIlRlcm1pbmFsSUQiOiI4Nzc4ODgifSwiQ2FyZEFjY2VwdG9yIjp7IkFkZHJlc3MxIjoiSMOkbGxlc2vDpXJhbiAyOSIsIkJhbmtBZ2VudE5hbWUiOiJiYW5reS1iYW5rIiwiTmFtZSI6IlRlc3Qgc2hvcCIsIk9yZ2FuaXNhdGlvbk51bWJlciI6IjU1NjU2NzEtNjE2NSIsIlBvc3RaaXBDb2RlIjoiNTA1MCIsIlRvd25DaXR5IjoibWVyY2hhbnQtQmFzZTI0LUNpdHkifSwiQ2FyZERldGFpbHMiOnsiQXBwbGljYXRpb25JZGVudGlmaWVyIjoiQTAwMDAwMDAwNDEwMTAiLCJDYXJkU2NoZW1lTmFtZSI6eyJBcHBsaWNhdGlvbkxhYmVsIjoiTWFzdGVyY2FyZCJ9LCJQcmltYXJ5QWNjb3VudE51bWJlciI6IioqKioqKioqKioqKjk2NTkiLCJUZXJtaW5hbFZlcmlmaWNhdGlvblJlc3VsdCI6IjAwMDAwMDgwMDEiLCJUcmFuc2FjdGlvblN0YXR1c0luZm9ybWF0aW9uIjoiMDAwMCJ9LCJPdXRjb21lIjp7IkFwcHJvdmFsQ29kZSI6IjYxMTUwNiIsIkF1dGhvcmlzYXRpb25SZXNwb25kZXIiOiIzIiwiQXV0aG9yaXNhdGlvblJlc3BvbnNlQ29kZSI6IjAwIiwiRGViaXRTdGF0dXMiOiIwMCJ9LCJQYXltZW50Ijp7IkF1dGhvcmlzYXRpb25DaGFubmVsIjoiMSIsIkNhcmRob2xkZXJWZXJpZmljYXRpb25NZXRob2QiOiIvIiwiQ3VycmVuY3kiOiJTRUsiLCJGaW5hbmNpYWxJbnN0aXR1dGlvbiI6IlNXRSIsIlBheW1lbnRBbW91bnQiOiI1NiwwMCIsIlJlY2VpcHROdW1iZXIiOiI4Nzc4ODgwMTg1IiwiU2lnbmF0dXJlQmxvY2siOmZhbHNlLCJUb3RhbEFtb3VudCI6IjU2LDAwIiwiVHJhbnNhY3Rpb25Tb3VyY2UiOiJLIiwiVHJhbnNhY3Rpb25UeXBlIjoiMDAifSwiVGltZVN0YW1wIjp7IkRhdGVPZlBheW1lbnQiOiIyMDIzLTA4LTI0IiwiVGltZU9mUGF5bWVudCI6IjE3OjA2In19LCJPcHRpb25hbCI6eyJDYXJkQWNjZXB0b3IiOnsiQ291bnRyeU5hbWUiOiI3NTIiLCJQaG9uZU51bWJlciI6Iis0Njg0MDUxMDAwIn0sIkNhcmREZXRhaWxzIjp7IkNhcmRTY2hlbWVOYW1lIjp7IkFwcGxpY2F0aW9uTGFiZWwiOiJNYXN0ZXJjYXJkIn19LCJQYXltZW50Ijp7IlJlZmVyZW5jZSI6IjE3MDMzNzIifSwiUmVjZWlwdFN0cmluZyI6WyJUZXN0IHNob3AiLCJIw6RsbGVza8OlcmFuIDI5IiwiNTA1MCBtZXJjaGFudC1CYXNlMjQtQ2l0eSIsIjIwMjMtMDgtMjQgMTc6MDYiLCIiLCJNYXN0ZXJjYXJkIiwiQ29udGFjdGxlc3MiLCIqKioqKioqKioqKio5NjU5IiwiIiwiSy8xIDMgMDAgU1dFIiwiQUlEOiBBMDAwMDAwMDA0MTAxMCIsIlRWUjogMDAwMDAwODAwMSIsIlRTSTogMDAwMCIsIlJSTjogODc3ODg4MDE4NSIsIkF1dGggY29kZTogNjExNTA2IiwiQVJDOiAwMCIsIiIsIkvDllA6ICAgICAgICAgNTYsMDAgU0VLIiwiR29ka8OkbmQiLCIiLCIiLCIiLCJLb3J0aW5uZWhhdmFyZW5zIGt2aXR0byJdfX19&lt;/OutputText&gt; &lt;/OutputContent&gt; &lt;/PaymentReceipt&gt; &lt;/PaymentResponse&gt; &lt;/SaleToPOIResponse&gt; PaymentResponse in Detail Name Lev Attributes Description PaymentResponse 1     Response 2 Result Success or Failure.     ErrorCondition Only present if Failure: Common values are Busy- wait and try again, Refusal- Request not accepted. AdditionalResponse 3   Only present if Failure and should be a describing text. SaleData 2     SaleTransactionID 3 TransactionID ID of transaction provided by the sale system and may be seen in PosPay reports. Information will not be past to clearing and is not seen in Merchant Portal.     TimeStamp Timestamp set by sale system for when the transaction is started. Note that the format is local time. POIData 2     POITransactionID 3 TransactionID ID of transaction set by the terminal. This is seen in PosPay reports as well as on Merchant Portal. The complete element is needed if the transaction needs to be reversed.     TimeStamp Timestamp set by terminal when the transaction is started. Note that the format is UTC. PaymentResult 2 PaymentType Values: Normal for purchase and Refund for refund. PaymentInstrumentData 3 PaymentInstrumentType Values: Card for any transaction made by the terminal with a card or any consumer device. Mobile for an alternative payment instrument made via the terminal. CardData 4 PaymentBrand Comma separated string where the first part is card type. 01-payment card. 02-Combined payment and Loyalty, 03-Loyalty, 04-Neither. May be used instead of 03 for controlling the dialog in the terminal. Second part is the product name.     MaskedPAN       EntryMode ICC, Contactless, Magstripe. PaymentToken 5 TokenRequestedType Customer.     TokenValue An irreversible 70 byte hash computed locally in the terminal. A specific card will get the same CNA in all SwedbankPay PAX terminals. AmountsResp 3 Currency Needs to be configured in the terminal. Available DKK, EUR, NOK, SEK.     AuthorizedAmount Total amount for transaction.     CashBackAmount Amount included in AuthorizedAmount.     TipAmount Tip included in AuthorizedAmount. PaymentAquirerData 3 MerchantID Id of merchant set by Swedbank Pay.     AquirerPOIID A terminal id within Swedbank Pay. ApprovalCode 4   Authorization approval code. Only present if Result is Success. PaymentReceipt 2 DocumentQualifier CashierReceipt- Merchant copy. CustomerReceipt- receipt information for customer. Note! This element appears twice. OutputContent 3 OutputFormat Only value Text. OutputText 4   A Base64 encoded JSON structure with information for the receipt. PaymentReceipt in Detail 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 { \"Cardholder\": { \"Mandatory\": { \"Acquirer\": { \"CardAcceptorNumber\": \"10020001\", \"TerminalID\": \"877888\" }, \"CardAcceptor\": { \"Address1\": \"Hälleskåran 29\", \"BankAgentName\": \"banky-bank\", \"Name\": \"Test shop\", \"OrganisationNumber\": \"5565671-6165\", \"PostZipCode\": \"5050\", \"TownCity\": \"merchant-Base24-City\" }, \"CardDetails\": { \"ApplicationIdentifier\": \"A0000000041010\", \"CardSchemeName\": { \"ApplicationLabel\": \"Mastercard\" }, \"PrimaryAccountNumber\": \"************9659\", \"TerminalVerificationResult\": \"0000008001\", \"TransactionStatusInformation\": \"0000\" }, \"Outcome\": { \"ApprovalCode\": \"611506\", \"AuthorisationResponder\": \"3\", \"AuthorisationResponseCode\": \"00\", \"DebitStatus\": \"00\" }, \"Payment\": { \"AuthorisationChannel\": \"1\", \"CardholderVerificationMethod\": \"/\", \"Currency\": \"SEK\", \"FinancialInstitution\": \"SWE\", \"PaymentAmount\": \"56,00\", \"ReceiptNumber\": \"8778880185\", \"SignatureBlock\": false, \"TotalAmount\": \"56,00\", \"TransactionSource\": \"K\", \"TransactionType\": \"00\" }, \"TimeStamp\": { \"DateOfPayment\": \"2023-08-24\", \"TimeOfPayment\": \"17:06\" } }, \"Optional\": { \"CardAcceptor\": { \"CountryName\": \"752\", \"PhoneNumber\": \"+4684051000\" }, \"CardDetails\": { \"CardSchemeName\": { \"ApplicationLabel\": \"Mastercard\" } }, \"Payment\": { \"Reference\": \"1703372\" }, \"ReceiptString\": [ \"Test shop\", \"Hälleskåran 29\", \"5050 merchant-Base24-City\", \"2023-08-24 17:06\", \"\", \"Mastercard\", \"Contactless\", \"************9659\", \"\", \"K/1 3 00 SWE\", \"AID: A0000000041010\", \"TVR: 0000008001\", \"TSI: 0000\", \"RRN: 8778880185\", \"Auth code: 611506\", \"ARC: 00\", \"\", \"KÖP: 56,00 SEK\", \"Godkänd\", \"\", \"\", \"\", \"Kortinnehavarens kvitto\" ] } } }",
    "tags": "",
    "url": "/pax-terminal/resources/normal-purchase-response/"
  },{
    "title": "Observing The Payment Process",
    "text": "Observing The Payment Process Your application can observe the state of the payment and react accordingly. At a minimum, your application must remove the SDK UI from view when the payment is finished. Android On Android, observe the state or richState of PaymentViewModel. The PaymentViewModel of a PaymentFragment is stored in its parent Activity. If you really need to have multiple PaymentFragments in a single Activity, you need to assign each a different key for their PaymentViewModels (use PaymentFragment.ArgumentsBuilder.viewModelProviderKey). Android 1 2 3 4 5 6 val paymentViewModel = ViewModelProvider(activity)[PaymentViewModel::class.java] // or use the activity.paymentViewModel convenience property paymentViewModel.richState.observe(owner) { richState -&gt; // handle new state here } The process state is available at richState.state, which has the following cases: PaymentViewModel.State.IDLE: Not active PaymentViewModel.State.IN_PROGRESS: Active; waiting for either network response or user interaction PaymentViewModel.State.UPDATING_PAYMENT_ORDER: Updating the payment order (because you called updatePaymentOrder) PaymentViewModel.State.COMPLETE: Complete; you should hide the PaymentFragment and check the payment status from your application servers PaymentViewModel.State.cancelled: cancelled by the user; you should hide the PaymentFragment. PaymentViewModel.State.RETRYABLE_ERROR: Payment could not proceed, but the error is not fatal. See below for options here. PaymentViewModel.State.FAILURE: Payment has failed. You should hide the PaymentFragment. In the retryable error and failure states, the error that caused the failure is available at richState.exception. The exception is of any type thrown by your Configuration. If the failure state was instead reached because Swedbank Pay reported a Terminal Failure, that will be available at richState.terminalFailure. When the PaymentFragment is showing the payment menu of the payment order, the corresponding ViewPaymentOrderInfo is available at richState.viewPaymentOrderInfo. This is the value that your Configuration returned to the SDK; if you are using Instrument Mode with the Merchant Backend Configuration, you may be interested in the instrument and availableInstruments fields to determine whether to show your instrument selection UI. Retryable Errors In the retryable error state, the PaymentFragment will, by default, show an error message with instructions to retry. You may disable this by setting the desired default UI flags (PaymentFragment.ArgumentsBuilder.setEnabledDefaultUI). If you do wish to provide your own UI for this state, you can call paymentViewModel.retryPreviousAction() to insruct the PaymentFragment to retry. A message describing the problem is available at richState.retryableErrorMessage. Overriding Terms Of Service Link By default, when the user taps on the Terms of Service link in the Payment Menu, a new Activity will be started, which will display the linked web page. However, you may wish to provide a native Terms of Service UI instead. To do this, set a listener for the event by calling paymentViewModel.setOnTermsOfServiceClickListener. Android 1 2 3 4 5 paymentViewModel.setOnTermsOfServiceClickListener(lifecycleOwner) { paymentFragment, url -&gt; // show ToS UI // return true to disable the default behavior // (alternatively, return false to continue with the default behavior) } iOS On iOS, set a delegate to the SwedbankPaySDKController. The delegate methods will be called on state changes. iOS 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 swedbankPaySDKController.delegate = self // ... extension MyClass : SwedbankPaySDKDelegate { func paymentOrderDidShow(info: SwedbankPaySDK.ViewPaymentOrderInfo) { // A payment order is now shown; // info is the ViewPaymentOrderInfo value from your Configuration } func paymentOrderDidHide() { // No payment order is now shown } func updatePaymentOrderFailed( updateInfo: Any, error: Error ) { // An update failed; error is the error from your Configuration } func paymentComplete() { // Payment is complete; you should hide the SwedbankPaySDKController } func paymentcancelled() { // Payment cancelled by user; you should hide the SwedbankPaySDKController } func paymentFailed(error: Error) { // Payment failed. The error is either from your Configuration, // or a SwedbankPaySDKController.WebContentError } func overrideTermsOfServiceTapped(url: URL) -&gt; Bool { // Show custom Terms of Service UI, if needed. // Return true to disable the default behavior, // false to allow SwedbankPaySDKController to show // the default ToS UI. } } Any errors are ones thrown by your Configuration, or, in the case of paymentFailed, SwedbankPaySDKController.WebContentError. SwedbankPaySDKController.WebContentError has two cases: .ScriptLoadingFailure(scriptUrl: URL?): The script failed to load. No error message is available; this is a limitation of WKWebView .ScriptError(SwedbankPaySDK.TerminalFailure?): The script made an onError callback. The payload is the Terminal Failure reported by Swedbank Pay. When using the Merchant Backend Configuration, other errors will be of the type SwedbankPaySDK.MerchantBackendError.",
    "tags": "",
    "url": "/checkout-v3/modules-sdks/mobile-sdk/features/technical-reference/observing-the-payment-process/"
  },{
    "title": "One-Click Payments",
    "text": "One-Click Payments One-Click Payments utilize a previously generated payment token to prefill payment details for credit card payments pages - which means that the payer don’t need to enter these details for every purchase. Introduction For card and Trustly payments, the payment flow and implementation varies from your default only being the use of a paymentToken. The details in this section describe explicitly the parameters that must be set to enable one-click purchases. API Requests To Generate The Payment Token When making the initial purchase request, you need to generate a paymentToken. You can do this by setting the generatePaymentToken field in the request’s payment object to true (see example below) when doing a card purchase, or setting the initial operation to Verify. generatePaymentToken field Copy json to clipboard 1 2 3 4 5 6 { \"generatePaymentToken\": true, \"payer\": { \"payerReference\": \"AB1234\", } } Show fields Hide fields Required Field Type Description   generatePaymentToken bool Determines if a payment token should be generated. Default value is false.   payer object The payer object   payerReference string A reference used to recognize the payer when no SSN is stored. Finding The paymentToken Value When the initial purchase is successful, a paymentToken is linked to the payment. You can return the value by performing a GET request towards the payment resource with the payerReference included. Get Request Payment Resource 1 2 3 4 GET /psp/paymentorders/payerownedtokens/5a17c24e-d459-4567-bbad-aa0f17a76119 HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.x/2.0 // Version optional for 3.0 and 2.0 You can also perform a GET request towards the id of a Payment Order and find the paymentToken in its linked paid resource. GET Request Paid Resource 1 2 3 4 GET /psp/paymentorders/7e6cdfc3-1276-44e9-9992-7cf4419750e1/paid HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.x/2.0 // Version optional for 3.0 and 2.0 You need to store the paymentToken from the response in your system and keep track of the corresponding payerReference in your system. Returning Purchases When a known payer returns, you can display their details by initiating the transaction with the parameter paymentToken and its associated value. Please note that the value in payerReference needs to be identical to the value given when the token was generated. We highly recommend that you use a value that represents the customer in your system, so it’s easier to keep track. An example could be an alpha-numerical value like “ABC123”. For card payments, using payerReference and generatePaymentToken: true will display all (max 3) cards connected to the payerReference. If you wish to display one specific card only, you can remove generatePaymentToken and add the field paymentToken in it’s place. This must be the paymentToken generated in the initial purchase. One-Click Request Displaying All Cards One-Click Request Displaying All Cards Copy json to clipboard 1 2 3 4 POST /psp/paymentorders HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.x/2.0 // Version optional for 3.0 and 2.0 1 2 3 4 5 6 7 8 9 { \"paymentorder\": { \"operation\": \"Purchase\", \"generatepaymentToken\": \"true\" }, \"payer\": { \"payerReference\": \"AB1234\", } } One-Click Request Displaying A Specific Card One-Click Request Displaying A Specific Card Copy json to clipboard 1 2 3 4 POST /psp/paymentorders HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.x/2.0 // Version optional for 3.0 and 2.0 1 2 3 4 5 6 7 8 9 { \"paymentorder\": { \"operation\": \"Purchase\", \"paymentToken\": \"5a17c24e-d459-4567-bbad-aa0f17a76119\" }, \"payer\": { \"payerReference\": \"AB1234\", } } Required Field Type Description check paymentOrder object The paymentorder object. check operation string Determines the initial operation, defining the type of payment order created. check paymentToken string The paymentToken value received in GET response towards the Payment Resource is the same paymentToken generated in the initial purchase request. The token allow you to use already stored card data to initiate one-click payments.   generatePaymentToken bool Determines if a payment token should be generated. Default value is false.   payer object The payer object containing information about the payer relevant for the payment order.   payerReference string A reference used in the Enterprise and Payments Only implementations to recognize the payer when no SSN is stored. Disable Store Details and Toggle Consent Checkbox This is a feature intended for instrument mode and or custom menus. If you have built your own interface to display previously stored details and generate transactions using them (“One-Click Request Displaying A Specific Card”), you will also have the need to include an option for them to store new details. This can be performed using either a Purchase or Verify operation. For Purchase operations aiming to store new details simultaneously, you will need to utilize the disableStoredPaymentDetails parameter. This is because the payer has already made the decision not to use any stored details in your interface. By including this parameter, you effectively eliminate the need for confirmation in our UI, due to how the combination of generatePaymentToken and payerReference works in our API. By employing this parameter, you as the Merchant will assume the responsibility of colllecting the payer’s consent for purpose of storing their details. If you do not want this responsibility and would like for us to help you out, you can combine disableStoredPaymentDetails along with enablePaymentDetailsConsentCheckbox and flag them both as true. That will enable our handler for collecting consent from the payer for you inside our Swedbank Pay UI. When the choice has been made and transaction is completed, we will relay that information to you. We will do this by setting the flag paymentTokenGenerated in the subsequent GET call towards the PaymentOrder to either true or false. Verify operations do not require the use of these additional parameters, as they do not display any previously stored details based on your supplied reference, thereby avoiding redundancy. Including them in a Verify will result in a validation error. generatePaymentToken field Copy json to clipboard 1 2 3 4 POST /psp/paymentorders HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.x/2.0 // Version optional for 3.0 and 2.0 1 2 3 4 5 6 { \"paymentorder\": { \"enablePaymentDetailsConsentCheckbox\": true, \"disableStoredPaymentDetails\": true, } } Show fields Hide fields Required Field Type Description check paymentOrder object The payment order object.   EnablePaymentDetailsConsentCheckbox bool Set to true or false. Used to determine if the checkbox used to save payment details is shown or not. Will only work if the parameter disableStoredPaymentDetails is set to true.   disableStoredPaymentDetails bool Set to true or false. Must be set to true for enablePaymentDetailsConsentCheckbox to work. Delete Payment Token If you need to delete a paymentToken, you have two options. The first is by payerReference, which deletes all payment, recurrence and/or unscheduled tokens associated with the payer. The second is by paymentToken, which only deletes a specific token. warning Please note that this call does not erase the card number stored at Swedbank Pay. A card number is automatically deleted six months after a successful Delete payment token request. If you want card information removed at an earlier date, you need to contact ehandelsetup@swedbankpay.dk, verkkokauppa.setup@swedbankpay.fi, ehandelsetup@swedbankpay.no or ehandelsetup@swedbankpay.se; and supply them with the relevant transaction reference or payment token. If you want to delete tokens by payerReference, the request and response should look like this: Delete Payment Token Request Request Copy json to clipboard 1 2 3 4 PATCH /psp/paymentorders/payerownedtokens/&lt;payerReference&gt; HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.x/2.0 // Version optional for 3.0 and 2.0 1 2 3 4 { \"state\": \"Deleted\", \"comment\": \"Comment stating why this is being deleted\" } Delete Payment Token Response Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x/2.0 api-supported-versions: 3.x/2.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 { \"payerOwnedTokens\": { \"id\": \"/psp/paymentorders/payerownedtokens/{payerReference}\", \"payerReference\": \"{payerReference}\", \"tokens\": [ { \"tokenType\": \"Payment\", \"token\": \"{paymentToken}\", \"instrument\": \"CreditCard\", \"instrumentDisplayName\": \"492500******0004\", \"correlationId\": \"e2f06785-805d-4605-bf40-426a725d313d\", \"instrumentParameters\": { \"expiryDate\": \"12/2020\", \"cardBrand\": \"Visa\" } } ] } } Deleting Single Tokens For single token deletions, the request and response should look like this. In this example, the token is connected to a card. For Trustly transactions, it will be a masked account number. Delete Single Token Request For Checkout Integrations Request Copy json to clipboard 1 2 3 4 PATCH /psp/paymentorders/paymenttokens/5a17c24e-d459-4567-bbad-aa0f17a76119 HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.x/2.0 // Version optional for 3.0 and 2.0 1 2 3 4 { \"state\": \"Deleted\", \"comment\": \"Comment stating why this is being deleted\" } Delete Single Token Response For Checkout Integrations Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.1 api-supported-versions: 3.x/2.0 1 2 3 4 5 6 7 8 9 10 { \"paymentToken\": \"\", \"instrument\": \"CreditCard\", \"instrumentDisplayName\": \"492500******0004\", \"correlationId\": \"e2f06785-805d-4605-bf40-426a725d313d\", \"instrumentParameters\": { \"expiryDate\": \"12/2022\", \"cardBrand\": \"Visa\" } }",
    "tags": "",
    "url": "/checkout-v3/features/optional/one-click-payments/"
  },{
    "title": "Use Case One Click",
    "text": "Supported Payment Methods Looking to get started with One-Click or “Payer Aware Menu” to reduce friction? These are the supported payment methods: Cards: Masked PAN, Expiration Date and CVC Swish: MSIDSN – Only for eCom-flow Vipps: MSIDSN Invoice: Email and MSIDSN Trustly: Preferred bank account Introduction There are two ways to get started with contributing to decreased friction for your customers during the checkout experience: “Payer Aware Menu” and “One Click.” They are not mutually exclusive and can be used in conjunction to fully maximize capabilities. However, our recommendation is to implement “Payer Aware Menu” as the default for a smoother handling. With “Payer Aware Menu”, we will assist you with sorting and displaying the information to your customer. We can do this by creating a profile under the designated reference you have given us inside the payerReference field. For “One-Click”, you will sort the information on your end and present their details inside our interface. It is most suitable for scenarios where you have the need to force a set of details to be used, or when you have built your own menu displaying payment methods. Payer Aware Menu To enable storing details for future purchases using the Payer Aware Menu, follow these steps: Parameter generatePaymentToken: Set to true inside the payment order request. This value remains true by default for all transactions unless you wish to force “Guest mode”; in that case, send false. Payer Object: Include the parameter payerReference. Assign a unique value that can be sent with every future transaction. Failure to send in the same reference may result in wrong details being displayed or defaulting to creating a new profile. Optional Enhancements: Expand the Payer object with additional information such as first and last name, phone number and email address. This data will pre-populate relevant fields, providing a seamless experience for customers. For more detailed information and examples, refer to the Payer Aware Payment Menu documentation. One-Click To get started with One-Click payments, follow these steps: Parameter generatePaymentToken: Set to true inside the payment order request for initial storing of details. For Future Transactions: Modify the generatePaymentToken parameter into paymentToken instead and replace the value true with the GUID (tokenized reference of the card) value. Optional Enhancements: Just like with “Payer Aware Menu”, you can enhance the payment experience by submitting relevant fields in the Payer object to pre-populate relevant fields. For more detailed information and examples, refer to the One Click Payments documentation. Example Request Structures The examples are abbreviated where needed. Payer Aware Menu and One-Click (for generating details) Payer Aware Menu and One-Click (for generating details) Copy json to clipboard 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 { \"paymentorder\": { \"operation\": \"Purchase\", // ... other details \"generatePaymentToken\": \"true\", \"urls\": { // ... other URLs }, \"payeeInfo\": { // ... payee information }, \"payer\": { \"firstName\": \"Leia\", \"lastName\": \"Ahlström\", \"email\": \"leia@payex.com\", \"msisdn\": \"+46787654321\", \"payerReference\": \"AB1234\" } } } Here is an example image of what the menu looks like with two previously stored cards. «Insert Image PAM1» One-Click for Future Transactions One-Click for Future Transactions Copy json to clipboard 1 2 3 4 5 6 7 8 9 10 11 12 13 14 { \"paymentorder\": { \"operation\": \"Purchase\", // ... other details \"paymentToken\": \"b4739476-343e-4d2c-2e14-08dbec1e555a\", \"payer\": { \"firstName\": \"Leia\", \"lastName\": \"Ahlström\", \"email\": \"leia@payex.com\", \"msisdn\": \"+46787654321\", \"payerReference\": \"AB1234\" } } } Here is an example image of what it would look like when forcibly loading a specific set of details with “OneClick”. Insert «OC1» By following these steps and structures, you can seamlessly integrate our features “Payer Aware Menu” and “One-Click” to reduce friction and enhance the overall payment experience for your customers. Removal of Payment Method Details When certain conditions arise, such as encountering specific error codes or receiving requests from the payer to remove their details, it becomes necessary to initiate the deletion of associated tokens. Here are two methods: Deletion of all Tokens: Send a PATCH call to the base URL with the endpoint /psp/paymentorders/payerOwnedTokens/&lt;payerReference&gt;. This operation is only available for “Payer Aware Menu”. Deletion of a singular Token: Use the URL /psp/paymentorders/paymenttokens/&lt;TokenValue&gt;. Both scenarios generate the same response: Token Deletion Response Copy json to clipboard 1 2 3 4 { \"state\": \"Deleted\", \"comment\": \"Comment on why the deletion is happening\" } Common causes that triggers the need for deletion Your customer requests their information to be removed. Your agreement with your customer has been terminated or expired. Error codes pertaining to permanent causes. Example of these can be Card Expired (54) or Card stolen (43)",
    "tags": "",
    "url": "/checkout-v3/get-started/one-click/"
  },{
    "title": "Open",
    "text": "Open The Open function have two variants and may be called asynchonously or synchronously. Both variants result in an OpenResult but for the synchronous it is returned in the SyncRequestResult callback. The POIID in the login is essential and will decide whether the terminal needs the parameters or software. A POIID was supplied in the call to Start in a SaleApplInfo object, but may be changed when calling Open. Before call to Open make sure to provide the ip address and port of the terminal. Simple asynchronous Open call 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 class PaxImplementation : ISwpTrmCallbackInterface { public ISwpTrmIf_1 PAX = {get; internal set; } = null; public string Poiid = string.Empty; public string TerminalAddressAndPort {get; set; } // &lt;ip&gt;:&lt;port&gt; . . . public async Task OpenTerminalForUse() { if (TerminalAddressAndPort != string.Empty &amp;&amp; PAX != null) { PAX.TerminalAddress = TerminalAddressAndPort; OpenResult result = await PAX.OpenAsync(); if (result.Result == ResponseResult.Success) { // A login session with the terminal has now been established // and the terminal may be used. Serialnumber prefix may be // used to identify what type of terminal 171=A30/229=A35/185=A920 // } else { // Login failed. } } } Same simple functionality using synchronous Open call 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 class PaxImplementation : ISwpTrmCallbackInterface { public ISwpTrmIf_1 PAX = {get; internal set; } = null; public string TerminalAddressAndPort {get; set; } // &lt;ip&gt;:&lt;port&gt; . . . public void OpenTerminalForUse() { if (TerminalAddressAndPort != string.Empty &amp;&amp; PAX != null) { PAX.TerminalAddress = TerminalAddressAndPort; PAX.Open(); } } // Results for the synchronous calls are obtained here. public void SyncRequestResult(object result) { switch (Enum.Parse(typeof(RequestResultTypes), result.GetType().Name)) { case RequestResultTypes.OpenResult: OpenResult openresult = result as OpenResult; if (openresult.Success) { // Now a login session with the terminal is established and the terminal may be used. // Serialnumber prefix may be used to identify what type of terminal 171=A30/229=A35/185=A920 } else { // Login failed. } break; } } Next Back",
    "tags": "",
    "url": "/pax-terminal/NET/tutorial/quick-guide/open/"
  },{
    "title": "Open",
    "text": "Method Signatures void Open(string POIID=null) void OpenEx(string POIID=null, string OperatorID=null, string ShiftNumber=null) async Task&lt;OpenResult&gt; OpenAsync(string POIID=null) async Task&lt;OpenResult&gt; OpenExAsync(string POIID=null, string OperatorID=null, string ShiftNumber=null) Description The Open/OpenAsync call is the first method call that actually communicates with the terminal. It uses the information passed in the SaleApplInfo to the Start call. This starts a login session with the terminal. warning Warning: Even if the Open is successful, some action towards the host will occur and possibly cause the next method call to fail. info Reset terminal state: A LoginRequest that happens when calling any of the open functions, should reset states in the terminal. A login session lasts until next open, close or reboot. info POIID cannot change during login session: To change POIID for a terminal a Logout or terminal reboot needs to be performed Returns An OpenResult object. 1 2 3 4 5 6 7 8 9 10 public class OpenResult { public OpenResult(); public ResponseResult Result { get; set; } public string Text { get; set; } public string SoftwareVersion { get; set; } public string SerialNumber { get; set; } public TerminalEnvironment Environment { get; set; } } 1 public enum ResponseResult { Success, Failure };",
    "tags": "",
    "url": "/pax-terminal/NET/SwpTrmLib/Methods/essential/openasync/"
  },{
    "title": "Operations",
    "text": "Operations When a payment order resource is created and during its lifetime, it will have a set of operations that can be performed on it. The state of the payment order resource, what the access token is authorized to do, the chosen payment method and its transactional states, etc. determine the available operations before the initial purchase. A list of possible operations and their explanation is given below. Operations Copy json to clipboard 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 { \"paymentorder\": { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce\", }, \"operations\": [ { \"method\": \"PATCH\", \"href\": \"https://api.externalintegration.payex.com/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce\", \"rel\": \"update-order\", \"contentType\": \"application/json\" }, { \"method\": \"PATCH\", \"href\": \"https://api.externalintegration.payex.com/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce\", \"rel\": \"abort\", \"contentType\": \"application/json\" }, { \"method\": \"PATCH\", \"href\": \"https://api.payex.com/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce\", \"rel\": \"abort-paymentattempt\", \"contentType\": \"application/json\" }, { \"method\": \"POST\", \"href\": \"https://api.externalintegration.payex.com/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/cancellations\", \"rel\": \"cancel\", \"contentType\": \"application/json\" }, { \"method\": \"POST\", \"href\": \"https://api.externalintegration.payex.com/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/captures\", \"rel\": \"capture\", \"contentType\": \"application/json\" }, { \"method\": \"POST\", \"href\": \"https://api.externalintegration.payex.com/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/reversals\", \"rel\": \"reversal\", \"contentType\": \"application/json\" }, { \"method\": \"GET\", \"href\": \"https://ecom.externalintegration.payex.com/checkout/073115b6226e834dd9b1665771bae76223b4488429729155587de689555c5539?_tc_tid=30f2168171e142d38bcd4af2c3721959\", \"rel\": \"redirect-checkout\", \"contentType\": \"text/html\" }, { \"method\": \"GET\", \"href\": \"https://ecom.externalintegration.payex.com/checkout/core/js/px.checkout.client.js?token=073115b6226e834dd9b1665771bae76223b4488429729155587de689555c5539&amp;culture=sv-SE&amp;_tc_tid=30f2168171e142d38bcd4af2c3721959\", \"rel\": \"view-checkout\", \"contentType\": \"application/javascript\" }, { \"method\": \"GET\", \"href\": \"https://api.externalintegration.payex.com/psp/paymentsessions/b0bb522437a5c9fa3783f7ba30680bef0c32b3de0fafe568bec6dbadfa7da8cf?_tc_tid=d49b520fa0314bcca78c75806dee8a17\", \"rel\": \"view-paymentsession\", \"contentType\": \"application/json\" } ] } Field Type Description method string GET, PATCH, POST, etc. The HTTP method to use when performing the operation. href string The target URL to perform the operation against. rel string The name of the relation the operation has to the current resource. contentType string The HTTP content type of the resource referenced in the href field. The operations should be performed as described in each response and not as described here in the documentation. Always use the href and method as specified in the response by finding the appropriate operation based on its rel value. The only thing that should be hard coded in the client is the value of the rel and the request that will be sent in the HTTP body of the request for the given operation. Operation Description update-order Updates the order with a change in orderItems, amount and/or vatAmount. abort Aborts the payment order before any financial transactions are performed. abort-paymentattempt Aborts the payment attempt, but not the order as a whole, before any financial transactions are performed. cancel Used to cancel authorized and not yet captured transactions. If a cancellation is performed after doing a part-capture, it will only affect the not yet captured authorization amount. capture The second part of a two-phase transaction where the authorized amount is sent from the payer to the payee. It is possible to do a part-capture on a subset of the authorized amount. Several captures on the same payment are possible, up to the total authorization amount. reversal Used to reverse a payment. It is only possible to reverse a payment that has been captured and not yet reversed. redirect-checkout Contains the URL used to redirect the payer to the Swedbank Pay Payments containing the Payment Menu. view-checkout Contains the JavaScript href that is used to embed the Payment Menu UI directly on the webshop/merchant site. view-paymentsession Contains the href used by merchants to launch our new SDK.",
    "tags": "",
    "url": "/checkout-v3/features/technical-reference/operations/"
  },{
    "title": "Order Items",
    "text": "Order Items The orderItems field of the paymentOrder is an array containing information about the items being purchased. It is mandatory for v3.0 and older implementations, but voluntary for payment order v3.1, so feel free to remove it from your requests if you want. If you offer invoice as a payment option, the field is still recommended as it are used for the product details on the customer’s invoice. If they are not present, orderItems will be generated by using the description and amount fields from the paymentOrder. Request Excerpt Copy json to clipboard 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 \"orderItems\": [ { \"reference\": \"P1\", \"name\": \"Product1\", \"type\": \"PRODUCT\", \"class\": \"ProductGroup1\", \"itemUrl\": \"https://example.com/products/123\", \"imageUrl\": \"https://example.com/product123.jpg\", \"description\": \"Product 1 description\", \"discountDescription\": \"Volume discount\", \"quantity\": 5, \"quantityUnit\": \"pcs\", \"unitPrice\": 300, \"discountPrice\": 0, \"vatPercent\": 2500, \"amount\": 1500, \"vatAmount\": 375 } ] Show fields Hide fields Required Field Type Description check orderItems array The array of items being purchased with the order. Note that authorization orderItems will not be printed on invoices, so lines meant for print must be added in the Capture request. The authorization orderItems will, however, be used in the Merchant Portal when captures or reversals are performed, and might be shown other places later. It is required to use this field to be able to send Capture orderItems. Capture requests should only contain items meant to be captured from the order. check reference string A reference that identifies the order item. check name string The name of the order item. check type enum PRODUCT, SERVICE, SHIPPING_FEE, DISCOUNT, VALUE_CODE, or OTHER. The type of the order item. check class string The classification of the order item. Can be used for assigning the order item to a specific product category, such as MobilePhone. Note that class cannot contain spaces and must follow the regex pattern [\\w-]*. Swedbank Pay may use this field for statistics.   itemUrl string The URL to a page that can display the purchased item, such as a product page   imageUrl string The URL to an image of the order item.   description string The human readable description of the order item.   discountDescription string The human readable description of the possible discount. check quantity number The 4 decimal precision quantity of order items being purchased. check quantityUnit string The unit of the quantity, such as pcs, grams, or similar. check unitPrice integer The price per unit of order item, including VAT.   discountPrice integer If the order item is purchased at a discounted price. This field should contain that price, including VAT. check vatPercent integer The percent value of the VAT multiplied by 100, so 25% becomes 2500. check amount integer The transaction amount (including VAT, if any) entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. check vatAmount integer The payment’s VAT (Value Added Tax) amount, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The vatAmount entered will not affect the amount shown on the payment page, which only shows the total amount. This field is used to specify how much of the total amount the VAT will be. Set to 0 (zero) if there is no VAT amount charged.",
    "tags": "",
    "url": "/checkout-v3/features/optional/order-items/"
  },{
    "title": "",
    "text": "OutputText class used when calling RequestToPrint to use the A920pro printer. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 namespace SwpTrmLib.Nexo { public class OutputText { public enum CharacterHeights { Normal, SingleHeight, DoubleHeight, HalfHeight }; public enum CharacterWidths { Normal, SingleWidth, DoubleWidth }; public enum Alignments { Left, Right, Centred, Justified }; public enum Colors { Black, White}; public CharacterHeights Height { get; set; } = CharacterHeights.Normal; public CharacterWidths Width { get; set; } = CharacterWidths.Normal; public Alignments Alignment { get; set; } = Alignments.Left; public Colors Color { get; set; } = Colors.Black; public int StartRow { get; set; } = 0; public string Content { get; set; } = string.Empty; public XElement XML(); } }",
    "tags": "",
    "url": "/pax-terminal/NET/includes/outputtext/"
  },{
    "title": "PayeeInfo",
    "text": "PayeeInfo The payeeinfo resource contains information about the payee (i.e. a merchant, a corporation etc) related to a specific payment. GET Request Request 1 2 3 4 GET /psp/paymentorders/7e6cdfc3-1276-44e9-9992-7cf4419750e1/payeeInfo HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json GET Response Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x api-supported-versions: 3.x/2.0 1 2 3 4 5 6 7 8 9 10 11 { \"paymentorder\": \"/psp/paymentorders/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"payeeInfo\": { \"id\": \"/psp/paymentorders/7e6cdfc3-1276-44e9-9992-7cf4419750e1/payeeInfo\", \"payeeId\": \"5cabf558-5283-482f-b252-4d58e06f6f3b\", \"payeeReference\": \"EN1234\", \"payeeName\": \"TestMerchant1\", \"productCategory\": \"EF1234\", \"orderReference\": \"or-123456\" } } Field Type Description payment string The relative URL and unique identifier of the payment resource this payeeInfo belongs to. Please read about URL Usage to understand how this and other URLs should be used in your solution. id string The relative URL and unique identifier of the payeeInfo resource this payeeInfo belongs to. Please read about URL Usage to understand how this and other URLs should be used in your solution. payeeId string This is the unique id that identifies this payee (like merchant) set by Swedbank Pay payeeReference string A unique reference from the merchant system. Set per operation to ensure an exactly-once delivery of a transactional operation. Length and content validation depends on whether the transaction.number or the payeeReference is sent to the acquirer. If Swedbank Pay handles the settlement, the transaction.number is sent and the payeeReference must be in the format of A-Za-z0-9 and string(30). If you handle the settlement, Swedbank Pay will send the payeeReference and it will be limited to the format of string(12). All characters must be digits. payeeName string The payee name (like merchant name) that will be displayed when redirected to Swedbank Pay. productCategory string(50) A product category or number sent in from the payee/merchant. This is not validated by Swedbank Pay, but will be passed through the payment process and may be used in the settlement process. You therefore need to ensure that the value given here is valid in the settlement. orderReference string(50) The order reference should reflect the order reference found in the merchant’s systems. Payee Reference The payeeReference given when creating transactions and payments has some specific processing rules depending on specifications in the contract. It must be unique for every operation, used to ensure exactly-once delivery of a transactional operation from the merchant system. Its length and content validation is dependent on whether the transaction.number or the payeeReference is sent to the acquirer. If you select Option A in the settlement process (Swedbank Pay will handle the settlement), Swedbank Pay will send the transaction.number to the acquirer and the payeeReference must be in the format of characters A-Za-z0-9 and string(30). If you select Option B in the settlement process (you will handle the settlement yourself), Swedbank Pay will send the payeeReference to the acquirer and it will be limited to the format of string(12) and all characters must be digits.",
    "tags": "",
    "url": "/checkout-v3/features/technical-reference/payee-info/"
  },{
    "title": "PayeeReference",
    "text": "Payee Reference The payeeReference given when creating transactions and payments has some specific processing rules depending on specifications in the contract. It must be unique for every operation, used to ensure exactly-once delivery of a transactional operation from the merchant system. Its length and content validation is dependent on whether the transaction.number or the payeeReference is sent to the acquirer. If you select Option A in the settlement process (Swedbank Pay will handle the settlement), Swedbank Pay will send the transaction.number to the acquirer and the payeeReference must be in the format of characters A-Za-z0-9 and string(30). If you select Option B in the settlement process (you will handle the settlement yourself), Swedbank Pay will send the payeeReference to the acquirer and it will be limited to the format of string(12) and all characters must be digits.",
    "tags": "",
    "url": "/checkout-v3/features/technical-reference/payee-reference/"
  },{
    "title": "Payer Aware Payment Menu",
    "text": "Payer Aware Payment Menu To give your payers the best experience possible, you should implement the Payer Aware Payment Menu by identifying each payer with a unique identifier. It is important that you enforce a good SCA (Strong Consumer Authentication) strategy when authenticating the payer. The payer identifier must then be included as a payerReference in the paymentOrder request to Swedbank Pay. This will enable Swedbank Pay to render a unique payment menu experience for each payer. It will also increase the chance for a frictionless payment. By identifying your payers, their payment information can be stored for future purchases by setting the generatePaymentToken value to true. The payer is, by default, asked if they want to store their payment details, so even with generatePaymentToken set to true, it is still up to the payer if they want the details stored or not. info Please note that not all payment methods provided by Swedbank Pay support Payer Awareness today. It is not available for Invoice, Installment Account or Monthly Payments. Trustly Express If you are offering Trustly Express through our payment aware payment menu, we have two recommendations to make the experience as smooth as possible. Include the first and last name of the payer in the payer object. Add the payer’s SSN. If you provide it in the payerReference field, the SSN has to be hashed. If you want to read about Trustly Express and the banks who offer it, you can find more information here. BYO Payment Menu The payment UI is versatile and can be configured in such a way that it functions like a single payment method. In such configuration, it is easy to Bring Your Own Payment Menu, i.e. building a customized payment menu in your own user interface. Add Stored Payment Method Details When building a custom payment menu, features like adding new stored payment method details (i.e. “Add new card”) is something that needs to be provided in your UI. This can be achieved by forcing the creation of a paymentToken by setting disableStoredPaymentDetails to true in a Purchase payment (if you want to withdraw money and create the token in the same operation), or by performing a verification (without withdrawing any money). Setting disableStoredPaymentDetails to true will turn off all stored payment details for the current purchase. The payer will also not be asked if they want to store the payment details that will be part of the purchase. When you use this feature, it is important that you have asked the payer in advance if it is ok to store their payment details for later use. Most often you will use the disableStoredPaymentDetails feature in combination with the Instrument Mode capability. If you build your own menu and want to show stored payment details, you will need to set the disableStoredPaymentDetails to true. It is important that you then store the paymentToken in your system or call Swedbank Pay with the payerReference to get all active payment tokens registered on that payer when building your menu. GDPR Remember that you have the responsibility of enforcing GDPR requirements and letting the payer remove active payment tokens when they want. It is up to you how to implement this functionality on your side, but Swedbank Pay has the API you need to make it easy to clean up old data. See more below the main paymentOrder request example, or follow the hyperlink above. A Payer Aware Payment Menu request can look like this. Payer Aware Payment Menu Request Request Copy json to clipboard 1 2 3 4 POST /psp/paymentorders HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; CContent-Type: application/json;version=3.x/2.0 // Version optional for 3.0 and 2.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 { \"paymentorder\": { \"operation\": \"Purchase\", \"currency\": \"SEK\", \"amount\": 1500, \"vatAmount\": 375, \"description\": \"Test Purchase\", \"userAgent\": \"Mozilla/5.0...\", \"generatePaymentToken\": true, \"language\": \"sv-SE\", \"disableStoredPaymentDetails\": false, \"urls\": { \"hostUrls\": [ \"https://example.com\", \"https://example.net\" ], \"completeUrl\": \"https://example.com/payment-completed\", \"cancelUrl\": \"https://example.com/payment-cancelled\", \"callbackUrl\": \"https://api.example.com/payment-callback\", \"termsOfServiceUrl\": \"https://example.com/termsandconditions.pdf\" }, \"payeeInfo\": { \"payeeId\": \"5cabf558-5283-482f-b252-4d58e06f6f3b\", \"payeeReference\": \"AB832\", \"payeeName\": \"Merchant1\", \"productCategory\": \"A123\", \"orderReference\": \"or-123456\", \"subsite\": \"MySubsite\", \"siteId\": \"MySiteId\" }, \"payer\": { \"digitalProducts\": false, \"firstName\": \"Leia\", \"lastName\": \"Ahlström\", \"email\": \"leia@payex.com\", \"msisdn\": \"+46787654321\", \"payerReference\": \"AB1234\", \"shippingAddress\": { \"firstName\": \"firstname/companyname\", \"lastName\": \"lastname\", \"email\": \"karl.anderssson@mail.se\", \"msisdn\": \"+46759123456\", \"streetAddress\": \"string\", \"coAddress\": \"string\", \"city\": \"Solna\", \"zipCode\": \"17674\", \"countryCode\": \"SE\" }, \"billingAddress\": { \"firstName\": \"firstname/companyname\", \"lastName\": \"lastname\", \"email\": \"karl.anderssson@mail.se\", \"msisdn\": \"+46759123456\", \"streetAddress\": \"string\", \"coAddress\": \"string\", \"city\": \"Solna\", \"zipCode\": \"17674\", \"countryCode\": \"SE\" }, \"accountInfo\": { \"accountAgeIndicator\": \"04\", \"accountChangeIndicator\": \"04\", \"accountPwdChangeIndicator\": \"01\", \"shippingAddressUsageIndicator\": \"01\", \"shippingNameIndicator\": \"01\", \"suspiciousAccountActivity\": \"01\" } }, \"orderItems\": [ { \"reference\": \"P1\", \"name\": \"Product1\", \"type\": \"PRODUCT\", \"class\": \"ProductGroup1\", \"itemUrl\": \"https://example.com/products/123\", \"imageUrl\": \"https://example.com/product123.jpg\", \"description\": \"Product 1 description\", \"discountDescription\": \"Volume discount\", \"quantity\": 5, \"quantityUnit\": \"pcs\", \"unitPrice\": 300, \"discountPrice\": 0, \"vatPercent\": 2500, \"amount\": 1500, \"vatAmount\": 375 }, { \"reference\": \"I1\", \"name\": \"InvoiceFee\", \"type\": \"PAYMENT_FEE\", \"class\": \"Fees\", \"description\": \"Fee for paying with Invoice\", \"quantity\": 1, \"quantityUnit\": \"pcs\", \"unitPrice\": 1900, \"vatPercent\": 0, \"amount\": 1900, \"vatAmount\": 0, \"restrictedToInstruments\": [ \"Invoice-PayExFinancingSe\" ] } ], \"riskIndicator\": { \"deliveryEmailAddress\": \"olivia.nyhuus@payex.com\", \"deliveryTimeFrameIndicator\": \"01\", \"preOrderDate\": \"19801231\", \"preOrderPurchaseIndicator\": \"01\", \"shipIndicator\": \"01\", \"giftCardPurchase\": false, \"reOrderPurchaseIndicator\": \"01\", \"pickUpAddress\": { \"name\": \"Olivia Nyhus\", \"streetAddress\": \"Saltnestoppen 43\", \"coAddress\": \"\", \"city\": \"Saltnes\", \"zipCode\": \"1642\", \"countryCode\": \"NO\" } } } } Show fields Hide fields Required Field Type Description   check paymentOrder object The payment order object.   check operation string Determines the initial operation, defining the type of payment order created.   check currency string The currency of the payment.   check amount integer The transaction amount (including VAT, if any) entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The amount displayed is the final amount the payer paid for their order, including any payment method specific discounts or fees.   check vatAmount integer The payment’s VAT (Value Added Tax) amount, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The vatAmount entered will not affect the amount shown on the payment page, which only shows the total amount. This field is used to specify how much of the total amount the VAT will be. Set to 0 (zero) if there is no VAT amount charged.   check description string The description of the payment order.     disableStoredPaymentDetails bool Set to false by default. Switching to true will turn off all stored payment details for the current purchase. When you use this feature it is important that you have asked the payer in advance if it is ok to store their payment details for later use.   check userAgent string The user agent of the payer. Should typically be set to the value of the User-Agent header sent by the payer’s web browser.     generatePaymentToken bool Determines if a payment token should be generated. Default value is false.   check language string The language of the payer.   check urls object The urls object, containing the URLs relevant for the payment order.   check hostUrls array The array of valid host URLs.   check completeUrl string The URL that Swedbank Pay will redirect back to when the payer has completed their interactions with the payment. This does not indicate a successful payment, only that it has reached a final (complete) state. A GET request needs to be performed on the payment order to inspect it further. See completeUrl for details.     cancelUrl string The URL to redirect the payer to if the payment is cancelled, either by the payer or by the merchant trough an abort request of the payment or paymentorder.   check callbackUrl string The URL that Swedbank Pay will perform an HTTP POST against every time a transaction is created on the payment order. See callback for details.   check termsOfServiceUrl string The URL to the terms of service document which the payer must accept in order to complete the payment. HTTPS is a requirement.   check payeeInfo object The payeeInfo object, containing information about the payee.   check payeeId string The ID of the payee, usually the merchant ID.   check payeeReference string A unique reference from the merchant system. Set per operation to ensure an exactly-once delivery of a transactional operation. Length and content validation depends on whether the transaction.number or the payeeReference is sent to the acquirer. If Swedbank Pay handles the settlement, the transaction.number is sent and the payeeReference must be in the format of A-Za-z0-9 and string(30). If you handle the settlement, Swedbank Pay will send the payeeReference and it will be limited to the format of string(12). All characters must be digits. In Invoice Payments payeeReference is used as an invoice/receipt number, if the receiptReference is not defined.     payeeName string The name of the payee, usually the name of the merchant.     productCategory string(50) A product category or number sent in from the payee/merchant. This is not validated by Swedbank Pay, but will be passed through the payment process and may be used in the settlement process.     orderReference string(50) The order reference should reflect the order reference found in the merchant’s systems.     subsite string(40) The subsite field can be used to perform a split settlement on the payment. The different subsite values must be resolved with Swedbank Pay reconciliation before being used. If you send in an unknown subsite value, it will be ignored and the payment will be settled using the merchant’s default settlement account. Must be in the format of A-Za-z0-9.     payer object The payer object containing information about the payer relevant for the payment order.     digitalProducts bool Set to true for merchants who only sell digital goods and only require email and/or msisdn as shipping details. Set to false if the merchant also sells physical goods.     firstName string The first name of the payer.     lastName string The last name of the payer.     email string The e-mail address of the payer. Will be used to prefill the Checkin as well as on the payer’s profile, if not already set. Increases the chance for frictionless 3-D Secure 2 flow .     msisdn string The mobile phone number of the Payer. Will be prefilled on Checkin page and used on the payer’s profile, if not already set. The mobile number must have a country code prefix and be 8 to 15 digits in length. The field is related to 3-D Secure 2 .     payerReference string A reference used in the Enterprise and Payments Only implementations to recognize the payer when no SSN is stored.     shippingAddress object The shipping address object related to the payer. The field is related to 3-D Secure 2 .     firstName string The first name of the addressee – the receiver of the shipped goods.     lastName string The last name of the addressee – the receiver of the shipped goods.     streetAddress string Payer’s street address. Maximum 50 characters long.     coAddress string Payer’ s c/o address, if applicable.     zipCode string Payer’s zip code     city string Payer’s city of residence.     countryCode string Country code for country of residence, e.g. SE, NO, or FI.     billingAddress object The billing address object containing information about the payer’s billing address.     firstName string The first name of the payer.     lastName string The last name of the payer.   ︎ streetAddress string The street address of the payer. Maximum 50 characters long.     coAddress string The CO-address (if used)     zipCode string The postal number (ZIP code) of the payer.     city string The city of the payer.     countryCode string Country code for country of residence, e.g. SE, NO, or FI.     accountInfo object Object related to the payer containing info about the payer’s account.     accountAgeIndicator string Indicates the age of the payer’s account. 01 (No account, guest checkout) 02 (Created during this transaction) 03 (Less than 30 days old) 04 (30 to 60 days old) 05 (More than 60 days old)     accountChangeIndicator string Indicates when the last account changes occurred. 01 (Changed during this transaction) 02 (Less than 30 days ago) 03 (30 to 60 days ago) 04 (More than 60 days ago)     accountChangePwdIndicator string Indicates when the account’s password was last changed. 01 (No changes) 02 (Changed during this transaction) 03 (Less than 30 days ago) 04 (30 to 60 days ago) 05 (More than 60 days old)     shippingAddressUsageIndicator string Indicates when the payer’s shipping address was last used. 01(This transaction) 02 (Less than 30 days ago) 03 (30 to 60 days ago) 04 (More than 60 days ago)     shippingNameIndicator string Indicates if the account name matches the shipping name. 01 (Account name identical to shipping name) 02 (Account name different from shipping name)     suspiciousAccountActivity string Indicates if there have been any suspicious activities linked to this account. 01 (No suspicious activity has been observed) 02 (Suspicious activity has been observed)   check orderItems array The array of items being purchased with the order. Note that authorization orderItems will not be printed on invoices, so lines meant for print must be added in the Capture request. The authorization orderItems will, however, be used in the Merchant Portal when captures or reversals are performed, and might be shown other places later. It is required to use this field to be able to send Capture orderItems. Capture requests should only contain items meant to be captured from the order.   check reference string A reference that identifies the order item.   check name string The name of the order item.   check type string PRODUCT, SERVICE, SHIPPING_FEE, PAYMENT_FEE DISCOUNT, VALUE_CODE or OTHER. The type of the order item. PAYMENT_FEE is the amount you are charged with when you are paying with invoice. The amount can be defined in the amount field below.   check class string The classification of the order item. Can be used for assigning the order item to a specific product category, such as MobilePhone. Note that class cannot contain spaces and must follow the regex pattern [\\w-]*. Swedbank Pay may use this field for statistics.     itemUrl string The URL to a page that can display the purchased item, product or similar.   ︎︎︎ imageUrl string The URL to an image of the order item.     description string A textual description of the purchase. Maximum length is 40 characters.     discountDescription string The human readable description of the possible discount.   check quantity number The 4 decimal precision quantity of order items being purchased.   check quantityUnit string The unit of the quantity, such as pcs, grams, or similar. This is used for your own book keeping.   check unitPrice integer The price per unit of order item, including VAT.     discountPrice integer If the order item is purchased at a discounted price. This field should contain that price, including VAT.   check vatPercent integer The percent value of the VAT multiplied by 100, so 25% becomes 2500.   check amount integer The transaction amount (including VAT, if any) entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The amount displayed is the final amount the payer paid for their order, including any payment method specific discounts or fees.   check vatAmount integer The payment’s VAT (Value Added Tax) amount, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The vatAmount entered will not affect the amount shown on the payment page, which only shows the total amount. This field is used to specify how much of the total amount the VAT will be. Set to 0 (zero) if there is no VAT amount charged.     restrictedToInstruments array A list of the payment methods you wish to restrict the payment to. Currently Invoice only. Invoice supports the subtypes PayExFinancingNo, PayExFinancingSe and PayMonthlyInvoiceSe, separated by a dash, e.g.; Invoice-PayExFinancingNo. Default value is all supported payment methods. Use of this field requires an agreement with Swedbank Pay. You can restrict fees and/or discounts to certain payment methods by adding this field to the orderline you want to restrict. Use positive amounts to add fees and negative amounts to add discounts.     riskIndicator array This optional object consist of information that helps verifying the payer. Providing these fields decreases the likelihood of having to prompt for 3-D Secure 2.0 authentication of the payer when they are authenticating the purchase.     deliveryEmailAdress string For electronic delivery, the email address to which the merchandise was delivered. Providing this field when appropriate decreases the likelihood of a 3-D Secure authentication for the payer.     deliveryTimeFrameIndicator string Indicates the merchandise delivery timeframe. 01 (Electronic Delivery) 02 (Same day shipping) 03 (Overnight shipping) 04 (Two-day or more shipping)     preOrderDate string For a pre-ordered purchase. The expected date that the merchandise will be available. Format: YYYYMMDD     preOrderPurchaseIndicator string Indicates whether the payer is placing an order for merchandise with a future availability or release date. 01 (Merchandise available) 02 (Future availability)     shipIndicator string Indicates shipping method chosen for the transaction. 01 (Ship to cardholder’s billing address) 02 (Ship to another verified address on file with merchant)03 (Ship to address that is different than cardholder’s billing address)04 (Ship to Store / Pick-up at local store. Store address shall be populated in shipping address fields)05 (Digital goods, includes online services, electronic giftcards and redemption codes) 06 (Travel and Event tickets, not shipped) 07 (Other, e.g. gaming, digital service)     giftCardPurchase bool true if this is a purchase of a gift card.     reOrderPurchaseIndicator string Indicates whether the cardholder is reordering previously purchased merchandise. 01 (First time ordered) 02 (Reordered).     pickUpAddress object If shipIndicator set to 04, then prefill this with the payers pickUpAddress of the purchase to decrease the risk factor of the purchase.     name string If shipIndicator set to 04, then prefill this with the payers name of the purchase to decrease the risk factor of the purchase.     streetAddress string If shipIndicator set to 04, then prefill this with the payers streetAddress of the purchase to decrease the risk factor of the purchase. Maximum 50 characters long.     coAddress string If shipIndicator set to 04, then prefill this with the payers coAddress of the purchase to decrease the risk factor of the purchase.     city string If shipIndicator set to 04, then prefill this with the payers city of the purchase to decrease the risk factor of the purchase.     zipCode string If shipIndicator set to 04, then prefill this with the payers zipCode of the purchase to decrease the risk factor of the purchase.     countryCode string If shipIndicator set to 04, then prefill this with the payers countryCode of the purchase to decrease the risk factor of the purchase.   Payer Aware Payment Menu Response Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x/2.0 api-supported-versions: 3.x/2.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 { \"paymentorder\": { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce\", \"created\": \"2020-06-22T10:56:56.2927632Z\", \"updated\": \"2020-06-22T10:56:56.4035291Z\", \"operation\": \"Purchase\", \"status\": \"Initialized\", \"paymentToken\" : \"5a17c24e-d459-4567-bbad-aa0f17a76119\", \"currency\": \"SEK\", \"vatAmount\": 375, \"amount\": 1500, \"description\": \"Test Purchase\", \"initiatingSystemUserAgent\": \"PostmanRuntime/3.0.1\", \"language\": \"sv-SE\", \"availableInstruments\": [ \"CreditCard\", \"Invoice-PayExFinancingSe\", \"Invoice-PayMonthlyInvoiceSe\", \"Swish\", \"CreditAccount\", \"Trustly\" ], \"implementation\": \"PaymentsOnly\", \"instrumentMode\": false, \"guestMode\": false, \"payer\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/payers\" }, \"orderItems\": { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/orderitems\" }, \"history\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/history\" }, \"failed\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/failed\" }, \"aborted\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/aborted\" }, \"paid\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/paid\" }, \"cancelled\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/cancelled\" }, \"financialTransactions\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/financialtransactions\" }, \"failedAttempts\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/failedattempts\" }, \"metadata\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/metadata\" } }, \"operations\": [ { \"href\": \"https://api.payex.com/psp/paymentorders/222a50ca-b268-4b32-16fa-08d6d3b73224\", \"rel\":\"update-order\", \"method\":\"PATCH\", \"contentType\":\"application/json\" }, { \"href\": \"https://api.payex.com/psp/paymentorders/222a50ca-b268-4b32-16fa-08d6d3b73224\", \"rel\": \"abort\", \"method\": \"PATCH\", \"contentType\": \"application/json\" }, { \"href\": \"https://api.payex.com/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce\", \"rel\": \"abort-paymentattempt\", \"method\": \"PATCH\", \"contentType\": \"application/json\" } ] } Show fields Hide fields Field Type Description paymentOrder object The payment order object. id string The relative URL and unique identifier of the paymentorder resource . Please read about URL Usage to understand how this and other URLs should be used in your solution. created string The ISO-8601 date of when the payment order was created. updated string The ISO-8601 date of when the payment order was updated. operation string Purchase status string Indicates the payment order’s current status. Initialized is returned when the payment is created and still ongoing. The request example above has this status. Paid is returned when the payer has completed the payment successfully. See the Paid response. Failed is returned when a payment has failed. You will find an error message in the Failed response. Cancelled is returned when an authorized amount has been fully cancelled. See the Cancelled response. It will contain fields from both the cancelled description and paid section. Aborted is returned when the merchant has aborted the payment, or if the payer cancelled the payment in the redirect integration (on the redirect page). See the Aborted response. paymentToken string The payment token generated in the initial purchase. currency string The currency of the payment order. amount integer The transaction amount (including VAT, if any) entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The amount displayed is the final amount the payer paid for their order, including any payment method specific discounts or fees. vatAmount integer The payment’s VAT (Value Added Tax) amount, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The vatAmount entered will not affect the amount shown on the payment page, which only shows the total amount. This field is used to specify how much of the total amount the VAT will be. Set to 0 (zero) if there is no VAT amount charged. description string(40) A textual description of the purchase. Maximum length is 40 characters. initiatingSystemUserAgent string The userAgent of the system used when the merchant makes a call towards the resource. language string sv-SE, nb-NO, da-DK, en-US or fi-FI. availableInstruments string A list of payment methods available for this payment. implementation string The merchant’s Digital Payments implementation type. Enterprise or PaymentsOnly. We ask that you don’t build logic around this field’s response. It is mainly for information purposes, as the implementation types might be subject to name changes. If this should happen, updated information will be available in this table. integration string The merchant’s Digital Payments integration type. HostedView (Seamless View) or Redirect. This field will not be populated until the payer has opened the payment UI, and the client script has identified if Swedbank Pay or another URI is hosting the container with the payment iframe. We ask that you don’t build logic around this field’s response. It is mainly for information purposes. as the integration types might be subject to name changes, If this should happen, updated information will be available in this table. instrumentMode bool Set to true or false. Indicates if the payment is initialized with only one payment method available. guestMode bool Set to true or false. Indicates if the payer chose to pay as a guest or not. When using the Payments Only implementation, this is triggered by not including a payerReference in the original paymentOrder request. payer id The URL to the payer resource where information about the payer can be retrieved. orderItems id The URL to the orderItems resource where information about the order items can be retrieved. history id The URL to the history resource where information about the payment’s history can be retrieved. failed id The URL to the failed resource where information about the failed transactions can be retrieved. aborted id The URL to the aborted resource where information about the aborted transactions can be retrieved. paid id The URL to the paid resource where information about the paid transactions can be retrieved. cancelled id The URL to the cancelled resource where information about the cancelled transactions can be retrieved. financialTransactions id The URL to the financialTransactions resource where information about the financial transactions can be retrieved. failedAttempts id The URL to the failedAttempts resource where information about the failed attempts can be retrieved. metadata id The URL to the metadata resource where information about the metadata can be retrieved. operations array The array of operations that are possible to perform on the payment order in its current state. See Operations for details. Enable Payment Details Consent Checkbox Use the same basic initial payment order request, and add the new field enablePaymentDetailsConsentCheckbox in the paymentOrder node. Set it to true to show the checkbox used to store payment details for card payments. Remember to also set disableStoredPaymentDetails to true. This option will not work with Verify, and will result in a validation error if you try. Payment Details Consent Checkbox Copy json to clipboard 1 2 3 4 POST /psp/paymentorders HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; CContent-Type: application/json;version=3.x/2.0 // Version optional for 3.0 and 2.0 1 2 3 4 5 6 { \"paymentorder\": { \"enablePaymentDetailsConsentCheckbox\": true, \"disableStoredPaymentDetails\": true, } } Show fields Hide fields Required Field Type Description check paymentOrder object The payment order object.   EnablePaymentDetailsConsentCheckbox bool Set to true or false. Used to determine if the checkbox used to save payment details is shown or not. Will only work if the parameter disableStoredPaymentDetails is set to true.   disableStoredPaymentDetails bool Set to true or false. Must be set to true for enablePaymentDetailsConsentCheckbox to work. Tokens It is possible to query for all active payment tokens registered on a specific payerReference. After doing so, you can either remove all tokens or a subset of the tokens registered on the payer. This is the easiest way of cleaning up all data for Payments Only implementations. It is also possible to delete a single token if you wish to do that. GET Tokens Request Querying with a GET request will give you a response containing all tokens and the operation(s) available for them. GET Tokens Request 1 2 3 4 GET /psp/paymentorders/payerownedtokens/&lt;payerReference&gt; HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.x/2.0 // Version optional for 3.0 and 2.0 GET Tokens Response Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x/2.0 api-supported-versions: 3.x/2.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 { \"payerOwnedTokens\": { \"id\": \"/psp/paymentorders/payerownedtokens/{payerReference}\", \"payerReference\": \"{payerReference}\", \"tokens\": [ { \"token\": \"{paymentToken}\", \"tokenType\": \"Payment\", \"instrument\": \"CreditCard\", \"instrumentDisplayName\": \"492500******0004\", \"correlationId\": \"e2f06785-805d-4605-bf40-426a725d313d\", \"instrumentParameters\": { \"expiryDate\": \"12/2022\", \"cardBrand\": \"Visa\" }, \"operations\": [ { \"method\": \"PATCH\", \"href\": \"https://api.internaltest.payex.com/psp/paymentorders/paymenttokens/0ecf804f-e68f-404e-8ae6-adeb43052559\", \"rel\": \"delete-paymenttokens\", \"contentType\": \"application/json\" } ] }, { \"token\": \"{paymentToken}\", \"tokenType\": \"Payment\", \"instrument\": \"Invoice-payexfinancingno\", \"instrumentDisplayName\": \"260267*****\", \"correlationId\": \"e2f06785-805d-4605-bf40-426a725d313d\", \"instrumentParameters\": { \"email\": \"hei@hei.no\", \"msisdn\": \"+4798765432\", \"zipCode\": \"1642\" }, \"operations\": [ { \"method\": \"PATCH\", \"href\": \"https://api.internaltest.payex.com/psp/paymentorders/paymenttokens/dd9c1103-3e0f-492a-95a3-a39bb32a6b59\", \"rel\": \"delete-paymenttokens\", \"contentType\": \"application/json\" } ] }, { \"token\": \"{token}\", \"tokenType\": \"Unscheduled\", \"instrument\": \"CreditCard\", \"instrumentDisplayName\": \"492500******0004\", \"correlationId\": \"e2f06785-805d-4605-bf40-426a725d313d\", \"instrumentParameters\": { \"expiryDate\": \"12/2020\", \"cardBrand\": \"Visa\" }, \"operations\": [ { \"method\": \"PATCH\", \"href\": \"https://api.internaltest.payex.com/psp/paymentorders/unscheduledtokens/e2f06785-805d-4605-bf40-426a725d313d\", \"rel\": \"delete-unscheduledtokens\", \"contentType\": \"application/json\" } ] } ] }, \"operations\": [ { \"method\": \"PATCH\", \"href\": \"https://api.internaltest.payex.com/psp/paymentorders/payerOwnedPaymentTokens/{payerReference}\", \"rel\": \"delete-payerownedtokens\", \"contentType\": \"application/json\" } ] } Show fields Hide fields Field Type Description payerOwnedTokens object The payerOwnedTokens object containing information about the payer relevant for the payment order. id string The relative URL and unique identifier of the paymentorder resource . Please read about URL Usage to understand how this and other URLs should be used in your solution. payerReference string A reference used in the Enterprise and Payments Only implementations to recognize the payer when no SSN is stored. tokens integer A list of tokens connected to the payment. token string The token guid. tokenType string payment, recurrence, transactionOnFile or unscheduled. The different types of available tokens. instrument string Payment method connected to the token. instrumentDisplayName string Payment method connected to the token. correlationId string A unique ID used in the system. Makes it easier to see cards, accounts etc. the token is connected to. instrumentParameters integer A list of additional information connected to the token. Depending on the payment method, it can e.g. be expiryDate, cardBrand, email, msisdn or zipCode. operations array The array of operations that are possible to perform on the token in its current state. PATCH Request For Removing Tokens You can remove the tokens by using the following PATCH request. Request Copy json to clipboard 1 2 3 4 PATCH /psp/paymentorders/payerownedtokens/&lt;payerReference&gt; HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.x/2.0 // Version optional for 3.0 and 2.0 1 2 3 4 { \"state\": \"Deleted\", \"comment\": \"Some words about why the tokens are being deleted\" } Field Type Description state string The state you want the token to be in. comment string Explanation as to why the token is being deleted. Which will provide this response. Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x/2.0 api-supported-versions: 3.x/2.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 { \"payerOwnedTokens\": { \"id\": \"/psp/paymentorders/payerownedtokens/{payerReference}\", \"payerReference\": \"{payerReference}\", \"tokens\": [ { \"token\": \"{paymentToken}\", \"tokenType\": \"Payment\", \"instrument\": \"Invoice-payexfinancingno\", \"instrumentDisplayName\": \"260267*****\", \"instrumentParameters\": { \"email\": \"hei@hei.no\", \"msisdn\": \"+4798765432\", \"zipCode\": \"1642\" } }, { \"token\": \"{paymentToken}\", \"tokenType\": \"Unscheduled\", \"instrument\": \"CreditCard\", \"instrumentDisplayName\": \"492500******0004\", \"correlationId\": \"e2f06785-805d-4605-bf40-426a725d313d\", \"instrumentParameters\": { \"expiryDate\": \"12/2020\", \"cardBrand\": \"Visa\" } } ] } } Show fields Hide fields Field Type Description payerOwnedTokens object The payerOwnedTokens object containing information about the payer relevant for the payment order. id string The relative URL and unique identifier of the paymentorder resource . Please read about URL Usage to understand how this and other URLs should be used in your solution. payerReference string A reference used in the Enterprise and Payments Only implementations to recognize the payer when no SSN is stored. tokens integer A list of tokens connected to the payment. token string The token guid. tokenType string payment, recurrence, transactionOnFile or unscheduled. The different types of available tokens. instrument string Payment methods connected to the token. instrumentDisplayName string Payment method connected to the token. correlationId string A unique ID used in the system. Makes it easier to see cards, accounts etc. the token is connected to. instrumentParameters integer A list of additional information connected to the token. Depending on the payment method, it can e.g. be expiryDate, cardBrand, email, msisdn or zipCode.",
    "tags": "",
    "url": "/checkout-v3/features/optional/payer-aware-payment-menu/"
  },{
    "title": "Payer Aware Payment Menu",
    "text": "One-Click Payments It is really easy to improve the purchase experience by auto-filling the payment details. In order to do this, SwedbankPay needs to identify your customer. If the customer is identified and has approved storing the payment details, the rest is handled automatically. One-Click Payments In Enterprise Enterprise merchant can supply the email and phone of the customer to let SwedbankPay match the customer internally and let the customer store card information (if desired). iOS 1 2 3 4 5 6 7 8 var paymentOrder = ... payment.payer = .init( consumerProfileRef: nil, email: \"leia.ahlstrom@payex.com\", msisdn: \"+46739000001\", payerReference: unique-identifier ) Android 1 2 3 4 5 6 7 8 9 10 val paymentOrder = PaymentOrder( ... payer = PaymentOrderPayer( email = \"leia.ahlstrom@payex.com\", msisdn = \"+46739000001\", payerReference = unique-identifier ), ... ) Now the customer has the option to store card numbers or select one of the previously stored cards. More info in the documentation. One-Click Payments In PaymentsOnly Using Payer Aware Payment Menu involves managing payment tokens yourself. If you are using a Merchant Backend, you can have a payment order create payment tokens by setting the generatePaymentToken and payerReference fields of PaymentOrder and PaymentOrderPayer, respectively. Android 1 2 3 4 5 6 7 8 val paymentOrder = PaymentOrder( ..., generatePaymentToken = true, payer = PaymentOrderPayer( payerReference = unique-identifier ) ... ) iOS 1 2 3 4 paymentOrder.generatePaymentToken = true paymentOrder.payer = PaymentOrderPayer( payerReference: unique-identifier ) Token Retrieval Digital Payments Retrieve the token by expanding the paid property of a previous successful payment. You do this with a GET request where you add ?$expand=paid after the paymentOrderId. You get a payment order back, and in the expanded paid property there is a “tokens” array (if the customer agreed to let you store the information). A good practice is to only do this on the backend and serve the token as part of user’s info, to have the token available at the next purchase. iOS 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // ExpandResponse is a struct you define to match the response from your server, since you will want to adapt it to your needs. let request = configuration.expandOperation(paymentId: paymentId, expand: [.paid], endpoint: \"expand\") { (result: Result&lt;ExpandResponse, Error&gt;) in if case .success(let success) = result, let token = success.paymentOrder.paid?.tokens.first?.token { // Now save the token for the next purchase. // Notice that the backend never needs to respond with the complete expanded PaymentOrder. // This is just an illustration of how expansion can work } else { //handle failure } } Android 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 // N.B! expandOperation is a suspending function, so this call must be done inside suspending code. // ExpandedPaymentOrder is a data class you define to match the response from your server, since you will want to adapt it to your needs. try { var result: ExpandedPaymentOrder = merchantConfiguration.expandOperation( context, paymentId, arrayOf(\"paid\"), \"expand\", ExpandedPaymentOrder::class.java ) return expandedOrder.paid?.tokens?.first()?.token } catch (error: UnexpectedResponseException) { //handle error } Read more on expanding properties here. Token Retrieval In Checkout V2 If you are still using the older Checkout version 2, the SDK contains a utility method to query a conforming Merchant Backend server for the payment tokens of a particular payerReference. Of course, you should have proper authentication in your implementation if you use this functionality, to prevent unauthorized access to other users’ tokens (the example implementation has the endpoint disabled by default). The utility method allows you to add extra header to the request; these can be useful for implementing authentication. Android 1 2 3 4 5 6 7 8 9 10 // N.B! getPayerOwnedPaymentTokens is a suspending function, // so this call must be done inside suspending code. // If the backend responds with a Problem, the call will throw // a RequestProblemException. val response = MerchantBackend.getPayerOwnedPaymentTokens( context, configuration, payerReference, \"ExampleHeader\", \"ExampleValue\" ) iOS 1 2 3 4 5 6 7 8 9 10 11 12 13 let request = SwedbankPaySDK.MerchantBackend.getPayerOwnedPaymentTokens( configuration: configuration, payerReference: payerReference, extraHeaders: [ \"ExampleHeader\": \"ExampleValue\" ] ) { result in // Use result here. // Be prepared for any errors of the type // SwedbankPaySDK.MerchantBackendError. } // If you need to cancel the request before it is complete, call // request.cancel() Token Usage Usage of tokens are the same in both V3 as in V2 and to use a payment token with a Merchant Backend, create a payment order where you set the paymentToken field of PaymentOrder and the payerReference field of PaymentOrderPayer: Android 1 2 3 4 5 6 7 8 val paymentOrder = PaymentOrder( ..., payer = PaymentOrderPayer( payerReference = unique-identifier ) paymentToken = retrieved-token ... ) iOS 1 2 3 4 paymentOrder.payer = PaymentOrderPayer( payerReference: unique-identifier ) paymentOrder.paymentToken = retrieved-token Your backend implementation should have proper authentication to prevent misuse of tokens. The example implementation will reject attempts to use paymentToken by default. Disable Stored Payment Instrument Details The Merchant Backend allows you to set PaymentOrder.disableStoredPaymentDetails to use this feature as described in the Version2 Payment Menu Documentation. As mentioned there, it is important that you have obtained consent from the user for storing payment details beforehand, if you use this feature. Android 1 2 3 4 5 val paymentOrder = PaymentOrder( ..., disableStoredPaymentDetails = true ... ) iOS 1 paymentOrder.disableStoredPaymentDetails = true",
    "tags": "",
    "url": "/checkout-v3/modules-sdks/mobile-sdk/features/optional/payer-aware-payment-menu/"
  },{
    "title": "Restricted To SSN",
    "text": "Restrict Payments To A Social Security Number Swedbank Pay provides the possibility to restrict payments to a Social Security Number when the payment methods support this. This can be used when you want to make sure you only accept payments from an already identified individual. You do this by adding the field restrictedToSocialSecurityNumber in the payer field, in your payment order request, and setting it to true. This will leave out all payment methods which do not support this feature. It will then use the socialSecurityNumber located in the nationalIdentifier field (found within the payer field). The nationalIdentifier must be included to use this feature. Payment methods supporting the feature will reject payments that do not match the restriction. You are currently only able to restrict Swish and Trustly payments to a Social Security Number, but we will add support for more payment methods going forward. No changes are required at your (the merchant’s) end to be able to offer more payment methods at a later time. Restrict To Social Security Number Request The field itself is a bool which must be added in the payer field of the request. Below is a shortened example of a payment order request. Apart from the new field, the payment request is similar to a standard payment order request. For an example of a payment order request, The response will be similar to a standard payment order response, which is also documented on the page linked above. Request Copy json to clipboard 1 2 3 4 POST /psp/paymentorders HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.x/2.0 // Version optional for 3.0 and 2.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 { \"paymentorder\": { \"payer\": { \"digitalProducts\": false, \"nationalIdentifier\": { \"socialSecurityNumber\": \"199710202392\", \"countryCode\": \"SE\", \"guestMode\": true }, \"restrictedToSocialSecurityNumber\": true, \"firstName\": \"Leia\", \"lastName\": \"Ahlström\", \"email\": \"leia@payex.com\", \"msisdn\": \"+46787654321\", \"payerReference\": \"AB1234\" } } } Show fields Hide fields Required Field Type Description   payer object The payer object containing information about the payer relevant for the payment order.   digitalProducts bool Set to true for merchants who only sell digital goods and only require email and/or msisdn as shipping details. Set to false if the merchant also sells physical goods.   restrictedToSocialSecurityNumber bool Set to true if you want to restrict your payment to a Social Security Number. check firstName string The first name of the payer. check lastName string The last name of the payer.   email string The e-mail address of the payer. Will be used to prefill the Checkin as well as on the payer’s profile, if not already set. Increases the chance for frictionless 3-D Secure 2 flow .   msisdn string The mobile phone number of the Payer. Will be prefilled on Checkin page and used on the payer’s profile, if not already set. The mobile number must have a country code prefix and be 8 to 15 digits in length. The field is related to 3-D Secure 2 .   payerReference string A reference used in Enterprise integrations to recognize the payer in the absence of SSN and/or a secure login. Read more about this in the payerReference feature section.",
    "tags": "",
    "url": "/checkout-v3/features/optional/payer-restrictions/"
  },{
    "title": "Payer Tokens",
    "text": "Payment Tokens For Unscheduled Or Recurring Purchases A common practice is to store a credit-card for later use, e.g. for subscriptions, and charge every month. To make this safe &amp; secure you let SwedbankPay store the payment information and only keep a reference, a payment token. This token can later be used to make purchases, and there are two types of tokens that can be created. One for subscriptions, and one for later unscheduled purchases. They are created the same way, by setting generateUnscheduledToken = true or generateRecurrenceToken = true, in the paymentOrder and then either making a purchase or verifying a purchase. iOS 1 2 3 var paymentOrder = ... //create the paymentOrder as usual by calculating price, etc paymentOrder.generateRecurrenceToken = true paymentOrder.generateUnscheduledToken = true Android 1 2 3 4 5 6 7 val paymentOrder = PaymentOrder( ... generateRecurrenceToken = true, generateUnscheduledToken = true, ... ) When expanding the paid property of this verified or purchased payment, there is an array with tokens one can save for later use. Read more on: expanding properties. Here is an abbreviated example of what is received, typically only on the backend. JSON 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 { \"paymentOrder\": { ... \"paid\": { ... \"tokens\": [ { \"type\": \"recurrence\", \"token\": \"a7d7d780-98ba-4466-befe-e5428f716c30\", \"name\": \"458109******3517\", \"expiryDate\": \"12/2030\" }, { \"type\": \"unscheduled\", \"token\": \"0c43b168-dcd5-45d1-b9c4-1fb8e273c799\", \"name\": \"458109******3517\", \"expiryDate\": \"12/2030\" } ] } } } Then, to make an unscheduled purchase you simply add the unscheduledToken, or the recurrenceToken to the paymentOrder request. Obviously these purchases and the expanding of tokens is only needed to be done on the backend. More info on unscheduled purchases. More info on recurring purchases.",
    "tags": "",
    "url": "/checkout-v3/modules-sdks/mobile-sdk/features/optional/payer-tokens/"
  },{
    "title": "Payment Link",
    "text": "Introduction Payment Link is available for Digital Payments, Checkout v2, Payment Menu v1 and the payment methods listed below, using the redirect platform and Swedbank Pay hosted payment page. Checkout 3.1 Checkout 3.0 Checkout 2.0 Payment Menu v2 Card MobilePay Online Swish Vipps Trustly When the payer starts the purchase process in your merchant or webshop site, you need to make a POST request towards Swedbank Pay with your Purchase information. You receive a Payment Link (same as redirect URL) in response. The link will be active for 28 days. You have to distribute the Payment Link to the payer through your order system, using channels like e-mail or SMS. info When sending information in e-mail/SMS, it is strongly recommended that you add information about your terms and conditions, including purchase information and price. See recommendations in the next section. When the payer clicks on the Payment Link, the Swedbank Pay payment page will open, letting them enter the payment details (varies depending on payment method) in a secure Swedbank Pay hosted environment. When paying with card, and if required, Swedbank Pay will handle 3-D Secure authentication. After completion, Swedbank Pay will redirect the browser back to your merchant/webshop site. If callbackURL is set the merchant system will receive a callback from Swedbank Pay, enabling you to make a GET request towards Swedbank Pay with the id of the payment received in the first step, which will return the purchase result. E-mail And SMS Recommendations When you as a merchant send an e-mail or SMS to the payer about the Payment Link, it is recommended to include contextual information which helps them understand what will happen when they click the Payment Link. We recommend that you include the following: The name of the merchant/shop initiating the payment An understandable product description, describing the service they are paying for. Some order-id (or similar) that exists in the merchant’s order system. The price and currency. Details about shipping method and expected delivery (if physical goods will be sent to the payer). A link to a page with the merchant’s terms and conditions (such as return policy) and information about how the payer can contact the merchant. Details informing that the payer accepts the Terms &amp; Conditions when clicking on the Payment Link. Receipt Recommendations We recommend that you send an e-mail or SMS confirmation to the payer with a receipt when the payment is done. API Requests The API requests depend on the payment method you are using when implementing the Payment Link scenario, see purchase flow. One-phase payment methods will not implement capture, cancellation or reversal. The options you can choose from when creating a payment with key operation set to Purchase are listed below. How It Looks When clicking the payment link, the payer will be directed to a payment page similar to the examples below, where payment information can be entered. Options All valid options when posting a payment with operation Purchase, are described in each payment method’s respective API reference. Please see the general sequence diagrams for more information about one-phase (e.g. Swish and Trustly) and two-phase (e.g. Card, MobilePay Online and Vipps) payments. Authorization When using two-phase payment methods you reserve the amount with an authorization, and you will have to specify that the intent of the purchase is Authorize. The amount will be reserved but not charged. You have to make a Capture or Cancel request later (i.e. when you are ready to ship the purchased products). Capture Capture can only be performed on a payment with a successfully authorized transaction. It is possible to do a part-capture where you only capture a smaller amount than the authorized amount. You can do more captures on the same payment up to the total authorization amount later. If you want the credit card to be charged right away, you will have to specify that the intent of the purchase is AutoCapture. The card will be charged and you don’t need to do any more financial operations to this purchase. Cancel Cancel can only be done on an authorized transaction. If you cancel after doing a part-capture you will cancel the difference between the captured amount and the authorized amount. Reversal Reversal can only be done on a payment where there are some captured amount not yet reversed. General When implementing the Payment Link scenario, it is optional to set a callbackURL in the POST request. If callbackURL is set Swedbank Pay will send a request to this URL when the payer has completed the payment. See the Callback API description here. Purchase Flow The sequence diagrams display the high level process of the purchase, from generating a Payment Link to receiving a Callback. This in a generalized flow as well as a specific 3-D Secure enabled credit card scenario. info Please note that the the callback may come either before, after or in the same moment as the payer is redirected to the status page at the merchant site when the purchase is fulfilled. Don’t rely on the callback being timed at any specific moment. When dealing with card payments, 3-D Secure authentication of the cardholder is an essential topic. There are three alternative outcomes of a card payment: 3-D Secure enabled - by default, 3-D Secure should be enabled, and Swedbank Pay will check if the card is enrolled with 3-D Secure. This depends on the issuer of the card. If the card is not enrolled with 3-D Secure, no authentication of the cardholder is done. Card supports 3-D Secure - if the card is enrolled with 3-D Secure, Swedbank Pay will redirect the cardholder to the authentication mechanism that is decided by the issuing bank. Normally this will be done using BankID or Mobile BankID. sequenceDiagram activate Payer Payer-&gt;&gt;-MerchantOrderSystem: payer starts purchase activate MerchantOrderSystem MerchantOrderSystem-&gt;&gt;-Merchant: start purchase process activate Merchant Merchant-&gt;&gt;-SwedbankPay: POST [payment] (operation=PURCHASE) activate SwedbankPay note left of Merchant: First API request SwedbankPay--&gt;&gt;-Merchant: payment resource with payment URL activate Merchant Merchant--&gt;&gt;-MerchantOrderSystem: Payment URL sent to order system activate MerchantOrderSystem MerchantOrderSystem--&gt;&gt;-Payer: Distribute Payment URL through e-mail/SMS activate Payer note left of Payer: Payment Link in e-mail/SMS Payer-&gt;&gt;-SwedbankPay: Open link and enter payment information activate SwedbankPay opt Card supports 3-D Secure SwedbankPay--&gt;&gt;-Payer: redirect to IssuingBank activate Payer Payer-&gt;&gt;IssuingBank: 3-D Secure authentication process Payer-&gt;&gt;-SwedbankPay: access authentication page activate SwedbankPay end SwedbankPay--&gt;&gt;-Payer: redirect to merchant site activate Payer note left of SwedbankPay: redirect back to merchant Payer-&gt;&gt;-Merchant: access merchant page activate Merchant Merchant-&gt;&gt;-SwedbankPay: GET [payment] activate SwedbankPay note left of Merchant: Second API request SwedbankPay--&gt;&gt;-Merchant: payment resource activate Merchant Merchant--&gt;&gt;-Payer: display purchase result Options After Posting A Payment If the payment enable a two-phase flow (Authorize), you will need to implement the Capture and Cancel requests. It is possible to “abort” the validity of the Payment Link. See the Abort description here. For reversals, you will need to implement the Reversal request. When implementing the Payment Link scenario, it is optional to set a callbackURL in the POST request. If callbackURL is set Swedbank Pay will send a postback request to this URL when the payer has completed the payment. See the Callback API description here.",
    "tags": "",
    "url": "/checkout-v3/features/optional/payment-link/"
  },{
    "title": "Capture",
    "text": "Capture Captures are only possible when a payment has a successful Authorization transaction, naturally excluding one-phase payment methods like Swish and Trustly. They will be marked as a Sale transaction. Two-phase payment methods like card and Vipps however, require a Capture to be completed. Please note that you have a maximum of 5 consecutive failed attempts at a capture. The payment will be locked after the fifth, and you need to contact us for further attempts. In addition to full captures, it is possible to do partial captures of the authorized amount. You can do more captures on the same payment later, up to the total authorized amount. A useful tool for when you have to split orders into several shipments. First off, you must request the order information from the server to get the request link. With this, you can request the capture with the amount to capture, and get the status back. Create Capture Transaction To capture the authorized payment, you need to perform a capture against the accompanying href returned in the operations list. See the abbreviated request and response below: Capture Request Request Copy json to clipboard 1 2 3 4 POST /psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/captures HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.0/2.0 // Version optional 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 { \"transaction\": { \"description\": \"Capturing the authorized payment\", \"amount\": 1500, \"vatAmount\": 375, \"payeeReference\": \"AB832\", \"receiptReference\": \"AB831\", \"orderItems\": [ { \"reference\": \"P1\", \"name\": \"Product1\", \"type\": \"PRODUCT\", \"class\": \"ProductGroup1\", \"itemUrl\": \"https://example.com/products/123\", \"imageUrl\": \"https://example.com/product123.jpg\", \"description\": \"Product 1 description\", \"discountDescription\": \"Volume discount\", \"quantity\": 4, \"quantityUnit\": \"pcs\", \"unitPrice\": 300, \"discountPrice\": 200, \"vatPercent\": 2500, \"amount\": 1000, \"vatAmount\": 250 }, { \"reference\": \"P2\", \"name\": \"Product2\", \"type\": \"PRODUCT\", \"class\": \"ProductGroup1\", \"description\": \"Product 2 description\", \"quantity\": 1, \"quantityUnit\": \"pcs\", \"unitPrice\": 500, \"vatPercent\": 2500, \"amount\": 500, \"vatAmount\": 125 } ] } } Show fields Hide fields Required Field Type Description check transaction object The transaction object. check description string The description of the capture transaction. check amount integer The transaction amount (including VAT, if any) entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The amount displayed is the final amount the payer paid for their order, including any payment method specific discounts or fees. check vatAmount integer The payment’s VAT (Value Added Tax) amount, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The vatAmount entered will not affect the amount shown on the payment page, which only shows the total amount. This field is used to specify how much of the total amount the VAT will be. Set to 0 (zero) if there is no VAT amount charged. check payeeReference string A unique reference from the merchant system. Set per operation to ensure an exactly-once delivery of a transactional operation. Length and content validation depends on whether the transaction.number or the payeeReference is sent to the acquirer. If Swedbank Pay handles the settlement, the transaction.number is sent and the payeeReference must be in the format of A-Za-z0-9 and string(30). If you handle the settlement, Swedbank Pay will send the payeeReference and it will be limited to the format of string(12). All characters must be digits. In Invoice Payments payeeReference is used as an invoice/receipt number, if the receiptReference is not defined.   receiptReference string(30) A unique reference to the transaction, provided by the merchant. Can be used as an invoice or receipt number as a supplement to payeeReference. check orderItems array The array of items being purchased with the order. Note that authorization orderItems will not be printed on invoices, so lines meant for print must be added in the Capture request. The authorization orderItems will, however, be used in the Merchant Portal when captures or reversals are performed, and might be shown other places later. It is required to use this field to be able to send Capture orderItems. Capture requests should only contain items meant to be captured from the order. check reference string A reference that identifies the order item. check name string The name of the order item. check type enum PRODUCT, SERVICE, SHIPPING_FEE, PAYMENT_FEE, DISCOUNT, VALUE_CODE or OTHER. The type of the order item. check class string The classification of the order item. Can be used for assigning the order item to a specific product category, such as MobilePhone. Note that class cannot contain spaces and must follow the regex pattern [\\w-]*. Swedbank Pay may use this field for statistics.   itemUrl string The URL to a page that can display the purchased item, product or similar. ︎︎︎ imageUrl string The URL to an image of the order item.   description string The human readable description of the order item.   discountDescription string The human readable description of the possible discount. check quantity number The 4 decimal precision quantity of order items being purchased. check quantityUnit string The unit of the quantity, such as pcs, grams, or similar. This is used for your own book keeping. check unitPrice integer The price per unit of order item, including VAT.   discountPrice integer If the order item is purchased at a discounted price. This field should contain that price, including VAT. check vatPercent integer The percent value of the VAT multiplied by 100, so 25% becomes 2500. check amount integer The total amount including VAT to be paid for the specified quantity of this order item, in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 SEK and 5000 equals 50.00 SEK. check vatAmount integer The total amount of VAT to be paid for the specified quantity of this order item, in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 SEK and 5000 equals 50.00 SEK. check reference string A reference that identifies the order item. check name string The name of the order item. check type enum PRODUCT, SERVICE, SHIPPING_FEE, PAYMENT_FEE, DISCOUNT, VALUE_CODE or OTHER. The type of the order item. check class string The classification of the order item. Can be used for assigning the order item to a specific product category, such as MobilePhone. Note that class cannot contain spaces and must follow the regex pattern [\\w-]*. Swedbank Pay may use this field for statistics. ︎︎︎ itemUrl string The URL to a page that can display the purchased item, such as a product page ︎︎︎ imageUrl string The URL to an image of the order item. ︎︎︎ description string The human readable description of the order item. ︎︎︎ discountDescription string The human readable description of the possible discount. check quantity number The 4 decimal precision quantity of order items being purchased. check quantityUnit string The unit of the quantity, such as pcs, grams, or similar. check unitPrice integer The price per unit of order item, including VAT. ︎︎︎ discountPrice integer If the order item is purchased at a discounted price. This field should contain that price, including VAT. check vatPercent integer The percent value of the VAT multiplied by 100, so 25% becomes 2500. check amount integer The total amount including VAT to be paid for the specified quantity of this order item, in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 NOK and 5000 equals 50.00 NOK. check vatAmount integer The total amount of VAT to be paid for the specified quantity of this order item, in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 NOK and 5000 equals 50.00 NOK. Capture Response If the capture request succeeds, this should be the response: Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.0/2.0 api-supported-versions: 3.0/2.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 { \"payment\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"capture\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"transaction\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2020-06-22T10:56:56.2927632Z\", \"updated\": \"2020-06-22T10:56:56.4035291Z\", \"type\": \"Capture\", \"state\": \"Completed\", \"amount\": 1500, \"vatAmount\": 375, \"description\": \"Capturing the authorized payment\", \"payeeReference\": \"AB832\", \"receiptReference\": \"AB831\" } } } Show fields Hide fields Property Type Description payment string The relative URL of the payment this capture transaction belongs to. capture object The capture object, containing the information about the capture transaction. id string The relative URL of the created capture transaction. transaction object The object representation of the generic transaction resource, containing information about the current transaction. id string The relative URL of the current transaction resource. created string The ISO-8601 date and time of when the transaction was created. updated string The ISO-8601 date and time of when the transaction was updated. type string Indicates the transaction type. state string Indicates the state of the transaction, usually initialized, completed or failed. If a partial has been done and further transactions are possible, the state will be awaitingActivity. number integer The transaction number, useful when there’s need to reference the transaction in human communication. Not usable for programmatic identification of the transaction, where id should be used instead. amount integer The transaction amount (including VAT, if any) entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The amount displayed is the final amount the payer paid for their order, including any payment method specific discounts or fees. vatAmount integer The payment’s VAT (Value Added Tax) amount, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The vatAmount entered will not affect the amount shown on the payment page, which only shows the total amount. This field is used to specify how much of the total amount the VAT will be. Set to 0 (zero) if there is no VAT amount charged. description string A textual description of the purchase. Maximum length is 40 characters. payeeReference string A unique reference from the merchant system. Set per operation to ensure an exactly-once delivery of a transactional operation. Length and content validation depends on whether the transaction.number or the payeeReference is sent to the acquirer. If Swedbank Pay handles the settlement, the transaction.number is sent and the payeeReference must be in the format of A-Za-z0-9 and string(30). If you handle the settlement, Swedbank Pay will send the payeeReference and it will be limited to the format of string(12). All characters must be digits. In Invoice Payments payeeReference is used as an invoice/receipt number, if the receiptReference is not defined. receiptReference string(30) A unique reference from the merchant system. It is set per operation to ensure an exactly-once delivery of a transactional operation. It is used to supplement payeeReference as an additional receipt number. Capture Request v3.1 Request Copy json to clipboard 1 2 3 4 POST /psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/captures HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.1 1 2 3 4 5 6 7 8 9 { \"transaction\": { \"description\": \"Capturing the authorized payment\", \"amount\": 1500, \"vatAmount\": 375, \"payeeReference\": \"AB832\", \"receiptReference\": \"AB831\" } } Show fields Hide fields Required Field Type Description check transaction object The transaction object. check description string The description of the capture transaction. check amount integer The transaction amount (including VAT, if any) entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The amount displayed is the final amount the payer paid for their order, including any payment method specific discounts or fees. check vatAmount integer The payment’s VAT (Value Added Tax) amount, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The vatAmount entered will not affect the amount shown on the payment page, which only shows the total amount. This field is used to specify how much of the total amount the VAT will be. Set to 0 (zero) if there is no VAT amount charged. check payeeReference string A unique reference from the merchant system. Set per operation to ensure an exactly-once delivery of a transactional operation. Length and content validation depends on whether the transaction.number or the payeeReference is sent to the acquirer. If Swedbank Pay handles the settlement, the transaction.number is sent and the payeeReference must be in the format of A-Za-z0-9 and string(30). If you handle the settlement, Swedbank Pay will send the payeeReference and it will be limited to the format of string(12). All characters must be digits. In Invoice Payments payeeReference is used as an invoice/receipt number, if the receiptReference is not defined.   receiptReference string(30) A unique reference to the transaction, provided by the merchant. Can be used as an invoice or receipt number as a supplement to payeeReference. check orderItems array The array of items being purchased with the order. Note that authorization orderItems will not be printed on invoices, so lines meant for print must be added in the Capture request. The authorization orderItems will, however, be used in the Merchant Portal when captures or reversals are performed, and might be shown other places later. It is required to use this field to be able to send Capture orderItems. Capture requests should only contain items meant to be captured from the order. check reference string A reference that identifies the order item. check name string The name of the order item. check type enum PRODUCT, SERVICE, SHIPPING_FEE, PAYMENT_FEE, DISCOUNT, VALUE_CODE or OTHER. The type of the order item. check class string The classification of the order item. Can be used for assigning the order item to a specific product category, such as MobilePhone. Note that class cannot contain spaces and must follow the regex pattern [\\w-]*. Swedbank Pay may use this field for statistics.   itemUrl string The URL to a page that can display the purchased item, product or similar. ︎︎︎ imageUrl string The URL to an image of the order item.   description string The human readable description of the order item.   discountDescription string The human readable description of the possible discount. check quantity number The 4 decimal precision quantity of order items being purchased. check quantityUnit string The unit of the quantity, such as pcs, grams, or similar. This is used for your own book keeping. check unitPrice integer The price per unit of order item, including VAT.   discountPrice integer If the order item is purchased at a discounted price. This field should contain that price, including VAT. check vatPercent integer The percent value of the VAT multiplied by 100, so 25% becomes 2500. check amount integer The total amount including VAT to be paid for the specified quantity of this order item, in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 SEK and 5000 equals 50.00 SEK. check vatAmount integer The total amount of VAT to be paid for the specified quantity of this order item, in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 SEK and 5000 equals 50.00 SEK. check reference string A reference that identifies the order item. check name string The name of the order item. check type enum PRODUCT, SERVICE, SHIPPING_FEE, PAYMENT_FEE, DISCOUNT, VALUE_CODE or OTHER. The type of the order item. check class string The classification of the order item. Can be used for assigning the order item to a specific product category, such as MobilePhone. Note that class cannot contain spaces and must follow the regex pattern [\\w-]*. Swedbank Pay may use this field for statistics. ︎︎︎ itemUrl string The URL to a page that can display the purchased item, such as a product page ︎︎︎ imageUrl string The URL to an image of the order item. ︎︎︎ description string The human readable description of the order item. ︎︎︎ discountDescription string The human readable description of the possible discount. check quantity number The 4 decimal precision quantity of order items being purchased. check quantityUnit string The unit of the quantity, such as pcs, grams, or similar. check unitPrice integer The price per unit of order item, including VAT. ︎︎︎ discountPrice integer If the order item is purchased at a discounted price. This field should contain that price, including VAT. check vatPercent integer The percent value of the VAT multiplied by 100, so 25% becomes 2500. check amount integer The total amount including VAT to be paid for the specified quantity of this order item, in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 NOK and 5000 equals 50.00 NOK. check vatAmount integer The total amount of VAT to be paid for the specified quantity of this order item, in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 NOK and 5000 equals 50.00 NOK. Capture Response v3.1 If the capture request succeeds, this should be the response: Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.1 api-supported-versions: 3.1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 { \"paymentOrder\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d\", \"created\": \"2020-03-03T07:19:27.5636519Z\", \"updated\": \"2020-03-03T07:21:00.5605905Z\", \"operation\": \"Purchase\", \"status\": \"Paid\", \"currency\": \"SEK\", \"amount\": 1500, \"vatAmount\": 375, \"remainingCaptureAmount\": 0, // Only present after a partial capture \"remainingCancellationAmount\": 0, // Only present after a partial capture \"remainingReversalAmount\": 1500, \"description\": \"Test Purchase\", \"initiatingSystemUserAgent\": \"&lt;should be set by the system calling POST:/psp/paymentorders&gt;\", \"language\": \"sv-SE\", \"availableInstruments\": [ \"CreditCard\", \"Invoice-PayExFinancingSe\", \"Invoice-PayMonthlyInvoiceSe\", \"Swish\", \"CreditAccount\", \"Trustly\" ], \"implementation\": \"PaymentsOnly\", \"integration\": \"HostedView|Redirect\", \"instrumentMode\": false, \"guestMode\": true, \"orderItems\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/orderitems\" }, \"urls\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/urls\" }, \"payeeInfo\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/payeeInfo\" }, \"payer\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/payers\" }, \"history\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/history\" }, \"failed\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/failed\" }, \"aborted\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/aborted\" }, \"paid\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/paid\" }, \"cancelled\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/cancelled\" }, \"financialTransactions\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/financialtransactions\" }, \"failedAttempts\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/failedattempts\" }, \"postPurchaseFailedAttempts\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/postpurchasefailedattempts\" }, \"metadata\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/metadata\" } }, \"operations\": [ { \"href\": \"https://api.payex.com/psp/paymentorders/222a50ca-b268-4b32-16fa-08d6d3b73224/reversals\", \"rel\": \"reversal\", \"method\": \"POST\", \"contentType\": \"application/json\" }, ] } Show fields Hide fields Property Type Description paymentOrder string The relative URL of the payment order this capture transaction belongs to. id string The relative URL of the created capture transaction. created string The ISO-8601 date and time of when the transaction was created. updated string The ISO-8601 date and time of when the transaction was updated. operation string Determines the initial operation, defining the type of payment order created. status string Initialized, Paid, Failed, Reversed Cancelled, or Aborted. Indicates the payment order’s current status. currency string The currency of the payment order. amount integer The transaction amount (including VAT, if any) entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The amount displayed is the final amount the payer paid for their order, including any payment method specific discounts or fees. vatAmount integer The payment’s VAT (Value Added Tax) amount, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The vatAmount entered will not affect the amount shown on the payment page, which only shows the total amount. This field is used to specify how much of the total amount the VAT will be. Set to 0 (zero) if there is no VAT amount charged. remainingCaptureAmount integer The remaining authorized amount that is still possible to capture. remainingCancellationAmount integer The remaining authorized amount that is still possible to cancel. remainingReversalAmount integer The remaining captured amount that is still available for reversal. description string A textual description of the purchase. Maximum length is 40 characters. initiatingSystemUserAgent string The user agent of the HTTP client making the request, reflecting the value sent in the User-Agent header with the initial POST request which created the Payment Order. language string sv-SE, nb-NO, da-DK, en-US or fi-FI. availableInstruments string A list of payment methods available for this payment. implementation string The merchant’s Digital Payments implementation type. Enterprise or PaymentsOnly. We ask that you don’t build logic around this field’s response. It is mainly for information purposes, as the implementation types might be subject to name changes. If this should happen, updated information will be available in this table. integration string The merchant’s Digital Payments integration type. HostedView (Seamless View) or Redirect. This field will not be populated until the payer has opened the payment UI, and the client script has identified if Swedbank Pay or another URI is hosting the container with the payment iframe. We ask that you don’t build logic around this field’s response. It is mainly for information purposes. as the integration types might be subject to name changes, If this should happen, updated information will be available in this table. instrumentMode bool Set to true or false. Indicates if the payment is initialized with only one payment method available. guestMode bool Set to true or false. Indicates if the payer chose to pay as a guest or not. When using the Payments Only implementation, this is triggered by not including a payerReference in the original paymentOrder request. orderItems id The URL to the orderItems resource where information about the order items can be retrieved. urls id The URL to the urls resource where all URLs related to the payment order can be retrieved. payeeInfo id The URL to the payeeInfo resource where information related to the payee can be retrieved. payer id The URL to the payer resource where information about the payer can be retrieved. history id The URL to the history resource where information about the payment’s history can be retrieved. failed id The URL to the failed resource where information about the failed transactions can be retrieved. aborted id The URL to the aborted resource where information about the aborted transactions can be retrieved. paid id The URL to the paid resource where information about the paid transactions can be retrieved. cancelled id The URL to the cancelled resource where information about the cancelled transactions can be retrieved. financialTransactions id The URL to the financialTransactions resource where information about the financial transactions can be retrieved. failedAttempts id The URL to the failedAttempts resource where information about the failed attempts can be retrieved. postPurchaseFailedAttempts id The URL to the postPurchaseFailedAttempts resource where information about the failed capture, cancel or reversal attempts can be retrieved. metadata id The URL to the metadata resource where information about the metadata can be retrieved. operations array The array of operations that are possible to perform on the payment order in its current state. See Operations for details. Capture Sequence Diagram sequenceDiagram participant Merchant participant SwedbankPay as Swedbank Pay rect rgba(81,43,43,0.1) activate Merchant note left of Payer: Capture Merchant -&gt;&gt;+ SwedbankPay: rel:capture deactivate Merchant SwedbankPay --&gt;&gt;- Merchant: Capture status note right of Merchant: Capture here only if the purchased&lt;br/&gt;goods don't require shipping.&lt;br/&gt;If shipping is required, perform capture&lt;br/&gt;after the goods have shipped.&lt;br&gt;Should only be used for &lt;br&gt;Payment Methods that support &lt;br&gt;Authorizations. end",
    "tags": "",
    "url": "/checkout-v3/features/payment-operations/payment-order-capture/"
  },{
    "title": "Payment Orders",
    "text": "Payment Orders The SDK works in terms of Payment Orders as used in Digital Payments. Therefore, all features of payment orders are available in the SDK by using a suitable custom configuration. The rest of the page illustrates how to use certain Payment Order features with the SDK-provided Merchant Backend Configuration. Detailed descriptions of the features will not be repeated here; please refer to the Checkout documentation instead. URLs A Payment Order created for the SDK must have urls the same way a Payment Order to be used on a web page would. The SDK context places some requirement on these urls. Field SDK Requirements hostUrls Should match the value your Configuration returns in the webViewBaseURL of ViewPaymentOrderInfo. completeUrl No special requirements. However, the SDK will intercept the navigation, so completeUrl will not actually be opened in the SDK Web View. termsOfServiceUrl No special requirements. cancelUrl No special requirements. However, the SDK will intercept the navigation, so cancelUrl will not actually be opened in the SDK Web View. paymentUrl If opened in a browser, must eventually be delivered to the SDK, bringing the containing app to the foreground. See the Android and iOS specific documentation. callbackUrl No special requirements. This is a server-to-server affair. Merchant Backend Configuration The SDK-provided Merchant Backend Configuration allows creating a set of urls that fulfill the above when used with a backend implementing the Merchant Backend API. Android 1 2 3 4 5 6 7 // backendUrl is the the backendUrl of your MerchantBackendConfiguration val urls = PaymentOrderUrls( context = context, backendUrl = backendUrl callbackUrl = callbackUrl, termsOfServiceUrl = termsOfServiceUrl ) iOS 1 2 3 4 5 6 7 8 // On iOS, the `paymentUrl` has a nonnegligible chance of actually being shown in Safari, // so we want to localize it. This is why we need the language parameter here. let urls = SwedbankPaySDK.PaymentOrderUrls( configuration: configuration, language: language, callbackUrl: callbackUrl, termsOfServiceUrl: termsOfServiceUrl ) Order Items You may want to populate the orderItems field of the paymentOrder for e.g. printing invoices. The SDK offers facilities for working with orderItems, allowing you to discover the fields of an Order Item in your IDE. Please refer to the Checkout documentation and/or the class documentation for the meaning of the fields. On Android, OrderItem is a data class, so its instances are immutable, but you can easily create copies with modified fields. Android 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 val orderItem = OrderItem( reference = \"123abc\", name = \"Thing\", // ItemType is a enum, allowing you to discover the options in your IDE type = ItemType.PRODUCT, `class` = \"Things\", // Optional Order Item fields are optional in the kotlin OrderItem class as well. // The optional fields default to null, so you do not need to specify them if // you do not use them. itemUrl = null, quantity = 1, quantityUnit = \"pcs\", unitPrice = 1000, vatPercent = 2500 // 25%, amount = 1000, vatAmount = 200 ) // OrderItem is immutable, but easy to create partially modified copies of val otherItem = orderItem.copy( reference = \"456def\", name = \"Other Thing\" ) On iOS SwedbankPaySDK.OrderItem is a struct, allowing you to store and modify them like any other Swift values. iOS 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 var orderItem = SwedbankPaySDK.OrderItem( reference: \"123abc\", name: \"Thing\", // SwedbankPaySDK.ItemType is a enum, allowing you to discover the options in your IDE type: .Product, class: \"Things\", quantity: 1, quantityUnit: \"pcs\", unitPrice: 1000, vatPercent: 2500 // 25%, amount: 1000, vatAmount: 200 ) // a SwedbankPaySDK.OrderItem var is mutable like any var orderItem.reference = \"456def\" orderItem.name = \"Other Thing\"",
    "tags": "",
    "url": "/checkout-v3/modules-sdks/mobile-sdk/features/core/payment-orders/"
  },{
    "title": "Payment Request v3.1",
    "text": "The integration consists of three main steps. Creating the payment order, displaying the payment menu, and capturing the funds. In addition, there are other post-purchase options you need. We get to them later on. Create Payment Order When your customer has initiated a purchase, you need to create a payment order. Start by performing a POST request towards the paymentorder resource with payer information and a completeUrl. The productName field has been removed in v3.1, and you identify the paymentOrder version as v3.1 in the header instead. POST, PATCH, GET and PUT requests use this header: Content-Type: application/json;version=3.1 GET requests can also use this header: Accept: application/json;version=3.1 Valid versions are 3.1, 3.0 and 2.0. If you do not add a version, the request will default to 2.0. Using the productName and setting it to checkout3 will default to 3.0. To accompany the new version, we have also added a v3.1 post-purchase section, v3.1 callback, a new resource model for failedPostPurchaseAttempts and additions to the history resource model. Supported features for this integration are subscriptions (recur, one-click and unscheduled MIT), MOTO, instrument mode, split settlement (subsite) and the possibility to use your own logo. There is also a guest mode option for the payers who don’t wish to store their information. The way to trigger this is to not include the payerReference field in your paymentOrder request. If the payer field is included in your request, you can find the payerReference there. Sometimes you might need to abort purchases. An example could be if a payer does not complete the purchase within a reasonable timeframe. For those instances we have abort, which you can read about in the payment operations. You can only use abort if the payer has not completed an authorize or a sale. If the payer is performing an action at a 3rd party, like the MobilePay, Swish or Vipps apps, abort is unavailable. To avoid unnecessary calls, we recommend doing a GET on your paymentOrder to check if abort is an available operation before performing it. info To minimize the risk for a challenge request (Strong Customer Authentication – “SCA”) on card payments, it’s recommended that you add as much data as possible to the riskIndicator object in the request below. warning GDPR: GDPR sensitive data such as email, phone numbers and social security numbers must not be used directly in request fields such as payerReference. If it is necessary to use GDPR sensitive data, it must be hashed and then the hash can be used in requests towards Swedbank Pay. Payment Order Request Request Copy json to clipboard 1 2 3 4 POST /psp/paymentorders HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 { \"paymentorder\": { \"operation\": \"Purchase\", \"currency\": \"SEK\", \"amount\": 1500, \"vatAmount\": 375, \"description\": \"Test Purchase\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"sv-SE\", \"urls\": { \"hostUrls\": [ \"https://example.com\", \"https://example.net\" ], \"paymentUrl\": \"https://example.com/perform-payment\", //Seamless View only \"completeUrl\": \"https://example.com/payment-completed\", \"cancelUrl\": \"https://example.com/payment-cancelled\", //Redirect only \"callbackUrl\": \"https://api.example.com/payment-callback\", \"logoUrl\": \"https://example.com/logo.png\", \"termsOfServiceUrl\": \"https://example.com/termsandconditoons.pdf\" }, \"payeeInfo\": { \"payeeId\": \"5cabf558-5283-482f-b252-4d58e06f6f3b\", \"payeeReference\": \"AB832\", \"payeeName\": \"Merchant1\", \"orderReference\": \"or-123456\" } } } Show fields Hide fields Required Field Type Description check paymentOrder object The payment order object. check operation string Determines the initial operation, defining the type of payment order created. check currency string The currency of the payment. check amount integer The transaction amount (including VAT, if any) entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The amount displayed is the final amount the payer paid for their order, including any payment method specific discounts or fees. check vatAmount integer The payment’s VAT (Value Added Tax) amount, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The vatAmount entered will not affect the amount shown on the payment page, which only shows the total amount. This field is used to specify how much of the total amount the VAT will be. Set to 0 (zero) if there is no VAT amount charged. check description string The description of the payment order. check userAgent string The user agent of the payer. Should typically be set to the value of the User-Agent header sent by the payer’s web browser. check language string sv-SE, nb-NO, da-DK, en-US or fi-FI.   implementation string Indicates which implementation to use. check urls object The urls object, containing the URLs relevant for the payment order. check hostUrls array The array of valid host URLs.   paymentUrl string The paymentUrl represents the URL that Swedbank Pay will redirect back to when the view-operation needs to be loaded, to inspect and act on the current status of the payment, such as when the payer is redirected out of the Seamless View (the &lt;iframe&gt;) and sent back after completing the payment. paymentUrl is only used in Seamless Views and should point to the page of where the Payment Order Seamless View is hosted. If both cancelUrl and paymentUrl is sent, the paymentUrl will used. Trustly will only be available if the paymentUrl is provided while using Seamless View. When using Redirect, Trustly will appear regardless. check completeUrl string The URL that Swedbank Pay will redirect back to when the payer has completed their interactions with the payment. This does not indicate a successful payment, only that it has reached a final (complete) state. A GET request needs to be performed on the payment order to inspect it further. See completeUrl for details. check cancelUrl string The URL to redirect the payer to if the payment is cancelled, either by the payer or by the merchant trough an abort request of the payment or paymentorder. check callbackUrl string The URL that Swedbank Pay will perform an HTTP POST against every time a transaction is created on the payment order. See callback for details.   logoUrl string With permission and activation on your contract (if you are using Seamless View), sending in a logoUrl will replace the Swedbank Pay logo with the logo sent in. If you do not send in a logoUrl, then no logo and no text is shown. Without permission or activation on your contract, sending in a logoUrl has no effect. The logo must be a picture with maximum 50px height and 400px width. Requires HTTPS. Read more about this in Custom Logo .   termsOfServiceUrl string The URL to the terms of service document which the payer must accept in order to complete the payment. HTTPS is a requirement. check payeeInfo object The payeeInfo object, containing information about the payee (the recipient of the money). See payeeInfo for details. check payeeId string The ID of the payee, usually the merchant ID. check payeeReference string A unique reference from the merchant system. Set per operation to ensure an exactly-once delivery of a transactional operation. Length and content validation depends on whether the transaction.number or the payeeReference is sent to the acquirer. If Swedbank Pay handles the settlement, the transaction.number is sent and the payeeReference must be in the format of A-Za-z0-9 and string(30). If you handle the settlement, Swedbank Pay will send the payeeReference and it will be limited to the format of string(12). All characters must be digits. In Invoice Payments payeeReference is used as an invoice/receipt number, if the receiptReference is not defined.   payeeName string The name of the payee, usually the name of the merchant.   orderReference string(50) The order reference should reflect the order reference found in the merchant’s systems. Payment Order Response Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.1 api-supported-versions: 3.x/2.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 { \"paymentorder\": { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce\", \"created\": \"2020-06-22T10:56:56.2927632Z\", \"updated\": \"2020-06-22T10:56:56.4035291Z\", \"operation\": \"Purchase\", \"status\": \"Initialized\", \"currency\": \"SEK\", \"vatAmount\": 375, \"amount\": 1500, \"description\": \"Test Purchase\", \"initiatingSystemUserAgent\": \"swedbankpay-sdk-dotnet/3.0.1\", \"language\": \"sv-SE\", \"availableInstruments\": [ \"CreditCard\", \"Invoice-PayExFinancingSe\", \"Invoice-PayMonthlyInvoiceSe\", \"Swish\", \"CreditAccount\", \"Trustly\" ], \"implementation\": \"PaymentsOnly\", \"instrumentMode\": false, \"guestMode\": false, \"orderItems\": { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/orderitems\" }, \"urls\": { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/urls\" }, \"payeeInfo\": { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/payeeinfo\" }, \"payer\": { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/payers\" }, \"history\": { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/history\" }, \"failed\": { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/failed\" }, \"aborted\": { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/aborted\" }, \"paid\": { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/paid\" }, \"cancelled\": { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/cancelled\" }, \"reversed\": { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/reversed\" }, \"financialTransactions\": { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/financialtransactions\" }, \"failedAttempts\": { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/failedattempts\" }, \"postPurchaseFailedAttempts\": { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/failedattempts\" }, \"metadata\": { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/metadata\" } }, \"operations\": [ { \"method\": \"GET\", \"href\": \"https://ecom.externalintegration.payex.com/payment/menu/5a17c24e-d459-4567-bbad-aa0f17a76119?_tc_tid=30f2168171e142d38bcd4af2c3721959\", \"rel\": \"redirect-checkout\", \"contentType\": \"text/html\" }, { \"method\": \"GET\", \"href\": \"https://ecom.externalintegration.payex.com/payment/core/js/px.payment.client.js?token=5a17c24e-d459-4567-bbad-aa0f17a76119&amp;culture=nb-NO&amp;_tc_tid=30f2168171e142d38bcd4af2c3721959\", \"rel\": \"view-checkout\", \"contentType\": \"application/javascript\" }, { \"href\": \"https://api.payex.com/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce\", \"rel\":\"update-order\", \"method\":\"PATCH\", \"contentType\":\"application/json\" }, { \"href\": \"https://api.payex.com/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce\", \"rel\": \"abort\", \"method\": \"PATCH\", \"contentType\": \"application/json\" }, { \"href\": \"https://api.payex.com/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce\", \"rel\": \"abort-paymentattempt\", \"method\": \"PATCH\", \"contentType\": \"application/json\" } ] } Show fields Hide fields Field Type Description paymentOrder object The payment order object. id string The relative URL and unique identifier of the paymentorder resource . Please read about URL Usage to understand how this and other URLs should be used in your solution. created string The ISO-8601 date of when the payment order was created. updated string The ISO-8601 date of when the payment order was updated. operation string Purchase status string Indicates the payment order’s current status. Initialized is returned when the payment is created and still ongoing. The request example above has this status. Paid is returned when the payer has completed the payment successfully. See the Paid response. Failed is returned when a payment has failed. You will find an error message in the Failed response. Cancelled is returned when an authorized amount has been fully cancelled. See the Cancelled response. It will contain fields from both the cancelled description and paid section. Aborted is returned when the merchant has aborted the payment, or if the payer cancelled the payment in the redirect integration (on the redirect page). See the Aborted response. currency string The currency of the payment order. amount integer The transaction amount (including VAT, if any) entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The amount displayed is the final amount the payer paid for their order, including any payment method specific discounts or fees. vatAmount integer The payment’s VAT (Value Added Tax) amount, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The vatAmount entered will not affect the amount shown on the payment page, which only shows the total amount. This field is used to specify how much of the total amount the VAT will be. Set to 0 (zero) if there is no VAT amount charged. description string(40) A textual description of the purchase. Maximum length is 40 characters. initiatingSystemUserAgent string The user agent of the HTTP client making the request, reflecting the value sent in the User-Agent header with the initial POST request which created the Payment Order. language string sv-SE, nb-NO, da-DK, en-US or fi-FI. availableInstruments string A list of payment methods available for this payment. implementation string The merchant’s Digital Payments implementation type. Enterprise or PaymentsOnly. We ask that you don’t build logic around this field’s response. It is mainly for information purposes, as the implementation types might be subject to name changes. If this should happen, updated information will be available in this table. integration string The merchant’s Digital Payments integration type. HostedView (Seamless View) or Redirect. This field will not be populated until the payer has opened the payment UI, and the client script has identified if Swedbank Pay or another URI is hosting the container with the payment iframe. We ask that you don’t build logic around this field’s response. It is mainly for information purposes. as the integration types might be subject to name changes, If this should happen, updated information will be available in this table. instrumentMode bool Set to true or false. Indicates if the payment is initialized with Instrument Mode (only one payment method available). guestMode bool Set to true or false. Indicates if the payer chose to pay as a guest or not. When using the Payments Only implementation, this is triggered by not including a payerReference in the original paymentOrder request. orderItems id The URL to the orderItems resource where information about the order items can be retrieved. urls id The URL to the urls resource where all URLs related to the payment order can be retrieved. payeeInfo id The URL to the payeeInfo resource where information related to the payee can be retrieved. payer id The URL to the payer resource where information about the payer can be retrieved. history id The URL to the history resource where information about the payment’s history can be retrieved. failed id The URL to the failed resource where information about the failed transactions can be retrieved. aborted id The URL to the aborted resource where information about the aborted transactions can be retrieved. paid id The URL to the paid resource where information about the paid transactions can be retrieved. cancelled id The URL to the cancelled resource where information about the cancelled transactions can be retrieved. reversed id The URL to the reversed resource where information about the reversed transactions can be retrieved. financialTransactions id The URL to the financialTransactions resource where information about the financial transactions can be retrieved. failedAttempts id The URL to the failedAttempts resource where information about the failed attempts can be retrieved. postPurchaseFailedAttempts id The URL to the postPurchaseFailedAttempts resource where information about the failed capture, cancel or reversal attempts can be retrieved. metadata id The URL to the metadata resource where information about the metadata can be retrieved. operations array The array of operations that are possible to perform on the payment order in its current state. Adding To Your Request The request shown above includes what you need to create the payment, but you can add more sections if you need or want. Examples can be to include order items by adding a separate node, or provide risk indicators and information about the payer to make the payment process as frictionless as possible. Read more about possible additions to the request in our feature section. Back to Introduction Display Payment UI",
    "tags": "",
    "url": "/checkout-v3/get-started/payment-request-3-1/"
  },{
    "title": "Payment Request",
    "text": "The integration consists of three main steps. Creating the payment order, displaying the payment menu, and capturing the funds. In addition, there are other post-purchase options you need. We get to them later on. Create Payment Order When your customer has initiated a purchase, you need to create a payment order. Start by performing a POST request towards the paymentorder resource with payer information and a completeUrl. We have added productName to the payment order request in this integration. You can find it in the paymentorder field. This is no longer required, but is still an option to use v3.0 of Digital Payments. To use productName, simply put Checkout3 as the value in that field in the request. You can also specify version by adding it in the header instead. If you use this option, you can leave out the productName field. POST, PATCH and PUT requests use this header: Content-Type: application/json;version=3.0 GET requests use this header: Accept: application/json;version=3.0 When productName is set to checkout3, digitalProducts will be set to false by default. Supported features for this integration are subscriptions (recur, one-click and unscheduled MIT), MOTO, instrument mode, split settlement (subsite) and the possibility to use your own logo. There is also a guest mode option for the payers who don’t wish to store their information. The way to trigger this is to not include the payerReference field in your paymentOrder request. If the payer field is included in your request, you can find the payerReference there. Sometimes you might need to abort purchases. An example could be if a payer does not complete the purchase within a reasonable timeframe. For those instances we have abort, which you can read about in the payment operations. You can only use abort if the payer has not completed an authorize or a sale. If the payer is performing an action at a 3rd party, like the MobilePay, Swish or Vipps apps, abort is unavailable. info To minimize the risk for a challenge request (Strong Customer Authentication – “SCA”) on card payments, it’s recommended that you add as much data as possible to the riskIndicator object in the request below. warning GDPR: GDPR sensitive data such as email, phone numbers and social security numbers must not be used directly in request fields such as payerReference. If it is necessary to use GDPR sensitive data, it must be hashed and then the hash can be used in requests towards Swedbank Pay. Payment Order Request Request Copy json to clipboard 1 2 3 4 POST /psp/paymentorders HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.0 // Version optional 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 { \"paymentorder\": { \"operation\": \"Purchase\", \"currency\": \"SEK\", \"amount\": 1500, \"vatAmount\": 375, \"description\": \"Test Purchase\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"sv-SE\", \"productName\": \"Checkout3\", // Removed in 3.1, can be excluded in 3.0 if version is added in header \"urls\": { \"hostUrls\": [ \"https://example.com\", \"https://example.net\" ], \"paymentUrl\": \"https://example.com/perform-payment\", //Seamless View only \"completeUrl\": \"https://example.com/payment-completed\", \"cancelUrl\": \"https://example.com/payment-cancelled\", //Redirect only \"callbackUrl\": \"https://api.example.com/payment-callback\", \"logoUrl\": \"https://example.com/logo.png\" }, \"payeeInfo\": { \"payeeId\": \"5cabf558-5283-482f-b252-4d58e06f6f3b\", \"payeeReference\": \"AB832\", \"payeeName\": \"Merchant1\", \"orderReference\": \"or-123456\" } } } Show fields Hide fields Required Field Type Description check paymentOrder object The payment order object. check operation string Determines the initial operation, defining the type of payment order created. check currency string The currency of the payment. check amount integer The transaction amount (including VAT, if any) entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The amount displayed is the final amount the payer paid for their order, including any payment method specific discounts or fees. check vatAmount integer The payment’s VAT (Value Added Tax) amount, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The vatAmount entered will not affect the amount shown on the payment page, which only shows the total amount. This field is used to specify how much of the total amount the VAT will be. Set to 0 (zero) if there is no VAT amount charged. check description string The description of the payment order. check userAgent string The user agent of the payer. Should typically be set to the value of the User-Agent header sent by the payer’s web browser. check language string sv-SE, nb-NO, da-DK, en-US or fi-FI. check productName string Used to tag the payment as Digital Payments v3.0. Mandatory for Digital Payments v3.0, either in this field or the header, as you won’t get the operations in the response without submitting this field.   implementation string Indicates which implementation to use. check urls object The urls object, containing the URLs relevant for the payment order. check hostUrls array The array of valid host URLs.   paymentUrl string The paymentUrl represents the URL that Swedbank Pay will redirect back to when the view-operation needs to be loaded, to inspect and act on the current status of the payment, such as when the payer is redirected out of the Seamless View (the &lt;iframe&gt;) and sent back after completing the payment. paymentUrl is only used in Seamless Views and should point to the page of where the Payment Order Seamless View is hosted. If both cancelUrl and paymentUrl is sent, the paymentUrl will used. Trustly will only be available if the paymentUrl is provided while using Seamless View. When using Redirect, Trustly will appear regardless. check completeUrl string The URL that Swedbank Pay will redirect back to when the payer has completed their interactions with the payment. This does not indicate a successful payment, only that it has reached a final (complete) state. A GET request needs to be performed on the payment order to inspect it further. See completeUrl for details. check cancelUrl string The URL to redirect the payer to if the payment is cancelled, either by the payer or by the merchant trough an abort request of the payment or paymentorder. check callbackUrl string The URL that Swedbank Pay will perform an HTTP POST against every time a transaction is created on the payment order. See callback for details.   logoUrl string With permission and activation on your contract (if you are using Seamless View), sending in a logoUrl will replace the Swedbank Pay logo with the logo sent in. If you do not send in a logoUrl, then no logo and no text is shown. Without permission or activation on your contract, sending in a logoUrl has no effect. The logo must be a picture with maximum 50px height and 400px width. Requires HTTPS. Read more about this in Custom Logo . check orderItems array The array of items being purchased with the order. Note that authorization orderItems will not be printed on invoices, so lines meant for print must be added in the Capture request. The authorization orderItems will, however, be used in the Merchant Portal when captures or reversals are performed, and might be shown other places later. It is required to use this field to be able to send Capture orderItems. Capture requests should only contain items meant to be captured from the order. check reference string A reference that identifies the order item. check name string The name of the order item. check type enum PRODUCT, SERVICE, SHIPPING_FEE, DISCOUNT, VALUE_CODE, or OTHER. The type of the order item. check class string The classification of the order item. Can be used for assigning the order item to a specific product category, such as MobilePhone. Note that class cannot contain spaces and must follow the regex pattern [\\w-]*. Swedbank Pay may use this field for statistics.   itemUrl string The URL to a page that can display the purchased item, such as a product page   imageUrl string The URL to an image of the order item.   description string The human readable description of the order item.   discountDescription string The human readable description of the possible discount. check quantity number The 4 decimal precision quantity of order items being purchased. check quantityUnit string The unit of the quantity, such as pcs, grams, or similar. check unitPrice integer The price per unit of order item, including VAT.   discountPrice integer If the order item is purchased at a discounted price. This field should contain that price, including VAT. check vatPercent integer The percent value of the VAT multiplied by 100, so 25% becomes 2500. check amount integer The transaction amount (including VAT, if any) entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The amount displayed is the final amount the payer paid for their order, including any payment method specific discounts or fees. check vatAmount integer The payment’s VAT (Value Added Tax) amount, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The vatAmount entered will not affect the amount shown on the payment page, which only shows the total amount. This field is used to specify how much of the total amount the VAT will be. Set to 0 (zero) if there is no VAT amount charged. check payeeInfo object The payeeInfo object, containing information about the payee (the recipient of the money). See payeeInfo for details. check payeeId string The ID of the payee, usually the merchant ID. check payeeReference string A unique reference from the merchant system. Set per operation to ensure an exactly-once delivery of a transactional operation. Length and content validation depends on whether the transaction.number or the payeeReference is sent to the acquirer. If Swedbank Pay handles the settlement, the transaction.number is sent and the payeeReference must be in the format of A-Za-z0-9 and string(30). If you handle the settlement, Swedbank Pay will send the payeeReference and it will be limited to the format of string(12). All characters must be digits. In Invoice Payments payeeReference is used as an invoice/receipt number, if the receiptReference is not defined.   payeeName string The name of the payee, usually the name of the merchant.   orderReference string(50) The order reference should reflect the order reference found in the merchant’s systems. Payment Order Response Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.0 api-supported-versions: 3.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 { \"paymentorder\": { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce\", \"created\": \"2020-06-22T10:56:56.2927632Z\", \"updated\": \"2020-06-22T10:56:56.4035291Z\", \"operation\": \"Purchase\", \"status\": \"Initialized\", \"currency\": \"SEK\", \"vatAmount\": 375, \"amount\": 1500, \"description\": \"Test Purchase\", \"initiatingSystemUserAgent\": \"swedbankpay-sdk-dotnet/3.0.1\", \"language\": \"sv-SE\", \"availableInstruments\": [ \"CreditCard\", \"Invoice-PayExFinancingSe\", \"Invoice-PayMonthlyInvoiceSe\", \"Swish\", \"CreditAccount\", \"Trustly\" ], \"implementation\": \"PaymentsOnly\", \"instrumentMode\": false, \"guestMode\": false, \"payer\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/payers\" }, \"orderItems\": { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/orderitems\" }, \"history\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/history\" }, \"failed\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/failed\" }, \"aborted\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/aborted\" }, \"paid\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/paid\" }, \"cancelled\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/cancelled\" }, \"financialTransactions\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/financialtransactions\" }, \"failedAttempts\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/failedattempts\" }, \"metadata\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/metadata\" } }, \"operations\": [ { \"method\": \"GET\", \"href\": \"https://ecom.externalintegration.payex.com/payment/menu/5a17c24e-d459-4567-bbad-aa0f17a76119?_tc_tid=30f2168171e142d38bcd4af2c3721959\", \"rel\": \"redirect-checkout\", \"contentType\": \"text/html\" }, { \"method\": \"GET\", \"href\": \"https://ecom.externalintegration.payex.com/payment/core/js/px.payment.client.js?token=5a17c24e-d459-4567-bbad-aa0f17a76119&amp;culture=nb-NO&amp;_tc_tid=30f2168171e142d38bcd4af2c3721959\", \"rel\": \"view-checkout\", \"contentType\": \"application/javascript\" }, { \"href\": \"https://api.payex.com/psp/paymentorders/222a50ca-b268-4b32-16fa-08d6d3b73224\", \"rel\":\"update-order\", \"method\":\"PATCH\", \"contentType\":\"application/json\" }, { \"href\": \"https://api.payex.com/psp/paymentorders/222a50ca-b268-4b32-16fa-08d6d3b73224\", \"rel\": \"abort\", \"method\": \"PATCH\", \"contentType\": \"application/json\" }, { \"href\": \"https://api.payex.com/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce\", \"rel\": \"abort-paymentattempt\", \"method\": \"PATCH\", \"contentType\": \"application/json\" } ] } Show fields Hide fields Field Type Description paymentOrder object The payment order object. id string The relative URL and unique identifier of the paymentorder resource . Please read about URL Usage to understand how this and other URLs should be used in your solution. created string The ISO-8601 date of when the payment order was created. updated string The ISO-8601 date of when the payment order was updated. operation string Purchase status string Indicates the payment order’s current status. Initialized is returned when the payment is created and still ongoing. The request example above has this status. Paid is returned when the payer has completed the payment successfully. See the Paid response. Failed is returned when a payment has failed. You will find an error message in the Failed response. Cancelled is returned when an authorized amount has been fully cancelled. See the Cancelled response. It will contain fields from both the cancelled description and paid section. Aborted is returned when the merchant has aborted the payment, or if the payer cancelled the payment in the redirect integration (on the redirect page). See the Aborted response. currency string The currency of the payment order. amount integer The transaction amount (including VAT, if any) entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The amount displayed is the final amount the payer paid for their order, including any payment method specific discounts or fees. vatAmount integer The payment’s VAT (Value Added Tax) amount, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The vatAmount entered will not affect the amount shown on the payment page, which only shows the total amount. This field is used to specify how much of the total amount the VAT will be. Set to 0 (zero) if there is no VAT amount charged. description string(40) A textual description of the purchase. Maximum length is 40 characters. initiatingSystemUserAgent string The user agent of the HTTP client making the request, reflecting the value sent in the User-Agent header with the initial POST request which created the Payment Order. language string sv-SE, nb-NO, da-DK, en-US or fi-FI. availableInstruments string A list of methods available for this payment. implementation string The merchant’s Digital Payments implementation type. Enterprise or PaymentsOnly. We ask that you don’t build logic around this field’s response. It is mainly for information purposes, as the implementation types might be subject to name changes. If this should happen, updated information will be available in this table. integration string The merchant’s Digital Payments integration type. HostedView (Seamless View) or Redirect. This field will not be populated until the payer has opened the payment UI, and the client script has identified if Swedbank Pay or another URI is hosting the container with the payment iframe. We ask that you don’t build logic around this field’s response. It is mainly for information purposes. as the integration types might be subject to name changes, If this should happen, updated information will be available in this table. instrumentMode bool Set to true or false. Indicates if the payment is initialized with Instrument Mode (only one payment method available). guestMode bool Set to true or false. Indicates if the payer chose to pay as a guest or not. When using the Payments Only implementation, this is triggered by not including a payerReference in the original paymentOrder request. payer id The URL to the payer resource where information about the payer can be retrieved. orderItems id The URL to the orderItems resource where information about the order items can be retrieved. history id The URL to the history resource where information about the payment’s history can be retrieved. failed id The URL to the failed resource where information about the failed transactions can be retrieved. aborted id The URL to the aborted resource where information about the aborted transactions can be retrieved. paid id The URL to the paid resource where information about the paid transactions can be retrieved. cancelled id The URL to the cancelled resource where information about the cancelled transactions can be retrieved. financialTransactions id The URL to the financialTransactions resource where information about the financial transactions can be retrieved. failedAttempts id The URL to the failedAttempts resource where information about the failed attempts can be retrieved. metadata id The URL to the metadata resource where information about the metadata can be retrieved. operations array The array of operations that are possible to perform on the payment order in its current state. Adding To Your Request The request shown above includes what you need to create the payment, but you can add more sections if you need or want. Examples can be to include order items by adding a separate node, or provide risk indicators and information about the payer to make the payment process as frictionless as possible. Read more about possible additions to the request in our feature section. Back to Introduction Display Payment UI",
    "tags": "",
    "url": "/checkout-v3/get-started/payment-request/"
  },{
    "title": "PaymentResponse",
    "text": "A payment is approved if the Result attribute of the /PaymentResponse/Response element is Success. For all unapproved payments the same attribute is Failure and the actual response code is found in the receipt data if wanted. Depending on why a payment is unapproved the response may not contain a receipt. However, make sure to always make a payment terminal receipt available if a card has been used. The payment response carries both a merchant receipt and a customer receipt. The customer receipt should always be used. The merchant receipt is used if the receipt needs to be signed by the customer. The receiptdata is a Base64 encoded JSON structure. Sample Payment Response for approved payment with physical payment card 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;SaleToPOIResponse&gt; &lt;MessageHeader MessageClass=\"Service\" MessageCategory=\"Payment\" MessageType=\"Response\" ServiceID=\"3\" SaleID=\"1\" POIID=\"A-POIID\"/&gt; &lt;PaymentResponse&gt; &lt;Response Result=\"Success\"/&gt; &lt;SaleData&gt; &lt;SaleTransactionID TransactionID=\"1703372\" TimeStamp=\"2023-08-24T17:03:37+02:00\"/&gt; &lt;/SaleData&gt; &lt;POIData&gt; &lt;POITransactionID TransactionID=\"8778880185\" TimeStamp=\"2023-08-24T15:04:00.498Z\"/&gt; &lt;/POIData&gt; &lt;PaymentResult PaymentType=\"Normal\"&gt; &lt;PaymentInstrumentData PaymentInstrumentType=\"Card\"&gt; &lt;CardData PaymentBrand=\"01,Mastercard Debit\" MaskedPAN=\"516815******9659\" EntryMode=\"Contactless\"&gt; &lt;PaymentToken TokenRequestedType=\"Customer\" TokenValue=\"6FD955C23A48A041D881003CDBF836DC59F89CE0ECA8288129696CDF9BB8B8DD67F233\"/&gt; &lt;/CardData&gt; &lt;/PaymentInstrumentData&gt; &lt;AmountsResp Currency=\"SEK\" AuthorizedAmount=\"56\" CashBackAmount=\"0.00\"/&gt; &lt;PaymentAcquirerData MerchantID=\"10020001\" AcquirerPOIID=\"877888\"&gt; &lt;ApprovalCode&gt;611506&lt;/ApprovalCode&gt; &lt;/PaymentAcquirerData&gt; &lt;/PaymentResult&gt; &lt;PaymentReceipt DocumentQualifier=\"CashierReceipt\"&gt; &lt;OutputContent OutputFormat=\"Text\"&gt; &lt;OutputText&gt;eyJNZXJjaGFudCI6eyJNYW5kYXRvcnkiOnsiQWNxdWlyZXIiOnsiQ2FyZEFjY2VwdG9yTnVtYmVyIjoiMTAwMjAwMDEiLCJUZXJtaW5hbElEIjoiODc3ODg4In0sIkNhcmRBY2NlcHRvciI6eyJBZGRyZXNzMSI6IkjDpGxsZXNrw6VyYW4gMjkiLCJCYW5rQWdlbnROYW1lIjoiYmFua3ktYmFuayIsIk5hbWUiOiJUZXN0IHNob3AiLCJPcmdhbmlzYXRpb25OdW1iZXIiOiI1NTY1NjcxLTYxNjUiLCJQb3N0WmlwQ29kZSI6IjUwNTAiLCJUb3duQ2l0eSI6Im1lcmNoYW50LUJhc2UyNC1DaXR5In0sIkNhcmREZXRhaWxzIjp7IkFwcGxpY2F0aW9uSWRlbnRpZmllciI6IkEwMDAwMDAwMDQxMDEwIiwiQ2FyZFNjaGVtZU5hbWUiOnsiQXBwbGljYXRpb25MYWJlbCI6Ik1hc3RlcmNhcmQifSwiUHJpbWFyeUFjY291bnROdW1iZXIiOiI1MTY4MTUqKioqKio5NjU5IiwiVGVybWluYWxWZXJpZmljYXRpb25SZXN1bHQiOiIwMDAwMDA4MDAxIiwiVHJhbnNhY3Rpb25TdGF0dXNJbmZvcm1hdGlvbiI6IjAwMDAifSwiT3V0Y29tZSI6eyJBcHByb3ZhbENvZGUiOiI2MTE1MDYiLCJBdXRob3Jpc2F0aW9uUmVzcG9uZGVyIjoiMyIsIkF1dGhvcmlzYXRpb25SZXNwb25zZUNvZGUiOiIwMCIsIkRlYml0U3RhdHVzIjoiMDAifSwiUGF5bWVudCI6eyJBdXRob3Jpc2F0aW9uQ2hhbm5lbCI6IjEiLCJDYXJkaG9sZGVyVmVyaWZpY2F0aW9uTWV0aG9kIjoiLyIsIkN1cnJlbmN5IjoiU0VLIiwiRmluYW5jaWFsSW5zdGl0dXRpb24iOiJTV0UiLCJQYXltZW50QW1vdW50IjoiNTYsMDAiLCJSZWNlaXB0TnVtYmVyIjoiODc3ODg4MDE4NSIsIlNpZ25hdHVyZUJsb2NrIjpmYWxzZSwiVG90YWxBbW91bnQiOiI1NiwwMCIsIlRyYW5zYWN0aW9uU291cmNlIjoiSyIsIlRyYW5zYWN0aW9uVHlwZSI6IjAwIn0sIlRpbWVTdGFtcCI6eyJEYXRlT2ZQYXltZW50IjoiMjAyMy0wOC0yNCIsIlRpbWVPZlBheW1lbnQiOiIxNzowNiJ9fSwiT3B0aW9uYWwiOnsiQ2FyZEFjY2VwdG9yIjp7IkNvdW50cnlOYW1lIjoiNzUyIiwiUGhvbmVOdW1iZXIiOiIrNDY4NDA1MTAwMCJ9LCJDYXJkRGV0YWlscyI6eyJDYXJkU2NoZW1lTmFtZSI6eyJBcHBsaWNhdGlvbkxhYmVsIjoiTWFzdGVyY2FyZCJ9fSwiUGF5bWVudCI6eyJSZWZlcmVuY2UiOiIxNzAzMzcyIn0sIlJlY2VpcHRTdHJpbmciOlsiVGVzdCBzaG9wIiwiSMOkbGxlc2vDpXJhbiAyOSIsIjUwNTAgbWVyY2hhbnQtQmFzZTI0LUNpdHkiLCIyMDIzLTA4LTI0IDE3OjA2IiwiIiwiTWFzdGVyY2FyZCIsIkNvbnRhY3RsZXNzIiwiNTE2ODE1KioqKioqOTY1OSIsIiIsIksvMSAzIDAwIFNXRSIsIkFJRDogQTAwMDAwMDAwNDEwMTAiLCJUVlI6IDAwMDAwMDgwMDEiLCJUU0k6IDAwMDAiLCJSUk46IDg3Nzg4ODAxODUiLCJBdXRoIGNvZGU6IDYxMTUwNiIsIkFSQzogMDAiLCIiLCJLw5ZQOiAgICAgICAgIDU2LDAwIFNFSyIsIkdvZGvDpG5kIiwiIiwiIiwiIiwiRsO2cnPDpGxqYXJlbnMga3ZpdHRvIl19fX0=&lt;/OutputText&gt; &lt;/OutputContent&gt; &lt;/PaymentReceipt&gt; &lt;PaymentReceipt DocumentQualifier=\"CustomerReceipt\"&gt; &lt;OutputContent OutputFormat=\"Text\"&gt; &lt;OutputText&gt;eyJDYXJkaG9sZGVyIjp7Ik1hbmRhdG9yeSI6eyJBY3F1aXJlciI6eyJDYXJkQWNjZXB0b3JOdW1iZXIiOiIxMDAyMDAwMSIsIlRlcm1pbmFsSUQiOiI4Nzc4ODgifSwiQ2FyZEFjY2VwdG9yIjp7IkFkZHJlc3MxIjoiSMOkbGxlc2vDpXJhbiAyOSIsIkJhbmtBZ2VudE5hbWUiOiJiYW5reS1iYW5rIiwiTmFtZSI6IlRlc3Qgc2hvcCIsIk9yZ2FuaXNhdGlvbk51bWJlciI6IjU1NjU2NzEtNjE2NSIsIlBvc3RaaXBDb2RlIjoiNTA1MCIsIlRvd25DaXR5IjoibWVyY2hhbnQtQmFzZTI0LUNpdHkifSwiQ2FyZERldGFpbHMiOnsiQXBwbGljYXRpb25JZGVudGlmaWVyIjoiQTAwMDAwMDAwNDEwMTAiLCJDYXJkU2NoZW1lTmFtZSI6eyJBcHBsaWNhdGlvbkxhYmVsIjoiTWFzdGVyY2FyZCJ9LCJQcmltYXJ5QWNjb3VudE51bWJlciI6IioqKioqKioqKioqKjk2NTkiLCJUZXJtaW5hbFZlcmlmaWNhdGlvblJlc3VsdCI6IjAwMDAwMDgwMDEiLCJUcmFuc2FjdGlvblN0YXR1c0luZm9ybWF0aW9uIjoiMDAwMCJ9LCJPdXRjb21lIjp7IkFwcHJvdmFsQ29kZSI6IjYxMTUwNiIsIkF1dGhvcmlzYXRpb25SZXNwb25kZXIiOiIzIiwiQXV0aG9yaXNhdGlvblJlc3BvbnNlQ29kZSI6IjAwIiwiRGViaXRTdGF0dXMiOiIwMCJ9LCJQYXltZW50Ijp7IkF1dGhvcmlzYXRpb25DaGFubmVsIjoiMSIsIkNhcmRob2xkZXJWZXJpZmljYXRpb25NZXRob2QiOiIvIiwiQ3VycmVuY3kiOiJTRUsiLCJGaW5hbmNpYWxJbnN0aXR1dGlvbiI6IlNXRSIsIlBheW1lbnRBbW91bnQiOiI1NiwwMCIsIlJlY2VpcHROdW1iZXIiOiI4Nzc4ODgwMTg1IiwiU2lnbmF0dXJlQmxvY2siOmZhbHNlLCJUb3RhbEFtb3VudCI6IjU2LDAwIiwiVHJhbnNhY3Rpb25Tb3VyY2UiOiJLIiwiVHJhbnNhY3Rpb25UeXBlIjoiMDAifSwiVGltZVN0YW1wIjp7IkRhdGVPZlBheW1lbnQiOiIyMDIzLTA4LTI0IiwiVGltZU9mUGF5bWVudCI6IjE3OjA2In19LCJPcHRpb25hbCI6eyJDYXJkQWNjZXB0b3IiOnsiQ291bnRyeU5hbWUiOiI3NTIiLCJQaG9uZU51bWJlciI6Iis0Njg0MDUxMDAwIn0sIkNhcmREZXRhaWxzIjp7IkNhcmRTY2hlbWVOYW1lIjp7IkFwcGxpY2F0aW9uTGFiZWwiOiJNYXN0ZXJjYXJkIn19LCJQYXltZW50Ijp7IlJlZmVyZW5jZSI6IjE3MDMzNzIifSwiUmVjZWlwdFN0cmluZyI6WyJUZXN0IHNob3AiLCJIw6RsbGVza8OlcmFuIDI5IiwiNTA1MCBtZXJjaGFudC1CYXNlMjQtQ2l0eSIsIjIwMjMtMDgtMjQgMTc6MDYiLCIiLCJNYXN0ZXJjYXJkIiwiQ29udGFjdGxlc3MiLCIqKioqKioqKioqKio5NjU5IiwiIiwiSy8xIDMgMDAgU1dFIiwiQUlEOiBBMDAwMDAwMDA0MTAxMCIsIlRWUjogMDAwMDAwODAwMSIsIlRTSTogMDAwMCIsIlJSTjogODc3ODg4MDE4NSIsIkF1dGggY29kZTogNjExNTA2IiwiQVJDOiAwMCIsIiIsIkvDllA6ICAgICAgICAgNTYsMDAgU0VLIiwiR29ka8OkbmQiLCIiLCIiLCIiLCJLb3J0aW5uZWhhdmFyZW5zIGt2aXR0byJdfX19&lt;/OutputText&gt; &lt;/OutputContent&gt; &lt;/PaymentReceipt&gt; &lt;/PaymentResponse&gt; &lt;/SaleToPOIResponse&gt; PaymentResponse in Detail Name Lev Attributes Description PaymentResponse 1     Response 2 Result Success or Failure.     ErrorCondition Only present if Failure: Common values are Busy- wait and try again, Refusal- Request not accepted. AdditionalResponse 3   Only present if Failure and should be a describing text. SaleData 2     SaleTransactionID 3 TransactionID ID of transaction provided by the sale system and may be seen in PosPay reports. Information will not be past to clearing and is not seen in Merchant Portal.     TimeStamp Timestamp set by sale system for when the transaction is started. Note that the format is local time. POIData 2     POITransactionID 3 TransactionID ID of transaction set by the terminal. This is seen in PosPay reports as well as on Merchant Portal. The complete element is needed if the transaction needs to be reversed.     TimeStamp Timestamp set by terminal when the transaction is started. Note that the format is UTC. PaymentResult 2 PaymentType Values: Normal for purchase and Refund for refund. PaymentInstrumentData 3 PaymentInstrumentType Values: Card for any transaction made by the terminal with a card or any consumer device. Mobile for an alternative payment instrument made via the terminal. CardData 4 PaymentBrand Comma separated string where the first part is card type. 01-payment card. 02-Combined payment and Loyalty, 03-Loyalty, 04-Neither. May be used instead of 03 for controlling the dialog in the terminal. Second part is the product name.     MaskedPAN       EntryMode ICC, Contactless, Magstripe. PaymentToken 5 TokenRequestedType Customer.     TokenValue An irreversible 70 byte hash computed locally in the terminal. A specific card will get the same CNA in all SwedbankPay PAX terminals. AmountsResp 3 Currency Needs to be configured in the terminal. Available DKK, EUR, NOK, SEK.     AuthorizedAmount Total amount for transaction.     CashBackAmount Amount included in AuthorizedAmount.     TipAmount Tip included in AuthorizedAmount. PaymentAquirerData 3 MerchantID Id of merchant set by Swedbank Pay.     AquirerPOIID A terminal id within Swedbank Pay. ApprovalCode 4   Authorization approval code. Only present if Result is Success. PaymentReceipt 2 DocumentQualifier CashierReceipt- Merchant copy. CustomerReceipt- receipt information for customer. Note! This element appears twice. OutputContent 3 OutputFormat Only value Text. OutputText 4   A Base64 encoded JSON structure with information for the receipt. PaymentReceipt in Detail 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 { \"Cardholder\": { \"Mandatory\": { \"Acquirer\": { \"CardAcceptorNumber\": \"10020001\", \"TerminalID\": \"877888\" }, \"CardAcceptor\": { \"Address1\": \"Hälleskåran 29\", \"BankAgentName\": \"banky-bank\", \"Name\": \"Test shop\", \"OrganisationNumber\": \"5565671-6165\", \"PostZipCode\": \"5050\", \"TownCity\": \"merchant-Base24-City\" }, \"CardDetails\": { \"ApplicationIdentifier\": \"A0000000041010\", \"CardSchemeName\": { \"ApplicationLabel\": \"Mastercard\" }, \"PrimaryAccountNumber\": \"************9659\", \"TerminalVerificationResult\": \"0000008001\", \"TransactionStatusInformation\": \"0000\" }, \"Outcome\": { \"ApprovalCode\": \"611506\", \"AuthorisationResponder\": \"3\", \"AuthorisationResponseCode\": \"00\", \"DebitStatus\": \"00\" }, \"Payment\": { \"AuthorisationChannel\": \"1\", \"CardholderVerificationMethod\": \"/\", \"Currency\": \"SEK\", \"FinancialInstitution\": \"SWE\", \"PaymentAmount\": \"56,00\", \"ReceiptNumber\": \"8778880185\", \"SignatureBlock\": false, \"TotalAmount\": \"56,00\", \"TransactionSource\": \"K\", \"TransactionType\": \"00\" }, \"TimeStamp\": { \"DateOfPayment\": \"2023-08-24\", \"TimeOfPayment\": \"17:06\" } }, \"Optional\": { \"CardAcceptor\": { \"CountryName\": \"752\", \"PhoneNumber\": \"+4684051000\" }, \"CardDetails\": { \"CardSchemeName\": { \"ApplicationLabel\": \"Mastercard\" } }, \"Payment\": { \"Reference\": \"1703372\" }, \"ReceiptString\": [ \"Test shop\", \"Hälleskåran 29\", \"5050 merchant-Base24-City\", \"2023-08-24 17:06\", \"\", \"Mastercard\", \"Contactless\", \"************9659\", \"\", \"K/1 3 00 SWE\", \"AID: A0000000041010\", \"TVR: 0000008001\", \"TSI: 0000\", \"RRN: 8778880185\", \"Auth code: 611506\", \"ARC: 00\", \"\", \"KÖP: 56,00 SEK\", \"Godkänd\", \"\", \"\", \"\", \"Kortinnehavarens kvitto\" ] } } } For CVM method Signature default integration If the full integration is made and the login was made with SaleCapabilities including CashierInput, the following sequence diagram shows how a purchase that is apporoved with a card holder signature would look like. sequenceDiagram POS-&gt;&gt;+Terminal: Http POST PaymentRequest Terminal-&gt;&gt;POS: Http POST DisplayRequest POS-&gt;&gt;Terminal: rsp 204 - no content Terminal-&gt;&gt;POS: Http POST DisplayRequest Note over Terminal: \"Please wait\" POS-&gt;&gt;Terminal: rsp 204 - no content Terminal-&gt;&gt;POS: Http POST DisplayRequest Note over Terminal: \"Authorizing\" POS-&gt;&gt;Terminal: rsp 204 - no content Terminal-&gt;&gt;POS: Http POST PrintRequest Note over Terminal: Merchant receipt POS-&gt;&gt;Terminal: rsp 204 - no content Terminal-&gt;&gt;POS: Http POST InputRequest Confirmation Note over Terminal: Is signature OK? alt Note right of POS: Approve signature POS-&gt;&gt;Terminal: rsp 200 InputResponse True Terminal-&gt;&gt;POS: Http POST DisplayRequest Note over Terminal: \"Approved\" POS-&gt;&gt;Terminal: rsp 204 - no content else Note right of POS: Disapprove signature POS-&gt;&gt;Terminal: rsp 200 InputResponse False Terminal-&gt;&gt;POS: Http POST DisplayRequest Note over Terminal: \"Disapproved\" POS-&gt;&gt;Terminal: rsp 204 - no content end Terminal-&gt;&gt;-POS: rsp 200 PaymentResponse Success/Failure Terminal-&gt;&gt;POS: Http POST DisplayRequest Note over Terminal: \"Welcome\" POS-&gt;&gt;Terminal: rsp 204 - no content For CVM method Signature Client Only mode If the Client-Only integration is made or rather, if login was made without SaleCapabilites CashierInput, it is essential to check the receipt data Json for {\"Merchant\":{\"Mandatory\":{\"Payment\":\"SignatureBlock\":true\"}}}. If SignatureBlock is true, the merchant receipt must be printed and signed by the customer. The following sequence diagram shows how a purchase that is apporoved with a card holder signature would look like when running Client-Only mode. sequenceDiagram POS-&gt;&gt;+Terminal: Http POST PaymentRequest Terminal-&gt;&gt;-POS: Http Response 200 PaymentResponse Note over Terminal: Merchant receipt data&lt;br&gt;JSON SignatureBlock is true Note over POS: Print merchant receipt Note over POS: Ask customer to sign&lt;br&gt;verify ID of customer alt Approve Note over POS: Print Customer receipt else Don't approve Note right of POS: Disapprove signature POS-&gt;&gt;Terminal: Http POST ReversalRequest Terminal-&gt;&gt;POS: Http Response 200 Note over Terminal: includes new customer receipt Note over POS: Print customer receipt end Note over Terminal: Ready for new request Back to PaymentRequest Reverse successful transaction",
    "tags": "",
    "url": "/pax-terminal/Nexo-Retailer/Quick-guide/payment-response/"
  },{
    "title": "PaymentUrl",
    "text": "Payment Url For our Seamless Views, the field called paymentUrl will be used when the payer is redirected out of the Seamless View (the iframe). The payer is redirected out of frame when selecting payment methods which trigger SCA. This includes 3-D Secure card payments, installment account, invoice, MobilePay, monthly invoice payments, Trustly and Vipps. The URL should represent the page of where the Payment Order Seamless View was hosted originally, such as the checkout page, shopping cart page, or similar. Basically, paymentUrl should be set to the same URL as that of the page where the JavaScript for the Seamless View was added to in order to initiate the payment process. info Please note that the paymentUrl must be able to invoke the same JavaScript URL from the same Payment Order as the one that initiated the payment process originally, so it should include some sort of state identifier in the URL. The state identifier is the ID of the order, shopping cart or similar that has the URL of the Payment stored. With paymentUrl in place, the retry process becomes much more convenient for both the integration and the payer. paymentUrl is used by the Seamless View flow and must be used for WebView-based app implementations. Some payment methods only work when owning the full browser page (no use of &lt;iframe&gt;), this will be solved by doing a full browser (top frame) redirect out of the Seamless View. 3-D Secure requires this, for example. For mobile flows, some payment methods work best when app-to-app switching is enabled and handled automatically (Swish, Vipps etc). To solve this, it is important that the third party app or site understand where to redirect the payer back to after the flow on their end is completed. info Refresh your payment menu after the payer’s return!: The paymentUrl is the URL Swedbank Pay will provide to the third party for handling the redirect back to your site or app. When the payer returns from the paymentUrl either in an app or a web page, it is vital that you refresh the Seamless View payment menu so the payment flow can be completed. Failing to do so could lead to issues. For in-app it is important that you either implement the onPaymentCompleted event or let the Seamless View redirect to the completeUrl before intercepting the WebView. If you intercept the WebView when the payer’s device is redirected to the paymentUrl it can lead to issues. If you want to handle payment errors in your own code, you should also subscribe to other events provided by the Seamless View JavaScript and shut down the Seamless View if any of these events occur. Events to subscribe to for full control over the payment flow are can be found in Seamless View Events. When implementing the Seamless View flow into a WebView in your mobile app, you should use a custom scheme or Universal Link in the paymentUrl for handling automatic switching between your app and the payment app on the mobile device.",
    "tags": "",
    "url": "/checkout-v3/features/technical-reference/payment-url/"
  },{
    "title": "Make Payment Including Order Number",
    "text": "To include an order number in a payment the TransactionSetup must be used. The following example shows how to make a payment for 120 SEK for order number 123456789. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 using System.Text.Json; class PaxImplementation : ISwpTrmCallbackInterface { public ISwpTrmIf_1 Pax = {get; internal set; } = null; . . . public async Task CreatePayment() { var pr = await Pax.PaymentAsync(new TransactionSetup() { AcquirerData = JsonSerializer.Serialize(new { purchaseOrderNumber = \"123456789\"}), Amount = (decimal)120 }; }",
    "tags": "",
    "url": "/pax-terminal/NET/tutorial/payment-with-orderid/"
  },{
    "title": "Payment",
    "text": "Payment During a login session you may make several payments. There are synchronous and asynchronous versions for starting a payment but there are two function signatures for both versions. A normal payment may be started just supplying one parameter, amount. To that call it is actually three parameters, amount, cashback and currency, but they are default. The cashback is included in the amount and is zero if not. The default currency is the currency of the culture provided in the call to the Create method. It is also possible to start a payment supplying a TransactionSetup object which opens up for other variants, such as fuel, refund of APM transaction, or just supplying a transaction id the may be tracked in reports. Regardless how the payment is done the result is always deliverd as a PaymentRequestResult. warning Heads up!: Make sure to always print the terminal receipt when it is included in the result. Using PaymentAsync and just the amount. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 class PaxImplementation : ISwpTrmCallbackInterface { public ISwpTrmIf_1 PAX = {get; internal set; } = null; . . . // PAX is an instance of PAXTrmImp_1 private async Task SomewhereInYourCode(decimal total) { PaymentRequestResult result = await PAX.PaymentAsync(total); if (result.ResponseResult == NexoRequestResult.Success) { // Payment was successful } else { switch ((ErrorConditionEnumeration)Enum.Parse(typeof(ErrorConditionEnumeration), result.ErrorCondition)) { case ErrorConditionEnumeration.Refusal: // Transaction was refused. break; case ErrorConditionEnumeration.NotAllowed: // Login is required. Call open. break; case ErrorCondition.Busy: // A new payment was made too tight with a previous. Wait awhile // and try again. Reapeatedly up to totally three seconds. break; } } if (result.ReceiptBlob != string.NullOrEmpty) { SaveAndPrintCardReceipt(reslut.ReceiptBlob); } } warning Heads up!: Make sure to check ErrorCondition if NexoRequestResult.Failure. NotAllowed means most likely that a login is required and Busy that you need to retry. After a payment response the terminal is busy for approximately three seconds. Synchronous version of Payment When using the synchronous the result is received in the callback SyncRequestResult. Since all synchronous calls returns the result in the same callback, the type of result has to be decided by checking the object type name. Using synchronous Payment and just the amount. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 class PaxImplementation : ISwpTrmCallbackInterface { public ISwpTrmIf_1 PAX = {get; internal set; } = null; . . . private void SomewhereInYourCode(decimal total) { PAX.Payment(total); // result arrives in SyncRequestResult callback } . . . public void SyncRequestResult(object result) { switch (Enum.Parse(typeof(RequestResultTypes), result.GetType().Name)) { case RequestResultTypes.PaymentRequestResult: PaymentRequestResult pr = result as PaymentRequestResult; if (pr.ResponseResult == NexoRequestResult.Success) { // Payment was successful } else { switch ((ErrorConditionEnumeration)Enum.Parse(typeof(ErrorConditionEnumeration), pr.ErrorCondition)) { case ErrorConditionEnumeration.Refusal: // Transaction was refused. break; case ErrorConditionEnumeration.NotAllowed: // Login is required. Call open. break; case ErrorCondition.Busy: // A new payment was made too tight with a previous. Wait awhile // and try again. Reapeatedly up to totally three seconds. break; } } if (pr.ReceiptBlob != string.NullOrEmpty) { SaveAndPrintCardReceipt(pr.ReceiptBlob); } break; } } Back",
    "tags": "",
    "url": "/pax-terminal/NET/tutorial/quick-guide/payment/"
  },{
    "title": "Payment",
    "text": "Method Signatures Synchronous versions void Payment(decimal totalamount,decimal cashback=0, string currency=””) void Payment(TransactionSetup setup) Asynchronous versions async Task&lt;PaymentRequestResult&gt; PaymentAsync(decimal totalamount,decimal cashback=0, string currency=””) async Task&lt;PaymentRequestResult&gt; PaymentAsync(TransactionSetup setup) Description The PaymentAsync should be called when the amount is known. It opens all available readers and waits for a payment instrument. If Alternative Payment Methods are activated it will open for that too. Use parameter of type TransactionSetup if a reference need to be set to track the transaction or if fuel functionality is implemented and product codes and other details need to be sent to the terminal. Parameters decimal totalamount Includes possible cashback amount. decimal cashback Part of total amount that will be handed to customer. string currency Currency code as a string representing ISO-4217 3 letter code. Has to be available in the terminal setup. The default is the currency of the UICulture specified in call to Create method”. Alternatively     TransactionSetup setup Object holding several parameters to be used for transaction. Default values for all members. Only populate what is relevant. Example calling async function with a TransactionSetup object as parameter 1 2 3 4 5 6 7 8 var r = await Pax?.PaymentAsync(new TransactionSetup() { Amount = total, CashBack = cashBack, TransactionID = IdForThisTransaction }); if (r.ResponseResult == NexoResponseResult.Success) { textBox1.AppendText(\"Approved\" + Environment.NewLine); } else { textBox1.AppendText(\"Not Approved\" + Environment.NewLine); } Returns A PaymentRequestResult A PayementRequestResult.ResponseResult of value Success means transaction approved. If ResponseResult is Failure there is an ErrorCondition. If ErrorCondition is Busy, wait awhile and try again. Make sure to always print the customer’s receipt when available. For an aborted PaymentAsync there might not be one available. info Note: The SDK will automatically make three retries when the terminal responds busy. PaymentRequestResult class returned for any payment. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 namespace SwpTrmLib { public class PaymentRequestResult { List&lt;string&gt; AllowedProducts { get; } decimal Amount { get; } string APMReference { get; set; } string APMType { get; set; } string ApprovalCode { get; } string CNA { get; } JObject CustomerReceiptData { get; set; } string ErrorCondition { get; set; } string FormattedReceipt { get; set; } bool IsCVMSignature { get; } JObject MerchantReceiptData { get; set; } XElement OriginalTransaction { get; set; } string PAN { get; } PaymentRequestResultTypes PaymentType { get; } string ProductName { get; } string ReceiptBlob { get; } string ReceiptBlobNoHeader { get; } string ReceiptNumber { get; } string Reference { get; } string ResponseContent { get; set; } NexoResponseResult ResponseResult { get; set; } string ResponseText { get; set; } JObject SettlementData { get; } string TimeStamp { get; } decimal TipAmount { get; } string UICulture { get; set; } } } Name Description AllowedProducts a list of strings with product codes. Only used for a fuel card solution. Amount The authorized amount. APMReference A reference to the APM (Alternative Payment Method) transaction. If present, the reference must be printed on the receipt. Preferably as a bar code or QR code. It is needed for refund of the transaction. APMType Name of APM that was chosen. ApprovalCode Approval code for the card authorisation. CNA Card Number Alias - a one way hash of the card number. Always the same for a specific card number. May be used for loyalty and digital receipts or such to identify and store a card. CustomerReceiptData Json object as returned from terminal, containing receipt data. Prefere using the ReceiptBlob. ErrorCondition Is valid if ResponseResult is Failure and describes the reason for failure. FormattedReceipt comma separated strings with receipt lines that may be used. IsCVMSignature Indicates whether the receipt need customer signing or not. MerchantReceiptData Json object as returned from terminal, containing receipt data. Prefere using the ReceiptBlob. OriginalTransaction Identifier to for the transaction to be used if reversal must be made. PAN Masked card number. PaymentType Indicates if result regards a payment, refund. ProductName Card Product Name. ReceiptBlob A string with a well formatted receipt. ReceiptBlobNoHeader A string with a well formatted receipt excluding header information that is usually printed by the sale system. ReceiptNumber An identifier of the transaction set by the terminal and that may track the transaction in other central systems. ReferenceNumber An identifier of the transaction that may be set by the sale system using the TransactionSetup ResponseContent The complete message as returned from the terminal. ResponseResult Success - approved transaction. Failure - Refused transaction ResponseText May describes the reason of a ResponseResult Failure. SettlementData Only used if host system is using SPDH protocol. (Not used) TimeStamp TimeStamp of the transaction warning Client Only Mode: If Login was made without SaleCapabilites CashierInput, the cashier receipt json object indicates if a receipt need to be signed by customer. Make sure to check if IsCVMSignature is true, then customer needs to sign the receipt. ResponseContent - The Complete nexo Response Message ResponseContent contains the complete nexo response message from the terminal and looks as follows. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;SaleToPOIResponse&gt; &lt;MessageHeader MessageClass=\"Service\" MessageCategory=\"Payment\" MessageType=\"Response\" ServiceID=\"3\" SaleID=\"1\" POIID=\"A-POIID\"/&gt; &lt;PaymentResponse&gt; &lt;Response Result=\"Success\"/&gt; &lt;SaleData&gt; &lt;SaleTransactionID TransactionID=\"0839247\" TimeStamp=\"2023-08-23T08:39:24+02:00\"/&gt; &lt;/SaleData&gt; &lt;POIData&gt; &lt;POITransactionID TransactionID=\"8778880003\" TimeStamp=\"2023-08-23T06:39:26.382Z\"/&gt; &lt;/POIData&gt; &lt;PaymentResult PaymentType=\"Normal\"&gt; &lt;PaymentInstrumentData PaymentInstrumentType=\"Card\"&gt; &lt;CardData PaymentBrand=\"01,Mastercard Debit\" MaskedPAN=\"516815******9659\" EntryMode=\"Contactless\"&gt; &lt;PaymentToken TokenRequestedType=\"Customer\" TokenValue=\"6FD955C23A48A041D881003CDBF836DC59F89CE0ECA8288129696CDF9BB8B8DD67F233\"/&gt; &lt;/CardData&gt; &lt;/PaymentInstrumentData&gt; &lt;AmountsResp Currency=\"SEK\" AuthorizedAmount=\"125\" CashBackAmount=\"0.00\"/&gt; &lt;PaymentAcquirerData MerchantID=\"10020001\" AcquirerPOIID=\"877888\"&gt; &lt;ApprovalCode&gt;902428&lt;/ApprovalCode&gt; &lt;/PaymentAcquirerData&gt; &lt;/PaymentResult&gt; &lt;PaymentReceipt DocumentQualifier=\"CashierReceipt\"&gt; &lt;OutputContent OutputFormat=\"Text\"&gt; &lt;OutputText&gt;eyJNZXJjaGFudCI6eyJNYW5kYXRvcnkiOnsiQWNxdWlyZXIiOnsiQ2FyZEFjY2VwdG9yTnVtYmVyIjoiMTAwMjAwMDEiLCJUZXJtaW5hbElEIjoiODc3ODg4In0sIkNhcmRBY2NlcHRvciI6eyJBZGRyZXNzMSI6IkjDpGxsZXNrw6VyYW4gMjkiLCJCYW5rQWdlbnROYW1lIjoiYmFua3ktYmFuayIsIk5hbWUiOiJUZXN0IHNob3AiLCJPcmdhbmlzYXRpb25OdW1iZXIiOiI1NTY1NjcxLTYxNjUiLCJQb3N0WmlwQ29kZSI6IjUwNTAiLCJUb3duQ2l0eSI6Im1lcmNoYW50LUJhc2UyNC1DaXR5In0sIkNhcmREZXRhaWxzIjp7IkFwcGxpY2F0aW9uSWRlbnRpZmllciI6IkEwMDAwMDAwMDQxMDEwIiwiQ2FyZFNjaGVtZU5hbWUiOnsiQXBwbGljYXRpb25MYWJlbCI6Ik1hc3RlcmNhcmQifSwiUHJpbWFyeUFjY291bnROdW1iZXIiOiI1MTY4MTUqKioqKio5NjU5IiwiVGVybWluYWxWZXJpZmljYXRpb25SZXN1bHQiOiIwMDAwMDA4MDAxIiwiVHJhbnNhY3Rpb25TdGF0dXNJbmZvcm1hdGlvbiI6IjAwMDAifSwiT3V0Y29tZSI6eyJBcHByb3ZhbENvZGUiOiI5MDI0MjgiLCJBdXRob3Jpc2F0aW9uUmVzcG9uZGVyIjoiMyIsIkF1dGhvcmlzYXRpb25SZXNwb25zZUNvZGUiOiIwMCIsIkRlYml0U3RhdHVzIjoiMDAifSwiUGF5bWVudCI6eyJBdXRob3Jpc2F0aW9uQ2hhbm5lbCI6IjEiLCJDYXJkaG9sZGVyVmVyaWZpY2F0aW9uTWV0aG9kIjoiLyIsIkN1cnJlbmN5IjoiU0VLIiwiRmluYW5jaWFsSW5zdGl0dXRpb24iOiJTV0UiLCJQYXltZW50QW1vdW50IjoiMTI1LDAwIiwiUmVjZWlwdE51bWJlciI6Ijg3Nzg4ODAwMDMiLCJTaWduYXR1cmVCbG9jayI6ZmFsc2UsIlRvdGFsQW1vdW50IjoiMTI1LDAwIiwiVHJhbnNhY3Rpb25Tb3VyY2UiOiJLIiwiVHJhbnNhY3Rpb25UeXBlIjoiMDAifSwiVGltZVN0YW1wIjp7IkRhdGVPZlBheW1lbnQiOiIyMDIzLTA4LTIzIiwiVGltZU9mUGF5bWVudCI6IjA4OjM5In19LCJPcHRpb25hbCI6eyJDYXJkQWNjZXB0b3IiOnsiQ291bnRyeU5hbWUiOiI3NTIiLCJQaG9uZU51bWJlciI6Iis0Njg0MDUxMDAwIn0sIkNhcmREZXRhaWxzIjp7IkNhcmRTY2hlbWVOYW1lIjp7IkFwcGxpY2F0aW9uTGFiZWwiOiJNYXN0ZXJjYXJkIn19LCJQYXltZW50Ijp7IlJlZmVyZW5jZSI6IjA4MzkyNDcifSwiUmVjZWlwdFN0cmluZyI6WyJUZXN0IHNob3AiLCJIw6RsbGVza8OlcmFuIDI5IiwiNTA1MCBtZXJjaGFudC1CYXNlMjQtQ2l0eSIsIjIwMjMtMDgtMjMgMDg6MzkiLCIiLCJNYXN0ZXJjYXJkIiwiQ29udGFjdGxlc3MiLCI1MTY4MTUqKioqKio5NjU5IiwiIiwiSy8xIDMgMDAgU1dFIiwiQUlEOiBBMDAwMDAwMDA0MTAxMCIsIlRWUjogMDAwMDAwODAwMSIsIlRTSTogMDAwMCIsIlJSTjogODc3ODg4MDAwMyIsIkF1dGggY29kZTogOTAyNDI4IiwiQVJDOiAwMCIsIiIsIkvDllA6ICAgICAgICAxMjUsMDAgU0VLIiwiR29ka8OkbmQiLCIiLCIiLCIiLCJGw7Zyc8OkbGphcmVucyBrdml0dG8iXX19fQ==&lt;/OutputText&gt; &lt;/OutputContent&gt; &lt;/PaymentReceipt&gt; &lt;PaymentReceipt DocumentQualifier=\"CustomerReceipt\"&gt; &lt;OutputContent OutputFormat=\"Text\"&gt; &lt;OutputText&gt;eyJDYXJkaG9sZGVyIjp7Ik1hbmRhdG9yeSI6eyJBY3F1aXJlciI6eyJDYXJkQWNjZXB0b3JOdW1iZXIiOiIxMDAyMDAwMSIsIlRlcm1pbmFsSUQiOiI4Nzc4ODgifSwiQ2FyZEFjY2VwdG9yIjp7IkFkZHJlc3MxIjoiSMOkbGxlc2vDpXJhbiAyOSIsIkJhbmtBZ2VudE5hbWUiOiJiYW5reS1iYW5rIiwiTmFtZSI6IlRlc3Qgc2hvcCIsIk9yZ2FuaXNhdGlvbk51bWJlciI6IjU1NjU2NzEtNjE2NSIsIlBvc3RaaXBDb2RlIjoiNTA1MCIsIlRvd25DaXR5IjoibWVyY2hhbnQtQmFzZTI0LUNpdHkifSwiQ2FyZERldGFpbHMiOnsiQXBwbGljYXRpb25JZGVudGlmaWVyIjoiQTAwMDAwMDAwNDEwMTAiLCJDYXJkU2NoZW1lTmFtZSI6eyJBcHBsaWNhdGlvbkxhYmVsIjoiTWFzdGVyY2FyZCJ9LCJQcmltYXJ5QWNjb3VudE51bWJlciI6IioqKioqKioqKioqKjk2NTkiLCJUZXJtaW5hbFZlcmlmaWNhdGlvblJlc3VsdCI6IjAwMDAwMDgwMDEiLCJUcmFuc2FjdGlvblN0YXR1c0luZm9ybWF0aW9uIjoiMDAwMCJ9LCJPdXRjb21lIjp7IkFwcHJvdmFsQ29kZSI6IjkwMjQyOCIsIkF1dGhvcmlzYXRpb25SZXNwb25kZXIiOiIzIiwiQXV0aG9yaXNhdGlvblJlc3BvbnNlQ29kZSI6IjAwIiwiRGViaXRTdGF0dXMiOiIwMCJ9LCJQYXltZW50Ijp7IkF1dGhvcmlzYXRpb25DaGFubmVsIjoiMSIsIkNhcmRob2xkZXJWZXJpZmljYXRpb25NZXRob2QiOiIvIiwiQ3VycmVuY3kiOiJTRUsiLCJGaW5hbmNpYWxJbnN0aXR1dGlvbiI6IlNXRSIsIlBheW1lbnRBbW91bnQiOiIxMjUsMDAiLCJSZWNlaXB0TnVtYmVyIjoiODc3ODg4MDAwMyIsIlNpZ25hdHVyZUJsb2NrIjpmYWxzZSwiVG90YWxBbW91bnQiOiIxMjUsMDAiLCJUcmFuc2FjdGlvblNvdXJjZSI6IksiLCJUcmFuc2FjdGlvblR5cGUiOiIwMCJ9LCJUaW1lU3RhbXAiOnsiRGF0ZU9mUGF5bWVudCI6IjIwMjMtMDgtMjMiLCJUaW1lT2ZQYXltZW50IjoiMDg6MzkifX0sIk9wdGlvbmFsIjp7IkNhcmRBY2NlcHRvciI6eyJDb3VudHJ5TmFtZSI6Ijc1MiIsIlBob25lTnVtYmVyIjoiKzQ2ODQwNTEwMDAifSwiQ2FyZERldGFpbHMiOnsiQ2FyZFNjaGVtZU5hbWUiOnsiQXBwbGljYXRpb25MYWJlbCI6Ik1hc3RlcmNhcmQifX0sIlBheW1lbnQiOnsiUmVmZXJlbmNlIjoiMDgzOTI0NyJ9LCJSZWNlaXB0U3RyaW5nIjpbIlRlc3Qgc2hvcCIsIkjDpGxsZXNrw6VyYW4gMjkiLCI1MDUwIG1lcmNoYW50LUJhc2UyNC1DaXR5IiwiMjAyMy0wOC0yMyAwODozOSIsIiIsIk1hc3RlcmNhcmQiLCJDb250YWN0bGVzcyIsIioqKioqKioqKioqKjk2NTkiLCIiLCJLLzEgMyAwMCBTV0UiLCJBSUQ6IEEwMDAwMDAwMDQxMDEwIiwiVFZSOiAwMDAwMDA4MDAxIiwiVFNJOiAwMDAwIiwiUlJOOiA4Nzc4ODgwMDAzIiwiQXV0aCBjb2RlOiA5MDI0MjgiLCJBUkM6IDAwIiwiIiwiS8OWUDogICAgICAgIDEyNSwwMCBTRUsiLCJHb2Rrw6RuZCIsIiIsIiIsIiIsIktvcnRpbm5laGF2YXJlbnMga3ZpdHRvIl19fX0=&lt;/OutputText&gt; &lt;/OutputContent&gt; &lt;/PaymentReceipt&gt; &lt;/PaymentResponse&gt; &lt;/SaleToPOIResponse&gt; CustomerReceiptData - Json object The following is a sample of the CustomerReceiptData member of the result. This is the content of the Base64 encoded CustomerReceipt in ResponseContent. info Note: Use the ReceiptBlob of the result rather than the ReceiptString of the JSON. They will eventually be the same in later versions of the SDK. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 { \"Cardholder\": { \"Mandatory\": { \"Acquirer\": { \"CardAcceptorNumber\": \"10020001\", \"TerminalID\": \"877888\" }, \"CardAcceptor\": { \"Address1\": \"Hälleskåran 29\", \"BankAgentName\": \"banky-bank\", \"Name\": \"Test shop\", \"OrganisationNumber\": \"5565671-6165\", \"PostZipCode\": \"5050\", \"TownCity\": \"merchant-Base24-City\" }, \"CardDetails\": { \"ApplicationIdentifier\": \"A0000000041010\", \"CardSchemeName\": { \"ApplicationLabel\": \"Mastercard\" }, \"PrimaryAccountNumber\": \"************5828\", \"TerminalVerificationResult\": \"0000008001\", \"TransactionStatusInformation\": \"0000\" }, \"Outcome\": { \"ApprovalCode\": \"708376\", \"AuthorisationResponder\": \"3\", \"AuthorisationResponseCode\": \"00\", \"DebitStatus\": \"00\" }, \"Payment\": { \"AuthorisationChannel\": \"1\", \"CardholderVerificationMethod\": \"/\", \"Currency\": \"SEK\", \"FinancialInstitution\": \"SWE\", \"PaymentAmount\": \"25,00\", \"ReceiptNumber\": \"8778880180\", \"SignatureBlock\": false, \"TotalAmount\": \"25,00\", \"TransactionSource\": \"K\", \"TransactionType\": \"00\" }, \"TimeStamp\": { \"DateOfPayment\": \"2023-08-22\", \"TimeOfPayment\": \"14:45\" } }, \"Optional\": { \"CardAcceptor\": { \"CountryName\": \"752\", \"PhoneNumber\": \"+4684051000\" }, \"CardDetails\": { \"CardSchemeName\": { \"ApplicationLabel\": \"Mastercard\" } }, \"Payment\": { \"Reference\": \"1445280\" }, \"ReceiptString\": [ \"Test shop\", \"Hälleskåran 29\", \"5050 merchant-Base24-City\", \"2023-08-22 14:45\", \"\", \"Mastercard\", \"Contactless\", \"************5828\", \"\", \"K/1 3 00 SWE\", \"AID: A0000000041010\", \"TVR: 0000008001\", \"TSI: 0000\", \"RRN: 8778880180\", \"Auth code: 708376\", \"ARC: 00\", \"\", \"KÖP: 25,00 SEK\", \"Godkänd\", \"\", \"\", \"\", \"Kortinnehavarens kvitto\" ] } } } FromattedRececipt - array of lines The following shows the content of the FormattedReceipt array of the same result as above. 1 [{\"Text\":\"Test shop \"},{\"Text\":\"Hälleskåran 29 \"},{\"Text\":\"5050 merchant-Base24-City\"},{\"Text\":\"Org nr: 5565671-6165 \"},{\"Text\":\" \"},{\"Text\":\"Butiksnr.: 10020001\"},{\"Text\":\"Termid: 877888\"},{\"Text\":\"2023-08-23 08:39\"},{\"Text\":\" \"},{\"Text\":\" KÖP \"},{\"Text\":\" \"},{\"Text\":\"SEK 125,00\"},{\"Text\":\"Total: 125,00\"},{\"Text\":\" \"},{\"Text\":\"************9659 \"},{\"Text\":\"Mastercard \"},{\"Text\":\"Kontaktlös \"},{\"Text\":\" \"},{\"Text\":\" \"},{\"Text\":\"K/1 3 00 902428 \"},{\"Text\":\" \"},{\"Text\":\"Ref.nr: 8778880003\"},{\"Text\":\"AID: A0000000041010\"},{\"Text\":\"TVR: 0000008001\"},{\"Text\":\"TSI: 0000\"},{\"Text\":\" \"},{\"Text\":\" SPARA KVITTOT \"},{\"Text\":\" KUNDENS EX. \"} ReceiptBlob - Fast forward to well formatted approved receipt information 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 Test shop Hälleskåran 29 5050 merchant-Base24-City Org nr: 5565671-6165 Butiksnr.: 10020001 2023-12-06 08:39 KÖP 125,00SEK ************9659 Mastercard Kontaktlös K/1 3 00 902428 Ref.nr: 8778880003 AID: A0000000041010 TVR: 0000008001 SPARA KVITTOT KUNDENS EX. ReceiptBlobNoHeader - ReceiptBlob but no header 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Butiksnr.: 10020001 2023-12-06 08:39 KÖP 125,00SEK ************9659 Mastercard Kontaktlös K/1 3 00 902428 Ref.nr: 8778880003 AID: A0000000041010 TVR: 0000008001 SPARA KVITTOT KUNDENS EX.",
    "tags": "",
    "url": "/pax-terminal/NET/SwpTrmLib/Methods/essential/paymentasync/"
  },{
    "title": "",
    "text": "PaymentRequestResult class returned for any payment. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 namespace SwpTrmLib { public class PaymentRequestResult { List&lt;string&gt; AllowedProducts { get; } decimal Amount { get; } string APMReference { get; set; } string APMType { get; set; } string ApprovalCode { get; } string CNA { get; } JObject CustomerReceiptData { get; set; } string ErrorCondition { get; set; } string FormattedReceipt { get; set; } bool IsCVMSignature { get; } JObject MerchantReceiptData { get; set; } XElement OriginalTransaction { get; set; } string PAN { get; } PaymentRequestResultTypes PaymentType { get; } string ProductName { get; } string ReceiptBlob { get; } string ReceiptBlobNoHeader { get; } string ReceiptNumber { get; } string Reference { get; } string ResponseContent { get; set; } NexoResponseResult ResponseResult { get; set; } string ResponseText { get; set; } JObject SettlementData { get; } string TimeStamp { get; } decimal TipAmount { get; } string UICulture { get; set; } } } Name Description AllowedProducts a list of strings with product codes. Only used for a fuel card solution. Amount The authorized amount. APMReference A reference to the APM (Alternative Payment Method) transaction. If present, the reference must be printed on the receipt. Preferably as a bar code or QR code. It is needed for refund of the transaction. APMType Name of APM that was chosen. ApprovalCode Approval code for the card authorisation. CNA Card Number Alias - a one way hash of the card number. Always the same for a specific card number. May be used for loyalty and digital receipts or such to identify and store a card. CustomerReceiptData Json object as returned from terminal, containing receipt data. Prefere using the ReceiptBlob. ErrorCondition Is valid if ResponseResult is Failure and describes the reason for failure. FormattedReceipt comma separated strings with receipt lines that may be used. IsCVMSignature Indicates whether the receipt need customer signing or not. MerchantReceiptData Json object as returned from terminal, containing receipt data. Prefere using the ReceiptBlob. OriginalTransaction Identifier to for the transaction to be used if reversal must be made. PAN Masked card number. PaymentType Indicates if result regards a payment, refund. ProductName Card Product Name. ReceiptBlob A string with a well formatted receipt. ReceiptBlobNoHeader A string with a well formatted receipt excluding header information that is usually printed by the sale system. ReceiptNumber An identifier of the transaction set by the terminal and that may track the transaction in other central systems. ReferenceNumber An identifier of the transaction that may be set by the sale system using the TransactionSetup ResponseContent The complete message as returned from the terminal. ResponseResult Success - approved transaction. Failure - Refused transaction ResponseText May describes the reason of a ResponseResult Failure. SettlementData Only used if host system is using SPDH protocol. (Not used) TimeStamp TimeStamp of the transaction",
    "tags": "",
    "url": "/pax-terminal/NET/includes/paymentrequestresult/"
  },{
    "title": "Payout",
    "text": "warning This feature is only available for merchants who have a specific agreement with Swedbank Pay. Introduction At the moment, our payout offering consists of Trustly Payout only, but this may be expanding going forward. There are two alternatives for implementing Trustly Payout. Select Account and Register Account. Both alternatives consist of two parts, a setup and a server-to-server call which actually triggers the payout. The setup procedures of the two options differ somewhat, so we will describe them separately. The actual payout procedure is the same, and will be described as one. Select Account Select Account should be used for all consumers who will need to pick their payout account. The initial setup handles the UI part where the payer chooses their bank account. This endpoint will return a token that can be used to represent that bank account for that payer. The second part is, as mentioned before, a server-to-server endpoint where the actual payout is triggered. This lets you reuse the token multiple times if that is desired. Select Account Setup The initial setup can be done at an earlier time than the actual payout. The payer initiates the payout process on your site. You will have to initiate a PaymentOrder towards Swedbank Pay to start the payout process. It is important to set “operation=Verify”, generateUnscheduledToken=true and restrictedToPayoutInstruments=true. The response will include an operation with a rel:redirect-checkout or a rel:view-checkout. This is where you need to redirect the payer, or display in your UI, to let them choose their bank account. Redirect payer’s browser to redirect-paymentmenu or display the rel:view-checkout. The Swedbank Pay payment UI will be loaded in Payout mode. The only option for the payer is to choose Trustly, as this is the only available payout alternative to date. The payer’s browser will be redirected to Trustly. The payer will identify themselves by BankId and choose the bank account where they want to receive the money. The payer is then redirected back to Swedbank Pay. Swedbank Pay will validate that we have received the bank account information before showing the OK message. The payer is redirected back to the completeUrl provided in the initial call. The payer’s browser is connected to the completeUrl. You then need to do a GET to check the status of the payout. You will receive a PaymentOrder response model. You can check that the status is set to Paid. If the PaymentOrder is aborted or failed, something went wrong and the attempt was unsuccessful. You will get the UnscheduledToken in the model’s paid node. Return status to the payer about the status. Register Account Register Account should be used for payouts to other business entities. This implementation requires that you already have all account information for the receiving payout account. There is no interaction needed by the receiving part in this flow. Register Account Setup You or the customer will trigger the payout process. You will have to initiate a PaymentOrder towards Swedbank Pay to start the payout process. It is important to set operation=Verify, generateUnscheduledToken=true, restrictedToPayoutInstruments=true. The response will include an operation with a rel:verify-trustly. This is where you need to do a call to register the bank account. Do a call to the verify-trustly endpoint to register the bank account details. The response will have status=Paid if everything is completed. The unscheduledToken will be provided in the response model’s Paid node. If desired, you can notify the payer that the bank account is registered. The Server-To-Server Payout Call When it is time to do a payout, you must initiate a new payment order. This time there is no interaction with the payer, so it will be handled as a server-to-server call. You must set operation=Payout and unscheduledToken=&lt;token&gt;. It is also important to include a callbackUrl as this call is async and will use callbacks to communicate status changes. Swedbank Pay will initiate the payout process against Trustly. You will get a response that the PaymentOrder is initialized. The reason for this is that it takes some time before the payout is completed. If you wish, you can now communicate to the payer that the payout is registered, but not finished. It will take some time before a payout is either OK or Failed. There can also be edge cases where the payout will get the Paid status first, and changed to failed later. It is important to design the system to handle these scenarios. If the payout is complete the following flow will happen: You will get a callback. You will need to answer the callback with an acknowledge message. You need to do a GET on the PaymentOrder to check the status. It must have status=Paid if the payout was successful. You can now inform the payer that the payout was successful. If something failed in the payout process this flow will happen. If the payout failed, you will get a callback. You will need to answer the callback with an acknowledge message. You need to do a GET on the PaymentOrder to check the status. It will have status=Aborted if the payout failed. You can now inform the payer that the payout has failed and that you will try to do the payout again. Verify Request Request Copy json to clipboard 1 2 3 4 POST /psp/paymentorders HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.x/2.0 // Version optional for 3.0 and 2.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 { \"paymentorder\": { \"restrictedToPayoutInstruments\": true, \"generateUnscheduledToken\": true, \"operation\": \"Verify\", \"productName\": \"Checkout3\", // Removed in 3.1, can be excluded in 3.0 if version is added in header \"currency\": \"SEK\", \"description\": \"Bank account verification\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"sv-SE\", \"urls\": { \"completeUrl\": \"http://complete.url\", \"hostUrls\": [\"http://testmerchant.url\"], \"cancelUrl\": \"http://cancel.url\" }, \"payeeInfo\": { \"payeeId\": \"\", \"payeeReference\": \"\", \"payeeName\": \"Testmerchant\" }, \"payer\": { \"payerReference\": \"\", \"firstName\": \"Example\", \"lastName\": \"Name\", \"nationalIdentifier\": { \"socialSecurityNumber\": \"199710202392\", \"countryCode\": \"SE\" }, \"email\": \"test@payex.com\", \"msisdn\": \"+46709876543\", \"address\": { \"streetAddress\": \"Main Street 1\", \"coAddress\": \"Apartment 123, 2 stairs up\", \"city\": \"Stockholm\", \"zipCode\": \"SE-11253\", \"countryCode\": \"SE\" } } } } Show fields Hide fields Required Field Type Description check paymentOrder object The payment order object. check operation string Must be set to Verify . check productName string Must be set to Checkout3. Mandatory for Digital Payments v3.0, either in this field or the header, as you won’t get the operations in the response without submitting this field. check currency string The currency of the payment. check restrictedToPayoutInstruments bool Set to true to only show Payout enabled payment methods (Trustly). check generateUnscheduledToken bool Set to true. check description string The description of the payment order. check userAgent string The user agent of the payer. Should typically be set to the value of the User-Agent header sent by the payer’s web browser. check language string The language of the payer. check urls object The urls object, containing the URLs relevant for the payment order. check hostUrls array The array of valid URLs. check completeUrl string The URL that Swedbank Pay will redirect back to when the payer has completed their interactions with the payment. This does not indicate a successful payment, only that it has reached a final (complete) state. A GET request needs to be performed on the payment order to inspect it further. See completeUrl for details. check cancelUrl string The URL to redirect the payer to if the payment is cancelled, either by the payer or by the merchant trough an abort request of the payment or paymentorder. check payeeInfo object The payeeInfo object, containing information about the payee (the recipient of the money). See payeeInfo for details. check payeeId string The ID of the payee, usually the merchant ID. check payeeReference string A unique reference from the merchant system. Set per operation to ensure an exactly-once delivery of a transactional operation. Length and content validation depends on whether the transaction.number or the payeeReference is sent to the acquirer. If Swedbank Pay handles the settlement, the transaction.number is sent and the payeeReference must be in the format of A-Za-z0-9 and string(30). If you handle the settlement, Swedbank Pay will send the payeeReference and it will be limited to the format of string(12). All characters must be digits. In Invoice Payments payeeReference is used as an invoice/receipt number, if the receiptReference is not defined.   payeeName string The name of the payee, usually the name of the merchant.   payer object The payer object containing information about the payer relevant for the payment order.   payerReference string The merchant’s unique reference to the payer. check firstName string The first name of the payer or the company name.   lastName string The last name of the payer.   nationalIdentifier object The national identifier object. This is required when using the restrictedToSocialSecurityNumber parameter.   socialSecurityNumber string The payer’s social security number.   countryCode string Country code of the payer.   email string The e-mail address of the payer.   msisdn string The mobile phone number of the Payer. The mobile number must have a country code prefix and be 8 to 15 digits in length.   address object The address object containing information about the payer’s address. ︎ streetAddress string The street address of the payer. Maximum 50 characters long.   coAddress string The payer’s CO-address (if used).   city string The payer’s city of residence.   zipCode string The postal number (ZIP code) of the payer.   countryCode string Country code for country of residence, e.g. SE, NO, or FI. Verify Response Note the new operation verify-trustly, which is available if it is activated in the merchant’s contract and the payer’s first and last name is added in the request. Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x/2.0 api-supported-versions: 3.x/2.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 { \"paymentOrder\": { \"id\": \"/psp/paymentorders/b60d08b8-0509-4abf-a722-08db68bad644\", \"created\": \"2023-06-09T07:26:27.3013437Z\", \"updated\": \"2023-06-09T07:26:28.6979343Z\", \"operation\": \"Verify\", \"status\": \"Initialized\", \"currency\": \"SEK\", \"amount\": 510, \"vatAmount\": 0, \"description\": \"Test Verification\", \"initiatingSystemUserAgent\": \"PostmanRuntime/7.32.2\", \"language\": \"nb-NO\", \"availableInstruments\": [ \"Trustly\" ], \"implementation\": \"PaymentsOnly\", \"integration\": \"\", \"instrumentMode\": false, \"guestMode\": false, \"urls\": { \"id\": \"/psp/paymentorders/b60d08b8-0509-4abf-a722-08db68bad644/urls\" }, \"payeeInfo\": { \"id\": \"/psp/paymentorders/b60d08b8-0509-4abf-a722-08db68bad644/payeeinfo\" }, \"payer\": { \"id\": \"/psp/paymentorders/b60d08b8-0509-4abf-a722-08db68bad644/payers\" }, \"history\": { \"id\": \"/psp/paymentorders/b60d08b8-0509-4abf-a722-08db68bad644/history\" }, \"failed\": { \"id\": \"/psp/paymentorders/b60d08b8-0509-4abf-a722-08db68bad644/failed\" }, \"aborted\": { \"id\": \"/psp/paymentorders/b60d08b8-0509-4abf-a722-08db68bad644/aborted\" }, \"paid\": { \"id\": \"/psp/paymentorders/b60d08b8-0509-4abf-a722-08db68bad644/paid\" }, \"cancelled\": { \"id\": \"/psp/paymentorders/b60d08b8-0509-4abf-a722-08db68bad644/cancelled\" }, \"financialTransactions\": { \"id\": \"/psp/paymentorders/b60d08b8-0509-4abf-a722-08db68bad644/financialtransactions\" }, \"failedAttempts\": { \"id\": \"/psp/paymentorders/b60d08b8-0509-4abf-a722-08db68bad644/failedattempts\" }, \"metadata\": { \"id\": \"/psp/paymentorders/b60d08b8-0509-4abf-a722-08db68bad644/metadata\" } }, \"operations\": [ { \"method\": \"PATCH\", \"href\": \"https://api.stage.payex.com/psp/paymentorders/b60d08b8-0509-4abf-a722-08db68bad644\", \"rel\": \"update-order\", \"contentType\": \"application/json\" }, { \"method\": \"PATCH\", \"href\": \"https://api.stage.payex.com/psp/paymentorders/b60d08b8-0509-4abf-a722-08db68bad644\", \"rel\": \"abort\", \"contentType\": \"application/json\" }, { \"method\": \"GET\", \"href\": \"https://ecom.stage.payex.com/checkout/a8ff4fa9821b500dbb657bcba68422e20b9ba8dd2652bbc3f0f456b93774023f?_tc_tid=96f4d7cef4984a84b380e5478b7f6632\", \"rel\": \"redirect-checkout\", \"contentType\": \"text/html\" }, { \"method\": \"GET\", \"href\": \"https://ecom.stage.payex.com/checkout/core/client/checkout/a8ff4fa9821b500dbb657bcba68422e20b9ba8dd2652bbc3f0f456b93774023f?culture=nb-NO&amp;_tc_tid=96f4d7cef4984a84b380e5478b7f6632\", \"rel\": \"view-checkout\", \"contentType\": \"application/javascript\" }, { \"method\": \"PATCH\", \"href\": \"https://api.stage.payex.com/psp/paymentorders/b60d08b8-0509-4abf-a722-08db68bad644\", \"rel\": \"verify-trustly\", \"contentType\": \"application/json\" } ] } Show fields Hide fields Field Type Description paymentOrder object The payment order object. id string The relative URL and unique identifier of the paymentorder resource . Please read about URL Usage to understand how this and other URLs should be used in your solution. created string The ISO-8601 date of when the payment order was created. updated string The ISO-8601 date of when the payment order was updated. operation string Verify status string Indicates the payment order’s current status. Initialized is returned when the payment is created and still ongoing. The request example above has this status. Paid is returned when the payer has completed the payment successfully. See the Paid response. Failed is returned when a payment has failed. You will find an error message in the Failed response. Cancelled is returned when an authorized amount has been fully cancelled. See the Cancelled response. It will contain fields from both the cancelled description and paid section. Aborted is returned when the merchant has aborted the payment, or if the payer cancelled the payment in the redirect integration (on the redirect page). See the Aborted response. currency string The currency of the payment order. amount integer The transaction amount (including VAT, if any) entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The amount displayed is the final amount the payer paid for their order, including any payment method specific discounts or fees. vatAmount integer The payment’s VAT (Value Added Tax) amount, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The vatAmount entered will not affect the amount shown on the payment page, which only shows the total amount. This field is used to specify how much of the total amount the VAT will be. Set to 0 (zero) if there is no VAT amount charged. description string(40) A textual description of the purchase. Maximum length is 40 characters. initiatingSystemUserAgent string The user agent of the HTTP client making the request, reflecting the value sent in the User-Agent header with the initial POST request which created the Payment Order. language string sv-SE, nb-NO, da-DK, en-US or fi-FI. availableInstruments string A list of payment methods available for this payment. implementation string The merchant’s Digital Payments implementation type. Enterprise or PaymentsOnly. We ask that you don’t build logic around this field’s response. It is mainly for information purposes, as the implementation types might be subject to name changes. If this should happen, updated information will be available in this table. integration string The merchant’s Digital Payments integration type. HostedView (Seamless View) or Redirect. This field will not be populated until the payer has opened the payment UI, and the client script has identified if Swedbank Pay or another URI is hosting the container with the payment iframe. We ask that you don’t build logic around this field’s response. It is mainly for information purposes. as the integration types might be subject to name changes, If this should happen, updated information will be available in this table. instrumentMode bool Set to true or false. Indicates if the payment is initialized with only one payment methods available. guestMode bool Set to true or false. Indicates if the payer chose to pay as a guest or not. When using the Payments Only implementation, this is triggered by not including a payerReference in the original paymentOrder request. urls id The URL to the urls resource where all URLs related to the payment order can be retrieved. payeeInfo id The URL to the payeeInfo resource where information related to the payee can be retrieved. payer id The URL to the payer resource where information about the payer can be retrieved. history id The URL to the history resource where information about the payment’s history can be retrieved. failed id The URL to the failed resource where information about the failed transactions can be retrieved. aborted id The URL to the aborted resource where information about the aborted transactions can be retrieved. paid id The URL to the paid resource where information about the paid transactions can be retrieved. cancelled id The URL to the cancelled resource where information about the cancelled transactions can be retrieved. financialTransactions id The URL to the financialTransactions resource where information about the financial transactions can be retrieved. failedAttempts id The URL to the failedAttempts resource where information about the failed attempts can be retrieved. metadata id The URL to the metadata resource where information about the metadata can be retrieved. operations array The array of operations that are possible to perform on the payment order in its current state. PATCH Verify Request The PATCH request towards the verify-trustly operation, containing the bank account details. Request Copy json to clipboard 1 2 3 4 PATCH /psp/paymentorders HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.x/2.0 // Version optional for 3.0 and 2.0 1 2 3 4 5 6 7 8 { \"paymentorder\": { \"operation\": \"VerifyTrustly\", \"clearingHouse\": \"SWEDEN\", \"bankNumber\": \"6112\", \"accountNumber\": \"69706212\" } } Show fields Hide fields Field Type Description paymentOrder object The payment order object. operation string Determines the initial operation, defining the type of payment order created. clearingHouse string The clearing house of the recipient’s bank account. Typically the name of a country in uppercase letters. bankNumber string The bank number identifying the recipient’s bank in the given clearing house. For bank accounts in IBAN format you should just provide an empty string (“”). For non-IBAN, see the example in our request or the bank number format table. accountNumber string The account number, identifying the recipient’s account in the bank. Can be either IBAN or country-specific format. See the account number format table for further information. PATCH Verify Response Note that the status in the response has changed to Paid, with the correlating disappearance of PATCH operations. Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x/2.0 api-supported-versions: 3.x/2.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 { \"paymentOrder\": { \"id\": \"/psp/paymentorders/&lt;id&gt;\", \"created\": \"2023-07-06T05:42:07.7531238Z\", \"updated\": \"2023-07-06T05:42:14.6086749Z\", \"operation\": \"Verify\", \"status\": \"Paid\", \"currency\": \"SEK\", \"amount\": 510, \"vatAmount\": 0, \"description\": \"Test Verification\", \"initiatingSystemUserAgent\": \"PostmanRuntime/7.32.3\", \"language\": \"nb-NO\", \"availableInstruments\": [ \"Trustly\" ], \"implementation\": \"PaymentsOnly\", \"integration\": \"\", \"instrumentMode\": false, \"guestMode\": true, \"urls\": { \"id\": \"/psp/paymentorders/1e7e8e00-dc76-4ea5-0d7d-08db7c962a83/urls\" }, \"payeeInfo\": { \"id\": \"/psp/paymentorders/1e7e8e00-dc76-4ea5-0d7d-08db7c962a83/payeeinfo\" }, \"payer\": { \"id\": \"/psp/paymentorders/1e7e8e00-dc76-4ea5-0d7d-08db7c962a83/payers\" }, \"history\": { \"id\": \"/psp/paymentorders/1e7e8e00-dc76-4ea5-0d7d-08db7c962a83/history\" }, \"failed\": { \"id\": \"/psp/paymentorders/1e7e8e00-dc76-4ea5-0d7d-08db7c962a83/failed\" }, \"aborted\": { \"id\": \"/psp/paymentorders/1e7e8e00-dc76-4ea5-0d7d-08db7c962a83/aborted\" }, \"paid\": { \"id\": \"/psp/paymentorders/1e7e8e00-dc76-4ea5-0d7d-08db7c962a83/paid\" }, \"cancelled\": { \"id\": \"/psp/paymentorders/1e7e8e00-dc76-4ea5-0d7d-08db7c962a83/cancelled\" }, \"financialTransactions\": { \"id\": \"/psp/paymentorders/1e7e8e00-dc76-4ea5-0d7d-08db7c962a83/financialtransactions\" }, \"failedAttempts\": { \"id\": \"/psp/paymentorders/1e7e8e00-dc76-4ea5-0d7d-08db7c962a83/failedattempts\" }, \"metadata\": { \"id\": \"/psp/paymentorders/1e7e8e00-dc76-4ea5-0d7d-08db7c962a83/metadata\" } }, \"operations\": \"operations\": [ { \"method\": \"GET\", \"href\": \"https://ecom.stage.payex.com/checkout/a8ff4fa9821b500dbb657bcba68422e20b9ba8dd2652bbc3f0f456b93774023f?_tc_tid=96f4d7cef4984a84b380e5478b7f6632\", \"rel\": \"redirect-checkout\", \"contentType\": \"text/html\" }, { \"method\": \"GET\", \"href\": \"https://ecom.stage.payex.com/checkout/core/client/checkout/a8ff4fa9821b500dbb657bcba68422e20b9ba8dd2652bbc3f0f456b93774023f?culture=nb-NO&amp;_tc_tid=96f4d7cef4984a84b380e5478b7f6632\", \"rel\": \"view-checkout\", \"contentType\": \"application/javascript\" } ] } Show fields Hide fields Field Type Description paymentOrder object The payment order object. id string The relative URL and unique identifier of the paymentorder resource . Please read about URL Usage to understand how this and other URLs should be used in your solution. created string The ISO-8601 date of when the payment order was created. updated string The ISO-8601 date of when the payment order was updated. operation string Verify status string Indicates the payment order’s current status. Initialized is returned when the payment is created and still ongoing. The request example above has this status. Paid is returned when the payer has completed the payment successfully. See the Paid response. Failed is returned when a payment has failed. You will find an error message in the Failed response. Cancelled is returned when an authorized amount has been fully cancelled. See the Cancelled response. It will contain fields from both the cancelled description and paid section. Aborted is returned when the merchant has aborted the payment, or if the payer cancelled the payment in the redirect integration (on the redirect page). See the Aborted response. currency string The currency of the payment order. amount integer The transaction amount (including VAT, if any) entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The amount displayed is the final amount the payer paid for their order, including any payment method specific discounts or fees. vatAmount integer The payment’s VAT (Value Added Tax) amount, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The vatAmount entered will not affect the amount shown on the payment page, which only shows the total amount. This field is used to specify how much of the total amount the VAT will be. Set to 0 (zero) if there is no VAT amount charged. description string(40) A textual description of the purchase. Maximum length is 40 characters. initiatingSystemUserAgent string The user agent of the HTTP client making the request, reflecting the value sent in the User-Agent header with the initial POST request which created the Payment Order. language string sv-SE, nb-NO, da-DK, en-US or fi-FI. availableInstruments string A list of payment methods available for this payment. implementation string The merchant’s Digital Payments implementation type. Enterprise or PaymentsOnly. We ask that you don’t build logic around this field’s response. It is mainly for information purposes, as the implementation types might be subject to name changes. If this should happen, updated information will be available in this table. integration string The merchant’s Digital Payments integration type. HostedView (Seamless View) or Redirect. This field will not be populated until the payer has opened the payment UI, and the client script has identified if Swedbank Pay or another URI is hosting the container with the payment iframe. We ask that you don’t build logic around this field’s response. It is mainly for information purposes. as the integration types might be subject to name changes, If this should happen, updated information will be available in this table. instrumentMode bool Set to true or false. Indicates if the payment is initialized with only one payment method available. guestMode bool Set to true or false. Indicates if the payer chose to pay as a guest or not. When using the Payments Only implementation, this is triggered by not including a payerReference in the original paymentOrder request. urls id The URL to the urls resource where all URLs related to the payment order can be retrieved. payeeInfo id The URL to the payeeInfo resource where information related to the payee can be retrieved. payer id The URL to the payer resource where information about the payer can be retrieved. history id The URL to the history resource where information about the payment’s history can be retrieved. failed id The URL to the failed resource where information about the failed transactions can be retrieved. aborted id The URL to the aborted resource where information about the aborted transactions can be retrieved. paid id The URL to the paid resource where information about the paid transactions can be retrieved. cancelled id The URL to the cancelled resource where information about the cancelled transactions can be retrieved. financialTransactions id The URL to the financialTransactions resource where information about the financial transactions can be retrieved. failedAttempts id The URL to the failedAttempts resource where information about the failed attempts can be retrieved. metadata id The URL to the metadata resource where information about the metadata can be retrieved. operations array The array of operations that are possible to perform on the payment order in its current state. Payout Request Request Copy json to clipboard 1 2 3 4 POST /psp/paymentorders HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.x/2.0 // Version optional for 3.0 and 2.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 { \"paymentorder\": { \"operation\": \"Payout\", \"productName\": \"Checkout3\", // Removed in 3.1, can be excluded in 3.0 if version is added in header \"currency\": \"SEK\", \"amount\": 1500, \"vatAmount\": 0, \"unscheduledToken\": \"\", \"description\": \"Bank account verification\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"sv-SE\", \"urls\": { \"callbackUrl\": \"http://callback.url\" }, \"payeeInfo\": { \"payeeId\": \"\", \"payeeReference\": \"\", \"payeeName\": \"Testmerchant\" }, \"payer\": { \"payerReference\": \"\" } } } Show fields Hide fields Required Field Type Description check paymentOrder object The payment order object. check operation string Must be set to Payout. check productName string Must be set to Checkout3. Mandatory for Digital Payments v3.0, either in this field or the header, as you won’t get the operations in the response without submitting this field. check currency string The currency of the payment. check amount integer The transaction amount (including VAT, if any) entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The amount displayed is the final amount the payer paid for their order, including any payment method specific discounts or fees. check vatAmount integer The payment’s VAT (Value Added Tax) amount, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The vatAmount entered will not affect the amount shown on the payment page, which only shows the total amount. This field is used to specify how much of the total amount the VAT will be. Set to 0 (zero) if there is no VAT amount charged.   unscheduledToken string Must be provided to specify the consumer account to be the receiver of the payout. check description string The description of the payment order. check userAgent string The user agent of the payer. Should typically be set to the value of the User-Agent header sent by the payer’s web browser. check language string The language of the payer. check urls object The urls object, containing the URLs relevant for the payment order. check callbackUrl string The URL that Swedbank Pay will perform an HTTP POST against every time a transaction is created on the payment order. See callback for details. check payeeInfo object The payeeInfo object, containing information about the payee (the recipient of the money). See payeeInfo for details. check payeeId string The ID of the payee, usually the merchant ID. check payeeReference string A unique reference from the merchant system. Set per operation to ensure an exactly-once delivery of a transactional operation. Length and content validation depends on whether the transaction.number or the payeeReference is sent to the acquirer. If Swedbank Pay handles the settlement, the transaction.number is sent and the payeeReference must be in the format of A-Za-z0-9 and string(30). If you handle the settlement, Swedbank Pay will send the payeeReference and it will be limited to the format of string(12). All characters must be digits. In Invoice Payments payeeReference is used as an invoice/receipt number, if the receiptReference is not defined.   payeeName string The name of the payee, usually the name of the merchant.   payer object The payer object containing information about the payer relevant for the payment order.   payerReference string The merchant’s unique reference to the payer. Payout Response Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x/2.0 api-supported-versions: 3.x/2.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 { \"paymentOrder\": { \"id\": \"/psp/paymentorders/f4e47e61-37a5-4281-a5f3-08db68bc1d08\", \"created\": \"2023-06-09T07:35:35.1855792Z\", \"updated\": \"2023-06-09T07:35:35.6863019Z\", \"operation\": \"Payout\", \"status\": \"Initialized\", \"currency\": \"SEK\", \"amount\": 2147483647, \"vatAmount\": 0, \"description\": \"Test Purchase\", \"initiatingSystemUserAgent\": \"PostmanRuntime/7.32.2\", \"language\": \"sv-SE\", \"availableInstruments\": [], \"implementation\": \"PaymentsOnly\", \"integration\": \"\", \"instrumentMode\": false, \"guestMode\": true, \"orderItems\": { \"id\": \"/psp/paymentorders/f4e47e61-37a5-4281-a5f3-08db68bc1d08/orderitems\" }, \"urls\": { \"id\": \"/psp/paymentorders/f4e47e61-37a5-4281-a5f3-08db68bc1d08/urls\" }, \"payeeInfo\": { \"id\": \"/psp/paymentorders/f4e47e61-37a5-4281-a5f3-08db68bc1d08/payeeinfo\" }, \"history\": { \"id\": \"/psp/paymentorders/f4e47e61-37a5-4281-a5f3-08db68bc1d08/history\" }, \"failed\": { \"id\": \"/psp/paymentorders/f4e47e61-37a5-4281-a5f3-08db68bc1d08/failed\" }, \"aborted\": { \"id\": \"/psp/paymentorders/f4e47e61-37a5-4281-a5f3-08db68bc1d08/aborted\" }, \"paid\": { \"id\": \"/psp/paymentorders/f4e47e61-37a5-4281-a5f3-08db68bc1d08/paid\" }, \"cancelled\": { \"id\": \"/psp/paymentorders/f4e47e61-37a5-4281-a5f3-08db68bc1d08/cancelled\" }, \"financialTransactions\": { \"id\": \"/psp/paymentorders/f4e47e61-37a5-4281-a5f3-08db68bc1d08/financialtransactions\" }, \"failedAttempts\": { \"id\": \"/psp/paymentorders/f4e47e61-37a5-4281-a5f3-08db68bc1d08/failedattempts\" }, \"metadata\": { \"id\": \"/psp/paymentorders/f4e47e61-37a5-4281-a5f3-08db68bc1d08/metadata\" } }, \"operations\": [] } Show fields Hide fields Field Type Description paymentOrder object The payment order object. id string The relative URL and unique identifier of the paymentorder resource . Please read about URL Usage to understand how this and other URLs should be used in your solution. created string The ISO-8601 date of when the payment order was created. updated string The ISO-8601 date of when the payment order was updated. operation string Purchase status string Indicates the payment order’s current status. Initialized is returned when the payment is created and still ongoing. The request example above has this status. Paid is returned when the payer has completed the payment successfully. See the Paid response. Failed is returned when a payment has failed. You will find an error message in the Failed response. Cancelled is returned when an authorized amount has been fully cancelled. See the Cancelled response. It will contain fields from both the cancelled description and paid section. Aborted is returned when the merchant has aborted the payment, or if the payer cancelled the payment in the redirect integration (on the redirect page). See the Aborted response. currency string The currency of the payment order. amount integer The transaction amount (including VAT, if any) entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The amount displayed is the final amount the payer paid for their order, including any payment method specific discounts or fees. vatAmount integer The payment’s VAT (Value Added Tax) amount, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The vatAmount entered will not affect the amount shown on the payment page, which only shows the total amount. This field is used to specify how much of the total amount the VAT will be. Set to 0 (zero) if there is no VAT amount charged. description string(40) A textual description of the purchase. Maximum length is 40 characters. initiatingSystemUserAgent string The user agent of the HTTP client making the request, reflecting the value sent in the User-Agent header with the initial POST request which created the Payment Order. language string sv-SE, nb-NO, da-DK, en-US or fi-FI. availableInstruments string A list of payment methods available for this payment. implementation string The merchant’s Digital Payments implementation type. Enterprise or PaymentsOnly. We ask that you don’t build logic around this field’s response. It is mainly for information purposes, as the implementation types might be subject to name changes. If this should happen, updated information will be available in this table. integration string The merchant’s Digital Payments integration type. HostedView (Seamless View) or Redirect. This field will not be populated until the payer has opened the payment UI, and the client script has identified if Swedbank Pay or another URI is hosting the container with the payment iframe. We ask that you don’t build logic around this field’s response. It is mainly for information purposes. as the integration types might be subject to name changes, If this should happen, updated information will be available in this table. instrumentMode bool Set to true or false. Indicates if the payment is initialized with only one payment methods available. guestMode bool Set to true or false. Indicates if the payer chose to pay as a guest or not. When using the Payments Only implementation, this is triggered by not including a payerReference in the original paymentOrder request. orderItems id The URL to the orderItems resource where information about the order items can be retrieved. urls id The URL to the urls resource where all URLs related to the payment order can be retrieved. payeeInfo id The URL to the payeeInfo resource where information related to the payee can be retrieved. history id The URL to the history resource where information about the payment’s history can be retrieved. failed id The URL to the failed resource where information about the failed transactions can be retrieved. aborted id The URL to the aborted resource where information about the aborted transactions can be retrieved. paid id The URL to the paid resource where information about the paid transactions can be retrieved. cancelled id The URL to the cancelled resource where information about the cancelled transactions can be retrieved. financialTransactions id The URL to the financialTransactions resource where information about the financial transactions can be retrieved. failedAttempts ic The URL to the failedAttempts resource where information about the failed attempts can be retrieved. metadata id The URL to the metadata resource where information about the metadata can be retrieved. operations array The array of operations that are possible to perform on the payment order in its current state. GET Payment Order A GET performed after the callback is received on a paymentOrder with status Paid. A field called trustlyOrderId will appear among the details in the Paid node. This can be used for support correspondance. Response Copy json to clipboard 1 2 HTTP/1.1 200 OK Content-Type: application/json;version=3.x/2.0 // Version optional for 3.0 and 2.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 { \"paymentOrder\": { \"id\": \"/psp/paymentorders/3c265183-e7ee-438b-a5f4-08db68bc1d08\", \"created\": \"2023-06-09T07:38:08.5041489Z\", \"updated\": \"2023-06-09T07:38:25.3627725Z\", \"operation\": \"Payout\", \"status\": \"Paid\", \"currency\": \"SEK\", \"amount\": 1000, \"vatAmount\": 0, \"remainingReversalAmount\": 1000, \"description\": \"Test Purchase\", \"initiatingSystemUserAgent\": \"PostmanRuntime/7.32.2\", \"language\": \"sv-SE\", \"availableInstruments\": [], \"implementation\": \"PaymentsOnly\", \"integration\": \"\", \"instrumentMode\": false, \"guestMode\": true, \"urls\": { \"id\": \"/psp/paymentorders/3c265183-e7ee-438b-a5f4-08db68bc1d08/urls\", \"callbackUrl\": \"http://test-dummy.net/payment-callback\" }, \"payeeInfo\": { \"id\": \"/psp/paymentorders/3c265183-e7ee-438b-a5f4-08db68bc1d08/payeeinfo\" }, \"history\": { \"id\": \"/psp/paymentorders/3c265183-e7ee-438b-a5f4-08db68bc1d08/history\" }, \"failed\": { \"id\": \"/psp/paymentorders/3c265183-e7ee-438b-a5f4-08db68bc1d08/failed\" }, \"aborted\": { \"id\": \"/psp/paymentorders/3c265183-e7ee-438b-a5f4-08db68bc1d08/aborted\" }, \"paid\": { \"id\": \"/psp/paymentorders/3c265183-e7ee-438b-a5f4-08db68bc1d08/paid\" \"instrument\": \"Trustly\", \"number\": 79100113652, \"payeeReference\": \"1662373401\", \"orderReference\": \"orderReference\", \"transactionType\": \"Sale\", \"amount\": 1500, \"tokens\": [ { \"type\": \"Unscheduled\", \"token\": \"6d495aac-cb2b-4d94-a5f1-577baa143f2c\", \"name\": \"492500******0004\", \"expiryDate\": \"02/2023\" } ], \"submittedAmount\": 1500, \"feeAmount\": 0, \"discountAmount\": 0, \"details\": { \"trustlyOrderId\": 123456789 } }, \"cancelled\": { \"id\": \"/psp/paymentorders/3c265183-e7ee-438b-a5f4-08db68bc1d08/cancelled\" }, \"financialTransactions\": { \"id\": \"/psp/paymentorders/3c265183-e7ee-438b-a5f4-08db68bc1d08/financialtransactions\" }, \"failedAttempts\": { \"id\": \"/psp/paymentorders/3c265183-e7ee-438b-a5f4-08db68bc1d08/failedattempts\" }, \"metadata\": { \"id\": \"/psp/paymentorders/3c265183-e7ee-438b-a5f4-08db68bc1d08/metadata\" } }, \"operations\": [] } Show fields Hide fields Field Type Description paymentOrder object The payment order object. id string The relative URL and unique identifier of the paymentorder resource . Please read about URL Usage to understand how this and other URLs should be used in your solution. created string The ISO-8601 date of when the payment order was created. updated string The ISO-8601 date of when the payment order was updated. operation string Purchase status string Indicates the payment order’s current status. Initialized is returned when the payment is created and still ongoing. The request example above has this status. Paid is returned when the payer has completed the payment successfully. See the Paid response. Failed is returned when a payment has failed. You will find an error message in the Failed response. Cancelled is returned when an authorized amount has been fully cancelled. See the Cancelled response. It will contain fields from both the cancelled description and paid section. Aborted is returned when the merchant has aborted the payment, or if the payer cancelled the payment in the redirect integration (on the redirect page). See the Aborted response. currency string The currency of the payment order. amount integer The transaction amount (including VAT, if any) entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The amount displayed is the final amount the payer paid for their order, including any payment method specific discounts or fees. vatAmount integer The payment’s VAT (Value Added Tax) amount, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The vatAmount entered will not affect the amount shown on the payment page, which only shows the total amount. This field is used to specify how much of the total amount the VAT will be. Set to 0 (zero) if there is no VAT amount charged. description string(40) A textual description of the purchase. Maximum length is 40 characters. initiatingSystemUserAgent string The user agent of the HTTP client making the request, reflecting the value sent in the User-Agent header with the initial POST request which created the Payment Order. language string sv-SE, nb-NO, da-DK, en-US or fi-FI. availableInstruments string A list of payment methods available for this payment. implementation string The merchant’s Digital Payments implementation type. Enterprise or PaymentsOnly. We ask that you don’t build logic around this field’s response. It is mainly for information purposes, as the implementation types might be subject to name changes. If this should happen, updated information will be available in this table. integration string The merchant’s Digital Payments integration type. HostedView (Seamless View) or Redirect. This field will not be populated until the payer has opened the payment UI, and the client script has identified if Swedbank Pay or another URI is hosting the container with the payment iframe. We ask that you don’t build logic around this field’s response. It is mainly for information purposes. as the integration types might be subject to name changes, If this should happen, updated information will be available in this table. instrumentMode bool Set to true or false. Indicates if the payment is initialized with only one payment method available. guestMode bool Set to true or false. Indicates if the payer chose to pay as a guest or not. When using the Payments Only implementation, this is triggered by not including a payerReference in the original paymentOrder request. urls string The URL to the urls resource where all URLs related to the payment order can be retrieved. id string The relative URL and unique identifier of the paymentorder resource . Please read about URL Usage to understand how this and other URLs should be used in your solution. callbackUrl string The URL that Swedbank Pay will perform an HTTP POST against every time a transaction is created on the payment order. See callback for details. payeeInfo object The payeeInfo object, containing information about the payee (the recipient of the money). See payeeInfo for details. payer string The URL to the payer resource where information about the payer can be retrieved. history string The URL to the history resource where information about the payment’s history can be retrieved. failed string The URL to the failed resource where information about the failed transactions can be retrieved. aborted string The URL to the aborted resource where information about the aborted transactions can be retrieved. paid string The URL to the paid resource where information about the paid transactions can be retrieved. id string The relative URL and unique identifier of the paymentorder resource . Please read about URL Usage to understand how this and other URLs should be used in your solution. instrument string The payment method used in the fulfillment of the payment. Do not use this field for code validation purposes. To determine if a capture is needed, we recommend using operations or the transactionType field. number integer The transaction number, useful when there’s need to reference the transaction in human communication. Not usable for programmatic identification of the transaction, where id should be used instead. payeeReference string A unique reference from the merchant system. Set per operation to ensure an exactly-once delivery of a transactional operation. Length and content validation depends on whether the transaction.number or the payeeReference is sent to the acquirer. If Swedbank Pay handles the settlement, the transaction.number is sent and the payeeReference must be in the format of A-Za-z0-9 and string(30). If you handle the settlement, Swedbank Pay will send the payeeReference and it will be limited to the format of string(12). All characters must be digits. transactionType string This will either be set to Authorization or Sale. Can be used to understand if there is a need for doing a capture on this payment order. Swedbank Pay recommends using the different operations to figure out if a capture is needed. amount integer The transaction amount (including VAT, if any) entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The amount displayed is the final amount the payer paid for their order, including any payment method specific discounts or fees. tokens integer A list of tokens connected to the payment. type string payment, recurrence, transactionOnFile or unscheduled. The different types of available tokens. token string The token guid. name string The name of the token. In the example, a masked version of a card number. expiryDate string The expiry date of the token. feeAmount integer If the payment method used had a unique fee, it will be displayed in this field. discountAmount integer If the payment method used had a unique discount, it will be displayed in this field. details integer Details connected to the payment. trustlyOrderId string A Trustly specific order id meant to be use if there is a support case. cancelled id The URL to the cancelled resource where information about the cancelled transactions can be retrieved. financialTransactions id The URL to the financialTransactions resource where information about the financial transactions can be retrieved. failedAttempts id The URL to the failedAttempts resource where information about the failed attempts can be retrieved. metadata id The URL to the metadata resource where information about the metadata can be retrieved. operations array The array of operations that are possible to perform on the payment order in its current state. Select Account Flow Register Account Flow (https://eu.developers.trustly.com/doc/reference/registeraccount#accountnumber-format)",
    "tags": "",
    "url": "/checkout-v3/features/optional/payout/"
  },{
    "title": "Plain Web View",
    "text": "Quick Fix List Here is a list of common gotchas. Please read through the whole document, though. On Android, you need to set webView.settings.javaScriptEnabled = true On Android, you need to set webView.settings.domStorageEnabled = true (used by some 3D-Secure pages) Web Views will not launch apps by themselves. You must intercept navigations and launch apps yourself. See External Applications for details. On Android, @JavascriptInterface methods only take primitive arguments. You will need to JSON.stringify any complex arguments. Some 3D-Secure pages will not work if you open them in a Web View. This appears to be related to them launching an external application, which, in turn, opens a url in the browser app. See Dealing with Picky Web Pages for strategies. Some pages make use of Javascript dialogs. Web Views do not display these on their own; you must add support by your WebCromeClient or WKUIDelegate. On Android, remember to call webView.onResume() and webView.onPause(). Remember that you can debug Web View contents! The Mobile SDK And You A major goal for the Mobile SDK is to provide a platform where you can start developing your mobile e-commerce application rapidly, in a regular, native mobile application development workflow. Hence, it is designed to be a fairly self-contained whole, with a prescribed interface between the mobile client side and the backend server side. This, of course, means that to use the SDK, your backend must integrate with the SDK architecture. If you already have a working solution for web pages, this may not be ideal; indeed, you may wish to reuse your existing web page using Checkout or Payments, and expect to embed it inside your mobile application using a web view. Indeed, on a high level this is what the SDK mobile client components do, in addition to providing native Swift and Kotlin APIs to the service. The SDK internally generates a web page that shows the Checkout payment menu, so the developer need not concern themselves with html or other web-specific technologies. An existing web implementation would not really benefit from the extra discoverability and quality-of-life improvements of a mobile-native API, so the SDK’s value proposition seems to be little benefit for substantial reimplementation work. That said, there are important considerations in embedding a Swedbank-Pay-enabled web page in a web view; considerations, which have been taken into account in the development of the SDK. There are currently no plans to offer any first-party components to help with embedding an existing Swedbank Pay web page, but this page shall serve as best-effort documentation for anyone attempting such. Basics Let us assume that the urls of the payment are as follows: https://example.com/perform-payment is the page containing the Payment Menu or Payment Seamless View, i.e. the paymentUrl https://example.com/payment-completed is the completeUrl https://example.com/payment-cancelled is the cancelUrl Swedbank Pay payments use JavaScript, so that needs to be enabled: iOS 1 2 3 4 5 6 7 8 9 10 11 // WKPreferences.javaScriptEnabled is true by default, // so usually there is no need to to do this. // Other properties of WKWebViewConfiguration will be // needed for later steps, though, so it is good to have // it from the beginning. let configuration = WKWebViewConfiguration() configuration.preferences.javaScriptEnabled = true // Note: You can only set a configuration by using this initializer. // You cannot set a configuration in Interface Builder. let webView = WKWebView(frame: .zero, configuration: configuration) Android 1 2 3 4 5 6 7 val webView = WebView(context) // or get it from a layout // WebSettings.javaScriptEnabled is false by default, // so failing to do this will result in the payment page not working. // Setting javaScriptEnabled to true causes a linter warning, // which can be suppressed with an annotation. webView.settings.javaScriptEnabled = true Some pages use the DOM Storage API, which must be enabled separately on Android: Android 1 webView.settings.domStorageEnabled = true With this setup, you can load to the web view the page that shows the Payment Menu or the Payment Seamless View, and see what happens. You should be able to see the Swedbank Pay payment interface, and in many cases also complete a payment. It is not unlikely, though, that some payment instruents will not work as expected. Also, you will be more or less stuck after the payment is complete. iOS 1 2 let paymentUrl = URL(string: \"https://example.com/perform-payment\")! webView.load(URLRequest(url: paymentUrl)) Android 1 webView.loadUrl(\"https://example.com/perform-payment\") Completion There are two ways of being notified of payment completion: listening for navigations, or using JavaScript hooks. Which one you want to use is partly a matter of taste, but if your existing system does some processing in the completeUrl page, it may be easier to use JavaScript hooks. Listening for Navigations The iOS WKNavigationDelegate protocol and Android WebViewClient class can be used to listen for navigations, and change their behavior. iOS 1 2 3 // This example uses Self as the delegate. // It could be a separate object also. webView.navigationDelegate = self 1 2 3 extension MyClass : WKNavigationDelegate { // WKNavigationDelegate methods } Android 1 2 3 webView.webViewClient = object : WebViewClient() { // WebViewClient methods } In the simplest case you could listen for a navigation to the completeUrl or cancelUrl, and intercept it. iOS 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 func webView( _ webView: WKWebView, decidePolicyFor navigationAction: WKNavigationAction, decisionHandler: @escaping (WKNavigationActionPolicy) -&gt; Void ) { switch navigationAction.request.url?.absoluteString { case \"https://example.com/payment-completed\": decisionHandler(.cancel) // Handle payment completion (success/failure) case \"https://example.com/payment-cancelled\": decisionHandler(.cancel) // Handle payment cancellation default: decisionHandler(.allow) } } Android 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 override fun shouldOverrideUrlLoading( view: WebView?, url: String? ): Boolean { return when (url) { \"https://example.com/payment-completed\" -&gt; { // Handle payment completion (success/failure) true } \"https://example.com/payment-cancelled\" -&gt; { // Handle payment cancellation true } else -&gt; false } } If your completeUrl, or cancelUrl for that matter, do some processing and redirect further, you can adapt these patterns to listen to your custom urls instead. Adding JavaScript Hooks On both iOS and Android, it is possible to add custom JavaScript interfaces to a web view. These interfaces then result in callbacks to native (Swift/Kotlin/ObjC/Java) methods, where you can execute your application specific actions. To observe payment completion and cancellation this way, you need to modify your completeUrl and cancelUrl pages to call these mobile-app-specific JavaScript interfaces. How you do this is beyond our scope here. JavaScript Hooks: iOS On iOS, JavaScript interfaces are added through the WKUserContentController of the WKWebView. The WKUserContentController is set by the WKWebViewConfiguration used when creating the WKWebView; you cannot change the WKUserContentController of a WKWebView. You can, however, modify the WKUserContentController of a live WKWebView, if you want more fine-grained control on which interfaces are exposed at what time. iOS 1 2 3 4 5 6 7 8 9 10 11 let userContentController = webView .configuration .userContentController // Alternatively, add the script message handler(s) // to configuration.userContentController // before creating the WKWebView. // This example uses Self as the handler. // It could be a separate object also. userContentController.add(self, name: \"completed\") userContentController.add(self, name: \"cancelled\") 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 extension MyClass : WKScriptMessageHandler { func userContentController( _ userContentController: WKUserContentController, didReceive message: WKScriptMessage ) { switch message.name { case \"completed\": // Handle payment completion (success/failure) case \"cancelled\": // Handle payment cancellation } // the argument of the call is available at message.body } } On iOS, the interfaces added by WKUserContentController.add(_:name:) are exposed in JavaScript as window.webkit.messageHandlers.&lt;name&gt;.postMessage(body), so your completeUrl and cancelUrl pages would need to eventually execute code like 1 window.webkit.messageHandlers.completed.postMessage(\"success\") 1 window.webkit.messageHandlers.cancelled.postMessage() JavaScript Hooks: Android warning Security Warning: Never use WebView.addJavascriptInterface on Android versions earlier than 4.2 (Build.VERSION_CODES.JELLY_BEAN_MR1)! On Android, JavaScript interfaces are added by the WebView.addJavascriptInterface method. Any public methods with the @JavascriptInterface annotation of the passed-in object are exposed in JavaScript. Android 1 2 3 4 webView.addJavascriptInterface( MyJsInterface(), \"callbacks\" ) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class MyJsInterface { // IMPORTANT! // Methods annotated with @JavascriptInterface are // NOT called on the main thread. They are called on // a private, background, WebView thread. // Make sure to only call methods that are safe // to call in a background thread, or move execution to // the main thread, e.g. by ViewModel.viewModelScope // or LifecycleOwner.lifecycleScope (remember that // FragmentActivity and Fragment implement LifecycleOwner). @JavascriptInterface fun completed(status: String) { // Handle payment completion (success/failure) } @JavascriptInterface fun cancelled() { // Handle payment cancellation } } On Android, the objects added by WebView.addJavascriptInterface are exposed as globals with the specified name, and their @JavascriptInterface public methods with their JVM names (N.B! Be careful not to break the JVM names with Proguard or similar). Thus, your completeUrl and cancelUrl pages would need to eventually execute code like 1 callbacks.completed(\"success\") 1 callbacks.cancelled() External Applications Before starting to implement launching external applications, you should try to get at least one card payment working. With completion observing in place, you should be able to complete a payment flow, at least using the External Integration environment and its test cards. Sometimes, a payment flow calls for launching an external application, like BankID or Swish. A web page does this by opening a url that is handled by the app in question. To accommodate for this, we extend the “Listening for Navigations” approach above. If you opted for JavaScript hooks for completion, you will now need to add a navigation listener for external apps. Determining whether a url should launch an external app is straightforward, though on Android it involves a bit of a judgement call. Let us take a look at the arguably simpler iOS case first. External Applications: iOS You cannot query the system for an arbitrary url to see if it can be opened – this is a deliberate privacy measure. What can be done, and what also happens to be exactly what we want to do, is to attempt to open a url and receive a callback telling us whether it succeeded. Nowadays, the recommended way of opening external applications is to use Universal Links, anyway, which are, on the surface, indistinguishable from web links. iOS 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 func webView( _ webView: WKWebView, decidePolicyFor navigationAction: WKNavigationAction, decisionHandler: @escaping (WKNavigationActionPolicy) -&gt; Void ) { // Check for completeUrl and cancelUrl here, if applicable. if let url = navigationAction.request.url { openInExternalApp( url: url, decisionHandler: decisionHandler ) } else { // N.B. This should never happen. decisionHandler(.allow) } } private func openInExternalApp( url: URL, decisionHandler: @escaping (WKNavigationActionPolicy) -&gt; Void ) { // First, check for universal link UIApplication.shared.open( url, options: [.universalLinksOnly: true] ) { universalLinkOpened in if universalLinkOpened { // Url was opened in external app, so do not open it in WKWebView. decisionHandler(.cancel) } else { // Url was not opened in external app, see if WKWebView can handle it. if let scheme = url.scheme, WKWebView.handlesURLScheme(scheme) { // Regular http(s) url, proceed. decisionHandler(.allow) } else { // Custom-scheme url. Try to open it. UIApplication.shared.open(url) // Cancel the navigation regardless of the result, // as WKWebView does not know what to do with the url anyway. decisionHandler(.cancel) } } } } External Applications: Android On Android, web pages attempting to launch external apps happens in one of three ways: Custom-scheme links Http(s) links matching a pattern Intent-scheme links Each of these maps into an Intent. For custom-scheme and patterned http(s) links, that Intent has the original url as its uri, an action of android.intent.action.VIEW, and the categories android.intent.category.BROWSABLE and android.intent.category.DEFAULT. An Intent created from an intent-scheme url can have any action and categories, although they too should have an implicit android.intent.category.BROWSABLE category. Their uri is parsed from the intent-scheme url, but we need not trouble ourselves with the specifics here. When the WebView navigates to a new page, your app should check if the page url should launch an app instead. The custom-scheme and intent-scheme cases are simple: try to start an Activity with the Intent parsed from the url as described above. If that fails (by throwing an ActivityNotFoundException), then a suitable app was not installed. If the navigation was to an intent-scheme url, that url may contain a fallback url that can be substituted. Otherwise, there is little your app can do beyond notifying the user about the missing app. When the WebView navigates to an http(s) url, your app should not simply start an Activity with the url, as that would usually mean opening the url in the browser. Instead, the Activity should only be started if it is not a browser. Since Android 11 there is an Intent flag that does exactly that. On earlier versions, your app must first query the system about which app would be launched. Because of privacy enhancements in Android 11, it is not possible to use this method on Android 11; you must use the non-browser flag instead. Android 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 override fun shouldOverrideUrlLoading( view: WebView?, url: String? ): Boolean { // Check for completeUrl and cancelUrl here, if applicable. if (url == null) return false // should never happen val uri = Uri.parse(url) if (openInExternalApp(uri)) { return true } else { // uri was not opened in a external app. // Let WebView take care of it, if it is // a normal http(s) url. return when (uri.scheme) { \"http\", \"https\" -&gt; false else -&gt; true } } } private fun openInExternalApp(uri: Uri): Boolean { try { // Create an Intent from the Uri. val intent = Intent.parseUri( uri.toString(), Intent.URI_INTENT_SCHEME ) // Web pages should only be allowed to start activities // with CATEGORY_BROWSABLE. intent.addCategory(Intent.CATEGORY_BROWSABLE) // Only start an Activiy if it is not a browser if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.R) { intent.addFlags(Intent.FLAG_ACTIVITY_REQUIRE_NON_BROWSER) } else { legacyRequireNonBrowser(intent) } startActivity(intent) return true } catch (_: URISyntaxException) { return false } catch (_: ActivityNotFoundException) { return false } } private fun legacyRequireNonBrowser(intent: Intent) { // For Android &lt; 11, need to simulate FLAG_ACTIVITY_REQUIRE_NON_BROWSER. // This is just one way of doing it. val scheme = intent.scheme if (scheme == \"http\" || scheme == \"https\") { // Resolve the Intent. If null, then we don't have the app installed. val resolveInfo = packageManager.resolveActivity( intent, PackageManager.MATCH_DEFAULT_ONLY ) ?: throw ActivityNotFoundException() // Using \"host\" match category as a heuristic here. // An app that handles http(s) uris for any host is more than likely a browser. // Could use e.g. a list of package ids instead. val matchCategory = resolveInfo.match and IntentFilter.MATCH_CATEGORY_MASK if (matchCategory &lt; IntentFilter.MATCH_CATEGORY_HOST) { throw ActivityNotFoundException() } } } Getting Back from External Applications In some cases on Android, getting back from the external application requires no further setup. In particular, this is the case with BankID, if the web page launches it in the recommended manner. In other cases, including any scenario on iOS, the external app will attempt to return to the payment by opening the paymentUrl. Assuming the paymentUrl is an https url, it would normally be opened in the browser application (usually Safari or Chrome), so we need to build a system that gets it back to the application where the payment is being processed in a web view. Using a Custom-Scheme paymentUrl Perhaps the simplest way of making paymentUrl open in the application is to make it a custom-scheme url rather than an https url. This does come with a few disadvantages, though: On iOS, the system will show a confirmation popup, which cannot be customized, before opening a custom-scheme url Related to the above, there is no way of making sure your application is the only one installed that handles the scheme paymentUrl is passed to systems outside Swedbank Pay; systems that may only be compatible with http(s) urls It is somewhat of a Quick and Dirty solution. We do not recommend this approach. iOS: Make paymentUrl A Universal Link On iOS, the recommended way of assigning urls to apps is to use Universal Links. This fits our use-case quite well, and indeed it is what the SDK is designed to do too. When an external app executes the UIApplication.shared.open(\"https://example.com/perform-payment\"), then, assuming Universal Links are configured correctly, that url will not be opened in Safari, but will instead be opened in the application. You must then examine the url, determine that it is a paymentUrl from your app, and reload the paymentUrl in your web view. The payment process should then continue normally. Make sure that any navigation listeners and JavaScript hooks are in place before loading the paymentUrl. Now, Universal Links depend on correct configuration, and during development you may find yourself with a broken configuration from time to time. But perhaps even more importantly, Universal Links cannot really be 100% guaranteed to work every time. Please see the iOS SDK documentation for some discussion, but also note that even with correct configuration, the system could fail to retrieve your apple-app-site-association file for any given installation, which could render your universal links temporarily inoperable on that device. This means that your paymentUrl needs to show some sensible content in case it is opened in Safari. There are a few ways of going at this, but one possibility, assuming you have a working implementation for web in place, is to show your regular payment page, allow the payment to complete there, and then try to launch your application, perhaps by a custom-scheme url, or a universal link to a separate domain. Take a look at what the SDK does to not be trapped by unhappy circumstances. Note that the Universal Links documentation is not explicit on which UIApplicationDelegate method is called when an application opens a universal link with UIApplication.open(_:options:completionHandler:) (i.e. application(_:open:options:) or application(_:continue:restorationHandler:)). It is probably best to implement both. Universal Links opened from Safari will callback to application(_:continue:restorationHandler:). Android: Add An Intent Filter For The PaymentUrl Android has always supported apps handling urls matching a pattern. Therefore, it seems sensible to just create an intent filter matching any paymentUrl you might create. As paymentUrls are entirely under your control, you can design a system where they fit a pattern that can be realized as an intent filter. You then receive the url in the relevant app component in the normal manner, and proceed to reload the paymentUrl in your web view. The payment process will then continue normally. The downsides of this are: You are restricted in how you can change the way you form paymentUrls There are other apps that can also handle the paymentUrl, namely the browser Because of the latter, when an external application opens paymentUrl, there are three things that can happen: paymentUrl is opened in your app paymentUrl is opened in another app, e.g. Chrome an app chooser is shown The second one is obviously undesirable. The last one is also not great. The user is not expecting to “open a url”, and may well make the “wrong” choice here, and it is anyway a bad user experience. Autoverify To The Rescue? Since Android 6.0 it has been possible to use a mechanism very similar to Apple’s Universal Links to “strongly” assing http(s) urls to applications. This works by adding an android:autoVerify=\"true\" attribute to the intent filter, plus a .well-known/assetlinks.json file to the server. This could solve the problems above, but it has its own issues, namely: Requires Android 6.0 Is really quite cumbersome to setup The SDK does not use this method. Android: Have PaymentUrl Redirect To An Intent Url Another option on Android is to allow the https paymentUrl to be opened in Chrome normally, but have that url redirect to an intent url. That intent url can be made specific to your application, making it so that unless the user has installed an application with the same package id (from a non-Google-Play source, presumably), it will always be opened in your app. This is what the SDK does. The SDK does this by having paymentUrl return an html page that immediately redirects. In some cases the redirect will be blocked, so the page also contains a link to the same url, so the user can manually follow the redirect. Now, as here we seem to want to have paymentUrl be the url loaded in the Web View, this does not work out-of-the-box. One option is to override shouldInterceptRequest in your WebViewClient, and special-case the loading of paymentUrl. Another solution could be loading paymentUrl normally, but adding a script to the page that checks for a JavaScript interface you provide in the WebView, and it is not there, then it would issue the redirect to the intent url. For reference, the way the SDK handles paymentUrls on Android looks like this from the perspective of the backend: Request 1 2 GET /perform-payment HTTP/1.1 Host: example.com Response 1 2 3 4 5 6 7 8 9 10 11 12 HTTP/1.1 200 OK Content-Type: text/html &lt;html&gt; &lt;head&gt; &lt;title&gt;Swedbank Pay Payment&lt;/title&gt; &lt;meta http-equiv=\"refresh\" content=\"0;url=intent://example.com/perform-payment#Intent;scheme=https;action=com.swedbankpay.mobilesdk.VIEW_PAYMENTORDER;package=com.example.app;end;\"&gt; &lt;/head&gt; &lt;body&gt; &lt;a href=\"intent://example.com/perform-payment#Intent;scheme=https;action=com.swedbankpay.mobilesdk.VIEW_PAYMENTORDER;package=com.example.app;end;\"&gt;Back to app&lt;/a&gt; &lt;/body&gt; &lt;/html&gt; It uses an action defined by the SDK, and the package name of the containing application, making sure the intent is routed to the correct application, and to the correct SDK component. Note that the uri of the resulting intent is the paymentUrl. Dealing with Picky Web Pages Testing has shown, that on iOS some 3D-Secure pages do not like being opened in a web view. It does seem that this is mostly related to BankID integrations. We believe the problem stems from a configuration that sets a cookie in the browser, launches BankID, then BankID opens a different web page (not the paymentUrl), which expects to find that cookie. Now, if the first page was opened in a web view, the cookie is in that web view, but as the second page will be opened in Safari, the cookie will be nowhere to be found. Furthermore, at least in one instance, the original page in the web view will not receive any notification on the BankID process, despite being launched from there. We have not encountered this on Android, but it is quite possible for a similar situation to happen there also. Now, all of the above is speculation, and not really worth getting too deep into. The end result, however, is that some 3DS pages must be opened in Safari on iOS. The jury is still out if the same is true on Android. As we already have a way of getting back to the app (ref. paymentUrl), the simple thing to do would be to open any url not tested to work in Safari. Unfortunately, matters are further complicated by some pages not working if we do that. The two pages found in testing are now added to the list of known good pages (as the do work in the web view), but others may be out there. The current best solution is therefore to open the current page in Safari if it tries to navigate to an unknown page. This is what the SDK does: if it encounters a navigation that does not match the goodlist, it will take the current page url of the web view, and open that with UIApplication.shared.open(url) and call the decisionHandler with .cancel. (It will never happen in practice, but if the payment menu would be the current page in this situation, it will load the new url instead). The payment will eventually navigate to paymentUrl in Safari, and should return to the app. It should be noted, though, that in many cases the initial navigation to paymentUrl will be opened in Safari instead of the app in these cases. This acerbates the need for fallback mechanisms. The iOS (and possibly Android) SDKs will contain a list of known-good 3DS pages. Feel free to use this as a resource in your own implementation. Back: Process Diagrams",
    "tags": "",
    "url": "/checkout-v3/modules-sdks/mobile-sdk/plain-webview/"
  },{
    "title": "Post-Purchase v3.1",
    "text": "warning Two-phase payments: When dealing in physical goods using two-phase payment methods, all goods must be shipped before you capture the authorized amount. This is regulated in part by the Swedish Distance and Doorstep Sales Act, required in our terms and (for card payments) required by Visa and Mastercard. info When something goes wrong: When something fails during a post-purchase operation, you will get an error message in the response in the form of a problem json. See examples of the jsons in the problems section. Capture v3.1 Captures are only possible when a payment has a successful Authorization transaction, naturally excluding one-phase payment methods like Swish and Trustly. They will be marked as a Sale transaction. Two-phase payment methods like card and Vipps however, require a Capture to be completed. Please note that you have a maximum of 5 consecutive failed attempts at a capture. The payment will be locked after the fifth, and you need to contact us for further attempts. In addition to full captures, it is possible to do partial captures of the authorized amount. You can do more captures on the same payment later, up to the total authorized amount. A useful tool for when you have to split orders into several shipments. First off, you must request the order information from the server to get the request link. With this, you can request the capture with the amount to capture, and get the status back. To capture the authorized payment, we need to perform capture against the accompanying href returned in the operations list. See the abbreviated request and response below: Capture Request v3.1 Request Copy json to clipboard 1 2 3 4 POST /psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/captures HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.1 1 2 3 4 5 6 7 8 9 { \"transaction\": { \"description\": \"Capturing the authorized payment\", \"amount\": 1500, \"vatAmount\": 375, \"payeeReference\": \"AB832\", \"receiptReference\": \"AB831\" } } Show fields Hide fields Required Field Type Description check transaction object The transaction object. check description string The description of the capture transaction. check amount integer The transaction amount (including VAT, if any) entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The amount displayed is the final amount the payer paid for their order, including any payment method specific discounts or fees. check vatAmount integer The payment’s VAT (Value Added Tax) amount, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The vatAmount entered will not affect the amount shown on the payment page, which only shows the total amount. This field is used to specify how much of the total amount the VAT will be. Set to 0 (zero) if there is no VAT amount charged. check payeeReference string A unique reference from the merchant system. Set per operation to ensure an exactly-once delivery of a transactional operation. Length and content validation depends on whether the transaction.number or the payeeReference is sent to the acquirer. If Swedbank Pay handles the settlement, the transaction.number is sent and the payeeReference must be in the format of A-Za-z0-9 and string(30). If you handle the settlement, Swedbank Pay will send the payeeReference and it will be limited to the format of string(12). All characters must be digits. In Invoice Payments payeeReference is used as an invoice/receipt number, if the receiptReference is not defined.   receiptReference string(30) A unique reference to the transaction, provided by the merchant. Can be used as an invoice or receipt number as a supplement to payeeReference. check orderItems array The array of items being purchased with the order. Note that authorization orderItems will not be printed on invoices, so lines meant for print must be added in the Capture request. The authorization orderItems will, however, be used in the Merchant Portal when captures or reversals are performed, and might be shown other places later. It is required to use this field to be able to send Capture orderItems. Capture requests should only contain items meant to be captured from the order. check reference string A reference that identifies the order item. check name string The name of the order item. check type enum PRODUCT, SERVICE, SHIPPING_FEE, PAYMENT_FEE, DISCOUNT, VALUE_CODE or OTHER. The type of the order item. check class string The classification of the order item. Can be used for assigning the order item to a specific product category, such as MobilePhone. Note that class cannot contain spaces and must follow the regex pattern [\\w-]*. Swedbank Pay may use this field for statistics.   itemUrl string The URL to a page that can display the purchased item, product or similar. ︎︎︎ imageUrl string The URL to an image of the order item.   description string The human readable description of the order item.   discountDescription string The human readable description of the possible discount. check quantity number The 4 decimal precision quantity of order items being purchased. check quantityUnit string The unit of the quantity, such as pcs, grams, or similar. This is used for your own book keeping. check unitPrice integer The price per unit of order item, including VAT.   discountPrice integer If the order item is purchased at a discounted price. This field should contain that price, including VAT. check vatPercent integer The percent value of the VAT multiplied by 100, so 25% becomes 2500. check amount integer The total amount including VAT to be paid for the specified quantity of this order item, in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 SEK and 5000 equals 50.00 SEK. check vatAmount integer The total amount of VAT to be paid for the specified quantity of this order item, in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 SEK and 5000 equals 50.00 SEK. check reference string A reference that identifies the order item. check name string The name of the order item. check type enum PRODUCT, SERVICE, SHIPPING_FEE, PAYMENT_FEE, DISCOUNT, VALUE_CODE or OTHER. The type of the order item. check class string The classification of the order item. Can be used for assigning the order item to a specific product category, such as MobilePhone. Note that class cannot contain spaces and must follow the regex pattern [\\w-]*. Swedbank Pay may use this field for statistics. ︎︎︎ itemUrl string The URL to a page that can display the purchased item, such as a product page ︎︎︎ imageUrl string The URL to an image of the order item. ︎︎︎ description string The human readable description of the order item. ︎︎︎ discountDescription string The human readable description of the possible discount. check quantity number The 4 decimal precision quantity of order items being purchased. check quantityUnit string The unit of the quantity, such as pcs, grams, or similar. check unitPrice integer The price per unit of order item, including VAT. ︎︎︎ discountPrice integer If the order item is purchased at a discounted price. This field should contain that price, including VAT. check vatPercent integer The percent value of the VAT multiplied by 100, so 25% becomes 2500. check amount integer The total amount including VAT to be paid for the specified quantity of this order item, in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 NOK and 5000 equals 50.00 NOK. check vatAmount integer The total amount of VAT to be paid for the specified quantity of this order item, in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 NOK and 5000 equals 50.00 NOK. Capture Response v3.1 If the capture request succeeds, this should be the response: Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.1 api-supported-versions: 3.1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 { \"paymentOrder\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d\", \"created\": \"2020-03-03T07:19:27.5636519Z\", \"updated\": \"2020-03-03T07:21:00.5605905Z\", \"operation\": \"Purchase\", \"status\": \"Paid\", \"currency\": \"SEK\", \"amount\": 1500, \"vatAmount\": 375, \"remainingCaptureAmount\": 0, // Only present after a partial capture \"remainingCancellationAmount\": 0, // Only present after a partial capture \"remainingReversalAmount\": 1500, \"description\": \"Test Purchase\", \"initiatingSystemUserAgent\": \"&lt;should be set by the system calling POST:/psp/paymentorders&gt;\", \"language\": \"sv-SE\", \"availableInstruments\": [ \"CreditCard\", \"Invoice-PayExFinancingSe\", \"Invoice-PayMonthlyInvoiceSe\", \"Swish\", \"CreditAccount\", \"Trustly\" ], \"implementation\": \"PaymentsOnly\", \"integration\": \"HostedView|Redirect\", \"instrumentMode\": false, \"guestMode\": true, \"orderItems\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/orderitems\" }, \"urls\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/urls\" }, \"payeeInfo\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/payeeInfo\" }, \"payer\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/payers\" }, \"history\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/history\" }, \"failed\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/failed\" }, \"aborted\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/aborted\" }, \"paid\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/paid\" }, \"cancelled\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/cancelled\" }, \"financialTransactions\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/financialtransactions\" }, \"failedAttempts\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/failedattempts\" }, \"postPurchaseFailedAttempts\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/postpurchasefailedattempts\" }, \"metadata\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/metadata\" } }, \"operations\": [ { \"href\": \"https://api.payex.com/psp/paymentorders/222a50ca-b268-4b32-16fa-08d6d3b73224/reversals\", \"rel\": \"reversal\", \"method\": \"POST\", \"contentType\": \"application/json\" }, ] } Show fields Hide fields Property Type Description paymentOrder string The relative URL of the payment order this capture transaction belongs to. id string The relative URL of the created capture transaction. created string The ISO-8601 date and time of when the transaction was created. updated string The ISO-8601 date and time of when the transaction was updated. operation string Determines the initial operation, defining the type of payment order created. status string Initialized, Paid, Failed, Reversed Cancelled, or Aborted. Indicates the payment order’s current status. currency string The currency of the payment order. amount integer The transaction amount (including VAT, if any) entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The amount displayed is the final amount the payer paid for their order, including any payment method specific discounts or fees. vatAmount integer The payment’s VAT (Value Added Tax) amount, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The vatAmount entered will not affect the amount shown on the payment page, which only shows the total amount. This field is used to specify how much of the total amount the VAT will be. Set to 0 (zero) if there is no VAT amount charged. remainingCaptureAmount integer The remaining authorized amount that is still possible to capture. remainingCancellationAmount integer The remaining authorized amount that is still possible to cancel. remainingReversalAmount integer The remaining captured amount that is still available for reversal. description string A textual description of the purchase. Maximum length is 40 characters. initiatingSystemUserAgent string The user agent of the HTTP client making the request, reflecting the value sent in the User-Agent header with the initial POST request which created the Payment Order. language string sv-SE, nb-NO, da-DK, en-US or fi-FI. availableInstruments string A list of payment methods available for this payment. implementation string The merchant’s Digital Payments implementation type. Enterprise or PaymentsOnly. We ask that you don’t build logic around this field’s response. It is mainly for information purposes, as the implementation types might be subject to name changes. If this should happen, updated information will be available in this table. integration string The merchant’s Digital Payments integration type. HostedView (Seamless View) or Redirect. This field will not be populated until the payer has opened the payment UI, and the client script has identified if Swedbank Pay or another URI is hosting the container with the payment iframe. We ask that you don’t build logic around this field’s response. It is mainly for information purposes. as the integration types might be subject to name changes, If this should happen, updated information will be available in this table. instrumentMode bool Set to true or false. Indicates if the payment is initialized with only one payment method available. guestMode bool Set to true or false. Indicates if the payer chose to pay as a guest or not. When using the Payments Only implementation, this is triggered by not including a payerReference in the original paymentOrder request. orderItems id The URL to the orderItems resource where information about the order items can be retrieved. urls id The URL to the urls resource where all URLs related to the payment order can be retrieved. payeeInfo id The URL to the payeeInfo resource where information related to the payee can be retrieved. payer id The URL to the payer resource where information about the payer can be retrieved. history id The URL to the history resource where information about the payment’s history can be retrieved. failed id The URL to the failed resource where information about the failed transactions can be retrieved. aborted id The URL to the aborted resource where information about the aborted transactions can be retrieved. paid id The URL to the paid resource where information about the paid transactions can be retrieved. cancelled id The URL to the cancelled resource where information about the cancelled transactions can be retrieved. financialTransactions id The URL to the financialTransactions resource where information about the financial transactions can be retrieved. failedAttempts id The URL to the failedAttempts resource where information about the failed attempts can be retrieved. postPurchaseFailedAttempts id The URL to the postPurchaseFailedAttempts resource where information about the failed capture, cancel or reversal attempts can be retrieved. metadata id The URL to the metadata resource where information about the metadata can be retrieved. operations array The array of operations that are possible to perform on the payment order in its current state. See Operations for details. Capture Sequence Diagram sequenceDiagram participant Merchant participant SwedbankPay as Swedbank Pay rect rgba(81,43,43,0.1) activate Merchant note left of Payer: Capture Merchant -&gt;&gt;+ SwedbankPay: rel:capture deactivate Merchant SwedbankPay --&gt;&gt;- Merchant: Capture status note right of Merchant: Capture here only if the purchased&lt;br/&gt;goods don't require shipping.&lt;br/&gt;If shipping is required, perform capture&lt;br/&gt;after the goods have shipped.&lt;br&gt;Should only be used for &lt;br&gt;Payment Methods that support &lt;br&gt;Authorizations. end The purchase should now be complete. But what if the purchase is cancelled or the payer wants to return goods? For these instances, we have cancel and reversal. Cancel v3.1 The cancellations resource lists the cancellation transactions on a specific payment. Create Cancel Transaction To cancel a previously created payment, you must perform the cancel operation against the accompanying href returned in the operations list. You can only cancel a payment - or part of a payment - which has not been captured yet. There must be funds left that are only authorized. If you cancel before any capture has been done, no captures can be performed later. Cancel Request v3.1 Request Copy json to clipboard 1 2 3 4 POST /psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/cancellations HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.1 1 2 3 4 5 6 { \"transaction\": { \"description\": \"Test Cancellation\", \"payeeReference\": \"ABC123\" } } Required Field Type Description check transaction object The transaction object. check description string A textual description of why the transaction is cancelled. check payeeReference string A unique reference from the merchant system. Set per operation to ensure an exactly-once delivery of a transactional operation. Length and content validation depends on whether the transaction.number or the payeeReference is sent to the acquirer. If Swedbank Pay handles the settlement, the transaction.number is sent and the payeeReference must be in the format of A-Za-z0-9 and string(30). If you handle the settlement, Swedbank Pay will send the payeeReference and it will be limited to the format of string(12). All characters must be digits. Cancel Response v3.1 If the cancel request succeeds, the response should be similar to the example below: Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.1 api-supported-versions: 3.1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 { \"paymentOrder\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d\", \"created\": \"2020-03-03T07:19:27.5636519Z\", \"updated\": \"2020-03-03T07:21:00.5605905Z\", \"operation\": \"Purchase\", \"status\": \"Cancelled\", \"currency\": \"SEK\", \"amount\": 1500, \"vatAmount\": 375, \"description\": \"Test Purchase\", \"initiatingSystemUserAgent\": \"&lt;should be set by the system calling POST:/psp/paymentorders&gt;\", \"language\": \"sv-SE\", \"availableInstruments\": [ \"CreditCard\", \"Invoice-PayExFinancingSe\", \"Invoice-PayMonthlyInvoiceSe\", \"Swish\", \"CreditAccount\", \"Trustly\" ], \"implementation\": \"PaymentsOnly\", \"integration\": \"HostedView|Redirect\", \"instrumentMode\": true, \"guestMode\": true, \"orderItems\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/orderitems\" }, \"urls\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/urls\" }, \"payeeInfo\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/payeeInfo\" }, \"payer\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/payers\" }, \"history\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/history\" }, \"failed\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/failed\" }, \"aborted\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/aborted\" }, \"paid\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/paid\" }, \"cancelled\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/cancelled\" }, \"financialTransactions\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/financialtransactions\" }, \"failedAttempts\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/failedattempts\" }, \"postPurchaseFailedAttempts\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/postpurchasefailedattempts\" }, \"metadata\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/metadata\" } }, \"operations\": [ ] } Show fields Hide fields Property Type Description paymentOrder string The relative URL of the payment order this capture transaction belongs to. id string The relative URL of the created capture transaction. created string The ISO-8601 date and time of when the transaction was created. updated string The ISO-8601 date and time of when the transaction was updated. operation string Determines the initial operation, defining the type of payment order created. status string Initialized, Paid, Failed, Reversed Cancelled, or Aborted. Indicates the payment order’s current status. currency string The currency of the payment order. amount integer The transaction amount (including VAT, if any) entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The amount displayed is the final amount the payer paid for their order, including any payment method specific discounts or fees. vatAmount integer The payment’s VAT (Value Added Tax) amount, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The vatAmount entered will not affect the amount shown on the payment page, which only shows the total amount. This field is used to specify how much of the total amount the VAT will be. Set to 0 (zero) if there is no VAT amount charged. remainingCaptureAmount integer The remaining authorized amount that is still possible to capture. remainingCancellationAmount integer The remaining authorized amount that is still possible to cancel. remainingReversalAmount integer The remaining captured amount that is still available for reversal. description string A textual description of the purchase. Maximum length is 40 characters. initiatingSystemUserAgent string The user agent of the HTTP client making the request, reflecting the value sent in the User-Agent header with the initial POST request which created the Payment Order. language string sv-SE, nb-NO, da-DK, en-US or fi-FI. availableInstruments string A list of payment methods available for this payment. implementation string The merchant’s Digital Payments implementation type. Enterprise or PaymentsOnly. We ask that you don’t build logic around this field’s response. It is mainly for information purposes, as the implementation types might be subject to name changes. If this should happen, updated information will be available in this table. integration string The merchant’s Digital Payments integration type. HostedView (Seamless View) or Redirect. This field will not be populated until the payer has opened the payment UI, and the client script has identified if Swedbank Pay or another URI is hosting the container with the payment iframe. We ask that you don’t build logic around this field’s response. It is mainly for information purposes. as the integration types might be subject to name changes, If this should happen, updated information will be available in this table. instrumentMode bool Set to true or false. Indicates if the payment is initialized with only one payment method available. guestMode bool Set to true or false. Indicates if the payer chose to pay as a guest or not. When using the Payments Only implementation, this is triggered by not including a payerReference in the original paymentOrder request. orderItems id The URL to the orderItems resource where information about the order items can be retrieved. urls id The URL to the urls resource where all URLs related to the payment order can be retrieved. payeeInfo id The URL to the payeeInfo resource where information related to the payee can be retrieved. payer id The URL to the payer resource where information about the payer can be retrieved. history id The URL to the history resource where information about the payment’s history can be retrieved. failed id The URL to the failed resource where information about the failed transactions can be retrieved. aborted id The URL to the aborted resource where information about the aborted transactions can be retrieved. paid id The URL to the paid resource where information about the paid transactions can be retrieved. cancelled id The URL to the cancelled resource where information about the cancelled transactions can be retrieved. financialTransactions id The URL to the financialTransactions resource where information about the financial transactions can be retrieved. failedAttempts id The URL to the failedAttempts resource where information about the failed attempts can be retrieved. postPurchaseFailedAttempts id The URL to the postPurchaseFailedAttempts resource where information about the failed capture, cancel or reversal attempts can be retrieved. metadata id The URL to the metadata resource where information about the metadata can be retrieved. operations array The array of operations that are possible to perform on the payment order in its current state. See Operations for details. Cancel Sequence Diagram Cancel can only be done on an authorized transaction. As a cancellation does not have an amount associated with it, it will release the entire reserved amount. If your intention is to make detailed handling, such as only capturing a partial amount of the transaction, you must start with the capture of the desired amount before performing a cancel for the remaining reserved funds. sequenceDiagram participant SwedbankPay as Swedbank Pay Merchant-&gt;&gt;SwedbankPay: POST &lt; cancellation&gt; activate Merchant activate SwedbankPay SwedbankPay--&gt;&gt;Merchant: transaction resource deactivate SwedbankPay deactivate Merchant Reversal v3.1 This transaction is used when a Capture or Sale payment needs to be reversed. Please note that you have a maximum of 5 consecutive failed attempts at a reversal. The payment will be locked after this, and you need to contact us for another attempt. If the full amount of a sale transaction or a captured transaction is reversed, The transaction will now have status Reversed instead of Paid. Create Reversal Transaction If we want to reverse a previously captured amount, we need to perform reversal against the accompanying href returned in the operations list. Reversal Request v3.1 Request Copy json to clipboard 1 2 3 4 POST /psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/reversals HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.1 1 2 3 4 5 6 7 8 { \"transaction\": { \"description\": \"Reversal of captured transaction\", \"amount\": 1500, \"vatAmount\": 375, \"payeeReference\": \"ABC123\" } } Show fields Hide fields Required Field Type Description check transaction object The transaction object. check amount integer The transaction amount (including VAT, if any) entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The amount displayed is the final amount the payer paid for their order, including any payment method specific discounts or fees. check vatAmount integer The payment’s VAT (Value Added Tax) amount, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The vatAmount entered will not affect the amount shown on the payment page, which only shows the total amount. This field is used to specify how much of the total amount the VAT will be. Set to 0 (zero) if there is no VAT amount charged. check payeeReference string A unique reference from the merchant system. Set per operation to ensure an exactly-once delivery of a transactional operation. Length and content validation depends on whether the transaction.number or the payeeReference is sent to the acquirer. If Swedbank Pay handles the settlement, the transaction.number is sent and the payeeReference must be in the format of A-Za-z0-9 and string(30). If you handle the settlement, Swedbank Pay will send the payeeReference and it will be limited to the format of string(12). All characters must be digits. In Invoice Payments payeeReference is used as an invoice/receipt number, if the receiptReference is not defined.   receiptReference string(30) A unique reference to the transaction, provided by the merchant. Can be used as an invoice or receipt number as a supplement to payeeReference. check description string Textual description of why the transaction is reversed. check orderItems array The array of items being purchased with the order. Note that authorization orderItems will not be printed on invoices, so lines meant for print must be added in the Capture request. The authorization orderItems will, however, be used in the Merchant Portal when captures or reversals are performed, and might be shown other places later. It is required to use this field to be able to send Capture orderItems. Capture requests should only contain items meant to be captured from the order. check reference string A reference that identifies the order item. check name string The name of the order item. check type enum PRODUCT, SERVICE, SHIPPING_FEE, PAYMENT_FEE, DISCOUNT, VALUE_CODE or OTHER. The type of the order item. check class string The classification of the order item. Can be used for assigning the order item to a specific product category, such as MobilePhone. Note that class cannot contain spaces and must follow the regex pattern [\\w-]*. Swedbank Pay may use this field for statistics.   itemUrl string The URL to a page that can display the purchased item, product or similar.   imageUrl string The URL to an image of the order item.   description string The human readable description of the order item.   discountDescription string The human readable description of the possible discount. check quantity number The 4 decimal precision quantity of order items being purchased. check quantityUnit string The unit of the quantity, such as pcs, grams, or similar. This is used for your own book keeping. check unitPrice integer The price per unit of order item, including VAT.   discountPrice integer If the order item is purchased at a discounted price. This field should contain that price, including VAT. check vatPercent integer The percent value of the VAT multiplied by 100, so 25% becomes 2500. check amount integer The total amount including VAT to be paid for the specified quantity of this order item, in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 SEK and 5000 equals 50.00 SEK. check vatAmount integer The total amount of VAT to be paid for the specified quantity of this order item, in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 SEK and 5000 equals 50.00 SEK. Reversal Response v3.1 If the reversal request succeeds, the response should be similar to the example below: Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.1 api-supported-versions: 3.1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 { \"paymentOrder\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d\", \"created\": \"2020-03-03T07:19:27.5636519Z\", \"updated\": \"2020-03-03T07:21:00.5605905Z\", \"operation\": \"Purchase\", \"status\": \"Reversed\", \"currency\": \"SEK\", \"amount\": 1500, \"vatAmount\": 375, \"remainingCaptureAmount\": 0, // Only present after a partial reversal \"remainingReversalAmount\": 0, // Only present after a partial reversal \"description\": \"Test Purchase\", \"initiatingSystemUserAgent\": \"&lt;should be set by the system calling POST:/psp/paymentorders&gt;\", \"language\": \"sv-SE\", \"availableInstruments\": [ \"CreditCard\", \"Invoice-PayExFinancingSe\", \"Invoice-PayMonthlyInvoiceSe\", \"Swish\", \"CreditAccount\", \"Trustly\" ], \"implementation\": \"PaymentsOnly\", \"integration\": \"HostedView|Redirect\", \"instrumentMode\": true, \"guestMode\": true, \"orderItems\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/orderitems\" }, \"urls\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/urls\" }, \"payeeInfo\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/payeeInfo\" }, \"payer\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/payers\" }, \"history\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/history\" }, \"failed\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/failed\" }, \"aborted\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/aborted\" }, \"paid\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/paid\" }, \"cancelled\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/cancelled\" }, \"financialTransactions\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/financialtransactions\" }, \"failedAttempts\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/failedattempts\" }, \"postPurchaseFailedAttempts\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/postpurchasefailedattempts\" }, \"metadata\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/metadata\" } }, \"operations\": [ ] } Show fields Hide fields Property Type Description paymentOrder string The relative URL of the payment order this capture transaction belongs to. id string The relative URL of the created capture transaction. created string The ISO-8601 date and time of when the transaction was created. updated string The ISO-8601 date and time of when the transaction was updated. operation string Determines the initial operation, defining the type of payment order created. status string Initialized, Paid, Failed, Reversed Cancelled, or Aborted. Indicates the payment order’s current status. currency string The currency of the payment order. amount integer The transaction amount (including VAT, if any) entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The amount displayed is the final amount the payer paid for their order, including any payment method specific discounts or fees. vatAmount integer The payment’s VAT (Value Added Tax) amount, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The vatAmount entered will not affect the amount shown on the payment page, which only shows the total amount. This field is used to specify how much of the total amount the VAT will be. Set to 0 (zero) if there is no VAT amount charged. remainingCaptureAmount integer The remaining authorized amount that is still possible to capture. Only present after a partial reversal. remainingCancellationAmount integer The remaining authorized amount that is still possible to cancel. Only present after a partial reversal. remainingReversalAmount integer The remaining captured amount that is still available for reversal. This field will not appear in the initial response if the payment method used was Swish. It will first appear if and when you do a GET on the payment. description string A textual description of the purchase. Maximum length is 40 characters. initiatingSystemUserAgent string The user agent of the HTTP client making the request, reflecting the value sent in the User-Agent header with the initial POST request which created the Payment Order. language string sv-SE, nb-NO, da-DK, en-US or fi-FI. availableInstruments string A list of payment methods available for this payment. implementation string The merchant’s Digital Payments implementation type. Enterprise or PaymentsOnly. We ask that you don’t build logic around this field’s response. It is mainly for information purposes, as the implementation types might be subject to name changes. If this should happen, updated information will be available in this table. integration string The merchant’s Digital Payments integration type. HostedView (Seamless View) or Redirect. This field will not be populated until the payer has opened the payment UI, and the client script has identified if Swedbank Pay or another URI is hosting the container with the payment iframe. We ask that you don’t build logic around this field’s response. It is mainly for information purposes. as the integration types might be subject to name changes, If this should happen, updated information will be available in this table. instrumentMode bool Set to true or false. Indicates if the payment is initialized with only one payment method available. guestMode bool Set to true or false. Indicates if the payer chose to pay as a guest or not. When using the Payments Only implementation, this is triggered by not including a payerReference in the original paymentOrder request. orderItems id The URL to the orderItems resource where information about the order items can be retrieved. urls id The URL to the urls resource where all URLs related to the payment order can be retrieved. payeeInfo id The URL to the payeeInfo resource where information related to the payee can be retrieved. payer id The URL to the payer resource where information about the payer can be retrieved. history id The URL to the history resource where information about the payment’s history can be retrieved. failed id The URL to the failed resource where information about the failed transactions can be retrieved. aborted id The URL to the aborted resource where information about the aborted transactions can be retrieved. paid id The URL to the paid resource where information about the paid transactions can be retrieved. cancelled id The URL to the cancelled resource where information about the cancelled transactions can be retrieved. financialTransactions id The URL to the financialTransactions resource where information about the financial transactions can be retrieved. failedAttempts id The URL to the failedAttempts resource where information about the failed attempts can be retrieved. postPurchaseFailedAttempts id The URL to the postPurchaseFailedAttempts resource where information about the failed capture, cancel or reversal attempts can be retrieved. metadata id The URL to the metadata resource where information about the metadata can be retrieved. operations array The array of operations that are possible to perform on the payment order in its current state. Add To Your Payment Request",
    "tags": "",
    "url": "/checkout-v3/get-started/post-purchase-3-1/"
  },{
    "title": "Post-Purchase",
    "text": "warning Two-phase payments: When dealing in physical goods using two-phase payment methods, all goods must be shipped before you capture the authorized amount. This is regulated in part by the Swedish Distance and Doorstep Sales Act, required in our terms and (for card payments) required by Visa and Mastercard. info When something goes wrong: When something fails during a post-purchase operation, you will get an error message in the response in the form of a problem json. See examples of the jsons in the problems section. Capture Captures are only possible when a payment has a successful Authorization transaction, naturally excluding one-phase payment methods like Swish and Trustly. They will be marked as a Sale transaction. Two-phase payment methods like card and Vipps however, require a Capture to be completed. Please note that you have a maximum of 5 consecutive failed attempts at a capture. The payment will be locked after the fifth, and you need to contact us for further attempts. In addition to full captures, it is possible to do partial captures of the authorized amount. You can do more captures on the same payment later, up to the total authorized amount. A useful tool for when you have to split orders into several shipments. First off, you must request the order information from the server to get the request link. With this, you can request the capture with the amount to capture, and get the status back. To capture the authorized payment, we need to perform capture against the accompanying href returned in the operations list. See the abbreviated request and response below: Capture Request Request Copy json to clipboard 1 2 3 4 POST /psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/captures HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.0/2.0 // Version optional 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 { \"transaction\": { \"description\": \"Capturing the authorized payment\", \"amount\": 1500, \"vatAmount\": 375, \"payeeReference\": \"AB832\", \"receiptReference\": \"AB831\", \"orderItems\": [ { \"reference\": \"P1\", \"name\": \"Product1\", \"type\": \"PRODUCT\", \"class\": \"ProductGroup1\", \"itemUrl\": \"https://example.com/products/123\", \"imageUrl\": \"https://example.com/product123.jpg\", \"description\": \"Product 1 description\", \"discountDescription\": \"Volume discount\", \"quantity\": 4, \"quantityUnit\": \"pcs\", \"unitPrice\": 300, \"discountPrice\": 200, \"vatPercent\": 2500, \"amount\": 1000, \"vatAmount\": 250 }, { \"reference\": \"P2\", \"name\": \"Product2\", \"type\": \"PRODUCT\", \"class\": \"ProductGroup1\", \"description\": \"Product 2 description\", \"quantity\": 1, \"quantityUnit\": \"pcs\", \"unitPrice\": 500, \"vatPercent\": 2500, \"amount\": 500, \"vatAmount\": 125 } ] } } Show fields Hide fields Required Field Type Description check transaction object The transaction object. check description string The description of the capture transaction. check amount integer The transaction amount (including VAT, if any) entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The amount displayed is the final amount the payer paid for their order, including any payment method specific discounts or fees. check vatAmount integer The payment’s VAT (Value Added Tax) amount, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The vatAmount entered will not affect the amount shown on the payment page, which only shows the total amount. This field is used to specify how much of the total amount the VAT will be. Set to 0 (zero) if there is no VAT amount charged. check payeeReference string A unique reference from the merchant system. Set per operation to ensure an exactly-once delivery of a transactional operation. Length and content validation depends on whether the transaction.number or the payeeReference is sent to the acquirer. If Swedbank Pay handles the settlement, the transaction.number is sent and the payeeReference must be in the format of A-Za-z0-9 and string(30). If you handle the settlement, Swedbank Pay will send the payeeReference and it will be limited to the format of string(12). All characters must be digits. In Invoice Payments payeeReference is used as an invoice/receipt number, if the receiptReference is not defined.   receiptReference string(30) A unique reference to the transaction, provided by the merchant. Can be used as an invoice or receipt number as a supplement to payeeReference. check orderItems array The array of items being purchased with the order. Note that authorization orderItems will not be printed on invoices, so lines meant for print must be added in the Capture request. The authorization orderItems will, however, be used in the Merchant Portal when captures or reversals are performed, and might be shown other places later. It is required to use this field to be able to send Capture orderItems. Capture requests should only contain items meant to be captured from the order. check reference string A reference that identifies the order item. check name string The name of the order item. check type enum PRODUCT, SERVICE, SHIPPING_FEE, PAYMENT_FEE, DISCOUNT, VALUE_CODE or OTHER. The type of the order item. check class string The classification of the order item. Can be used for assigning the order item to a specific product category, such as MobilePhone. Note that class cannot contain spaces and must follow the regex pattern [\\w-]*. Swedbank Pay may use this field for statistics.   itemUrl string The URL to a page that can display the purchased item, product or similar. ︎︎︎ imageUrl string The URL to an image of the order item.   description string The human readable description of the order item.   discountDescription string The human readable description of the possible discount. check quantity number The 4 decimal precision quantity of order items being purchased. check quantityUnit string The unit of the quantity, such as pcs, grams, or similar. This is used for your own book keeping. check unitPrice integer The price per unit of order item, including VAT.   discountPrice integer If the order item is purchased at a discounted price. This field should contain that price, including VAT. check vatPercent integer The percent value of the VAT multiplied by 100, so 25% becomes 2500. check amount integer The total amount including VAT to be paid for the specified quantity of this order item, in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 SEK and 5000 equals 50.00 SEK. check vatAmount integer The total amount of VAT to be paid for the specified quantity of this order item, in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 SEK and 5000 equals 50.00 SEK. check reference string A reference that identifies the order item. check name string The name of the order item. check type enum PRODUCT, SERVICE, SHIPPING_FEE, PAYMENT_FEE, DISCOUNT, VALUE_CODE or OTHER. The type of the order item. check class string The classification of the order item. Can be used for assigning the order item to a specific product category, such as MobilePhone. Note that class cannot contain spaces and must follow the regex pattern [\\w-]*. Swedbank Pay may use this field for statistics. ︎︎︎ itemUrl string The URL to a page that can display the purchased item, such as a product page ︎︎︎ imageUrl string The URL to an image of the order item. ︎︎︎ description string The human readable description of the order item. ︎︎︎ discountDescription string The human readable description of the possible discount. check quantity number The 4 decimal precision quantity of order items being purchased. check quantityUnit string The unit of the quantity, such as pcs, grams, or similar. check unitPrice integer The price per unit of order item, including VAT. ︎︎︎ discountPrice integer If the order item is purchased at a discounted price. This field should contain that price, including VAT. check vatPercent integer The percent value of the VAT multiplied by 100, so 25% becomes 2500. check amount integer The total amount including VAT to be paid for the specified quantity of this order item, in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 NOK and 5000 equals 50.00 NOK. check vatAmount integer The total amount of VAT to be paid for the specified quantity of this order item, in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 NOK and 5000 equals 50.00 NOK. Capture Response If the capture request succeeds, this should be the response: Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.0/2.0 api-supported-versions: 3.0/2.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 { \"payment\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"capture\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"transaction\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2020-06-22T10:56:56.2927632Z\", \"updated\": \"2020-06-22T10:56:56.4035291Z\", \"type\": \"Capture\", \"state\": \"Completed\", \"amount\": 1500, \"vatAmount\": 375, \"description\": \"Capturing the authorized payment\", \"payeeReference\": \"AB832\", \"receiptReference\": \"AB831\" } } } Show fields Hide fields Property Type Description payment string The relative URL of the payment this capture transaction belongs to. capture object The capture object, containing the information about the capture transaction. id string The relative URL of the created capture transaction. transaction object The object representation of the generic transaction resource, containing information about the current transaction. id string The relative URL of the current transaction resource. created string The ISO-8601 date and time of when the transaction was created. updated string The ISO-8601 date and time of when the transaction was updated. type string Indicates the transaction type. state string Indicates the state of the transaction, usually initialized, completed or failed. If a partial has been done and further transactions are possible, the state will be awaitingActivity. number integer The transaction number, useful when there’s need to reference the transaction in human communication. Not usable for programmatic identification of the transaction, where id should be used instead. amount integer The transaction amount (including VAT, if any) entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The amount displayed is the final amount the payer paid for their order, including any payment method specific discounts or fees. vatAmount integer The payment’s VAT (Value Added Tax) amount, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The vatAmount entered will not affect the amount shown on the payment page, which only shows the total amount. This field is used to specify how much of the total amount the VAT will be. Set to 0 (zero) if there is no VAT amount charged. description string A textual description of the purchase. Maximum length is 40 characters. payeeReference string A unique reference from the merchant system. Set per operation to ensure an exactly-once delivery of a transactional operation. Length and content validation depends on whether the transaction.number or the payeeReference is sent to the acquirer. If Swedbank Pay handles the settlement, the transaction.number is sent and the payeeReference must be in the format of A-Za-z0-9 and string(30). If you handle the settlement, Swedbank Pay will send the payeeReference and it will be limited to the format of string(12). All characters must be digits. In Invoice Payments payeeReference is used as an invoice/receipt number, if the receiptReference is not defined. receiptReference string(30) A unique reference from the merchant system. It is set per operation to ensure an exactly-once delivery of a transactional operation. It is used to supplement payeeReference as an additional receipt number. Capture Sequence Diagram sequenceDiagram participant Merchant participant SwedbankPay as Swedbank Pay rect rgba(81,43,43,0.1) activate Merchant note left of Payer: Capture Merchant -&gt;&gt;+ SwedbankPay: rel:capture deactivate Merchant SwedbankPay --&gt;&gt;- Merchant: Capture status note right of Merchant: Capture here only if the purchased&lt;br/&gt;goods don't require shipping.&lt;br/&gt;If shipping is required, perform capture&lt;br/&gt;after the goods have shipped.&lt;br&gt;Should only be used for &lt;br&gt;payment methods that support &lt;br&gt;Authorizations. end The purchase should now be complete. But what if the purchase is cancelled or the payer wants to return goods? For these instances, we have cancel and reversal. Cancel The cancellations resource lists the cancellation transactions on a specific payment. Create Cancel Transaction To cancel a previously created payment, you must perform the cancel operation against the accompanying href returned in the operations list. You can only cancel a payment - or part of a payment - which has not been captured yet. There must be funds left that are only authorized. If you cancel before any capture has been done, no captures can be performed later. Cancel Request Request Copy json to clipboard 1 2 3 4 POST /psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/cancellations HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.0/2.0 // Version optional 1 2 3 4 5 6 { \"transaction\": { \"description\": \"Test Cancellation\", \"payeeReference\": \"ABC123\" } } Required Field Type Description check transaction object The transaction object. check description string A textual description of why the transaction is cancelled. check payeeReference string A unique reference from the merchant system. Set per operation to ensure an exactly-once delivery of a transactional operation. Length and content validation depends on whether the transaction.number or the payeeReference is sent to the acquirer. If Swedbank Pay handles the settlement, the transaction.number is sent and the payeeReference must be in the format of A-Za-z0-9 and string(30). If you handle the settlement, Swedbank Pay will send the payeeReference and it will be limited to the format of string(12). All characters must be digits. Cancel Response If the cancel request succeeds, the response should be similar to the example below: Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.0/2.0 api-supported-versions: 3.0/2.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 { \"payment\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"cancellation\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/cancellations/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"transaction\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2022-01-31T09:49:13.7567756Z\", \"updated\": \"2022-01-31T09:49:14.7374165Z\", \"type\": \"Cancellation\", \"state\": \"Completed\", \"number\": 71100732065, \"amount\": 1500, \"vatAmount\": 375, \"description\": \"Test Cancellation\", \"payeeReference\": \"AB123\" } } } Show fields Hide fields Property Type Description payment string The relative URL of the payment this cancellation transaction belongs to. cancellation object The cancellation object, containing information about the cancellation transaction. id string The relative URL of the cancellation transaction. transaction object The object representation of the generic transaction resource, containing information about the current transaction. id string The relative URL of the current transaction resource. created string The ISO-8601 date and time of when the transaction was created. updated string The ISO-8601 date and time of when the transaction was updated. type string Indicates the transaction type. state string Initialized, Completed or Failed. Indicates the state of the transaction. number integer The transaction number, useful when there’s need to reference the transaction in human communication. Not usable for programmatic identification of the transaction, where id should be used instead. amount integer The transaction amount (including VAT, if any) entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The amount displayed is the final amount the payer paid for their order, including any payment method specific discounts or fees. vatAmount integer The payment’s VAT (Value Added Tax) amount, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The vatAmount entered will not affect the amount shown on the payment page, which only shows the total amount. This field is used to specify how much of the total amount the VAT will be. Set to 0 (zero) if there is no VAT amount charged. description string A human readable description of maximum 40 characters of the transaction. payeeReference string A unique reference from the merchant system. Set per operation to ensure an exactly-once delivery of a transactional operation. Length and content validation depends on whether the transaction.number or the payeeReference is sent to the acquirer. If Swedbank Pay handles the settlement, the transaction.number is sent and the payeeReference must be in the format of A-Za-z0-9 and string(30). If you handle the settlement, Swedbank Pay will send the payeeReference and it will be limited to the format of string(12). All characters must be digits. In Invoice Payments payeeReference is used as an invoice/receipt number, if the receiptReference is not defined. Cancel Sequence Diagram Cancel can only be done on an authorized transaction. As a cancellation does not have an amount associated with it, it will release the entire reserved amount. If your intention is to make detailed handling, such as only capturing a partial amount of the transaction, you must start with the capture of the desired amount before performing a cancel for the remaining reserved funds. sequenceDiagram participant SwedbankPay as Swedbank Pay Merchant-&gt;&gt;SwedbankPay: POST &lt; cancellation&gt; activate Merchant activate SwedbankPay SwedbankPay--&gt;&gt;Merchant: transaction resource deactivate SwedbankPay deactivate Merchant Reversal This transaction is used when a Capture or Sale payment needs to be reversed. Please note that you have a maximum of 5 consecutive failed attempts at a reversal. The payment will be locked after this, and you need to contact us for another attempt. Create Reversal Transaction If we want to reverse a previously captured amount, we need to perform reversal against the accompanying href returned in the operations list. Reversal Request Request Copy json to clipboard 1 2 3 4 POST /psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/reversals HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.0/2.0 // Version optional for 3.0 and 2.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 { \"transaction\": { \"description\": \"Reversal of captured transaction\", \"amount\": 1500, \"vatAmount\": 375, \"payeeReference\": \"ABC123\", \"receiptReference\": \"ABC122\", \"orderItems\": [ { \"reference\": \"P1\", \"name\": \"Product1\", \"type\": \"PRODUCT\", \"class\": \"ProductGroup1\", \"itemUrl\": \"https://example.com/products/123\", \"imageUrl\": \"https://example.com/product123.jpg\", \"description\": \"Product 1 description\", \"discountDescription\": \"Volume discount\", \"quantity\": 4, \"quantityUnit\": \"pcs\", \"unitPrice\": 300, \"discountPrice\": 200, \"vatPercent\": 2500, \"amount\": 1000, \"vatAmount\": 250 }, { \"reference\": \"P2\", \"name\": \"Product2\", \"type\": \"PRODUCT\", \"class\": \"ProductGroup1\", \"description\": \"Product 2 description\", \"quantity\": 1, \"quantityUnit\": \"pcs\", \"unitPrice\": 500, \"vatPercent\": 2500, \"amount\": 500, \"vatAmount\": 125 } ] } } Show fields Hide fields Required Field Type Description check transaction object The transaction object. check amount integer The transaction amount (including VAT, if any) entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The amount displayed is the final amount the payer paid for their order, including any payment method specific discounts or fees. check vatAmount integer The payment’s VAT (Value Added Tax) amount, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The vatAmount entered will not affect the amount shown on the payment page, which only shows the total amount. This field is used to specify how much of the total amount the VAT will be. Set to 0 (zero) if there is no VAT amount charged. check payeeReference string A unique reference from the merchant system. Set per operation to ensure an exactly-once delivery of a transactional operation. Length and content validation depends on whether the transaction.number or the payeeReference is sent to the acquirer. If Swedbank Pay handles the settlement, the transaction.number is sent and the payeeReference must be in the format of A-Za-z0-9 and string(30). If you handle the settlement, Swedbank Pay will send the payeeReference and it will be limited to the format of string(12). All characters must be digits. In Invoice Payments payeeReference is used as an invoice/receipt number, if the receiptReference is not defined.   receiptReference string(30) A unique reference to the transaction, provided by the merchant. Can be used as an invoice or receipt number as a supplement to payeeReference. check description string Textual description of why the transaction is reversed. check orderItems array The array of items being purchased with the order. Note that authorization orderItems will not be printed on invoices, so lines meant for print must be added in the Capture request. The authorization orderItems will, however, be used in the Merchant Portal when captures or reversals are performed, and might be shown other places later. It is required to use this field to be able to send Capture orderItems. Capture requests should only contain items meant to be captured from the order. check reference string A reference that identifies the order item. check name string The name of the order item. check type enum PRODUCT, SERVICE, SHIPPING_FEE, PAYMENT_FEE, DISCOUNT, VALUE_CODE or OTHER. The type of the order item. check class string The classification of the order item. Can be used for assigning the order item to a specific product category, such as MobilePhone. Note that class cannot contain spaces and must follow the regex pattern [\\w-]*. Swedbank Pay may use this field for statistics.   itemUrl string The URL to a page that can display the purchased item, product or similar.   imageUrl string The URL to an image of the order item.   description string The human readable description of the order item.   discountDescription string The human readable description of the possible discount. check quantity number The 4 decimal precision quantity of order items being purchased. check quantityUnit string The unit of the quantity, such as pcs, grams, or similar. This is used for your own book keeping. check unitPrice integer The price per unit of order item, including VAT.   discountPrice integer If the order item is purchased at a discounted price. This field should contain that price, including VAT. check vatPercent integer The percent value of the VAT multiplied by 100, so 25% becomes 2500. check amount integer The total amount including VAT to be paid for the specified quantity of this order item, in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 SEK and 5000 equals 50.00 SEK. check vatAmount integer The total amount of VAT to be paid for the specified quantity of this order item, in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 SEK and 5000 equals 50.00 SEK. Reversal Response If the reversal request succeeds, the response should be similar to the example below: Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.0/2.0 api-supported-versions: 3.0/2.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 { \"payment\": \"/psp/creditcard/payments/09ccd29a-7c4f-4752-9396-12100cbfecce\", \"reversal\": { \"id\": \"/psp/creditcard/payments/09ccd29a-7c4f-4752-9396-12100cbfecce/reversals/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"transaction\": { \"id\": \"/psp/pcreditcard/payments/09ccd29a-7c4f-4752-9396-12100cbfecce/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2022-01-26T14:00:03.4725904Z\", \"updated\": \"2022-01-26T14:00:04.3851302Z\", \"type\": \"Reversal\", \"state\": \"Completed\", \"number\": 71100730898, \"amount\": 1500, \"vatAmount\": 375, \"description\": \"Reversing the capture amount\", \"payeeReference\": \"ABC123\", \"receiptReference\": \"ABC122\" \"isOperational\": false, \"reconciliationNumber\": 738180, \"operations\": [] } } } Show fields Hide fields Property Type Description payment string The relative URL of the payment this reversal transaction belongs to. reversals object The reversal object, containing information about the reversal transaction. id string The relative URL of the reversal transaction. transaction object The object representation of the generic transaction resource, containing information about the current transaction. id string The relative URL of the current transaction resource. created string The ISO-8601 date and time of when the transaction was created. updated string The ISO-8601 date and time of when the transaction was updated. type string Indicates the transaction type. state string Indicates the state of the transaction, usually initialized, completed or failed. If a partial has been done and further transactions are possible, the state will be awaitingActivity. number integer The transaction number, useful when there’s need to reference the transaction in human communication. Not usable for programmatic identification of the transaction, where id should be used instead. amount integer The transaction amount (including VAT, if any) entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The amount displayed is the final amount the payer paid for their order, including any payment method specific discounts or fees. vatAmount integer The payment’s VAT (Value Added Tax) amount, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The vatAmount entered will not affect the amount shown on the payment page, which only shows the total amount. This field is used to specify how much of the total amount the VAT will be. Set to 0 (zero) if there is no VAT amount charged. description string A human readable description of maximum 40 characters of the transaction. payeeReference string A unique reference from the merchant system. Set per operation to ensure an exactly-once delivery of a transactional operation. Length and content validation depends on whether the transaction.number or the payeeReference is sent to the acquirer. If Swedbank Pay handles the settlement, the transaction.number is sent and the payeeReference must be in the format of A-Za-z0-9 and string(30). If you handle the settlement, Swedbank Pay will send the payeeReference and it will be limited to the format of string(12). All characters must be digits. In Invoice Payments payeeReference is used as an invoice/receipt number, if the receiptReference is not defined. receiptReference string(30) A unique reference to the transaction, provided by the merchant. Can be used as an invoice or receipt number as a supplement to payeeReference. isOperational boolean true if the transaction is operational; otherwise false . reconciliationNumber string The number of the reconciliation batch file where the transaction can be found. operations array The array of operations that are possible to perform on the payment order in its current state. Add To Your Payment Request",
    "tags": "",
    "url": "/checkout-v3/get-started/post-purchase/"
  },{
    "title": "Problems",
    "text": "Problems When performing operations against a resource in the Swedbank Pay API Platform, it will respond with a problem message that contain details of the error type if the request could not be successfully performed. Regardless of why the error occurred, the problem message will follow the same structure as specified in the Problem Details for HTTP APIs (RFC 7807) specification. We generally use the problem message type and status code to identify the nature of the problem. The problems array contains objects with name and description that will often help narrow down the specifics of the problem, usually to the field in the request that was missing or contained invalid data. The structure of a problem message will look like this: Problem Example Copy json to clipboard 1 2 3 4 5 6 7 8 9 10 11 { \"type\": \"https://api.payex.com/psp/errordetail/&lt;resource&gt;/inputerror\", \"title\": \"There was an input error\", \"detail\": \"Please correct the errors and retry the request\", \"instance\": \"ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"status\": 400, \"problems\": [{ \"name\": \"CreditCardParameters.Issuer\", \"description\": \"minimum one issuer must be enabled\" }] } Field Type Description type string The URL that identifies the error type. This is the only field usable for programmatic identification of the type of error! When dereferenced, it might lead you to a human readable description of the error and how it can be recovered from. title string The title contains a human readable description of the error. detail string A detailed, human readable description of the error and how you can recover from it. instance string The identifier of the error instance. This might be of use to Swedbank Pay support personnel in order to find the exact error and the context it occurred in. status integer The HTTP status code that the problem was served with. action string The action indicates how the error can be recovered from. problems array The array of problem detail objects. name string The name of the field, header, object, entity or likewise that was erroneous. description string The human readable description of what was wrong with the field, header, object, entity or likewise identified by name. Common Problems All common problem types will have a URL in the format https://api.payex.com/psp/errordetail/&lt;error-type&gt;. The URL is an identifier that you can hard-code and implement logic around. It is currently not not possible to dereference this URL, although that might be possible in the future. Type Status Description inputerror 400 The server cannot or will not process the request due to an apparent client error (e.g. malformed request syntax, size to large, invalid request). configurationerror 403 A error relating to configuration issues. forbidden 403 The request was valid, but the server is refusing the action. The necessary permissions to access the resource might be lacking. notfound 404 The requested resource could not be found, but may be available in the future. Subsequent requests are permissible. systemerror 500 A generic error message. Token Problems We will be making a change in the error messages that are given in response in the eCommerce API if the requested Payment/One-Click/Recur/Unscheduled token does not exist or is deleted. The following new errorType will be introduced (only for Payment Order): https://api.payex.com/psp/errordetail/paymentorders/paymenttokeninactive In addition to the one currently in use for both Payment Methods and Payment Order: https://api.payex.com/psp/errordetail/paymentorders/inputerror First, a check is made to verify if the token exists or not. If it does not exist, the API returns an error of the type InputError. If, however, the token exists but is deleted, the API will return the error TokenInactive. Examples of the error messages are presented below. InputError InputError for a RecurrenceToken: InputError for RecurrenceToken Copy json to clipboard 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 { \"type\":\"https://api.payex.com/psp/errordetail/paymentorders/inputerror\", \"title\":\"Error in input data\", \"status\":404, \"instance\":\"https://api.payex.com/psp/probleminstance/00-e53deef0eb5e47bcb5ba1739bdd9086c- b5512dfc02b74f07-01\", \"detail\":\"Input validation failed, error description in problems node!\", \"problems\": [ { \"name\":\"RecurrenceToken\", \"description\":\"The given RecurrenceToken does not exist.\" } ] } TokenInactive TokenInactive example with UnscheduledToken: TokenInactive for UnscheduledToken Copy json to clipboard 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 { \"type\": \"https://api.payex.com/psp/errordetail/paymentorders/paymenttokeninactive\", \"title\": \"Payment token is inactive\", \"status\": 422, \"instance\": \"https://api.payex.com/psp/probleminstance/00-2fc18bd40743401596bf2de3b51ab16d- bfebd4ae81ea8423-01\", \"detail\": \"The given UnscheduledToken is inactive.\", \"problems\": [ { \"name\": \"UnscheduledToken\", \"description\": \"The given UnscheduledToken is inactive.\" } ] } TokenInactive example with a RecurrenceToken: TokenInactive for RecurrenceToken Copy json to clipboard 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 { \"type\": \"https://api.payex.com/psp/errordetail/paymentorders/paymenttokeninactive\", \"title\": \"Payment token is inactive\", \"status\": 422, \"instance\": \"https://api.payex.com/psp/probleminstance/00-2fc18bd40743401596bf2de3b51ab16d- bfebd4ae81ea8423-01\", \"detail\": \"The given RecurrenceToken is inactive.\", \"problems\": [ { \"name\": \"UnscheduledToken\", \"description\": \"The given RecurrenceToken is inactive.\" } ] } If you have questions regarding the new error types, do not hesitate to contact us through the ordinary support channels. Payment Details Problems In order to use the new parameter EnablePaymentDetailsConsentCheckbox – which determines whether or not to show the checkbox used to save payment details – the DisableStoredPaymentDetails parameter must be set to true. Otherwise you will get a validation error. Consent Checkbox Problems Copy json to clipboard 1 2 3 4 5 6 7 8 9 10 11 12 13 { \"type\": \"https://api.payex.com/psp/errordetail/paymentorders/inputerror\", \"title\": \"Error in input data\", \"status\": 400, \"instance\": \"https://api.payex.com/psp/probleminstance/00-f75cfaedb1eb467bbefd4917c67a7664-b25fb23de26682e9-01\", \"detail\": \"Input validation failed, error description in problems node!\", \"problems\": [ { \"name\": \"PaymentOrder.EnablePaymentDetailsConsentCheckbox\", \"description\": \"EnablePaymentDetailsConsentCheckbox cannot be used without DisableStoredPaymentDetails.\" } ] } Card Problems There are a few problems specific to the creditcard resource that you may want to guard against in your integrations. All credit card problem types will have the following URL structure: https://api.payex.com/psp/errordetail/creditcard/&lt;error-type&gt; Contractual Problem Types Type Status Description cardbranddisabled 403 The card brand is disabled. accountholdertyperejected 403 The account holder type is rejected. cardtyperejected 403 The card type is rejected. 3dsecurerequired 403 The transaction was rejected by 3-D Secure. authenticationstatusrejected 403 The authentication status was rejected. frauddetected 403 The transaction was fraudulent. 3dsecuredeclined 403 3-D Secure declined the transaction. velocitycheck 429 Indicates that the limit for how many times a card or different cards can be used for attempting a purchase has been reached. Acquirer and 3-D Secure Problem Types Type Status Description 3dsecureerror 400 3-D Secure is not working. Try again after some time. badrequest 400 Bad request. Try again after some time. cardblacklisted 400 The card is blacklisted. The payer needs to contact their card issuing bank. 3dsecureusercancelled 403 Transaction was cancelled during 3-D Secure verification. 3dsecuredeclined 403 Transaction was declined during 3-D Secure verification. acquirercardblacklisted 403 The card is blacklisted. The payer needs to contact their card issuing bank. acquirercardexpired 403 The expiry date is wrong, or the card has expired. The payer needs to contact their card issuing bank. acquirercardstolen 403 The card is blacklisted. The payer needs to contact their card issuing bank. acquirererror 403 The acquirer responded with a generic error. acquirerinsufficientfunds 403 The card does not have sufficient funds. The payer needs to contact their card issuing bank. acquirerinvalidamount 403 Amount not valid by acquirer. Contact teknisksupport@swedbankpay.com. acquirerpossiblefraud 403 Transaction declined due to possible fraud. The payer needs to contact their card issuing bank. authenticationrequired 403 Transaction declined due to missing 3-D Secure credentials. The payer needs to initiate a new transaction. carddeclined 403 The card was declined. frauddetected 403 Fraud detected. The payer needs to contact their card issuing bank. paymenttokenerror 403 There was an error with the payment token. internalservererror 500 Server error. Try again after some time. 3dsecureacquirergatewayerror 502 Problems reaching 3-D Secure verification. Try again after some time. acquirergatewayerror 502 Problems reaching acquirers gateway. Try again after some time. badgateway 502 Problems reaching the gateway. Try again after some time. acquirergatewaytimeout 504 Problems reaching acquirers gateway. Try again after some time. Creditcard Payments MIT - Do Not Try Again &amp; Excessive Reattempts In accordance with directives from Visa and Mastercard, we will be implementing 2 different types of limitations in the amount of successive reattempts of a previously failed transaction using either a recurrence- or unscheduledToken that can be done using card based payment methods. This limitation has up until now been handled by Swedbank Pay Acquiring, but will now be handled earlier in the transaction process - enabling us to provide better and clearer response messages through the eCommerce-api. To test these response messages, we have added new magic amounts in the test data section. The new amounts are for DAILYLIMITEXCEEDED, MONTHLYLIMITEXCEEDED, DONOTRETRY and MODIFICATIONSREQUIRED. SuspensionWarning can be tested by using the limit exceeded amounts. One such limitation will be limiting the amount of successive reattempts of a previously failed transaction that can be done using creditcard based payment method within a specified period The limitation in question varies based on the card brand: MasterCard - 10 failed payment attempts allowed during a period of 24 hours. MasterCard - 35 failed payment attempts allowed during a period of 30 days. Visa - 15 failed payment attempts allowed during a period of 30 days. The other limitation that will be implemented is in the case that Visa or Mastercard gives such a response that is flagged as “Do Not Retry” in accordance to Visa and MasterCard regulations. This response is given in the cases that they deem the transaction to never be possible to be valid - as an example, if the card no longer exists, and thus there is no point in retrying. In these cases, the card will be blocked immediately and no further attempts allowed. This block will be active for 30 days for both Visa and MasterCard. Both of these limitations are based on the combination of the acquiring agreement that the transaction was initiated from, and the PAN of the card that was used. That is, a card might be blocked because of “Excessive Reattempts” at a particular merchant, while being allowed more reattempts at another. Please note that in the case a new card is issued in place of an old expired one, the new card usually keeps the same PAN - meaning that if the old card was blocked, the new one will be as well (until the period resets). This marks the importance of having such a logic in place that limits reattempts before the block actually takes place - this is where the new, clearer response messages will help. Please note that the limitations of excessive reattempts are present in both test and productions environments. We recommend having two test cards available if you are testing this functionality. When it comes to Excessive Reattempts, the new response messages will be returned if the quota for the period gets to 5 attempts remaining, as follows: 5 Attempts Remaining Copy json to clipboard 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 { \"type\": \"https://api.payex.com/psp/errordetail/creditcard/authenticationrequired\", \"title\": \"SuspensionWarning. The card might be blocked.\", \"status\": 403, \"detail\": \"5 attempts left before the card is blocked.\", \"problems\": [{ \"name\": \"ExternalResponse\", \"description\": \"Forbidden-AuthenticationRequired\" }, { \"name\": \"AUTHENTICATION_REQUIRED\", \"description\": \"Acquirer soft-decline, 3-D Secure authentication required, response-code: O5, hostId: 20, hostName: PayEx Test\" }, { \"name\": \"Component\", \"description\": \"pospay-ecommerce-financial-service\" } ], \"suspension\": { \"attempts\": 12, \"remaining\": 3, \"product\": \"VISA\", \"acquirerCode\": \"O5\", \"acquirerDetail\": \"AUTHENTICATION_REQUIRED\", \"state\": \"WARNING\" } } Should more attempts be tried, and the transaction fail, the number of remaining attempts will update accordingly. Once the card is blocked, the following responses will be given, depending on if the card in question is Visa or MasterCard: Attempt limit exceeded MasterCard Copy json to clipboard 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 { \"type\": \"https://api.payex.com/psp/errordetail/creditcard/dailylimitexceeded\", \"title\": \"Daily attempt limit is exceeded.\", \"status\": 403, \"detail\": \"The attempt is rejected after trying multiple times with same token.\", \"problems\": [{ \"name\": \"REJECTED_BY_POSPAY_DAILY_LIMIT\", \"description\": \"Intent with intentId 85ac3576-1e69-4aef-a066-84a0e6dcfa61, agreementId 80d0244c-2b15-4719-8ab1-ed83eddfee61 was suspended after exceeding the rolling 24 hour constraint of 10 attempts\" }, { \"name\": \"Component\", \"description\": \"pospay-ecommerce-financial-service\" } ] } Attempt limit exceeded Visa Copy json to clipboard 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 { \"type\": \"https://api.payex.com/psp/errordetail/creditcard/monthlylimitexceeded\", \"title\": \"Monthly attempt limit is exceeded.\", \"status\": 403, \"detail\": \"The attempt is rejected after trying multiple times with same token.\", \"problems\": [{ \"name\": \"REJECTED_BY_POSPAY_MONTHLY_LIMIT\", \"description\": \"Intent with intentId 80456a1d-1cb1-429b-bf4e-8e1313362800, agreementId 3a47c702-7963-4915-9567-e1bce06d20dd was suspended after exceeding the rolling 30 day constraint of 15 attempts\" }, { \"name\": \"Component\", \"description\": \"pospay-ecommerce-financial-service\" } ] } The new responses for “Do Not Retry” will be as follows: Blocked card, no further attempts allowed Copy json to clipboard 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 { \"type\": \"https://api.payex.com/psp/errordetail/creditcard/acquirererrordonotretry\", \"title\": \"Do not retry.\", \"status\": 403, \"detail\": \"The attempt is rejected.\", \"problems\": [{ \"name\": \"ExternalResponse\", \"description\": \"Forbidden-AcquirerErrorDoNotRetry\" }, { \"name\": \"REJECTED_BY_ACQUIRER_DO_NOT_RETRY\", \"description\": \"TOKEN04.ERR_FLG received in response, response-code: 05\" }, { \"name\": \"Component\", \"description\": \"pospay-ecommerce-financial-service\" } ] } Furthermore, a new response is added, being returned in cases where the transaction is declined, but might be accepted after modifications: Transaction declined, modifications required Copy json to clipboard 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 { \"type\": \"https://api.payex.com/psp/errordetail/creditcard/authenticationrequired\", \"title\": \"AUTHENTICATION_REQUIRED\", \"status\": 403, \"detail\": \"Acquirer soft-decline, 3-D Secure authentication required, response-code: O5, hostId: 20, hostName: PayEx Test - ModificationsRequired\", \"problems\": [{ \"name\": \"AUTHENTICATION_REQUIRED\", \"description\": \"Acquirer soft-decline, 3-D Secure authentication required, response-code: O5, hostId: 20, hostName: PayEx Test\" }, { \"name\": \"Component\", \"description\": \"pospay-ecommerce-financial-service\" } ], \"modification\": { \"required\": \"YES\", \"reason\": \"AUTHENTICATION_REQUIRED\", \"acquirerCode\": \"O5\", \"acquirerDetail\": \"AUTHENTICATION_REQUIRED\" } } Installment Account Problems There are a few problems specific to the creditaccount resource that you may want to guard against in your integrations. All invoice error types will have the following URL structure: https://api.payex.com/psp/errordetail/creditaccount/&lt;error-type&gt; Type Status Description CURRENCYNOTSUPPORTED 400 The provided currency does not match the authorization currency. INVALIDAMOUNT 400 The provided capture amount is invalid, likely larger than the remaining authorized amount. FAILEDAMOUNT 400 The authorized amount exceeds the valid maximum amount or subceeds the valid minimum amount. VALIDATION 400 Validation error. The problem(s) should be described in the response. CREDITNOTAPPROVED 403 Credit check or extension of credit check was rejected. AMOUNTEXCEEDSLIMIT 403 Amount in the pre-authorization is no longer valid for this authorization. AUTHORIZATIONEXPIRED 403 The provided authorization is not open or has already expired INVALIDSTATE 403 the provided pre-authorization resource is in an invalid state for this payment method. MISSINGPREAUTHORIZATION 403 The resource is missing. It may have been created on different ledger or have expired. INVALIDACCOUNTUSAGE 403 The provided pre-authorization is invalid for this kind of authorization. IDENTIFIERALREADYINUSE 403 The Authorization ID provided is already used, provide a new one and try again. FORBIDDEN 403 There is a conflict or the resource is unprocessable. NOTFOUND 404 No authorization for the provided ID wad found on this ledger. UNKNOWN 403 Unexpected error. CREDITNOTAPPROVED 403 Credit check for new account was denied. SIGNINGFAILED 403 Something went wrong during account onboarding or the user cancelled in BankID. CREDITNOTAPPROVED 403 Credit check for account limit upgrade was denied. SIGNINGFAILED 403 Something went wrong during account limit upgrade or user cancelled in BankID. CREDITNOTAPPROVED 403 Credit check denied. USERCANCELLED 403 User cancelled on Ledger &amp; Factoring page. Invoice Problems There are a few problems specific to the invoice resource that you may want to guard against in your integrations. All invoice error types will have the following URL structure: https://api.payex.com/psp/errordetail/invoice/&lt;error-type&gt; Invoice With New Assessment Flow Type Status Description InputError 400 Occurs if the input validation fails. The problem field will specify which parameter failed the validation. Forbidden 403 Invalid authentication status for the requested method. Forbidden 403 The authentication’s time limit has expired. CreditNotApproved 403 Credit check or extension of credit check was rejected. NotFound 404 The requested resource was not found. SystemError 500 Unexpected error. The logs might provide further problem details. SystemError 500 The requested method is not implemented fully by code, or not configured for the resource. The problem body will specify which. SystemError 500 State of the resource is invalid for further progress. Invoice Authentication Status Mapping - Assessment Flow Type Status Description ABORTEDIDENTIFICATION 403 Authentication aborted in BankID-app. USERPREABORTED 403 User aborted before starting signing or authentication. USERABORTED 403 Signing or authentication aborted from web. TIMEOUTIDENTIFICATION 403 User haven’t completed authentication in time. NATIONALIDENTIFIERMISMATCH 403 The Social Security Number provided in purchase did not match the Social Security Number from the BankID. FAILED 403 Unclassified failure. ERROR 502 Unexpected error. Invoice Without Assessment Flow Invoice transactions without SCA is only available in Norway, and only for merchants who have a special agreement with Swedbank Pay. Type Status Description inputerror 400 10 - ValidationWarning inputerror 400 30 - ValidationError inputerror 400 3010 - ClientRequestInvalid forbidden 403 Any other error code externalerror 500 No error code externalerror 502 40 - Error externalerror 502 50 - SystemConfigurationError externalerror 502 60 - SystemError externalerror 502 9999 - ServerOtherServer Swish Problems There are a few problems specific to the swish resource that you may want to guard against in your integrations. All Swish problem types will have the following URL structure: https://api.payex.com/psp/errordetail/&lt;error-type&gt; bankidalreadyinuse Caused By: The payer’s BankID is already in use Example response bankidalreadyinuse Copy json to clipboard 1 HTTP/1.1 409 Conflict Content-Type: application/json 1 2 3 4 5 6 7 8 { \"sessionId\": \"570ad610-3bd5-43d2-a270-ca1510562972\", \"type\": \"https://api.payex.com/psp/errordetail/bankidalreadyinuse\", \"title\": \"BankID Already in Use\", \"status\": 409, \"instance\": \"https://api.payex.com/psp/swish/payments/0cf55e0f-9931-476b-249d-08d7a3ee4e14/sales\", \"detail\": \"The payer´s BankID is already in use.\" } bankidcancelled Caused By: The payer cancelled BankID authorization. Example response bankidcancelled Copy json to clipboard 1 2 HTTP/1.1 409 Conflict Content-Type: application/json 1 2 3 4 5 6 7 8 { \"sessionId\": \"570ad610-3bd5-43d2-a270-ca1510562972\", \"type\": \"https://api.payex.com/psp/errordetail/bankidcancelled\", \"title\": \"BankID Authorization cancelled\", \"status\": 409, \"instance\": \"https://api.payex.com/psp/swish/payments/0cf55e0f-9931-476b-249d-08d7a3ee4e14/sales\", \"detail\": \"The payer cancelled BankID authorization.\" } bankiderror Caused By: Something went wrong with the payer’s BankID authorization. Example response bankiderror Copy json to clipboard 1 2 HTTP/1.1 502 Bad Gateway Content-Type: application/json 1 2 3 4 5 6 7 8 { \"sessionId\": \"570ad610-3bd5-43d2-a270-ca1510562972\", \"type\": \"https://api.payex.com/psp/errordetail/bankiderror\", \"title\": \"BankID error\", \"status\": 502, \"instance\": \"https://api.payex.com/psp/swish/payments/0cf55e0f-9931-476b-249d-08d7a3ee4e14/sales\", \"detail\": \"Something went wrong with the payer´s BankID authorization.\" } configerror Caused By: Payee alias is missing or not correct. PaymentReference is invalid. Amount value is missing or not a valid number. Amount is less than agreed minimum. Amount value is too large. Invalid or missing currency. Wrong formatted message. Amount value is too large, or amount exceeds the amount of the original payment minus any previous refunds. Counterpart is not activated. Payee not enrolled. Example response configerror Copy json to clipboard 1 2 HTTP/1.1 403 Forbidden Content-Type: application/json 1 2 3 4 5 6 7 8 { \"sessionId\": \"570ad610-3bd5-43d2-a270-ca1510562972\", \"type\": \"https://api.payex.com/psp/errordetail/configerror\", \"title\": \"Config error\", \"status\": 403, \"instance\": \"https://api.payex.com/psp/swish/payments/0cf55e0f-9931-476b-249d-08d7a3ee4e14/sales\", \"detail\": \"Payee alias is missing or not correct.\" } inputerror Caused By: MSISDN is invalid. Payer’s MSISDN is not enrolled at Swish. Example response inputerror Copy json to clipboard 1 2 HTTP/1.1 400 Bad Request Content-Type: application/json 1 2 3 4 5 6 7 8 { \"sessionId\": \"570ad610-3bd5-43d2-a270-ca1510562972\", \"type\": \"https://api.payex.com/psp/errordetail/inputerror\", \"title\": \"Input error\", \"status\": 400, \"instance\": \"https://api.payex.com/psp/swish/payments/0cf55e0f-9931-476b-249d-08d7a3ee4e14/sales\", \"detail\": \"Msisdn is invalid.\" } paymentagelimitnotmet Caused By: The payer does not meet the payment’s age limit. Example response paymentagelimitnotmet Copy json to clipboard 1 2 HTTP/1.1 403 Forbidden Content-Type: application/json 1 2 3 4 5 6 7 8 { \"sessionId\": \"570ad610-3bd5-43d2-a270-ca1510562972\", \"type\": \"https://api.payex.com/psp/errordetail/paymentagelimitnotmet\", \"title\": \"Payment Age Limit Not Met\", \"status\": 403, \"instance\": \"https://api.payex.com/psp/swish/payments/0cf55e0f-9931-476b-249d-08d7a3ee4e14/sales\", \"detail\": \"The payer does not meet the payment´s age limit.\" } socialsecuritynumbermismatch Caused By: The payer’s social security number does not match with the one required by this payment. Example response socialsecuritynumbermismatch Copy json to clipboard 1 2 HTTP/1.1 403 Forbidden Content-Type: application/json 1 2 3 4 5 6 7 8 { \"sessionId\": \"570ad610-3bd5-43d2-a270-ca1510562972\", \"type\": \"https://api.payex.com/psp/errordetail/socialsecuritynumbermismatch\", \"title\": \"Social Security Number Mismatch\", \"status\": 403, \"instance\": \"https://api.payex.com/psp/swish/payments/0cf55e0f-9931-476b-249d-08d7a3ee4e14/sales\", \"detail\": \"The social security number of the payer does not match with the one required by this payment.\" } swishalreadyinuse Caused By: The payer’s Swish is already in use. Example response swishalreadyinuse Copy json to clipboard 1 2 HTTP/1.1 403 Forbidden Content-Type: application/json 1 2 3 4 5 6 7 8 { \"sessionId\": \"570ad610-3bd5-43d2-a270-ca1510562972\", \"type\": \"https://api.payex.com/psp/errordetail/swishalreadyinuse\", \"title\": \"Error in Swish\", \"status\": 403, \"instance\": \"https://api.payex.com/psp/swish/payments/0cf55e0f-9931-476b-249d-08d7a3ee4e14/sales\", \"detail\": \"The Swish account of the payer is already in use.\" } swishdeclined Caused By: Original payment not found or original payment is more than than 13 months old. It appears that merchant’s organization number has changed since sale was made. The MSISDN of the original payer seems to have changed owner. Transaction declined. Could be that the payer has exceeded their swish limit or have insufficient founds. Payment request not cancellable. Example response swishdeclined Copy json to clipboard 1 2 HTTP/1.1 403 Forbidden Content-Type: application/json 1 2 3 4 5 6 7 8 { \"sessionId\": \"570ad610-3bd5-43d2-a270-ca1510562972\", \"type\": \"https://api.payex.com/psp/errordetail/swishdeclined\", \"title\": \"Swish Declined\", \"status\": 403, \"instance\": \"https://api.payex.com/psp/swish/payments/0cf55e0f-9931-476b-249d-08d7a3ee4e14/sales\", \"detail\": \"The MSISDN of the original payer seems to have changed owner.\" } swisherror Caused By: Bank system processing error. Swish timed out waiting for an answer from the banks after payment was started. Example response swisherror Copy json to clipboard 1 2 HTTP/1.1 502 Bad Gateway Content-Type: application/json 1 2 3 4 5 6 7 8 { \"sessionId\": \"570ad610-3bd5-43d2-a270-ca1510562972\", \"type\": \"https://api.payex.com/psp/errordetail/swisherror\", \"title\": \"Error in Swish\", \"status\": 502, \"instance\": \"https://api.payex.com/psp/swish/payments/0cf55e0f-9931-476b-249d-08d7a3ee4e14/sales\", \"detail\": \"Bank system processing error.\" } swishgatewaytimeout Caused By: During a create a sale call to e-com, Swish responded with 504 (Gateway Timeout). Example response swishgatewaytimeout Copy json to clipboard 1 2 HTTP/1.1 504 Gateway Timeout Content-Type: application/json 1 2 3 4 5 6 7 8 { \"sessionId\": \"570ad610-3bd5-43d2-a270-ca1510562972\", \"type\": \"https://api.payex.com/psp/errordetail/swishgatewaytimeout\", \"title\": \"Swish Gateway Timeout\", \"status\": 504, \"instance\": \"https://api.payex.com/psp/swish/payments/0cf55e0f-9931-476b-249d-08d7a3ee4e14/sales\", \"detail\": \"Request to Swish timed out.\" } swishtimeout Caused By: Swish timed out before the payment was started. Example response swishtimeout Copy json to clipboard 1 2 HTTP/1.1 403 Forbidden Content-Type: application/json 1 2 3 4 5 6 7 8 { \"sessionId\": \"570ad610-3bd5-43d2-a270-ca1510562972\", \"type\": \"https://api.payex.com/psp/errordetail/swishtimeout\", \"title\": \"Swish Timed Out\", \"status\": 403, \"instance\": \"https://api.payex.com/psp/swish/payments/0cf55e0f-9931-476b-249d-08d7a3ee4e14/sales\", \"detail\": \"Swish timed out before the payment was started.\" } systemerror Example response systemerror Copy json to clipboard 1 2 HTTP/1.1 500 Internal Server Error Content-Type: application/json 1 2 3 4 5 6 7 8 { \"sessionId\": \"570ad610-3bd5-43d2-a270-ca1510562972\", \"type\": \"https://api.payex.com/psp/errordetail/systemerror\", \"title\": \"Error in System\", \"status\": 500, \"instance\": \"https://api.payex.com/psp/swish/payments/0cf55e0f-9931-476b-249d-08d7a3ee4e14/sales\", \"detail\": \"A system error occurred. We are working on it.\" } usercancelled Caused By: The payer cancelled the payment in the Swish app. Example response usercancelled Copy json to clipboard 1 2 HTTP/1.1 403 Forbidden Content-Type: application/json 1 2 3 4 5 6 7 8 { \"sessionId\": \"570ad610-3bd5-43d2-a270-ca1510562972\", \"type\": \"https://api.payex.com/psp/errordetail/usercancelled\", \"title\": \"User cancelled\", \"status\": 403, \"instance\": \"https://api.payex.com/psp/swish/payments/0cf55e0f-9931-476b-249d-08d7a3ee4e14/sales\", \"detail\": \"The payer cancelled the payment in the Swish app.\" } Trustly Problems There are a few problems specific to the trustly resource that you may want to guard against in your integrations. All Trustly problem types will have the following URL structure: https://api.payex.com/psp/errordetail/trustly/&lt;error-type&gt; Type Status Description systemerror 502 Happens if Trustly is experiencing technical difficulties, a contract is configured with bad account name / password, or if the operation (i.e. reversal) is not allowed on the payment due to its current state on Trustly’s end. Vipps Problems There are a few problems specific to the vipps resource that you may want to guard against in your integrations. All Vipps problem types will have the following URL structure: https://api.payex.com/psp/errordetail/vipps/&lt;error-type&gt; Problem Types from Vipps (Init-call) Type Status Note vipps_error 403 All errors Problem Types from Vipps (Callback) Type Status Note vipps_declined 400 Any status that is not successful Problem Types from Acquirer Type Status card_blacklisted 400 acquirer_card_blacklisted 403 acquirer_card_expired 403 acquirer_card_stolen 403 acquirer_error 403 acquirer_insufficient_funds 403 acquirer_invalid_amount 403 acquirer_possible_fraud 403 card_declined 403 fraud_detected 403 payment_token_error 403 bad_request 500 internal_server_error 500 unknown_error 500 acquirer_gateway_error 502 bad_gateway 502 acquirer_gateway_timeout 504",
    "tags": "",
    "url": "/checkout-v3/features/technical-reference/problems/"
  },{
    "title": "Problems",
    "text": "Problems When using the Merchant Backend Configuration, most errors in the payment process will result in Problem responses from the backend. The SDK contains utilities for processing these in your application. On Android, if any operation fails due to a Problem, the resulting exception will be of the type RequestProblemException, which allows access to the Problem object. Problem is a JVM representation of the Problem JSON response, allowing for easy access to standard fields. You are free to use Problem as-is for modeling your own problem types. The Merchant Backend Configuration further defines a subclass of Problem, MerchantBackendProblem, which is a sealed class containing all the problem types expected to occur with a Merchant Backend server. All problems reported by the Merchant Backenc Configuration are of this type, allowing you to use kotlin’s powerful when expression to handle the different errors: Android 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 when (problem) { is MerchantBackendProblem.Client.MobileSDK.Unauthorized -&gt; handleUnauthorized() is MerchantBackendProblem.Client -&gt; handleOtherClientError() is MerchantBackendProblem.Server.MobileSDK -&gt; handleMerchantBackendError() is MerchantBackendProblem.Server.SwedbankPay.ConfigurationError -&gt; handleConfigurationError() is MerchantBackendProblem.Server.SwedbankPay -&gt; handleSwedbankPayError() else -&gt; handleUnknownError() } On iOS, if any operation fails due to a Problem, the resultig error will be SwedbankPaySDK.MerchantBackendError.problem, and it will have the problem as an associated value, of type SwedbankPaySDK.Problem. SwedbankPaySDK.Problem is a enum with a similar structure to the Android MerchantBackendProblem, allowing for idiomatic error handling. iOS 1 2 3 4 5 6 7 8 9 10 11 12 13 14 if case SwedbankPaySDK.MerchantBackendError.problem(let problem) = error { switch problem { case .client(.mobileSDK(.unauthorized)): handleUnauthorized() case .client: handleOtherClientError() case .server(.mobileSDK): handleMerchantBackendError() case .server(.swedbankPay): handleSwedbankPayError() default: handleUnknownError() } }",
    "tags": "",
    "url": "/checkout-v3/modules-sdks/mobile-sdk/features/technical-reference/problems/"
  },{
    "title": "Process Diagrams",
    "text": "Initialization To use the SDK, you must have a valid Configuration for it. The API for this is a bit different in Android and iOS, but generally you will only need one Configuration for your app. On Android set it to PaymentFragment.defaultConfiguration; on iOS store it in a convenient variable. If you are using a backend implementing the Merchant Backend API, there is a Configuration ready for you in the SDK. If you are designing your own backend API, you will need to create the Configuration yourself. sequenceDiagram alt Using Merchant Backend alt Android App -&gt;&gt; SDK: MerchantBackendConfiguration.Builder(backendUrl)...build() SDK --&gt;&gt; App: configuration App -&gt;&gt; SDK: PaymentFragment.defaultConfiguration = configuration else iOS App -&gt;&gt; SDK: SwedbankPaySDK.MerchantBackendConfiguration.init(backendUrl: backendUrl) SDK --&gt;&gt; App: configuration end else Using Custom Backend alt Android App -&gt;&gt; App: class MyConfiguration : Configuration() App -&gt;&gt; SDK: PaymentFragment.defaultConfiguration = configuration else iOS App -&gt;&gt; App: struct/class MyConfiguration : SwedbankPaySDK.Configuration end end When you want to make a payment, create a PaymentFrament or SwedbankPaySDKController. SwedbankPaySDKController’s designated initializer takes all the required arguments; for PaymentFrament you should use PaymentFragment.ArgumentsBuilder to create the arguments bundle. The meaning of the arguments depends on your Configuration. If you are using MerchantBackendConfiguration, you will always need a PaymentOrder argument. A very important part of the PaymentOrder is the urls field. The SDK has convenience methods for creating one; unless your use-case is advanced, you should use these. On Android use the PaymentOrderUrls(context, backendUrl, [callbackUrl], [termsOfServiceUrl]) constructor; on iOS use the PaymentOrderUrls.init(configuration:language:[callbackUrl:][termsOfServiceUrl:]) initializer. In both cases the convenience method depends on your MerchantBackendConfiguration (backendUrlis part of the MerchantBackendConfiguration), so be careful if you have multiple MerchantBackendConfigurations in your app. Additionally, you may construct a Consumer if you wish to identify the payer. This enables saving payment details for further payments. If you are using a custom Configuration, you may use the PaymentOrder or Consumer arguments if you wish. Additionally you can use a generic data argument (of type Any, though on Android it must implement either Parcelable or Serializable). By default, the existence of the Consumer argument controls whether the consumer identfication happens, but you can also specify it explicitly. sequenceDiagram participant User participant App participant SDK User -&gt;&gt; App : Begin payment rect rgba(138, 205, 195, 0.1) note right of App: Build Payment Order alt Android App -&gt;&gt; SDK: PaymentOrder(...) or PaymentOrder.Builder()...build() SDK --&gt;&gt; App: paymentOrder else iOS App -&gt;&gt; SDK: SwedbankPaySDK.PaymentOrder.init(...) SDK --&gt;&gt; App: paymentOrder end end opt Build Consumer alt Android App -&gt;&gt; SDK: Consumer(...) SDK --&gt;&gt; App: consumer else iOS App -&gt;&gt; SDK: Consumer.init(...) SDK --&gt;&gt; App: consumer end end rect rgba(138, 205, 195, 0.1) note right of App: Create and configure payment UI component alt Android App -&gt;&gt; SDK: PaymentFragment.ArgumentsBuilder()...build() SDK --&gt;&gt; App: arguments App -&gt;&gt; SDK: PaymentFragment() SDK --&gt;&gt; App: paymentFragment App -&gt;&gt; SDK: paymentFragment.arguments = arguments App -&gt;&gt; SDK: activity.paymentViewModel.[rich]state.observe(...) else iOS App -&gt;&gt; SDK: SwedbankPaySDKController.init(...) SDK --&gt;&gt; App: swedbankPaySDKController App -&gt;&gt; SDK: swedbankPaySDKController.delegate = ... end end App -&gt;&gt; App : Show payment UI component Merchant Backend: Discover Endpoints This is an implementation detail of the Merchant Backend configuration; it is not necessary to replicate this step in a your own systems. The Merchant Backend is specified with a single static entry point; other interfaces are accessed by following links from previous responses. A request to the static entry point currently returns links to the consumers and paymentorders endpoints. In most cases the response to this request can be cached, and thus only needs to be made once per App session. sequenceDiagram participant SDK participant Backend SDK -&gt;&gt; Backend: GET / Backend --&gt;&gt; SDK: { \"consumers\": \"[consumers]\", \"paymentorders\": \"[paymentorders]\" } Optional Checkin Optionally, the payment beings with a “checkin” flow, where the payer is identified. This allows for saving payment details for later payments. The checkin flow is simple: first a request is made to begin a checkin session, then an html page is constructed using the script link received from that request, and when that page successfully identifies the payer, a javascript callback is received. The consumerProfileRef received from that callback is then used when creating the payment order in the next step. sequenceDiagram participant Conf as Configuration participant SDK participant Backend participant SwedbankPay as Swedbank Pay participant WebView participant User SDK -&gt;&gt; Conf: postConsumers alt Merchant Backend Conf -&gt;&gt; Backend: POST [consumers] { \"operation\": \"initiate-consumer-session\", ... } else Custom Backend Conf -&gt;&gt; Backend: Custom protocol end Backend -&gt;&gt; SwedbankPay: POST /psp/consumers/ { \"operation\": \"initiate-consumer-session\", ... } SwedbankPay --&gt;&gt; Backend: { \"operations\": [{ \"rel\": \"view-consumer-identification\", \"href\": \"[consumer-script]\" }] } alt Merchant Backend Backend --&gt;&gt; Conf: { \"operations\": [{ \"rel\": \"view-consumer-identification\", \"href\": \"[consumer-script]\" }] } else Custom Backend Backend --&gt;&gt; Conf: Custom protocol end Conf --&gt; SDK: ViewConsumerIdentificationInfo SDK -&gt;&gt; WebView: &lt;html&gt;...&lt;script src=\"[consumer-script]\"&gt;...payex.hostedView.consumer(...)...&lt;/html&gt; WebView -&gt;&gt; User: Show checkin UI User -&gt;&gt; WebView: Enter personal details WebView -&gt;&gt; SDK: onConsumerIdentified({ \"consumerProfileRef\" : \"...\" }) SDK -&gt;&gt; SDK: store consumerProfileRef for checkout Begin Checkout With the Payment Order ready, the SDK begins the “checkout” flow, where the actual payment is made. The checkout flow begins similarly to the checkin flow: a request is made to create a Payment Order, then an html page is constructed and displayed to the user. In the case of the “create Payment Order” request, however, it is expected that the Merchant Backend processes the request and response: Setting of payeeId and paymentReference in particular seems better left to the backend; similarly the backend is probably interested in storing the id of the created Payment Order for capture and other possible operations. At this point the user is interacting with the payment menu; the next step depends on the exact payment instrument chosen. sequenceDiagram participant Conf as Configuration participant SDK participant Backend participant SwedbankPay as Swedbank Pay participant WebView participant User SDK -&gt;&gt; Conf: postPaymentorders alt Merchant Backend Conf -&gt;&gt; Backend: POST [paymentorders] { paymentorder: {...} } else Custom Backend Conf -&gt;&gt; Backend: Custom protocol end Backend -&gt;&gt; Backend: Preprocess payment order (e.g. create payeeReference) Backend -&gt;&gt; SwedbankPay: POST /psp/paymentorders/ { paymentorder: {...} } SwedbankPay --&gt;&gt; Backend: { \"id\": \"...\", \"operations\": [{ \"rel\": \"view-paymentorder\", \"href\": \"[paymentorder-script]\" }], ... } Backend -&gt;&gt; Backend: Postprocess payment order (e.g. store id) alt Merchant Backend Backend --&gt;&gt; Conf: { \"id\": \"...\", \"operations\": [{ \"rel\": \"view-paymentorder\", \"href\": \"[paymentorder-script]\" }], ... } else Custom Backend Backend -&gt;&gt; Conf: Custom protocol end Conf --&gt;&gt; SDK: ViewPaymentOrderInfo SDK -&gt;&gt; WebView: &lt;html&gt;...&lt;script src=\"[paymentorder-script]\"&gt;...payex.hostedView.paymentMenu(...)...&lt;/html&gt; WebView -&gt;&gt; User: Show checkout UI User -&gt;&gt; WebView: Choose payment method and enter details External Content While some payments may be completed inside the payment menu in their entirety, others will require interaction with some external web page, and/or application. In most cases external web pages can be opened in the same web view used to show the payment menu, and when they want to return to the payment menu, they signal this by attempting to navigate to the url set as paymentUrl in the Payment Order. We intercept this navigation, and reload the payment menu, as appropriate. When an external application is launched, the flow signals the return to the payment menu by again opening paymentUrl. This time, however, we cannot intercept it. The system then handles opening that url the usual way. For maximum compatibility, paymentUrl is a regular https url. On iOS, paymentUrl is designed to be in format that is registered as a Universal Link to the app, which causes the system to open paymentUrl in the app. The example backend serves a /.well-known/apple-app-site-association file that assigns the paths under /sdk-callback/ to be Universal Links to the application set in the configuration. The SDK defaults to building paymentUrl under this path. Combined with the proper configuration in the app and backend, this makes paymentUrls be Universal Links. On Android 6.0 and later it is possible to do a similar thing, but it is much more difficult to set up on the server side, and we need a solution for earlier versions anyway. Therefore, on Android, paymentUrl will be opened in the browser. Finally, in our testing, we have seen that certain external pages used with certain payment instruments do not work correctly inside a web view, and must be shown in the browser instead. If we determine that the external page is one of these pages, it is opened in the browser. Again, return to the payment menu is signaled by a navigation to paymentUrl, which will, in this case be opened in the browser on both platforms (but see below for iOS details). sequenceDiagram participant App participant SDK participant WebView participant System participant Browser participant Ext as External App participant User WebView -&gt;&gt; SDK: Navigate to another page alt Navigation is to a regular http(s) URL SDK -&gt;&gt; SDK: Check web view compatibility alt Compatible with Web View SDK -&gt;&gt; WebView: Proceed with navigation normally ① WebView -&gt;&gt; SDK: Navigate to paymentUrl ② SDK -&gt;&gt; SDK: Recognize paymentUrl SDK -&gt;&gt; WebView: Cancel navigation else Not Compatible with Web View SDK -&gt;&gt; WebView: Cancel navigation SDK -&gt;&gt; System: Open URL System -&gt;&gt; Browser: Open URL in Browser User -&gt;&gt; Browser: Handle external flow Browser -&gt;&gt; User: Handle external flow Browser -&gt; Browser: Open paymentUrl in Browser end else Navigation is to an app-specific URL (custom scheme, Android Deep Link/App Link, iOS Universal Link) SDK -&gt;&gt; WebView: Cancel navigation SDK -&gt;&gt; System: Open URL System -&gt;&gt; Ext: Launch URL-appropriate app User -&gt;&gt; Ext: Handle external flow Ext -&gt;&gt; User: Handle external flow Ext -&gt;&gt; System: Open paymentUrl alt Android System -&gt;&gt; Browser: Open paymentUrl in Browser ③ else iOS System -&gt;&gt; App: Launch app with paymentUrl ④ end end ① The same check is repeated for any further navigation inside the WebView ② All properly configured authentication flows must end up here ③ On Android, paymentUrl is an https URL that redirects to an Android Intent URL. ④ On iOS, paymentUrl is a Universal Link. When an app open a Universal Link to another app, it should be routed to that app instead of the Browser. However, Universal Links are finicky things, and it is not impossible that it gets opened in the Browser instead. In that case, the flow continues with “paymentUrl opened in Browser” below instead. Return From Browser If the external flow ended with paymentUrl opened in the browser, we need a way to get back to the app. On Android, this is simple to accomplish by redirecting to an Android Intent Uri; the SDK and backend work together to construct the Intent Uri to point to the correct app. This Intent will cause the app to be brought back into focus, and the PaymentFragment will recognize the paymentUrl and reload the payment menu. We still need to have an actual html page served at paymentUrl, though, as the redirect may be blocked in some scenarios. If that happens, the page will also contain a link the user can tap on, which opens the same Intent Uri. On iOS, the situation is more complicated. As mentioned above, paymentUrl is a Universal Link, and navigation to it should be routed to the app. However, Universal Links are a bit unreliable, in that they require certain conditions to be fulfilled; otherwise, they are opened in the browser like regular links. Unfortunately, one of the conditions, namely that the navigation originated from the user pressing on a link, is often not fulfilled in the external pages used by payment methods. Therefore, we must have a system that works correctly, even if paymentUrl is opened in the browser. On iOS, we use the following system: paymentUrl redirects (301) to a trampoline page hosted at a different domain the trampoline page has a button pressing that button navigates to paymentUrl but with an extra parameter paymentUrl with the extra parameter redirects to a custom-scheme url The trampoline page is on a different domain due to another requirement of Universal Links: they are only routed to the app if opened from a different domain. Now, both paymentUrl and paymentUrl with the extra parameter are Universal Links, and as the second navigation is “forced” to originate from User Interaction, it should be routed to the app. However, if something still goes sideways, and experience says it can, and even this “augmented” paymentUrl is opened in the browser, then we finally redirect to a custom-scheme url, which has no choice but to be routed to the app. The reason we do not do this immediately is because using custom schemes triggers a confirmation dialog the developer has no control over, and we want to avoid that. When the app is then launched with paymentUrl, the augmented paymentUrl, or the custom-scheme url constructed from paymentUrl, the Application Delegate must then forward the url to the SDK using the SwedbankPaySDK.open(url:) or SwedbankPaySDK.continue(userActivity:) method, as the case may be. The SDK will then proceed to reload the payment menu as appropriate. This system does have the drawback of requiring a custom url scheme, which will almost always be left unused. As we gather more data, we may be able to remove the requirement in the future. Please see this diagram for an illustration of the different steps in the process: sequenceDiagram participant User participant Browser participant Backend participant Trampoline as Universal Link Trampoline participant System participant SDK participant App alt Android Browser -&gt;&gt; Merchant: Load paymentUrl Merchant --&gt;&gt; Browser: Html document that redirects to an Intent URL ⑤ Browser -&gt;&gt; Browser: Parse Android Intent URL Browser -&gt;&gt; System: Start activity with the parsed Intent, where the Intent Uri is paymentUrl System -&gt;&gt; SDK: Start callback activity SDK -&gt;&gt; SDK: Recognize paymentUrl else iOS alt Happiest Path Browser -&gt;&gt; Browser: Recognize that paymentUrl is a Universal Link for App Browser -&gt;&gt; System: Launch app with paymentUrl ⑥ else Less Happy Path Browser -&gt;&gt; Merchant: Load paymentUrl Merchant --&gt;&gt; Browser: 301 Moved Permanently ⑦ Browser -&gt;&gt; Trampoline: Load trampoline page Browser -&gt;&gt; User: Show trampoline page ⑧ User -&gt;&gt; Browser: Press \"Return to App\" button Browser -&gt;&gt; Browser: Navigate to paymentUrl&amp;fallback=true alt Less Happy Path (contd.) Browser -&gt;&gt; Browser : Recognize that paymentUrl&amp;fallback=true is a Universal Link for App Browser -&gt;&gt; System : Launch app with paymentUrl&amp;fallback=true else Sad Path ⑨ Browser -&gt;&gt; Merchant: Load paymentUrl&amp;fallback=true Merchant --&gt;&gt; Browser: 301 Moved Permanently ⑩ Browser -&gt;&gt; User: Show confirmation dialog User -&gt;&gt; Browser: Accept app launch Browser -&gt;&gt; System: Launch app with customscheme://[paymentUrl-without-scheme]&amp;fallback=true end end System -&gt;&gt; App: Call URL handler ⑪ App -&gt;&gt; SDK: SwedbankPaySDK.open(url:) or SwedbankPaySDK.continue(userActivity:) SDK -&gt;&gt; SDK: Recognize paymentUrl or modified paymentUrl end ⑤ intent://[paymentUrl-without-scheme]/#Intent;scheme=[paymentUrl-scheme];action=com.swedbankpay.mobilesdk.VIEW_PAYMENTORDER;package=[app-package];end; ⑥ Universal Links have certain conditions for them to be activated. One of these is that the navigation must have started from a user interaction. As many 3D-Secure pages have an automatic redirect, this can cause the link to be opened in the Browser instead. Therefore the chance for this path to be taken is low. (N.B. It does seem than iOS 13.4 has made some change to the logic, causing this happiest path to be hit more often.) ⑦ Location: https://ecom.stage.payex.com/externalresourcehost/trampoline?target=paymentUrl%26fallback=true ⑧ The “Trampoline Page” has a button, which links back to paymentUrl, but with an additional query parameter (actually this extra parameter is added by the backend when generating the redirect to the trampoline page). Importantly, the Trampoline is on a different domain than paymentUrl, as Universal Links are only forwarded to the app if they are opened from a different domain than the link’s domain. ⑨ All cases should be caught by one of these two flows. However, Universal Links remain finicky, and therefore it is good to provide one final fallback. ⑩ Location: customscheme://[paymentUrl-without-scheme]&amp;fallback=true. customscheme is a URL scheme unique to the App. ⑪ Universal links result in a call to UIApplicationDelegate.application(_:continue:restorationHandler:), while custom-scheme links result in a call to UIApplicationDelegate.application(_:open:options:). Payment Completion When the payment is completed, possibly after reloading the payment menu after a navigation to paymentUrl, the payment menu will report success by attempting to navigate to completeUrl. The SDK intercepts this and invokes a callback to your app. It is your app’s responsibility to then remove the payment UI from view and notify the user. Similarly, if the payment is cancelled, the SDK intercepts the navigation to cancelUrl and reports the cancellation status to your app. sequenceDiagram participant User participant App participant SDK participant WebView SDK -&gt;&gt; WebView: Reload &lt;html&gt;...&lt;script src=\"[paymentorder-script]\"&gt;...payex.hostedView.paymentMenu(...)...&lt;/html&gt; WebView -&gt;&gt; SDK: Navigate to completeUrl SDK -&gt;&gt; WebView: Cancel navigation alt Android SDK -&gt;&gt; SDK: PaymentViewModel.state &lt;- SUCCESS SDK -&gt;&gt; App: Observer&lt;PaymentViewModel.State&gt;.onChanged(SUCCESS) else iOS SDK -&gt;&gt; App: SwedbankPaySDKDelegate.paymentComplete() end App -&gt;&gt; App: Remove payment UI component App -&gt;&gt; User: Report payment result Back: Other Features Next: Plain Web View",
    "tags": "",
    "url": "/checkout-v3/modules-sdks/mobile-sdk/process-diagrams/"
  },{
    "title": "Public Migration Key",
    "text": "Key size: 4096 bits RealName: SwedbankPay UserID: SwedbankPay &lt;support.ecom@payex.com&gt; Fingerprint: 49BE 1843 4104 3DC6 DB36 9F77 67F0 0E68 7F80 104A Key ID: 67F0 0E68 7F80 104A To encrypt files with Swedbank Pay’s Public Migration Key, you need copy and paste it from below and save it to a file called SwedbankPay.key. Public Key 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 -----BEGIN PGP PUBLIC KEY BLOCK----- mQINBF9kf58BEADlsQpmtsDwieUC/Zw0Vrfsc5/wT3BpIwJoMEK5YkjwrX4vx3yC pVi7+fJgpZ8DZjmkZf+i5MiFCbS8myJ/2een3ngOhEoMVjbWP01nQbW4MVoGL1yk nB3TOs/oC6xg/Aa0WlpOTrqoSvXLtrUKnWySmXgCBiUVKBaN1rfHYS4A39AXlL/H g1n1OiW4u9psgJk3GRBXXV2WE+J+qMuDUI1kwj+IbB/CDCXJ0ULXHHLY3QoSmAoy zRAJzq470jcrygaotgXvFmq3HJxXTquonxDtXXr7GqctsFVAeXvJM9JHZoOP/t3/ lvZiiNQU42yfzOZJkNXoyPopsdWHynBUiAEy3GQdjwapgRIO2Jm6LDuWUI98n+mI 5dXrTVGXKzoqzBFMdvJ8GBMMeGBW8WxjWF8eiqI5foMex8GS150aor930VIFlOk/ PapmhjXEjvmR7fNuNqeD23CtSR+/vViD7VnCmpVtwvPiQlIFsPy94Se6IL0Rnxke iStodqloOXbxtYAzTEcdxZykm6NK6UTyB1kL0h4+2D32p7FRXdbYhXj6nUF1THaO X/EaNThP+8m3eoeiVIDYW3TPAfVwFfWFSVOc1HG3osSPZ9TkneBlzglhQKkvyTcq yxvnhIpS3k8lvKoUllx6H6TWndAD3aLXvv7wS3UugCuCzUzK9yAy0+YXNQARAQAB tCRTd2VkYmFua1BheSA8c3VwcG9ydC5lY29tQHBheWV4LmNvbT6JAk4EEwEIADgW IQRJvhhDQQQ9xts2n3dn8A5of4AQSgUCX2R/nwIbAwULCQgHAgYVCgkICwIEFgID AQIeAQIXgAAKCRBn8A5of4AQShebEADJ9cfBbgNQb9IydtM2Nz+KClwO9sHls7vh XQL0C7m2CRNGa2efSyqYpSoieXoDi+2nOT079aI8bfqK0TQr9F2Ygy1udPrAzOER xxBPIMfGbWnkiE1L6e1apVXy1EBmxnN3l6SK70iJ7bfQzddQjVn1FvNlPL6Iqim5 FNsK7wf+4TR20BjrYfTJ8/5ANQGl9vdqTqsEih1i3M1Td4cUhRrs4Q0vsxeiSwcJ 8lcZ9vTEvumJXIF2JJlN1y7hGINgHlpOYV6HpxkZcl4akXv0AtqHem4+FGR8xFnI XYhR0vaPSx6b2PPWGjIRuUqfSW271pZn4aPh55aJzxhe7md+zLwjU2/pbtqgIrBm BB8zmYT6N7GByLSqPlFxZJLf3CJT47vXzX6CqWxQZyVE4XdexYEG9ZHUc2hsrBEP Cn130r7qMArGWg7PCDQ3SQmWzjetgqb4LJNv1M5skNDEG9IOXeMAgu1NGQlSbR4I Wwspc+SdicXk/s19vdY+aQTCSQmqWiD/oNUy8UI9JruiX3aLzlYCjr9lhfLY0eYw UIRWgugbOwJTLM0Cth2OWAc8vPBaFXRpptL0UuzvcJAklLdmX40ataH1EznqFsaf qk52sqiyzX1qSUp6C3JkBrZioHUoo3eggPFFLJJF18ViCNhLGRhCVNx3jY5u+7BF 0Ojs1omadLkCDQRfZH+fARAAzh3fVoxL1xALjcPgwJjkZG0nmwFo7xDmw3makyzx ptNfRZrW/7xgN9V5txCMEe6A1ztUSPZe6AxKDkNADjfKRc+IV2gd/Nk3rVec7jHV WSvFCPm59NzoWT08F380AfMQtvddyq/ZfOrfg/HgdoXr0Uzz+SoPBqXueK+m7xYl zTsJ/5JJvU8ujlsFJSjXFVomyu6+I0+kECDWip/FcwbQWMlfYNHMFMa6mW13rE1y 1XDILnlnULIEx7do0fZxEUSmX8zRHrYRb9M4Iwe/azvBuYFYRtr2ZKcYfH+tYafp IXwOqlCUwwMNdufJ8XnGywARC2uMtSW5K1lr3UoJBgUbUV+llJ/oqhUaOUHYjw6F UXHScC7MYphYbz87M8HnTdZ6RJ6puRgVSIfWoHMVHSLsDyKUh6yrf5CYUOd/GTFu xxcJywmpKemYYin4Uv6N9Uy2gt8bXuz9km0KS7jG1wXqS0QH/Bdg6k2UBnBfDEHi tNf2XQ8hHr+GP3wmzhtmcGi0TcRk8K+H02NZoKiH88cjCwmyW9QIPM8BgwaJKiM2 pWUZ4rz1KVKtfLJp0nVCS/JlWsWyAhAEkrEbeOCmw9ByhvlX7KP2MW4Wbfsbown2 5CNf64QxXwLfyOqbXMymIxFUj3G4e/XIeMcs7eir6WShIEQL1UBeVhw/JBtv0RuZ 5TkAEQEAAYkCNgQYAQgAIBYhBEm+GENBBD3G2zafd2fwDmh/gBBKBQJfZH+fAhsM AAoJEGfwDmh/gBBKDd4QAK6WChVNivQTu0K3mZmljAS1fKBEaLpeLTl5D0tDhtgm yFslqqfyOmNeSg0G0FJgh1dbjRObCmHrSAerD9rGE+kNlwwsXdX7kFEEvNA7prew x9BdOs9yV5sWk/lRh6Eup/IaTRgu/0U/B6TwfKCmI/+dQeDtTsfO0ULR5tyEp0rg aBTkB+3fSSQx/hgWMzk9h1iTxT2DgcQMTiWVCm+mSiA7RBrsYkt/w0QnH1kib37k sIHM5t67tlIph7AhJS0LOzWZSsZ6aC72IoixcBp3AyKj0TnkrgTtyp8QucpFCcJv xjklcYBt4dGIFGid1iPDz2yN+NkQKKtEZbC581H4jkyI1XTZEgXImr/ZtEYigqNS ucSWraT8bRvB2NvuChXtq8qGVcK6A+8X4eVfKEgB0bwsqxOJcV95XnIBxXc/B8JH 2fsAviMGJpok8cLWC0HzMP+Q4zYNxdZqJbYm07gQWU71ToSVGMGS1Ccm0EB48eQ9 A3IrhvMv++B5QhtUgPkc9AviShBb/GIkctH9SL/JhOQCHaNgGwQjDaMku5bt9A5S 3rEYz2sYb76Z9YPSH6hQfn7o6p5YOyPCxViXQVYMOYD7wi+TG593ME7gslvkvDqu mhehY+P6ozgVKhPQOIXmV+449jvBnL7Wn4wKIaRK55jGo0J1RfW9oZR7CrYWGyxv =U4Wq -----END PGP PUBLIC KEY BLOCK----- To encrypt files with Swedbank Pay’s Public Migration Key, you must import it with the following command: Import Key 1 2 sh gpg2 --import SwedbankPay.key After this is imported, you should verify the key by comparing the fingerprint on key, with the fingerprint on this information site. If this is a match, you should mark the key as trusted with the following command: Trust Key 1 2 sh gpg2 --edit-key SwedbankPay Select trust and 5. You can now encrypt files with Swedbank Pay’s Public Migration Key with the following command: Encrypt File 1 2 sh gpg2 --armor --encrypt -r SwedbankPay CARDDATA.csv When the above command has executed, the gpg tool will have created a file named CARDDATA.csv.asc, which contains the encrypted data.",
    "tags": "",
    "url": "/checkout-v3/public-migration-key/"
  },{
    "title": "Purchase Payments",
    "text": "Purchase Payments The Purchase operation is used in all common purchase scenarios. It is the default in the SDK, so you usually do not need to specify it. Android 1 2 3 4 val paymentOrder = PaymentOrder( operation = Operation.PURCHASE ... ) iOS 1 paymentOrder.operation = .Purchase",
    "tags": "",
    "url": "/checkout-v3/modules-sdks/mobile-sdk/features/core/purchase/"
  },{
    "title": "Recur",
    "text": "Recur A recur payment is a payment which uses a recurrenceToken generated through a previous payment in order to charge the same card or account at a later time. As the name implies, these payments are used for transactions which happen on a recurring basis. Common use cases could be subscriptions for magazines, newspapers or streaming services. Please note that you need to do a capture after sending the recur request. We have added a capture section at the end of this page for that reason. Generating The Token First, you need an initial transaction where the recurrenceToken is generated and connected. You do that by adding the field generateRecurrenceToken in the PaymentOrder request and set the value to true. The payer must complete the purchase to activate the token. (Read more about deleting the recurrence token here.) Initial Recur Request The initial request should look like this: Request Copy json to clipboard 1 2 3 4 POST /psp/paymentorders HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.x/2.0 // Version optional for 3.0 and 2.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 { \"paymentorder\": { \"operation\": \"Purchase\", \"currency\": \"SEK\", \"amount\": 1500, \"vatAmount\": 375, \"description\": \"Test Purchase\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"sv-SE\", \"generateRecurrenceToken\": true, \"productName\": \"Checkout3\", // Removed in 3.1, can be excluded in 3.0 if version is added in header \"urls\": { \"hostUrls\": [ \"https://example.com\", \"https://example.net\" ], \"completeUrl\": \"https://example.com/payment-completed\", \"cancelUrl\": \"https://example.com/payment-cancelled\", \"callbackUrl\": \"https://api.example.com/payment-callback\", \"termsOfServiceUrl\": \"https://example.com/termsandconditions.pdf\" }, \"payeeInfo\": { \"payeeId\": \"5cabf558-5283-482f-b252-4d58e06f6f3b\", \"payeeReference\": \"AB832\", \"payeeName\": \"Merchant1\", \"productCategory\": \"A123\", \"orderReference\": \"or-123456\", \"subsite\": \"MySubsite\", \"siteId\": \"MySiteId\", }, \"payer\": { \"digitalProducts\": false, \"firstName\": \"Leia\", \"lastName\": \"Ahlström\", \"email\": \"leia@payex.com\", \"msisdn\": \"+46787654321\", \"payerReference\": \"AB1234\", \"shippingAddress\": { \"firstName\": \"firstname/companyname\", \"lastName\": \"lastname\", \"email\": \"karl.anderssson@mail.se\", \"msisdn\": \"+46759123456\", \"streetAddress\": \"string\", \"coAddress\": \"string\", \"city\": \"Solna\", \"zipCode\": \"17674\", \"countryCode\": \"SE\" }, \"billingAddress\": { \"firstName\": \"firstname/companyname\", \"lastName\": \"lastname\", \"email\": \"karl.anderssson@mail.se\", \"msisdn\": \"+46759123456\", \"streetAddress\": \"string\", \"coAddress\": \"string\", \"city\": \"Solna\", \"zipCode\": \"17674\", \"countryCode\": \"SE\" }, \"accountInfo\": { \"accountAgeIndicator\": \"04\", \"accountChangeIndicator\": \"04\", \"accountPwdChangeIndicator\": \"01\", \"shippingAddressUsageIndicator\": \"01\", \"shippingNameIndicator\": \"01\", \"suspiciousAccountActivity\": \"01\", } }, \"orderItems\": [ { \"reference\": \"P1\", \"name\": \"Product1\", \"type\": \"PRODUCT\", \"class\": \"ProductGroup1\", \"itemUrl\": \"https://example.com/products/123\", \"imageUrl\": \"https://example.com/product123.jpg\", \"description\": \"Product 1 description\", \"discountDescription\": \"Volume discount\", \"quantity\": 5, \"quantityUnit\": \"pcs\", \"unitPrice\": 300, \"discountPrice\": 0, \"vatPercent\": 2500, \"amount\": 1500, \"vatAmount\": 375 } ], \"riskIndicator\": { \"deliveryEmailAddress\": \"olivia.nyhuus@payex.com\", \"deliveryTimeFrameIndicator\": \"01\", \"preOrderDate\": \"19801231\", \"preOrderPurchaseIndicator\": \"01\", \"shipIndicator\": \"01\", \"giftCardPurchase\": false, \"reOrderPurchaseIndicator\": \"01\", \"pickUpAddress\": { \"name\": \"Olivia Nyhus\", \"streetAddress\": \"Saltnestoppen 43\", \"coAddress\": \"\", \"city\": \"Saltnes\", \"zipCode\": \"1642\", \"countryCode\": \"NO\" } } } } Show fields Hide fields Required Field Type Description   check paymentOrder object The payment order object.   check operation string Determines the initial operation, defining the type of payment order created.   check currency string The currency of the payment.   check amount integer The transaction amount (including VAT, if any) entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The amount displayed is the final amount the payer paid for their order, including any payment method specific discounts or fees.   check vatAmount integer The payment’s VAT (Value Added Tax) amount, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The vatAmount entered will not affect the amount shown on the payment page, which only shows the total amount. This field is used to specify how much of the total amount the VAT will be. Set to 0 (zero) if there is no VAT amount charged.   check description string The description of the payment order.   check userAgent string The user agent of the payer. Should typically be set to the value of the User-Agent header sent by the payer’s web browser.   check language string The language of the payer.     generateRecurrenceToken boolean true or false. Set to true if you want to generate an recurrenceToken for future recurring purchases.   check productName string Used to tag the payment as Digital Payments v3.0. Mandatory for Digital Payments v3.0, either in this field or the header, as you won’t get the operations in the response without submitting this field.     implementation string Indicates which implementation to use.   check urls object The urls object, containing the URLs relevant for the payment order.   check hostUrls array The array of URLs valid for embedding of Swedbank Pay Seamless Views.   check completeUrl string The URL that Swedbank Pay will redirect back to when the payer has completed their interactions with the payment. This does not indicate a successful payment, only that it has reached a final (complete) state. A GET request needs to be performed on the payment order to inspect it further. See completeUrl for details.     cancelUrl string The URL to redirect the payer to if the payment is cancelled, either by the payer or by the merchant trough an abort request of the payment or paymentorder.   check callbackUrl string The URL that Swedbank Pay will perform an HTTP POST against every time a transaction is created on the payment order. See callback for details. For recurring transactions, the callback will only be sent for Trustly transactions, not card.   check termsOfServiceUrl string The URL to the terms of service document which the payer must accept in order to complete the payment. HTTPS is a requirement.   check payeeInfo object The payeeInfo object, containing information about the payee (the recipient of the money). See payeeInfo for details.   check payeeId string The ID of the payee, usually the merchant ID.   check payeeReference string A unique reference from the merchant system. Set per operation to ensure an exactly-once delivery of a transactional operation. Length and content validation depends on whether the transaction.number or the payeeReference is sent to the acquirer. If Swedbank Pay handles the settlement, the transaction.number is sent and the payeeReference must be in the format of A-Za-z0-9 and string(30). If you handle the settlement, Swedbank Pay will send the payeeReference and it will be limited to the format of string(12). All characters must be digits. In Invoice Payments payeeReference is used as an invoice/receipt number, if the receiptReference is not defined.     payeeName string The name of the payee, usually the name of the merchant.     productCategory string(50) A product category or number sent in from the payee/merchant. This is not validated by Swedbank Pay, but will be passed through the payment process and may be used in the settlement process.     orderReference string(50) The order reference should reflect the order reference found in the merchant’s systems.     subsite string(40) The subsite field can be used to perform a split settlement on the payment. The different subsite values must be resolved with Swedbank Pay reconciliation before being used. If you send in an unknown subsite value, it will be ignored and the payment will be settled using the merchant’s default settlement account. Must be in the format of A-Za-z0-9.     siteId string(15) siteId is used for split settlement transactions when you, as a merchant, need to specify towards AMEX which sub-merchant the transaction belongs to. Must be in the format of A-Za-z0-9.     payer object The payer object containing information about the payer relevant for the payment order.     digitalProducts bool Set to true for merchants who only sell digital goods and only require email and/or msisdn as shipping details. Set to false if the merchant also sells physical goods.     firstName string The first name of the payer.     lastName string The last name of the payer.     email string The e-mail address of the payer. Will be used to prefill the Checkin as well as on the payer’s profile, if not already set. Increases the chance for frictionless 3-D Secure 2 flow .     msisdn string The mobile phone number of the Payer. Will be prefilled on Checkin page and used on the payer’s profile, if not already set. The mobile number must have a country code prefix and be 8 to 15 digits in length. 3-D Secure 2     shippingAddress object The shipping address object related to the payer. The field is related to 3-D Secure 2     firstName string The first name of the addressee – the receiver of the shipped goods.     lastName string The last name of the addressee – the receiver of the shipped goods.     streetAddress string Payer’s street address. Maximum 50 characters long.     coAddress string Payer’ s c/o address, if applicable.     zipCode string Payer’s zip code     city string Payer’s city of residence.     countryCode string Country code for country of residence.   check billingAddress object The billing address object containing information about the payer’s billing address.     firstName string The first name of the payer.     lastName string The last name of the payer.     streetAddress string The street address of the payer. Maximum 50 characters long.     coAddress string The CO-address (if used)     zipCode string The postal number (ZIP code) of the payer.     city string The city of the payer.     accountInfo object Object related to the payer containing info about the payer’s account.     accountAgeIndicator string Indicates the age of the payer’s account. 01 (No account, guest checkout) 02 (Created during this transaction) 03 (Less than 30 days old) 04 (30 to 60 days old) 05 (More than 60 days old)     accountChangeIndicator string Indicates when the last account changes occurred. 01 (Changed during this transaction) 02 (Less than 30 days ago) 03 (30 to 60 days ago) 04 (More than 60 days ago)     accountChangePwdIndicator string Indicates when the account’s password was last changed. 01 (No changes) 02 (Changed during this transaction) 03 (Less than 30 days ago) 04 (30 to 60 days ago) 05 (More than 60 days old)     shippingAddressUsageIndicator string Indicates when the payer’s shipping address was last used. 01(This transaction) 02 (Less than 30 days ago) 03 (30 to 60 days ago) 04 (More than 60 days ago)     shippingNameIndicator string Indicates if the account name matches the shipping name. 01 (Account name identical to shipping name) 02 (Account name different from shipping name)     suspiciousAccountActivity string Indicates if there have been any suspicious activities linked to this account. 01 (No suspicious activity has been observed) 02 (Suspicious activity has been observed)   check orderItems array The array of items being purchased with the order. Note that authorization orderItems will not be printed on invoices, so lines meant for print must be added in the Capture request. The authorization orderItems will, however, be used in the Merchant Portal when captures or reversals are performed, and might be shown other places later. It is required to use this field to be able to send Capture orderItems. Capture requests should only contain items meant to be captured from the order.   check reference string A reference that identifies the order item.   check name string The name of the order item.   check type string PRODUCT, SERVICE, SHIPPING_FEE, PAYMENT_FEE DISCOUNT, VALUE_CODE or OTHER. The type of the order item. PAYMENT_FEE is the amount you are charged with when you are paying with invoice. The amount can be defined in the amount field below.   check class string The classification of the order item. Can be used for assigning the order item to a specific product category, such as MobilePhone. Note that class cannot contain spaces and must follow the regex pattern [\\w-]*. Swedbank Pay may use this field for statistics.     itemUrl string The URL to a page that can display the purchased item, product or similar.   ︎︎︎ imageUrl string The URL to an image of the order item.     description string A textual description of the purchase. Maximum length is 40 characters.     discountDescription string The human readable description of the possible discount.   check quantity number The 4 decimal precision quantity of order items being purchased.   check quantityUnit string The unit of the quantity, such as pcs, grams, or similar. This is used for your own book keeping.   check unitPrice integer The price per unit of order item, including VAT.     discountPrice integer If the order item is purchased at a discounted price. This field should contain that price, including VAT.   check vatPercent integer The percent value of the VAT multiplied by 100, so 25% becomes 2500.   check amount integer The transaction amount (including VAT, if any) entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The amount displayed is the final amount the payer paid for their order, including any payment method specific discounts or fees.   check vatAmount integer The payment’s VAT (Value Added Tax) amount, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The vatAmount entered will not affect the amount shown on the payment page, which only shows the total amount. This field is used to specify how much of the total amount the VAT will be. Set to 0 (zero) if there is no VAT amount charged.     riskIndicator array This optional object consist of information that helps verifying the payer. Providing these fields decreases the likelihood of having to prompt for 3-D Secure 2.0 authentication of the payer when they are authenticating the purchase.     deliveryEmailAdress string For electronic delivery, the email address to which the merchandise was delivered. Providing this field when appropriate decreases the likelihood of a 3-D Secure authentication for the payer.     deliveryTimeFrameIndicator string Indicates the merchandise delivery timeframe. 01 (Electronic Delivery) 02 (Same day shipping) 03 (Overnight shipping) 04 (Two-day or more shipping)     preOrderDate string For a pre-ordered purchase. The expected date that the merchandise will be available. Format: YYYYMMDD     preOrderPurchaseIndicator string Indicates whether the payer is placing an order for merchandise with a future availability or release date. 01 (Merchandise available) 02 (Future availability)     shipIndicator string Indicates shipping method chosen for the transaction. 01 (Ship to cardholder’s billing address) 02 (Ship to another verified address on file with merchant)03 (Ship to address that is different than cardholder’s billing address)04 (Ship to Store / Pick-up at local store. Store address shall be populated in shipping address fields)05 (Digital goods, includes online services, electronic giftcards and redemption codes) 06 (Travel and Event tickets, not shipped) 07 (Other, e.g. gaming, digital service)     giftCardPurchase bool true if this is a purchase of a gift card.     reOrderPurchaseIndicator string Indicates whether the cardholder is reordering previously purchased merchandise. 01 (First time ordered) 02 (Reordered).     pickUpAddress object If shipIndicator set to 04, then prefill this with the payers pickUpAddress of the purchase to decrease the risk factor of the purchase.     name string If shipIndicator set to 04, then prefill this with the payers name of the purchase to decrease the risk factor of the purchase.     streetAddress string If shipIndicator set to 04, then prefill this with the payers streetAddress of the purchase to decrease the risk factor of the purchase. Maximum 50 characters long.     coAddress string If shipIndicator set to 04, then prefill this with the payers coAddress of the purchase to decrease the risk factor of the purchase.     city string If shipIndicator set to 04, then prefill this with the payers city of the purchase to decrease the risk factor of the purchase.     zipCode string If shipIndicator set to 04, then prefill this with the payers zipCode of the purchase to decrease the risk factor of the purchase.     countryCode string If shipIndicator set to 04, then prefill this with the payers countryCode of the purchase to decrease the risk factor of the purchase.   Initial Recur Response Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x/2.0 api-supported-versions: 3.x/2.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 { \"paymentorder\": { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce\", \"created\": \"2020-06-22T10:56:56.2927632Z\", \"updated\": \"2020-06-22T10:56:56.4035291Z\", \"operation\": \"Purchase\", \"status\": \"Initialized\", \"currency\": \"SEK\", \"amount\": 1500, \"vatAmount\": 375, \"description\": \"Test Purchase\", \"initiatingSystemUserAgent\": \"swedbankpay-sdk-dotnet/3.0.1\", \"language\": \"sv-SE\", \"availableInstruments\": [ \"CreditCard\", ], \"instrumentMode\": false, \"guestMode\": false, \"payer\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/payers\" }, \"orderItems\": { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/orderitems\" }, \"history\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/history\" }, \"failed\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/failed\" }, \"aborted\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/aborted\" }, \"paid\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/paid\" }, \"cancelled\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/cancelled\" }, \"financialTransactions\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/financialtransactions\" }, \"failedAttempts\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/failedattempts\" }, \"metadata\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/metadata\" } }, \"operations\": [ { \"href\": \"https://api.payex.com/psp/paymentorders/222a50ca-b268-4b32-16fa-08d6d3b73224\", \"rel\":\"update-order\", \"method\":\"PATCH\", \"contentType\":\"application/json\" }, { \"href\": \"https://api.payex.com/psp/paymentorders/222a50ca-b268-4b32-16fa-08d6d3b73224\", \"rel\": \"abort\", \"method\": \"PATCH\", \"contentType\": \"application/json\" }, { \"href\": \"https://api.payex.com/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce\", \"rel\": \"abort-paymentattempt\", \"method\": \"PATCH\", \"contentType\": \"application/json\" } ] } Show fields Hide fields Field Type Description paymentOrder object The payment order object. id string The relative URL and unique identifier of the paymentorder resource . Please read about URL Usage to understand how this and other URLs should be used in your solution. created string The ISO-8601 date of when the payment order was created. updated string The ISO-8601 date of when the payment order was updated. operation string Purchase status string Indicates the payment order’s current status. Initialized is returned when the payment is created and still ongoing. The request example above has this status. Paid is returned when the payer has completed the payment successfully. See the Paid response. Failed is returned when a payment has failed. You will find an error message in the Failed response. Cancelled is returned when an authorized amount has been fully cancelled. See the Cancelled response. It will contain fields from both the cancelled description and paid section. Aborted is returned when the merchant has aborted the payment, or if the payer cancelled the payment in the redirect integration (on the redirect page). See the Aborted response. currency string The currency of the payment order. amount integer The transaction amount (including VAT, if any) entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The amount displayed is the final amount the payer paid for their order, including any payment method specific discounts or fees. vatAmount integer The payment’s VAT (Value Added Tax) amount, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The vatAmount entered will not affect the amount shown on the payment page, which only shows the total amount. This field is used to specify how much of the total amount the VAT will be. Set to 0 (zero) if there is no VAT amount charged. description string(40) A textual description of the purchase. Maximum length is 40 characters. initiatingSystemUserAgent string The user agent of the HTTP client making the request, reflecting the value sent in the User-Agent header with the initial POST request which created the Payment Order. language string sv-SE, nb-NO, da-DK, en-US or fi-FI. recurrenceToken string The generated recurrence token if operation: recur or generaterecurrenceToken: true was used. availableInstruments string A list of payment methods available for this payment. implementation string The merchant’s Digital Payments implementation type. Enterprise or PaymentsOnly. We ask that you don’t build logic around this field’s response. It is mainly for information purposes, as the implementation types might be subject to name changes. If this should happen, updated information will be available in this table. integration string The merchant’s Digital Payments integration type. HostedView (Seamless View) or Redirect. This field will not be populated until the payer has opened the payment UI, and the client script has identified if Swedbank Pay or another URI is hosting the container with the payment iframe. We ask that you don’t build logic around this field’s response. It is mainly for information purposes. as the integration types might be subject to name changes, If this should happen, updated information will be available in this table. instrumentMode bool Set to true or false. Indicates if the payment is initialized with only one payment method available. guestMode bool Set to true or false. Indicates if the payer chose to pay as a guest or not. When using the Payments Only implementation, this is triggered by not including a payerReference in the original paymentOrder request. payer id The URL to the payer resource where information about the payer can be retrieved. orderItems id The URL to the orderItems resource where information about the order items can be retrieved. history id The URL to the history resource where information about the payment’s history can be retrieved. failed id The URL to the failed resource where information about the failed transactions can be retrieved. aborted id The URL to the aborted resource where information about the aborted transactions can be retrieved. paid id The URL to the paid resource where information about the paid transactions can be retrieved. cancelled id The URL to the cancelled resource where information about the cancelled transactions can be retrieved. financialTransactions id The URL to the financialTransactions resource where information about the financial transactions can be retrieved. failedAttempts id The URL to the failedAttempts resource where information about the failed attempts can be retrieved. metadata id The URL to the metadata resource where information about the metadata can be retrieved. operations array The array of operations that are possible to perform on the payment order in its current state. GET The Token The token can be retrieved by performing a GET towards paid. It will be visible under tokens in the paid field. Request 1 2 3 4 GET /psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/paid HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.x/2.0 // Version optional for 3.0 and 2.0 As an alternative, you can also retrieve it by using the expand option when you GET your payment. The GET request should look like the one below, with a ?$expand=paid after the paymentOrderId. The response should match the initial payment response, but with an expanded paid field. Request 1 2 3 4 GET /psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/ HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.x/2.0 // Version optional for 3.0 and 2.0 Performing The Recurring Purchase When you are ready to perform the recurring purchase, simply add the recurrenceToken field to the paymentOrder request and use the token as the value. Your request should look like the example below, and the response will match the paymentOrder response from the initial purchase. After The Recurring Purchase Please remember that the recur request will reserve the amount, but not charge it. You will (i.e. when you are ready to ship purchased physical products) have to perform a Capture request later on to complete the recurring purchase. You can also Cancel it if needed. Recur Request Request Copy json to clipboard 1 2 3 4 POST /psp/paymentorders HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.x/2.0 // Version optional for 3.0 and 2.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 { \"paymentorder\": { \"operation\": \"Recur\", \"recurrenceToken\": \"7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"currency\": \"NOK\", \"amount\": 1500, \"vatAmount\": 0, \"description\": \"Test Recurrence\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"nb-NO\", \"productName\": \"Checkout3\", // Removed in 3.1, can be excluded in 3.0 if version is added in header \"urls\": { \"callbackUrl\": \"https://example.com/payment-callback\" }, \"payeeInfo\": { \"payeeId\": \"5cabf558-5283-482f-b252-4d58e06f6f3b\" \"payeeReference\": \"CD1234\", \"payeeName\": \"Merchant1\", \"productCategory\": \"A123\", \"orderReference\": \"or-12456\", \"subsite\": \"MySubsite\", \"siteId\": \"MySiteId\", }, \"payer\": { \"payerReference\": \"AB1234\", }, \"orderItems\": [ { \"reference\": \"P1\", \"name\": \"Product1\", \"type\": \"PRODUCT\", \"class\": \"ProductGroup1\", \"itemUrl\": \"https://example.com/products/123\", \"imageUrl\": \"https://example.com/product123.jpg\", \"description\": \"Product 1 description\", \"discountDescription\": \"Volume discount\", \"quantity\": 4, \"quantityUnit\": \"pcs\", \"unitPrice\": 300, \"discountPrice\": 200, \"vatPercent\": 2500, \"amount\": 1000, \"vatAmount\": 250 }, { \"reference\": \"I1\", \"name\": \"InvoiceFee\", \"type\": \"PAYMENT_FEE\", \"class\": \"Fees\", \"description\": \"Fee for paying with Invoice\", \"quantity\": 1, \"quantityUnit\": \"pcs\", \"unitPrice\": 1900, \"vatPercent\": 0, \"amount\": 1900, \"vatAmount\": 0, \"restrictedToInstruments\": [ \"Invoice-PayExFinancingSe\" ] } ] } } Show fields Hide fields Required Field Type Description check payment object The payment object. check operation object Recur. check recurrenceToken string The created recurrenceToken if operation: Recur or generateRecurrenceToken: true was used. check currency string The currency of the payment order. check amount integer The transaction amount (including VAT, if any) entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The amount displayed is the final amount the payer paid for their order, including any payment method specific discounts or fees. check vatAmount integer The payment’s VAT (Value Added Tax) amount, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The vatAmount entered will not affect the amount shown on the payment page, which only shows the total amount. This field is used to specify how much of the total amount the VAT will be. Set to 0 (zero) if there is no VAT amount charged. check description string A textual description of the purchase. Maximum length is 40 characters. check userAgent string The user agent of the payer. Should typically be set to the value of the User-Agent header sent by the payer’s web browser. check language string sv-SE, nb-NO, da-DK, en-US or fi-FI. check productName string Used to tag the payment as Digital Payments v3.0. Mandatory for Digital Payments v3.0, either in this field or the header, as you won’t get the operations in the response without submitting this field.   implementation string Indicates which implementation to use. check urls string The URL to the urls resource where all URLs related to the payment order can be retrieved.   callbackUrl string The URL that Swedbank Pay will perform an HTTP POST against every time a transaction is created on the payment order. See callback for details. For recurring transactions, the callback will only be sent for Trustly transactions, not card. check payeeInfo object The payeeInfo object, containing information about the payee (the recipient of the money). See payeeInfo for details. check payeeId string This is the unique id that identifies this payee (like merchant) set by Swedbank Pay. check payeeReference string A unique reference from the merchant system. Set per operation to ensure an exactly-once delivery of a transactional operation. Length and content validation depends on whether the transaction.number or the payeeReference is sent to the acquirer. If Swedbank Pay handles the settlement, the transaction.number is sent and the payeeReference must be in the format of A-Za-z0-9 and string(30). If you handle the settlement, Swedbank Pay will send the payeeReference and it will be limited to the format of string(12). All characters must be digits. In Invoice Payments payeeReference is used as an invoice/receipt number, if the receiptReference is not defined.   receiptReference string(30) A unique reference to the transaction, provided by the merchant. Can be used as an invoice or receipt number as a supplement to payeeReference. check payeeName string The payee name (like merchant name) that will be displayed when redirected to Swedbank Pay. check productCategory string(50) A product category or number sent in from the payee/merchant. This is not validated by Swedbank Pay, but will be passed through the payment process and may be used in the settlement process. check orderReference string(50) The order reference should reflect the order reference found in the merchant’s systems. check subsite string(40) The subsite field can be used to perform a split settlement on the payment. The different subsite values must be resolved with Swedbank Pay reconciliation before being used. If you send in an unknown subsite value, it will be ignored and the payment will be settled using the merchant’s default settlement account. Must be in the format of A-Za-z0-9.   siteId string(15) siteId is used for split settlement transactions when you, as a merchant, need to specify towards AMEX which sub-merchant the transaction belongs to. Must be in the format of A-Za-z0-9.   payer string The payer object, containing information about the payer.   payerReference string The reference to the payer from the merchant system, like e-mail address, mobile number, customer number etc. Mandatory if generateRecurrenceToken, RecurrenceToken, generatePaymentToken or paymentToken is true.   metadata object A unique reference from the merchant system. Set per operation to ensure an exactly-once delivery of a transactional operation. Length and content validation depends on whether the transaction.number or the payeeReference is sent to the acquirer. If Swedbank Pay handles the settlement, the transaction.number is sent and the payeeReference must be in the format of A-Za-z0-9 and string(30). If you handle the settlement, Swedbank Pay will send the payeeReference and it will be limited to the format of string(12). All characters must be digits. In Invoice Payments payeeReference is used as an invoice/receipt number, if the receiptReference is not defined. check orderItems array The array of items being purchased with the order. Note that authorization orderItems will not be printed on invoices, so lines meant for print must be added in the Capture request. The authorization orderItems will, however, be used in the Merchant Portal when captures or reversals are performed, and might be shown other places later. It is required to use this field to be able to send Capture orderItems. Capture requests should only contain items meant to be captured from the order. check reference string A reference that identifies the order item. check name string The name of the order item. check type string PRODUCT, SERVICE, SHIPPING_FEE, PAYMENT_FEE DISCOUNT, VALUE_CODE or OTHER. The type of the order item. PAYMENT_FEE is the amount you are charged with when you are paying with invoice. The amount can be defined in the amount field below. check class string The classification of the order item. Can be used for assigning the order item to a specific product category, such as MobilePhone. Note that class cannot contain spaces and must follow the regex pattern [\\w-]*. Swedbank Pay may use this field for statistics.   itemUrl string The URL to a page that can display the purchased item, product or similar.   imageUrl string The URL to an image of the order item.   description string A textual description of the purchase. Maximum length is 40 characters.   discountDescription string The human readable description of the possible discount. check quantity integer The 4 decimal precision quantity of order items being purchased. check quantityUnit string The unit of the quantity, such as pcs, grams, or similar. This is used for your own book keeping. check unitPrice integer The price per unit of order item, including VAT.   discountPrice integer If the order item is purchased at a discounted price. This field should contain that price, including VAT. check vatPercent integer The percent value of the VAT multiplied by 100, so 25% becomes 2500. check amount integer The transaction amount (including VAT, if any) entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The amount displayed is the final amount the payer paid for their order, including any payment method specific discounts or fees. check vatAmount integer The payment’s VAT (Value Added Tax) amount, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The vatAmount entered will not affect the amount shown on the payment page, which only shows the total amount. This field is used to specify how much of the total amount the VAT will be. Set to 0 (zero) if there is no VAT amount charged.   restrictedToInstruments array A list of the payment methods you wish to restrict the payment to. Currently Invoice only. Invoice supports the subtypes PayExFinancingNo, PayExFinancingSe and PayMonthlyInvoiceSe, separated by a dash, e.g.; Invoice-PayExFinancingNo. Default value is all supported payment methods. Use of this field requires an agreement with Swedbank Pay. You can restrict fees and/or discounts to certain payment methods by adding this field to the orderline you want to restrict. Use positive amounts to add fees and negative amounts to add discounts. Capture Captures are only possible when a payment has a successful Authorization transaction, naturally excluding one-phase payment methods like Swish and Trustly. They will be marked as a Sale transaction. Two-phase payment methods like card and Vipps however, require a Capture to be completed. Please note that you have a maximum of 5 consecutive failed attempts at a capture. The payment will be locked after the fifth, and you need to contact us for further attempts. In addition to full captures, it is possible to do partial captures of the authorized amount. You can do more captures on the same payment later, up to the total authorized amount. A useful tool for when you have to split orders into several shipments. First off, you must request the order information from the server to get the request link. With this, you can request the capture with the amount to capture, and get the status back. To capture the authorized payment, we need to perform capture against the accompanying href returned in the operations list. See the abbreviated request and response below: Capture Request Request Copy json to clipboard 1 2 3 4 POST /psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/captures HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.0/2.0 // Version optional 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 { \"transaction\": { \"description\": \"Capturing the authorized payment\", \"amount\": 1500, \"vatAmount\": 375, \"payeeReference\": \"AB832\", \"receiptReference\": \"AB831\", \"orderItems\": [ { \"reference\": \"P1\", \"name\": \"Product1\", \"type\": \"PRODUCT\", \"class\": \"ProductGroup1\", \"itemUrl\": \"https://example.com/products/123\", \"imageUrl\": \"https://example.com/product123.jpg\", \"description\": \"Product 1 description\", \"discountDescription\": \"Volume discount\", \"quantity\": 4, \"quantityUnit\": \"pcs\", \"unitPrice\": 300, \"discountPrice\": 200, \"vatPercent\": 2500, \"amount\": 1000, \"vatAmount\": 250 }, { \"reference\": \"P2\", \"name\": \"Product2\", \"type\": \"PRODUCT\", \"class\": \"ProductGroup1\", \"description\": \"Product 2 description\", \"quantity\": 1, \"quantityUnit\": \"pcs\", \"unitPrice\": 500, \"vatPercent\": 2500, \"amount\": 500, \"vatAmount\": 125 } ] } } Show fields Hide fields Required Field Type Description check transaction object The transaction object. check description string The description of the capture transaction. check amount integer The transaction amount (including VAT, if any) entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The amount displayed is the final amount the payer paid for their order, including any payment method specific discounts or fees. check vatAmount integer The payment’s VAT (Value Added Tax) amount, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The vatAmount entered will not affect the amount shown on the payment page, which only shows the total amount. This field is used to specify how much of the total amount the VAT will be. Set to 0 (zero) if there is no VAT amount charged. check payeeReference string A unique reference from the merchant system. Set per operation to ensure an exactly-once delivery of a transactional operation. Length and content validation depends on whether the transaction.number or the payeeReference is sent to the acquirer. If Swedbank Pay handles the settlement, the transaction.number is sent and the payeeReference must be in the format of A-Za-z0-9 and string(30). If you handle the settlement, Swedbank Pay will send the payeeReference and it will be limited to the format of string(12). All characters must be digits. In Invoice Payments payeeReference is used as an invoice/receipt number, if the receiptReference is not defined.   receiptReference string(30) A unique reference to the transaction, provided by the merchant. Can be used as an invoice or receipt number as a supplement to payeeReference. check orderItems array The array of items being purchased with the order. Note that authorization orderItems will not be printed on invoices, so lines meant for print must be added in the Capture request. The authorization orderItems will, however, be used in the Merchant Portal when captures or reversals are performed, and might be shown other places later. It is required to use this field to be able to send Capture orderItems. Capture requests should only contain items meant to be captured from the order. check reference string A reference that identifies the order item. check name string The name of the order item. check type enum PRODUCT, SERVICE, SHIPPING_FEE, PAYMENT_FEE, DISCOUNT, VALUE_CODE or OTHER. The type of the order item. check class string The classification of the order item. Can be used for assigning the order item to a specific product category, such as MobilePhone. Note that class cannot contain spaces and must follow the regex pattern [\\w-]*. Swedbank Pay may use this field for statistics.   itemUrl string The URL to a page that can display the purchased item, product or similar. ︎︎︎ imageUrl string The URL to an image of the order item.   description string The human readable description of the order item.   discountDescription string The human readable description of the possible discount. check quantity number The 4 decimal precision quantity of order items being purchased. check quantityUnit string The unit of the quantity, such as pcs, grams, or similar. This is used for your own book keeping. check unitPrice integer The price per unit of order item, including VAT.   discountPrice integer If the order item is purchased at a discounted price. This field should contain that price, including VAT. check vatPercent integer The percent value of the VAT multiplied by 100, so 25% becomes 2500. check amount integer The total amount including VAT to be paid for the specified quantity of this order item, in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 SEK and 5000 equals 50.00 SEK. check vatAmount integer The total amount of VAT to be paid for the specified quantity of this order item, in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 SEK and 5000 equals 50.00 SEK. check reference string A reference that identifies the order item. check name string The name of the order item. check type enum PRODUCT, SERVICE, SHIPPING_FEE, PAYMENT_FEE, DISCOUNT, VALUE_CODE or OTHER. The type of the order item. check class string The classification of the order item. Can be used for assigning the order item to a specific product category, such as MobilePhone. Note that class cannot contain spaces and must follow the regex pattern [\\w-]*. Swedbank Pay may use this field for statistics. ︎︎︎ itemUrl string The URL to a page that can display the purchased item, such as a product page ︎︎︎ imageUrl string The URL to an image of the order item. ︎︎︎ description string The human readable description of the order item. ︎︎︎ discountDescription string The human readable description of the possible discount. check quantity number The 4 decimal precision quantity of order items being purchased. check quantityUnit string The unit of the quantity, such as pcs, grams, or similar. check unitPrice integer The price per unit of order item, including VAT. ︎︎︎ discountPrice integer If the order item is purchased at a discounted price. This field should contain that price, including VAT. check vatPercent integer The percent value of the VAT multiplied by 100, so 25% becomes 2500. check amount integer The total amount including VAT to be paid for the specified quantity of this order item, in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 NOK and 5000 equals 50.00 NOK. check vatAmount integer The total amount of VAT to be paid for the specified quantity of this order item, in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 NOK and 5000 equals 50.00 NOK. Capture Response If the capture request succeeds, this should be the response: Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.0/2.0 api-supported-versions: 3.0/2.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 { \"payment\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"capture\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"transaction\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2020-06-22T10:56:56.2927632Z\", \"updated\": \"2020-06-22T10:56:56.4035291Z\", \"type\": \"Capture\", \"state\": \"Completed\", \"amount\": 1500, \"vatAmount\": 375, \"description\": \"Capturing the authorized payment\", \"payeeReference\": \"AB832\", \"receiptReference\": \"AB831\" } } } Show fields Hide fields Property Type Description payment string The relative URL of the payment this capture transaction belongs to. capture object The capture object, containing the information about the capture transaction. id string The relative URL of the created capture transaction. transaction object The object representation of the generic transaction resource, containing information about the current transaction. id string The relative URL of the current transaction resource. created string The ISO-8601 date and time of when the transaction was created. updated string The ISO-8601 date and time of when the transaction was updated. type string Indicates the transaction type. state string Indicates the state of the transaction, usually initialized, completed or failed. If a partial has been done and further transactions are possible, the state will be awaitingActivity. number integer The transaction number, useful when there’s need to reference the transaction in human communication. Not usable for programmatic identification of the transaction, where id should be used instead. amount integer The transaction amount (including VAT, if any) entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The amount displayed is the final amount the payer paid for their order, including any payment method specific discounts or fees. vatAmount integer The payment’s VAT (Value Added Tax) amount, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The vatAmount entered will not affect the amount shown on the payment page, which only shows the total amount. This field is used to specify how much of the total amount the VAT will be. Set to 0 (zero) if there is no VAT amount charged. description string A textual description of the purchase. Maximum length is 40 characters. payeeReference string A unique reference from the merchant system. Set per operation to ensure an exactly-once delivery of a transactional operation. Length and content validation depends on whether the transaction.number or the payeeReference is sent to the acquirer. If Swedbank Pay handles the settlement, the transaction.number is sent and the payeeReference must be in the format of A-Za-z0-9 and string(30). If you handle the settlement, Swedbank Pay will send the payeeReference and it will be limited to the format of string(12). All characters must be digits. In Invoice Payments payeeReference is used as an invoice/receipt number, if the receiptReference is not defined. receiptReference string(30) A unique reference from the merchant system. It is set per operation to ensure an exactly-once delivery of a transactional operation. It is used to supplement payeeReference as an additional receipt number. Capture Sequence Diagram sequenceDiagram participant Merchant participant SwedbankPay as Swedbank Pay rect rgba(81,43,43,0.1) activate Merchant note left of Payer: Capture Merchant -&gt;&gt;+ SwedbankPay: rel:capture deactivate Merchant SwedbankPay --&gt;&gt;- Merchant: Capture status note right of Merchant: Capture here only if the purchased&lt;br/&gt;goods don't require shipping.&lt;br/&gt;If shipping is required, perform capture&lt;br/&gt;after the goods have shipped.&lt;br&gt;Should only be used for &lt;br&gt;payment methods that support &lt;br&gt;Authorizations. end",
    "tags": "",
    "url": "/checkout-v3/features/optional/recur/"
  },{
    "title": "Use Case Recurring",
    "text": "Supported Payment Methods Looking to get started with recurring services? They are currently supported using card payments. Step 1: Create a Payment Order To initiate recurring services, create a payment order with Swedbank Pay. This can be done by making an initial purchase, storing user details along with the transaction, or performing a Verify operation for account verification. Verify is a zero-sum operation used solely for registering details for future use. Step 2: Choose Recurring Model and Token Identify the recurring model and token type based on your needs. We support both dynamic and static prices and intervals. Use the RecurrenceToken flow for recurring payments with a constant price and interval, and the UnscheduledToken flow for variable services or goods. We highly recommend using the Unscheduled option, as it gives you flexibility regarding changes in amount and interval. From a technical standpoint, both flows work identically, with the differences lying in usage areas and limitations set for merchants and expectations from payers. Purchase Example Start with the basic payment order request and modify it by including the parameter generateUnscheduledToken or generateRecurrenceToken: true | false. Include only the token(s) you intend to use. Payment Request Copy json to clipboard 1 2 3 4 POST /psp/paymentorders HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.x/2.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 { \"paymentorder\": { \"operation\": \"Purchase\", \"currency\": \"SEK\", \"amount\": 1500, \"vatAmount\": 375, \"description\": \"Test Purchase\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"sv-SE\", \"productName\": \"Checkout3\", \"generateUnscheduledToken\": \"true | false\", \"generateRecurrenceToken\": \"true | false\" } } Verify The Verify request is identical to the Purchase request, with the only tweak being the value of the operation parameter (should be Verify). Exclude amount, vatAmount, and the orderItems object since no monetary value is associated with this action. Verify Request Copy json to clipboard 1 2 3 4 POST /psp/paymentorders HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.x/2.0 1 2 3 4 5 6 7 8 9 10 11 12 { \"paymentorder\": { \"operation\": \"Verify\", \"currency\": \"SEK\", \"description\": \"Test Purchase\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"sv-SE\", \"productName\": \"Checkout3\", \"generateUnscheduledToken\": \"true | false\", \"generateRecurrenceToken\": \"true | false\" } } Post-Purchase / Post-Verify After the payer completes their interaction, retrieve the token in the Paid node by performing a GET call towards the Paid URL. Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x/2.0 api-supported-versions: 3.x/2.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 { \"paid\": { \"id\": \"/psp/paymentorders/08349122-aa53-40e8-dd36-08dbbb319d19/paid\", \"instrument\": \"CreditCard\", // Instrument used \"number\": 40126707630, // Transaction number associated with the action \"tokens\":[ { \"type\": \"unscheduled\", \"token\": \"e9e61882-7655-4023-adb1-a46b52e786b4\", \"name\": \"522661******3406\", \"expiryDate\": \"12/2033\" }, { \"type\": \"recurrence\", \"token\": \"812db58a-a10e-4a96-80f2-8247ce2bc8d9\", \"name\": \"522661******3406\", \"expiryDate\": \"12/2033\" } // ... other details ] } Charging Your Customer Now that your customer has stored their details and you’ve retrieved their token, you are ready to start charging based on the agreed-upon details (price &amp; interval). Modify the parameters in the Purchase/Verify request as follows: Operation: Use either UnscheduledPurchase or Recur based on the stored token. Modify the parameter generateUnscheduledToken or generateRecurrenceToken into unscheduledToken or recurrenceToken: “”. URL: CallbackUrl is mandatory and will send you an asynchronous POST to make sure the information is received. Information regarding the results will also be displayed in the direct response to your request. The payerReference in the Payer node needs to be consistent with the one used to create the token details in Purchase/Verify. Removal of Payment Method Details When conditions like error codes or payer requests to remove details are met, you’ll need to delete associated tokens. Here are two methods: Deletion of all tokens: Send a PATCH call to the base URL with the endpoint /psp/paymentorders/payerOwnedTokens/&lt;payerReference&gt;. Deletion of a singular token: Use the URL /psp/paymentorders/unscheduledTokens/&lt;TokenValue&gt;. Both scenarios generate the same response. Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x/2.0 api-supported-versions: 3.x/2.0 1 2 3 4 { \"state\": \"Deleted\", \"comment\": \"Comment on why the deletion is happening\" } Common causes that triggers the need for deletion Your customer requests their information to be removed. The agreement with your customer has been terminated or expired. Error codes pertaining to permanent causes, for example Card expired (54) or Card stolen (43). Sources If you would like to read more in depth about each specific instance, we have compiled relevant documentation below. Generation of tokens (with value): Unscheduled, Recur Verify (operation to store details with no sum). Deletion of tokens. Callback (asynchronous update). Post-purchase: Capture, Cancel, Reversal.",
    "tags": "",
    "url": "/checkout-v3/get-started/recurring/"
  },{
    "title": "Redirect",
    "text": "Display Redirect Among the operations in the POST paymentOrders response, you will find redirect-checkout. This is the one you need to display the payment UI. Response Copy json to clipboard 1 2 3 4 5 6 7 8 9 10 11 { \"paymentOrder\": { \"operations\": [ { \"method\": \"GET\", \"href\": \"https://ecom.externalintegration.payex.com/payment/menu/b934d6f84a89a01852eea01190c2bbcc937ba29228ca7502df8592975ee3bb0d?_tc_tid=30f2168171e142d38bcd4af2c3721959\", \"rel\": \"redirect-checkout\", \"contentType\": \"text/html\" }, ] } How Redirect Looks The redirect link opens the payment menu in a new page where the payer can select their preferred payment method and pay. Once the payer has completed the purchase, you can perform a GET towards the paymentOrders resource to see the purchase state. You are now ready to capture the funds. Follow the link below to read more about capture and the other options you have after the purchase. Redirect Sequence Diagram info Note that in this diagram, the Payer refers to the merchant front-end (website) while Merchant refers to the merchant back-end. sequenceDiagram participant Payer participant Merchant participant SwedbankPay as Swedbank Pay participant 3rdParty rect rgba(238, 112, 35, 0.05) activate Payer Payer -&gt;&gt;+ Merchant: Initiate Purchase deactivate Payer Merchant -&gt;&gt;+ SwedbankPay: POST /psp/paymentorders (completeUrl, payer information) deactivate Merchant SwedbankPay --&gt;&gt;+ Merchant: rel:redirect-checkout deactivate SwedbankPay Merchant --&gt;&gt;- Payer: Redirect payer to SwedbankPay purchase page. activate SwedbankPay activate Payer Payer -&gt;&gt; Payer: Initiate Purchase step deactivate Payer SwedbankPay -&gt;&gt;+ Payer: Do purchase logic Payer -&gt;&gt; SwedbankPay: Do purchase logic deactivate Payer deactivate SwedbankPay opt Payer perform purchase out of iFrame activate Payer Payer -&gt;&gt; Payer: Redirect to 3rd party Payer -&gt;&gt;+ 3rdParty: Redirect to 3rdPartyUrl URL deactivate Payer 3rdParty --&gt;&gt;+ Payer: Redirect back to SwedbankPay deactivate 3rdParty Payer -&gt;&gt; Payer: Initiate Payment Menu Payer -&gt;&gt;+ SwedbankPay: Show Purchase UI page in iframe deactivate Payer end activate SwedbankPay SwedbankPay --&gt;&gt; Payer: Purchase status deactivate SwedbankPay alt If Purchase is completed activate Payer Payer -&gt;&gt; Payer: Redirect back to CompleteUrl Payer -&gt;&gt;+ Merchant: Check Purchase status deactivate Payer Merchant -&gt;&gt;+ SwedbankPay: GET &lt;paymentorder.id&gt; deactivate Merchant SwedbankPay -&gt;&gt;+ Merchant: Status: Paid deactivate SwedbankPay end activate Merchant Merchant --&gt;&gt;- Payer: Show Purchase complete opt PaymentOrder Callback (if callbackUrls is set) ① activate SwedbankPay SwedbankPay -&gt;&gt; Merchant: POST Purchase Callback deactivate SwedbankPay end end rect rgba(81,43,43,0.1) activate Merchant note left of Payer: Capture Merchant -&gt;&gt;+ SwedbankPay: rel:capture deactivate Merchant SwedbankPay --&gt;&gt;- Merchant: Capture status note right of Merchant: Capture here only if the purchased&lt;br/&gt;goods don't require shipping.&lt;br/&gt;If shipping is required, perform capture&lt;br/&gt;after the goods have shipped.&lt;br&gt;Should only be used for &lt;br&gt;Payment Methods that support &lt;br&gt;Authorizations. end ① Read more about callback handling in the technical reference. Display Payment UI Post-Purchase v3.0 Post-Purchase v3.1",
    "tags": "",
    "url": "/checkout-v3/get-started/display-payment-ui/redirect/"
  },{
    "title": "Refund",
    "text": "Method Signatures Synchronous void Refund(decimal amount,string apmreference=””, string currency=””) void Refund(TransactionSetup setup) Asynchronous async Task&lt;PaymentRequestResult&gt; RefundAsync(decimal amount,string apmreference=””, string currency=”SEK”) async Task&lt;PaymentRequestResult&gt; RefundAsync(TransactionSetup setup) Description The Refund / RefundAsync should be called when the amount is known. It opens all available readers and waits for a payment instrument. If Alternative Payment Methods are activated it will open for that too. Parameters decimal amount Amount to refund. string apmreference A reference if the transaction was made using APM. When this reference is not null, APM is assumed. string currency Currency code as a string representing ISO-4217 3 letter code. Has to be available in the terminal setup. The default is the currency of the UICulture specified in call to Create method”. or     TransactionSetup setup Object holding several parameters to be used for transaction. Default values for all members. Only populate what is relevant. Example calling async function with a TransactionSetup object as parameter 1 2 3 4 5 6 7 var r = await Pax?.RefundAsync(new TransactionSetup() { Amount = total, TransactionID = IdForThisTransaction }); if (r.ResponseResult == NexoResponseResult.Success) { textBox1.AppendText(\"Approved\" + Environment.NewLine); } else { textBox1.AppendText(\"Not Approved\" + Environment.NewLine); } Returns A PaymentRequestResult - Detailed description A PayementRequestResult.ResponseResult of value Success means transaction approved. If ResponseResult is Failure there is an ErrorCondition. If ErrorCondition is Busy wait awhile and try again. info Note: The SDK will automatically make three retries when the terminal responds busy.",
    "tags": "",
    "url": "/pax-terminal/NET/SwpTrmLib/Methods/essential/refundasync/"
  },{
    "title": "What’s new",
    "text": "21 March 2024 Version 5.0.0 Updated command for avoiding privilege elevation. Use case for easier configuration of terminal and POS system. Update of TransactionSetup and property AcquirerData. .Net SDK 1.3.24066 New package ID. SwedbankPay.Pax.Sdk. Still the same namespaces and dll name. Fix for display messages from fuel app that lacks text id. Added support for AdminRequest with service identification OM02, OM03 and OM04, regarding the Store-And-Forward Fixed bug for PrintRequest with DocumentQualifier other other than CashierReceipt or CustomerReceipt. Possibility for Net Framework 4.0. Now supports Netstandard2.0, net framework 4.5 and 4.0. 26 February 2024 Version 4.8.0 PaymentRequestResult now populates ProductName and PAN even if PaymentInstrumentData is missing. Possibility to use OpenEx or OpenExAsync to set OperatorID and ShiftNumber that will be forwarded and seen in reports. Possibility to attach purchase order Id by setting in in TransactionSetup when starting a payment. Setting up the logfile will only be made once even if new instances is created. Filter is removed when calling Stop. Calling Stop will stop and remove the listener SplitPayment may be indicated in TranactionSetup and is sent to terminal to be forwarded to host. Property type of TransactionSetup is always overridden and set to Refund if Refund or RefundAsync is called. Default currency fixed when using TransactionSetup 6 February 2024 Version 4.7.0 Documentation updated to reflect SDK release. Text updated for TransactionSetup Use case section, apm transaction, apm refund, cvm signtature and fuel card transaction and auto configuration of terminal IP in the POS. .Net SDK 1.3.24025 RequestToDisplay and UpdateTerminal have now corrected results. ReverseLast now automatically makes retries if the terminal responds busy. OnTerminalAddressObtainedEventCallback now with correct access modifier to be able to access Ipv4 and Port properties. .Net SDK 1.3.24016 CardAcquisitionReference is now a copy of POITransactionID. Earlier time was converted to local time and caused problem when an other timezone was used. PaymentRequetsResult has now a lot of properties to make values easily available. 19 December 2023 Version 4.6.1 .Net SDK version 1.3.23348 CVM signature transaction works just the same for Client Only mode as for default Client and Server mode. ConfirmationHandler callback is a must even for Client Only mode. EventCallback for PrintRequestEventCallback is a must even for Client Only mode. Code Examples updated. .Net SDK Version 1.3 Extended interface with function RequestToPrint. Extended TransactionSetup with a list of SaleItem to be used with fuel functionality. ReceiptBlob and ReceiptBlobNoHeader has been shortened and compressed. 7 November 2023 Version 4.6.0 .Net SDK Version 1.2 SDK for .Net has extended its interface with new methods for GetPaymentInstrument, Payment and Refund for which an object with parameters is passed. This was made to be able set a transaction id from the sale system. ReceiptBlobNoHeader has been added to PaymentRequestResult.",
    "tags": "",
    "url": "/pax-terminal/NET/release-notes/"
  },{
    "title": "Release Notes",
    "text": "26 February 2024 Version 4.8.0 Purchase order number may be included in payment and forwarded to Pospay. Updates for the .Net SDK 6 February 2024 Version 4.7.0 Manually entered Payment Instrument explained. Automatic configuration of terminal address in POS. Auto configuration when using .Net SDK. Structural changes of documentation for .Net SDK. Updates for the .Net SDK 19 December 23 Version 4.6.1 Possibility to send PrintRequest to A920Pro. Documentation about fuel functionality. Updates for the .Net SDK. 7 November 23 Version 4.6.0 Updated documentation for the .Net SDK and new methods in the interface. Added documentation about direct integration and the nexo Retailer interface.",
    "tags": "",
    "url": "/pax-terminal/release-notes/"
  },{
    "title": "Release Notes",
    "text": "6 February 2025 Version 5.3.4 A handful of small, but significant changes in the first update of 2025. First of all, the Android and iOS SDKs have been promoted to supported status! As the number of migration guides is going up, we have gathered them on a start page for accessability. In addition to the already existing “v2 to v3.1” and “Seamless View to Redirect” guides, a guide for going from Payment Methods v1 to Digital Payments v3.1 is now available. New IP addresses for callbacks have been added in the callback section. They will be going live March 12th, so make sure you whitelist them as soon as possible. While setting up a test account is free, making the switch to a production account isn’t, and it will generate a support fee for merchants who do this. Information about this has been added to the Test Account Setup section. The payment method section under Availability has been used for information about necessary steps to make certain payment methods available, but we are beefing it up by giving a general presentation of the different methods we offer. As usual, a handful of bug fixes and feedback requests have been remedied too! 09 December 2024 Version 5.3.3 From all of us, to all of you, the last release of the year! We have updated the iOS and Android SDK documentation to include handling of web based payment methods in payment sessions. A small clean-up of the introduction is also in place. An explanation of the payment UI’s browser and OS limitations has been added under Availability. As a continuation of Release 5.3.2’s migration guide for merchants who want to go from Seamless View to Redirect, we give some recommendations regarding monitoring of the script URL for those who wish to continue with Seamless View. You can find the information in both the regular Seamless View integration and the “Change UI option” guide. It is also available in older implementation where it is relevant. A new operation called abort-paymentattempt has been added to 3.x versions. As the name implies, it is meant for instances where the merchant wants to abort the payment attempt, and not the payment order as a whole. Read more about it in the Abort section of the payment options category in Digital Payments’ Features. 24 October 2024 Version 5.3.2 Stricter PCI-CSS requirements are coming in the spring of 2025, and they could affect merchants using our Seamless View integration. We have addressed these changes and written a guide for transferring from Seamless View to the Redirect integration. Not on our newest implementantion yet? There are guides for Payment Menu v2 and card in Payment Methods v1 available too. Information about Checkout v2 can be found here. Version 5.0.0 of our Mobile SDK is also going live. The new additions are native payment features and a new automatic configuration feature introduced by the Session URL, making setup and usage simpler and quicker. In that occasion, a new operation called view-paymentsession can be found in the payment order response, and is only meant to be used when merchants are starting up the new SDK. We have done some changes to the magic amounts for testing Monthly Limits Exceeded. It has been merged with the amount for Daily Limits Exceeded for easier testing, and they now share 952100. Additions to the code examples for Excessive Reattempts are live too. Both Suspension Warning and Modifications Required now have nodes for Problems. Suspension Warning also has a small change in the type field. 29 August 2024 Version 5.3.1 We are closing of August with a mellow, small release after being gone for summer, before gearing up for fall. The Features restructuring continues with Core Features being renamed to Payment Operations, and moving Corporate Payment Menu to Customize the Payment UI. We have added the recurring and one-click use cases to the sidebar for easier access. As a part of our project to have error messages with better human readable information, the Excessive Reattempts responses for Modifications Required and Suspension Warning got a facelift. The type and title field has been changed to authenticationrequired, and the problems node has been replaced by a modification and suspension node respectively, filled with information directly from POS. The magic amount for triggering the modifications required error has been changed to 952507. We have also added info about a newly implemented MasterCard reattempt rule. In addition to a PAN being blocked after 10 attempts in 24 hours, there is also a limit of 35 failed attempts in 30 days. 18 June 2024 Version 5.3.0 Our last release before the summer break is here, and we have quite the list of changes for you. We have started restructuring the feature section to make it easier to navigate. A handful of new sections have been added, named Balancing The Books, Customize Payments and Customize The UI. Worried about your bookmarks? We’ve got you covered! New error messages for invoice and installment account payments went live just now, and we have them at a plate for you. Just follow the respective links. In all feature sections, the relevant field(s) have been moved to the top of of the code example. Auto-expand first payment method has gotten it’s own section. Status and Status Response Models have been merged to one section. We have added a new IP-address for callbacks. Last but not least, we have done the regular batch of fixing typos and small bugs, and if you wonder where the payment instruments have gone? The have been renamed to payment methods. Still all there, just a familiar name. From all of us, to all of you: Have a great summer! 08 May 2024 Version 5.2.0 The keen eye might spot the new term v3.x in Get Started and some of our code examples. We are using it as an umbrella term whenever we talk about all iterations of v3. Instances where we talk about a specific one are still tagged with the version in question. We are also going live with an optional feature called Action Specific Text On Payment Button. It is meant for scenarios where you need the payment button to say something else than “Pay”. The alternative is currently limited to “Deposit”, but other can be added going forward. Besides that we have been doing some small bugfixes and general maintenance. Until next time! 18 March 2024 Version 5.1.0 Re-working of the Modules &amp; SDKs section is the star of this release. Intrigued? Start off with the bare minimum implementation! Aside from that, this has been a maintenance release, but the release notes you are reading right now received a facelift. We have also added more information about the final steps before you go live! 21 March 2024 Version 5.0.0 We strive to make the implementation process as easy as possible, and in that regard, a Get Started section has been introduced. This now includes the basic requests and responses, how to display the UI, post-purchase options and other useful information when doing a basic integration. The newest addition is an explanation on how to validate the status of the payment. A new feature for those of you who want to customize the order of your payment menu has also seen the light of day, together with the possibility to expand the top payment method. They can be used independently, but work great together. We also did a handful of bug fixes and corrections to improve usability and readability. 26 February 2024 Version 4.8.0 A handful of changes in the pipeline this time around, with the biggest being the introduction of better error codes for excessive re-attempts. Read all about the error codes and how to test them here. Are you in the market for One-Click payments? We have a new use case written about that. Give it a read! Due to new directives from card companies regarding frictionless payments, we have re-introduced name fields in the payer object. Go see the fields you should include now. We have also added the possibility to display a consent box for saving payment details. When displayed by you and checked by the payer, we have also added a new field in the paid response, confirming that a token has been created. Big changes are coming up next time. Stay tuned! 6 February 2024 Version 4.7.0 We spent some time building up steam after new years, but we have lots of treats lined up. Are you looking to get started with recurring payments, but not really sure where to start? We have compiled everything you need in a use case, and walk you through it all. Or are you maybe looking to upgrade to our newest Digital Payments version? See how easy it is in our migration guide. A new errorType goes live any day now, so a preview in the developer portal seems fitting. The aim is to give you clearer feedback when a token has become inactive. Read more about it in the problems section. We have also made improvements to the domain verification steps of our Apple Pay documentation. The Resources are being split up. We have moved the test-data and release notes up a level for convenience. Development guidelines are moved to Modules &amp; SDKs if you need them. The partners are now on our front page and Data Protection can be found in Checkout v2. In addition to the usual handful of improvements and bug fixes, of course. Until next time! 19 December 2023 Version 4.6.1 The last release of 2023 is finding its way down the chimney, and is mainly consisting of maintenance and small fixes. There is however, one quite important update among the small ones. We have added a test data section for Network Tokenization, with both test cards and useful information. Head to the Network Tokenization feature section if you want to learn more about what it is. From all of us, to all of you: Merry Christmas! 7 November 2023 Version 4.6.0 Today, we go live with Payment Order v3.1, which has some changes in the request, the post-purchase operations and the callback. We have also added a new resource model called failedPostPurchaseAttempts. Go check it out! There is a new section regarding Trustly in Digital Payments, with important information regarding overlay and Trustly Express. There is also a new Vipps field for fees in the failedAttempts resource model. 28 September 2023 Version 4.5.0 If you are reading these notes, you have probably noticed some changes already! As the Payment Terminals section is growing bigger, we have moved most of the Digital Payments related content away from the front page. The release notes can now be found where you are reading this, and the resources at the bottom of the front page will follow suit shortly. The biggest news is the arrival of the Swedbank Pay Playground, where you can experience our payment solutions both as a payer and – since we give you access to the toolbox – a merchant. Play around with amounts, different UI setups (full menu, a selection or a single payment method) and styling. It is also a great opportunity to see the upcoming accessibility compliant UI. Read more about accessibility changes here. With that in mind, we have also written a section regarding custom styling of your payment UI. If you are looking for Cross Channel Payments and can’t find it, that is because we have renamed it Integrated Commerce. 31 August 2023 Version 4.4.0 The wheels are picking up traction going into the autumn. Our first release after getting back is mostly maintenance and small fixes, but an important new addition is a section on Network Tokenization, which is a fantastic way of processing cards. Get to know it, and put it to use! We have also adjusted our search results somewhat. Now we only display results from the sections Digital Payments and Payment Terminals. We hope it gives you an easier time finding the right result in the correct section. Big things are coming up around the bend. Stay tuned! 6 July 2023 Version 4.3.3 We had time for one more before we clock out for summer, so we added a PATCH example to our payout feature section. Go check it out if you are on your way to implementing it. Have a great summer! 26 June 2023 Version 4.3.2 A small batch of changes which barely missed the last deadline. We’ve done a few correction and some major changes, most notably the renaming of Checkout v3 to Digital Payments and Pax Terminal to Payment Terminal. The changes are in name only, the structure stays the same. We have also added information regarding the Eligibility Check, and the availability of invoice for Swedish merchants, where the payment method integrations have been removed. You have to go through an implementation using payment order to offer this in Sweden. 19 June 2023 Version 4.3.0 You spoke, we listened! We have worked a lot on making the portal easier to navigate. The main menu has been slimmed down, where we have removed the Introduction (but you can still read the main points under fundamental principles). If you are looking for the Modules &amp; SDK]modules-sdks section, it has found a new home under Digital Payments. Speaking of Digital Payments, we’ve cleaned that up as well, and hope it will make things easier for you. The payment request example now contains what you need to create a payment order. Adding more to it is up to you and the features section. The common implementations steps have been merged to avoid duplicate information, only sending you separate places when it’s time to display the ui. A new terminal section has been added. Exciting things are coming, so we will make sure it grows and develops going forward. Other highlights and important changes include: A new Payout section, currently supporting Trustly. An important field related to Network Tokenization has been added to the Paid models. A separate split settlement section, previously a part of settlement &amp; reconciliation. Links to our partner pages. How to contact us before you get started. 3DS2 is now named Frictionless payments. Order items have been moved to optional features. Terms of Service has gotten its own optional feature. Plus the usual handful of bug fixes and smaller changes. 24 April 2023 Version 4.2.0 The keen observer might spot some changes in our menu. The Checkout v2, Payment Menu and Payment Methods have been moved to Old Implementations. You can still find everything you want and need, so no need to worry. A new .NET SDK section has also been added, in addition to the usual bugs and small fixes. 10 March 2023 Version 4.1.0 A lot of changes are happening these days. We’ve made the decision to focus the Digital Payments offering, so our Starter and Business implementations are no more. This means that we can do what we do best: giving you a payment experience packed with options. The Payments Only implementation is still here, and for those of you with a Strong Consumer Authentication who want access to our safely stored card data, Enterprise is still available too. 3 March 2023 Version 4.0.0 We promised you something big, and here it is. Click to Pay and Google Pay™ have been added to our arsenal of payment methods. Click on your payment method of choice to see what is needed for you to activate in your integration. We have also added information on how to activate Apple Pay, which we recommend reading up on. As you’ve probably already seen, our new sidebar is finally live too! We have given it a facelift and different levels which we hope make it easier for you to navigate. All the content is where it used to be. Check it out (and let us know what you think)! You might also wonder where the tables following our code examples have gone. We have made them expandable, and given them a facelift as well. We have also added 3DS2 test data, along with smaller maintenance tasks and bug fixes. 31 January 2023 Version 3.1.8 Bigger things are coming up around the bend, so we are stopping by with some smaller fixes and a Digital Payments matrix giving you a better overview over which payment methods v3 has to offer, and the countries they are available. We’ll be back soon! 17 January 2023 Version 3.1.7 We kick off the new year with a new field in our payment order request. Your Digital Payments implementation of choice is now added in the request. Version 2 of the balance report and transaction list is our second newcomer this release. Head over to Settlement &amp; Reconciliation to learn more. We have added a paid status model to Checkout v2 and Payment Menu v2, and the update payment order section is added to Digital Payments. 15 December 2022 Version 3.1.6 Our last update in 2022 mainly consists of clean-ups and fixes, but the most important changes are bin and msidn fields added (where they are relevant) to Paid resource model and Paid status model, plus a small rework of Age restrictions. Happy holidays, everyone! We look forward to seeing you in 2023! 29 November 2022 Version 3.1.5 Our penultimate release of the year has a few things up its sleeve. The most exciting being the new capabilities Integrated Commerce, Automated Fuel Dispenser Payments, SSN and Age restrictions. We’ve also added some new fields in the Paid and Cancelled models, a new Payer resource model. Please note the organization number added to the essential information for Checkout v3 set ups. Apart from that, there are no releases without typo corrections and bug fixes. 20 September 2022 Version 3.1.3 Another small one. We’ve added Digital Payments paid responses for all methods in both status and resource-models, finished up the headers which was missing, added MobilePay to Request Delivery Information and done away with some more bugs and typos. 2 September 2022 Version 3.1.2 We have been picking up steam since our summer break, hitting full throttle as September arrived. A smaller release this time around, but there are some important additions nonetheless. We have added a siteID field to Digital Payments implementations, re-worked nearly all headers across the portal to make navigation easier, added a section on deleting payment tokens, along with the usual batch of assorted bug fixes and typos. 1 July 2022 Version 3.1.1 A release filled with leftovers before we clock out for summer. Mostly small fixes in code examples and tables, but the most important additions are the new fields added in the paid resource model. Have a great summer! 22 June 2022 Version 3.1.0 Summer has finally arrived, and we have quite a treat waiting in our final release before the vacation pulse kicks in. Without further ado: We now proudly offer Apple Pay! It is available in all our Digital Payments implementations and integrations. There are a couple of other new additions as well: Our SDKs have been updated to support Digital Payments You can now request delivery information for selected payment methods An eligibility check eligibility check for wallets has been added to instrument mode Fixed typos, minor bugs and code examples 4 April 2022 Version 3.0.3 Added a new card error code and restructured the tables. Fleshed out the Unscheduled Purchase section. Fleshed out the Recur section. Moved the callback section to Payment Operations. Typos and minor bug fixes in code examples and tables. 16 March 2022 Version 3.0.2 Typos and minor bug fixes in code examples and tables. Re-wrote Payer Aware Payment Menu Clarified OnAborted Seamless View event Elaborated user agent fields in requests. Added links to resource models in Digital Payments response tables 24 February 2022 Version 3.0.1 Added descriptive card icons Added Payer Aware Payment Menu Added new screenshots for Digital Payments implementations Rewrote instrument mode section Reorganized features in the sidebar Fixed internal links 18 February 2022 Version 3.0.0 It’s been a minute, but the day is finally here. We can proudly present Checkout version 3.0! The same range of payment methods, checkin options and features as always, but since different merchants have different needs, we’ve made it easier for you to get the checkout experience which fits you best. So, what’s new? Two Checkout implementations tailor-made for different needs and wishes: Enterprise or Payments Only. We’ve summed them up to help you find the right fit and get started. Each implementation starts off with a guide to set up your test account quickly. Want to see the new implementations in action? Head over to the demoshop. The Seamless View events have been re-worked to make the integration smoother for you. Renamed and gathered the Post-Purchase options on one page. The rest of the features are still where they used to be. We’ve given the front page a touch up, and given the new sections a slightly different look to distinguish them. Already up on Checkout version 2.0? No worries. All the documentation is still available in the sidebar and here. 15 October 2021 Version 2.2.3 Updated Android SDK documentation Added info about consumerProfileRef expiration Added important information about WebView integrations for mobile card payments Updated iOS SDK documentation Added information about authorization timeouts (bottom of page) Added important info about MobilePay shoplogoUrl Fixed minor bugs and code examples 3 August 2021 Version 2.2.2 Added payment link for Payment Menu v2 Renamed Merchant Authenticated Consumer section (previously Delegated Strong Authenticated Consumer) Updated Unscheduled Merchant Initiated Transaction Fixed typos, minor bugs and code examples 19 May 2021 Version 2.2.1 Added payment link option for Trustly Added information about invoice capture in Checkout v2 and Payment Menu Added MobilePay shoplogoUrl in the Checkout v2 and Payment Menu v2 items section Added Delete Token section in Card’s technical reference Fixed minor typos and bugs 30 April 2021 Version 2.2.0 Restructured Features sections for all implementations into core features, optional features and technical reference Renamed Checkout to Checkout v2 Added TRA exemption section Fixed a handful of typos and bugs 28 January 2021 Version 2.1.2 Updated Theme version to 1.9.9 Updated Design Guide Version to 5.0.1 26 January 2021 Version 2.1.0 Updated theme with visual fixes Search icon is now clickable Various bug fixes Various corrections and typo fixes Re-worded split settlement Clarified that callback is a fail-safe Updated tables and code examples with payerReference in various places, like card purchase Updated Mobile SDK configurations for both iOS and Android to include integration with custom backends Updated GitHub references for Mobile SDK Re-wrote Prices section 1 December 2020 Version 2.0.2 Various bug fixes Various corrections and typo fixes Corrected information about 3D-Secure Added paragraphs about different consumer flows in Checkin Added link to gift card on the front page 12 November 2020 Version 2.0.1 Added section for MobilePay Seamless View Split MobilePay Capture to a separate page Code examples for digital products added in Checkin 11 November 2020 Version 2.0.0 Launched new developer portal theme: New design New menu structure Reading time Other changes: Added GDPR disclaimer. Added custom 404 page. Added section about Transaction On File Added Seamless View for Trustly. Added documentation about payment and transaction states. See Card Other Features for example. Added event override warning for Seamless View Events, see Card Seamless View Events for example. Added section regarding MOTO in Card Other Features. Deleted Merchant Identified Payer in Checkout. Renamed Merchant Authenticated Consumer to Delegated Strong Customer Authentication. Updated payer/consumer/end-user naming for most sections. Updated expiry date for test cards in test data. Updated callback documentation. Updated regex pattern for orderItems.class. 4 September 2020 Version 1.13.3 Added documentation on deprecated operations in Checkout. Updated instrument description in Checkout. Updated payeeReference description. Clarified msisdn and shoplogoUrl in MobilePay Online Payments. Updated Test data. Documented problems in Trustly Payments. Added an alert for two-phase payments in Capture pages. 28 August 2020 Version 1.13.2 Added description on metadata for all payment methods. Updated files in Settlement &amp; Reconciliation. Added information on token deletion in Card Payments and Invoice Payments. Updated the documentation on paymentRestrictedToAgeLimit and paymentRestrictedToSocialSecurityNumber in Swish Payments. Added documentation on guest checkout in Checkout. Updated information about logourl in Checkout. Added a list of accepted banks in Trustly Payments. Updated the UpdateOrder description in Checkout. 21 August 2020 Version 1.13.1 Removed documentation for Trustly Payments Seamless View. Updated reOrderPurchaseIndicator description. Updated Other Features in Trustly Payments. Updated Test Data for Vipps Payments. Added updated documentation on the transaction operation. 17 July 2020 Version 1.13.0 Added documentation on Mobile SDK in Modules &amp; SDKs section. Added tables for mapping API fields to settlement files in Settlement and Reconciliation. 10 July 2020 Version 1.12.1 Corrected the documentation by removing generatePaymentToken and paymentToken from Checkout. 07 July 2020 Version 1.12.0 Added information on 3-D Secure 2 for Checkout and Card Payments. Updated reconciliation files in Settlement &amp; Reconciliation. Added test card for Forbrugsforeningen in Test data. Documented paid, failed and aborted across all resources. Added additional information on payerReference, generateRecurrenceToken, paymentToken, generatePaymentToken, recurrenceToken and instrument for the paymentorder resource in Checkout. Corrected and updated view- operations for all resources. Updated Seamless View Events for all resources. Described nonPaymentToken and externalNonPaymentToken in Card Payments. Small corrections to Swish Payments documentation. Clarified the updateOrder documentation. 4 June 2020 Version 1.11.1 Added additional information on the settlement files in Settlement &amp; Reconciliation for all Payments. Corrected Card Payments Redirect and Card Payments Seamless View sequence diagrams. Added Abort in Swish Payments. 29 May 2020 Version 1.11.0 Added a new Trustly Payments section. Added information about Storing URLs in the Technical Information section. 22 May 2020 Version 1.10.1 Updated Swish Redirect requests. Added orderReference information in Payment Order Callback in Checkout Other features. 14 May 2020 Version 1.10.0 Added a new gift card section with descriptions of our Gift Cards API. Added a new section Co-badge Card Choice for Dankort in Card Payments. 7 May 2020 Version 1.9.2 Corrected table in payments page. Version 1.9.1 Corrected sequence diagrams in Swish Payments and Vipps Payments. The description field is now more thoroughly described for all requests it’s present in. The language field is now better described for all requests it’s present in. All broken links should now be unbroken. 22 April 2020 Version 1.9.0 Added a new section SDKs and Modules in Resources. Corrected problem type URLs for Card Payments, Checkout and Swish Payments. Required checkmarks have a new, fresh look: check Flags now also sport a new look: 15 April 2020 Version 1.8.3 Bug fixes to Mermaid diagram and alert styling, plus improvements to code block styling after the update to Swedbank Pay Design Guide 4.5.0. Added examples with screenshots of the effects of Delegated Strong Customer Authentication. Version 1.8.2 Added a more thorough description on paymentUrl and completeUrl in all relevant payments. Updated orderItems to be required in all requests and responses. Clean up of Swish Payments Removed pageStripDown in Vipps Redirect. Updated the main page to be more welcoming. Updated information on Delegated Strong Customer Authentication. 31 March 2020 Version 1.8.1 Documented allowed characters in orderItem.class. Added receiptReference in Invoice Payments and Payment Order in capture and reversal. Callback is now moved to Other features in all payment methods. Clean up of MobilePay. Corrected the address of Leia Ahlström in Test Data. Updated the documentation in Card Payments to recommend using shippingAddress. Updated payeeReference to have an unique description for Payment Order and every Payment Method. 18 March 2020 Version 1.8.0 Updated Invoice Payments Direct where approvedLegalAddress should now be use for all countries. Small text changes and clarifications. Restructured Invoice Payments and Card Payments. Version 1.7.7 This change contains build updates for the page. :octocat: 04 March 2020 Version 1.7.6 Several links has been corrected. The chance of 404 is now much lower. Other small text changes and clarifications. 03 March 2020 Version 1.7.5 New page! Technical reference into has been moved from the front page to technical information. Front page got a slimmer look. :swimmer: Abort reference is back in credit card reference. Swish error code reference got a face lift, check it out here :candy:. Version 1.7.4 Described the M-Commerce flow for Swish Direct. Alphabetize the terms in Terminology. 27 February 2020 Version 1.7.3 Expanded information about the field restrictedToInstruments. Added information about the field receiptReference. Added and fixed several missing headings in template files. Expanded information about verify. Created new page for Checkout Capture. Mobile Pay Online was previously only referred to as Mobile Pay, this has been corrected. 7 February 2020 Version 1.7.2 Removed several duplicate headers in features pages. Added unscheduled purchase information in card payments. We have added card logos when selecting card in payment menu. See updated screenshot of payment menu. 6 February 2020 Version 1.7.1 All sections have been released. :trophy: Version 1.7.0 README is updated with info about includes. Added several includes. Updated payeeReference description in Checkout and Invoice section. Using snake case consistently. Added section for unscheduled purchase in Card section. Fixed JavaScript example in Checkin section. Added info about mobile verification in Swish Other Features. Added section about Authenticated Merchants in Checkout section. Cleanup in Vipps Other Features. paymentRestrictedToAgeLimit and paymentRestrictedToSocialSecurityNumber added to swish object in Swish Redirect. paymentAgeLimit , socialSecurityNumber added to the new payerInfo object in Swish Seamless View. Properties added in Swish. Added section about migration key in Resources section. 29 January 2020 Version 1.6.3 restrictedToInstruments added back to Payment Order purchase requests. Direct Debit section and mentions in various includes removed. Various improvements and fixes. Version 1.6.2 The Payments and Card Payments sections are reviewed and released. Version 1.6.1 email, msisdn, workPhoneNumber and homePhoneNumber added to the payer object in Payment Order requests. cardholder added to Card Payments Purchase requests. Various improvements and fixes. 27 January 2020 Version 1.6.0 The Swish Payments and Vipps Payments have received a few updates and are now ready for another round of review. MobilePay Online Payments is now ready for review. paymentAgeLimit is now added in Swish Payments. The Terminology page is updated and 3-D Secure 2.0 (3DS2) , PSD2 and SCA explanations are added. Added descriptions for Payment States And Transaction States everywhere appropriate. Google Analytics has been added to Developer Portal. 16 January 2020 Version 1.5 The review of Invoice Payments is complete and as such the section is now released and ready for use. The Card Payments section has received an overhaul, inching it closer to release. The Swish Payments and Vipps Payments sections are ready for review. 9 January 2020 Version 1.4 Updated Swish Redirect and Swish Direct sections in preparations for review and the transition from PayEx Developer Portal. Added Data Protection section. Payment Orders now support orderItems in all operations. Added Terminology page. Clarified what the awaitingActivity state means for different payment methods. Removed erroneous noCVC in examples for One-Click Card Payments section. Added description for the onBillingDetailsAvailable event in the Checkin Front End section. 22 December 2019 Update in checkin module We have added support for specifying language as input in checkin module, language. Supported languages are Norwegian, Swedish and English. Consumers outside Sweden and Norway can now purchase in our Checkout service. You can specify supported countries for shipment in a new input parameter, shippingAddressRestrictedToCountryCodes, in our checkin module. Updated API specification can be found here. The parameters language and shippingAddressRestrictedToCountryCodes have replaced the former consumerCountryCode. The parameters msisdn and email have been made obsolete due to GDPR rules. This information cannot be sent in without the explicit consent of the payer. 1 November 2019 Welcome, Swedbank Pay Developer Portal PayEx’ Commerce offerings are being rebranded to Swedbank Pay and as a result of that rebranding, PayEx Checkout is now known as Swedbank Pay Checkout and its documentation can be found here. Support international phone numbers in Swish We have added support for sending in international phone numbers in the request. Check our Swish documentation here. This is supported in API, and when payer’s enter their phone number on the payment page. Order Items The input parameter quantity in the orderItems field is now updated to decimal. You may send up to 4 decimals. See updated documentation here 1 October 2019 Payment Url Credit Card We have added the URL field called paymentUrl for Card Seamless View (previously added for Vipps and Checkout), that will be used when the user is returned from 3rd party. The URL should represent the page in where the payment Seamless View was hosted originally, such as the checkout page, shopping cart page, or similar. Basically, paymentUrl should be set to the same URL as that of the page where the JavaScript for the hosted payment view was added, in order to initiate the payment. Please note that the paymentUrl must be able to invoke the same JavaScript URL from the same Payment as the one that initiated the payment originally, so it should include some sort of state identifier in the URL. The state identifier is the ID of the order, shopping cart or similar that has the URL of the Payment stored. When the JavaScript is invoked after return of the payer, they will either be redirected to the completeUrl (event onPaymentCompleted) or if payment has failed, see an error-message and get the option to retry the payment. 1 August 2019 Order Items in payment orders On Payment Orders, itemDescriptions and vatSummary has been replaced with the more versatile and powerful orderItems. While itemDescriptions will continue to work, it is recommended that all integrations switch over to orderItems as soon as possible. When orderItems is used, itemDescriptions must be removed from all requests as the two cannot be used simultaneously. Payment Url For our Seamless Views (currently Vipps or in Checkout), we have added a new URL field called paymentUrl that will be used when user is returned from 3rd party. The URL should represent the page of where the payment seamless view was hosted originally, such as the checkout page, shopping cart page, or similar. Basically, paymentUrl should be set to the same URL as that of the page where the JavaScript for the hosted payment view was added to in order to initiate the payment. Please note that the paymentUrl must be able to invoke the same JavaScript URL from the same Payment or Payment Order as the one that initiated the payment originally, so it should include some sort of state identifier in the URL. The state identifier is the ID of the order, shopping cart or similar that has the URL of the Payment or Payment Order stored. When the JavaScript is invoked after return of the payer, they will either be redirected to the completeUrl, or, if payment failed, see an error message and get the option to retry the payment. If paymentUrl is not implemented, retry of payments will not be possible in either individual payment methods such as Vipps or in Checkout. It makes it more tedious to retry payment as the whole process including the creation of the payment or payment order needs to be performed again. With paymentUrl in place, the retry process becomes much more convenient for both the integration and the payer.",
    "tags": "",
    "url": "/checkout-v3/release-notes/"
  },{
    "title": "Request Delivery Information",
    "text": "Request Delivery Information Swedbank Pay provides the possibility to return delivery information from payment methods which support this. You do this by adding the field requestDeliveryInfo in your payment order request and setting it to true. The returned delivery information will appear in the payer field after the payment has been paid, and not the initial response. You have to perform a GET to see it. Only payment methods which support this will return delivery information. If you only want to show payment methods which support this in you menu, you can also add the field restrictedToDeliveryInfoInstruments and setting it to true. This will leave out all payment methods which can’t return delivery information. You are currently only able to request delivery information from Apple Pay, Click to Pay and Google Pay™, but we will add support for more payment methods going forward. No changes are required at your (the merchant’s) end to be able to offer more payment methods at a later time. Request Delivery Info Request The fields themselves are bools which must be added in the paymentorder field of the request, like the example below. Request Copy json to clipboard 1 2 3 4 POST /psp/paymentorders HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.x/2.0 // Version optional for 3.0 and 2.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 { \"paymentorder\": { \"requestDeliveryInfo\": true, \"restrictedToDeliveryInfoInstruments\": true, \"operation\": \"Purchase\", \"currency\": \"SEK\", \"amount\": 1500, \"vatAmount\": 375, \"description\": \"Test Purchase\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"sv-SE\", \"productName\": \"Checkout3\", // Removed in 3.1, can be excluded in 3.0 if version is added in header \"urls\": { \"hostUrls\": [ \"https://example.com\", \"https://example.net\" ], \"completeUrl\": \"https://example.com/payment-completed\", \"cancelUrl\": \"https://example.com/payment-cancelled\", \"callbackUrl\": \"https://api.example.com/payment-callback\" }, \"payeeInfo\": { \"payeeId\": \"5cabf558-5283-482f-b252-4d58e06f6f3b\", \"payeeReference\": \"AB832\", \"payeeName\": \"Merchant1\", \"productCategory\": \"A123\", \"orderReference\": \"or-123456\", \"subsite\": \"MySubsite\", \"siteId\": \"MySiteId\" }, \"orderItems\": [ { \"reference\": \"P1\", \"name\": \"Product1\", \"type\": \"PRODUCT\", \"class\": \"ProductGroup1\", \"itemUrl\": \"https://example.com/products/123\", \"imageUrl\": \"https://example.com/product123.jpg\", \"description\": \"Product 1 description\", \"discountDescription\": \"Volume discount\", \"quantity\": 5, \"quantityUnit\": \"pcs\", \"unitPrice\": 300, \"discountPrice\": 0, \"vatPercent\": 2500, \"amount\": 1500, \"vatAmount\": 375 }, { \"reference\": \"I1\", \"name\": \"InvoiceFee\", \"type\": \"PAYMENT_FEE\", \"class\": \"Fees\", \"description\": \"Fee for paying with Invoice\", \"quantity\": 1, \"quantityUnit\": \"pcs\", \"unitPrice\": 1900, \"vatPercent\": 0, \"amount\": 1900, \"vatAmount\": 0, \"restrictedToInstruments\": [ \"Invoice-PayExFinancingSe\" ] } ], \"riskIndicator\": { \"deliveryEmailAddress\": \"olivia.nyhuus@payex.com\", \"deliveryTimeFrameIndicator\": \"01\", \"preOrderDate\": \"19801231\", \"preOrderPurchaseIndicator\": \"01\", \"shipIndicator\": \"01\", \"giftCardPurchase\": false, \"reOrderPurchaseIndicator\": \"01\", \"pickUpAddress\": { \"name\": \"Olivia Nyhus\", \"streetAddress\": \"Saltnestoppen 43\", \"coAddress\": \"\", \"city\": \"Saltnes\", \"zipCode\": \"1642\", \"countryCode\": \"NO\" } } } } Show fields Hide fields Required Field Type Description check paymentOrder object The payment order object.   requestDeliveryInfo bool Set to true if you want Swedbank Pay to return delivery information from the payment methods which support this. It will be visible in a GET response after the payment has been completed.   restrictedToDeliveryInfoInstruments bool Set to true if you want to restrict your payment menu to only include payment methods which return delivery info. check operation string Determines the initial operation, defining the type of payment order created. check currency string The currency of the payment. check amount integer The transaction amount (including VAT, if any) entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The amount displayed is the final amount the payer paid for their order, including any payment method specific discounts or fees. check vatAmount integer The payment’s VAT (Value Added Tax) amount, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The vatAmount entered will not affect the amount shown on the payment page, which only shows the total amount. This field is used to specify how much of the total amount the VAT will be. Set to 0 (zero) if there is no VAT amount charged. check description string The description of the payment order. check userAgent string The user agent of the payer. Should typically be set to the value of the User-Agent header sent by the payer’s web browser. check language string The language of the payer. check productName string Used to tag the payment as Digital Payments v3.0. Mandatory for Digital Payments v3.0, either in this field or the header, as you won’t get the operations in the response without submitting this field.   implementation string Indicates which implementation to use. check urls object The urls object, containing the URLs relevant for the payment order. check hostUrls array The array of valid host URLs. check completeUrl string The URL that Swedbank Pay will redirect back to when the payer has completed their interactions with the payment. This does not indicate a successful payment, only that it has reached a final (complete) state. A GET request needs to be performed on the payment order to inspect it further. See completeUrl for details.   cancelUrl string The URL to redirect the payer to if the payment is cancelled, either by the payer or by the merchant trough an abort request of the payment or paymentorder. check callbackUrl string The URL that Swedbank Pay will perform an HTTP POST against every time a transaction is created on the payment order. See callback for details. check termsOfServiceUrl string The URL to the terms of service document which the payer must accept in order to complete the payment. HTTPS is a requirement. check payeeInfo object The payeeInfo object, containing information about the payee (the recipient of the money). See payeeInfo for details. check payeeId string The ID of the payee, usually the merchant ID. check payeeReference string A unique reference from the merchant system. Set per operation to ensure an exactly-once delivery of a transactional operation. Length and content validation depends on whether the transaction.number or the payeeReference is sent to the acquirer. If Swedbank Pay handles the settlement, the transaction.number is sent and the payeeReference must be in the format of A-Za-z0-9 and string(30). If you handle the settlement, Swedbank Pay will send the payeeReference and it will be limited to the format of string(12). All characters must be digits. In Invoice Payments payeeReference is used as an invoice/receipt number, if the receiptReference is not defined.   payeeName string The name of the payee, usually the name of the merchant.   productCategory string(50) A product category or number sent in from the payee/merchant. This is not validated by Swedbank Pay, but will be passed through the payment process and may be used in the settlement process.   orderReference string(50) The order reference should reflect the order reference found in the merchant’s systems.   subsite string(40) The subsite field can be used to perform a split settlement on the payment. The different subsite values must be resolved with Swedbank Pay reconciliation before being used. If you send in an unknown subsite value, it will be ignored and the payment will be settled using the merchant’s default settlement account. Must be in the format of A-Za-z0-9.   siteId string(15) siteId is used for split settlement transactions when you, as a merchant, need to specify towards AMEX which sub-merchant the transaction belongs to. Must be in the format of A-Za-z0-9.   payer object The payer object containing information about the payer relevant for the payment order.   digitalProducts bool Set to true for merchants who only sell digital goods and only require email and/or msisdn as shipping details. Set to false if the merchant also sells physical goods.   firstName string The first name of the payer.   lastName string The last name of the payer.   email string The e-mail address of the payer. Will be used to prefill the Checkin as well as on the payer’s profile, if not already set. Increases the chance for frictionless 3-D Secure 2 flow .   msisdn string The mobile phone number of the Payer. Will be prefilled on Checkin page and used on the payer’s profile, if not already set. The mobile number must have a country code prefix and be 8 to 15 digits in length. The field is related to 3-D Secure 2 .   payerReference string A reference used in Enterprise integrations to recognize the payer in the absence of SSN and/or a secure login. Read more about this in the payerReference feature section.   shippingAddress object The shipping address object related to the payer. The field is related to 3-D Secure 2 .   firstName string The first name of the addressee – the receiver of the shipped goods.   lastName string The last name of the addressee – the receiver of the shipped goods.   streetAddress string Payer’s street address. Maximum 50 characters long.   coAddress string Payer’ s c/o address, if applicable.   zipCode string Payer’s zip code   city string Payer’s city of residence.   countryCode string Country code for country of residence.   billingAddress object The billing address object containing information about the payer’s billing address.   firstName string The first name of the payer.   lastName string The last name of the payer.   streetAddress string The street address of the payer. Maximum 50 characters long.   coAddress string The CO-address (if used)   zipCode string The postal number (ZIP code) of the payer.   city string The city of the payer.   countryCode string SE, NO, or FI.   accountInfo object Object related to the payer containing info about the payer’s account.   accountAgeIndicator string Indicates the age of the payer’s account. 01 (No account, guest checkout) 02 (Created during this transaction) 03 (Less than 30 days old) 04 (30 to 60 days old) 05 (More than 60 days old)   accountChangeIndicator string Indicates when the last account changes occurred. 01 (Changed during this transaction) 02 (Less than 30 days ago) 03 (30 to 60 days ago) 04 (More than 60 days ago)   accountChangePwdIndicator string Indicates when the account’s password was last changed. 01 (No changes) 02 (Changed during this transaction) 03 (Less than 30 days ago) 04 (30 to 60 days ago) 05 (More than 60 days old)   shippingAddressUsageIndicator string Indicates when the payer’s shipping address was last used. 01(This transaction) 02 (Less than 30 days ago) 03 (30 to 60 days ago) 04 (More than 60 days ago)   shippingNameIndicator string Indicates if the account name matches the shipping name. 01 (Account name identical to shipping name) 02 (Account name different from shipping name)   suspiciousAccountActivity string Indicates if there have been any suspicious activities linked to this account. 01 (No suspicious activity has been observed) 02 (Suspicious activity has been observed) check orderItems array The array of items being purchased with the order. Note that authorization orderItems will not be printed on invoices, so lines meant for print must be added in the Capture request. The authorization orderItems will, however, be used in the Merchant Portal when captures or reversals are performed, and might be shown other places later. It is required to use this field to be able to send Capture orderItems. Capture requests should only contain items meant to be captured from the order. check reference string A reference that identifies the order item. check name string The name of the order item. check type string PRODUCT, SERVICE, SHIPPING_FEE, PAYMENT_FEE DISCOUNT, VALUE_CODE or OTHER. The type of the order item. PAYMENT_FEE is the amount you are charged with when you are paying with invoice. The amount can be defined in the amount field below. check class string The classification of the order item. Can be used for assigning the order item to a specific product category, such as MobilePhone. Note that class cannot contain spaces and must follow the regex pattern [\\w-]*. Swedbank Pay may use this field for statistics.   itemUrl string The URL to a page that can display the purchased item, product or similar. ︎︎︎ imageUrl string The URL to an image of the order item.   description string A textual description of the purchase. Maximum length is 40 characters.   discountDescription string The human readable description of the possible discount. check quantity number The 4 decimal precision quantity of order items being purchased. check quantityUnit string The unit of the quantity, such as pcs, grams, or similar. This is used for your own book keeping. check unitPrice integer The price per unit of order item, including VAT.   discountPrice integer If the order item is purchased at a discounted price. This field should contain that price, including VAT. check vatPercent integer The percent value of the VAT multiplied by 100, so 25% becomes 2500. check amount integer The transaction amount (including VAT, if any) entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The amount displayed is the final amount the payer paid for their order, including any payment method specific discounts or fees. check vatAmount integer The payment’s VAT (Value Added Tax) amount, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The vatAmount entered will not affect the amount shown on the payment page, which only shows the total amount. This field is used to specify how much of the total amount the VAT will be. Set to 0 (zero) if there is no VAT amount charged.   restrictedToInstruments array A list of the payment methods you wish to restrict the payment to. Currently Invoice only. Invoice supports the subtypes PayExFinancingNo, PayExFinancingSe and PayMonthlyInvoiceSe, separated by a dash, e.g.; Invoice-PayExFinancingNo. Default value is all supported payment methods. Use of this field requires an agreement with Swedbank Pay. You can restrict fees and/or discounts to certain payment methods by adding this field to the orderline you want to restrict. Use positive amounts to add fees and negative amounts to add discounts.   riskIndicator array This optional object consist of information that helps verifying the payer. Providing these fields decreases the likelihood of having to prompt for 3-D Secure 2.0 authentication of the payer when they are authenticating the purchase.   deliveryEmailAdress string For electronic delivery, the email address to which the merchandise was delivered. Providing this field when appropriate decreases the likelihood of a 3-D Secure authentication for the payer.   deliveryTimeFrameIndicator string Indicates the merchandise delivery timeframe. 01 (Electronic Delivery) 02 (Same day shipping) 03 (Overnight shipping) 04 (Two-day or more shipping)   preOrderDate string For a pre-ordered purchase. The expected date that the merchandise will be available. Format: YYYYMMDD   preOrderPurchaseIndicator string Indicates whether the payer is placing an order for merchandise with a future availability or release date. 01 (Merchandise available) 02 (Future availability)   shipIndicator string Indicates shipping method chosen for the transaction. 01 (Ship to cardholder’s billing address) 02 (Ship to another verified address on file with merchant)03 (Ship to address that is different than cardholder’s billing address)04 (Ship to Store / Pick-up at local store. Store address shall be populated in shipping address fields)05 (Digital goods, includes online services, electronic giftcards and redemption codes) 06 (Travel and Event tickets, not shipped) 07 (Other, e.g. gaming, digital service)   giftCardPurchase bool true if this is a purchase of a gift card.   reOrderPurchaseIndicator string Indicates whether the cardholder is reordering previously purchased merchandise. 01 (First time ordered) 02 (Reordered).   pickUpAddress object If shipIndicator set to 04, then prefill this with the payers pickUpAddress of the purchase to decrease the risk factor of the purchase.   name string If shipIndicator set to 04, then prefill this with the payers name of the purchase to decrease the risk factor of the purchase.   streetAddress string If shipIndicator set to 04, then prefill this with the payers streetAddress of the purchase to decrease the risk factor of the purchase. Maximum 50 characters long.   coAddress string If shipIndicator set to 04, then prefill this with the payers coAddress of the purchase to decrease the risk factor of the purchase.   city string If shipIndicator set to 04, then prefill this with the payers city of the purchase to decrease the risk factor of the purchase.   zipCode string If shipIndicator set to 04, then prefill this with the payers zipCode of the purchase to decrease the risk factor of the purchase.   countryCode string If shipIndicator set to 04, then prefill this with the payers countryCode of the purchase to decrease the risk factor of the purchase. Request Delivery Info Response Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x/2.0 api-supported-versions: 3.x/2.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 { \"paymentOrder\": { \"id\": \"/psp/paymentorders/ca59fa8a-3423-40e5-0f77-08d9d133750b\", \"created\": \"2022-01-07T07:58:26.1300282Z\", \"updated\": \"2022-01-07T08:17:44.6839034Z\", \"operation\": \"Purchase\", \"status\": \"Initialized\", \"currency\": \"SEK\", \"amount\": 1500, \"vatAmount\": 375, \"description\": \"Test Purchase\", \"initiatingSystemUserAgent\": \"swedbankpay-sdk-dotnet/3.0.1\", \"language\": \"sv-SE\", \"availableInstruments\": [ \"CreditCard\", \"Invoice-PayExFinancingSe\", \"Invoice-PayMonthlyInvoiceSe\", \"Swish\", \"CreditAccount\", \"Trustly\" ], \"instrumentMode\": false, \"guestMode\": false, \"payer\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/payers\" }, \"orderItems\": { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/orderitems\" }, \"history\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/history\" }, \"failed\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/failed\" }, \"aborted\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/aborted\" }, \"paid\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/paid\" }, \"cancelled\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/cancelled\" }, \"financialTransactions\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/financialtransactions\" }, \"failedAttempts\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/failedattempts\" }, \"metadata\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/metadata\" } }, \"operations\": [ { \"href\": \"https://api.payex.com/psp/paymentorders/222a50ca-b268-4b32-16fa-08d6d3b73224\", \"rel\":\"update-order\", \"method\":\"PATCH\", \"contentType\":\"application/json\" }, { \"href\": \"https://api.payex.com/psp/paymentorders/222a50ca-b268-4b32-16fa-08d6d3b73224\", \"rel\": \"abort\", \"method\": \"PATCH\", \"contentType\": \"application/json\" }, { \"href\": \"https://api.payex.com/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce\", \"rel\": \"abort-paymentattempt\", \"method\": \"PATCH\", \"contentType\": \"application/json\" } ] } Show fields Hide fields Field Type Description paymentOrder object The payment order object. id string The relative URL and unique identifier of the paymentorder resource . Please read about URL Usage to understand how this and other URLs should be used in your solution. created string The ISO-8601 date of when the payment order was created. updated string The ISO-8601 date of when the payment order was updated. operation string Purchase status string Indicates the payment order’s current status. Initialized is returned when the payment is created and still ongoing. The request example above has this status. Paid is returned when the payer has completed the payment successfully. See the Paid section for further information. Failed is returned when a payment has failed. You will find an error message in the failed section. Further information here. Cancelled is returned when an authorized amount has been fully cancelled. See the Cancel feature section for further information. It will contain fields from both the cancelled description and paid section. Aborted is returned when the merchant has aborted the payment or if the payer cancelled the payment in the redirect integration (on the redirect page). See the Abort feature section for further information. currency string The currency of the payment order. amount integer The transaction amount (including VAT, if any) entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The amount displayed is the final amount the payer paid for their order, including any payment method specific discounts or fees. vatAmount integer The payment’s VAT (Value Added Tax) amount, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The vatAmount entered will not affect the amount shown on the payment page, which only shows the total amount. This field is used to specify how much of the total amount the VAT will be. Set to 0 (zero) if there is no VAT amount charged. description string(40) A textual description of the purchase. Maximum length is 40 characters. initiatingSystemUserAgent string The user agent of the HTTP client making the request, reflecting the value sent in the User-Agent header with the initial POST request which created the Payment Order. language string sv-SE, nb-NO, da-DK, en-US or fi-FI. availableInstruments string A list of payment methods available for this payment. implementation string The merchant’s Digital Payments implementation type. Enterprise or PaymentsOnly. We ask that you don’t build logic around this field’s response. It is mainly for information purposes, as the implementation types might be subject to name changes. If this should happen, updated information will be available in this table. integration string The merchant’s Digital Payments integration type. HostedView (Seamless View) or Redirect. This field will not be populated until the payer has opened the payment UI, and the client script has identified if Swedbank Pay or another URI is hosting the container with the payment iframe. We ask that you don’t build logic around this field’s response. It is mainly for information purposes, as the integration types might be subject to name changes. If this should happen, updated information will be available in this table. instrumentMode bool Set to true or false. Indicates if the payment is initialized with only one payment method available. guestMode bool Set to true or false. Indicates if the payer chose to pay as a guest or not. When using the Enterprise implementation, this is triggered by not including a payerReference or nationalIdentifier in the original payment order request. payer id The URL to the payer resource where information about the payer can be retrieved. orderItems id The URL to the orderItems resource where information about the order items can be retrieved. history id The URL to the history resource where information about the payment’s history can be retrieved. failed id The URL to the failed resource where information about the failed transactions can be retrieved. aborted id The URL to the aborted resource where information about the aborted transactions can be retrieved. paid id The URL to the paid resource where information about the paid transactions can be retrieved. cancelled id The URL to the cancelled resource where information about the cancelled transactions can be retrieved. financialTransactions id The URL to the financialTransactions resource where information about the financial transactions can be retrieved. failedAttempts id The URL to the failedAttempts resource where information about the failed attempts can be retrieved. metadata id The URL to the metadata resource where information about the metadata can be retrieved. operations array The array of operations that are possible to perform on the payment order in its current state. As this is an initialized payment, the available operations are abort, update-order and redirect-checkout or view-checkout, depending on the integration. See Operations for details.",
    "tags": "",
    "url": "/checkout-v3/features/optional/request-delivery-info/"
  },{
    "title": "Request Customer Confirmation",
    "text": "Method Signatures void RequestCustomerConfirmation(string message) Task&lt;CustomerConfirmationResult&gt; RequestCustomerConfirmationAsync(string message) Description Call RequestCustomerConfirmation / RequestCustomerConfirmationAsync to ask customer a yes/no question. The message will be shown on the terminal’s display together with a green and read button for yes and no. The method may only be called before or after a PaymentRequest has been sent to the terminal, which means it may be sent after a GetPaymentInstrument, but not during the actual payment which in general starts when the amount is known. Returns A CustomerConfirmationResult 1 2 3 4 5 public class CustomerConfirmationResult : NexoRequestResult { public bool Confirmation { get; set; } public override string ResponseContent { get; set; } } 1 2 3 4 5 6 7 public class NexoRequestResult { public string ResponseContent public NexoResponseResult ResponseResult { get; set; } public string ErrorCondition { get; set; } public string ResponseText { get; set; } }; Example when used",
    "tags": "",
    "url": "/pax-terminal/NET/SwpTrmLib/Methods/handy/requestcustomerconfirmation/"
  },{
    "title": "Request Customer DigitString",
    "text": "Method Signatures void RequestCustomerDigitString(string message) Task&lt;CustomerDigitStringResult&gt; RequestCustomerDigitString(string message) Description RequestCustomerDigitString / RequestCustomerDigitStringAsync may be used to ask customer to enter any digit string. Typically this may be used to start onboarding a customer to a loyalty program. The message will be shown on the terminal’s display together with an input area where the entered digits are displayed. The method may only be called before or after a PaymentRequest has been sent to the terminal, which means it may be sent after a GetPaymentInstrument, but not during the actual payment which in general starts when the amount is known. Returns A CustomerDigitStringResult 1 2 3 4 5 public class CustomerDigitStringResult : NexoRequestResult { public string DigitString { get; set; } public override string ResponseContent { get; set; } } 1 2 3 4 5 6 7 public class NexoRequestResult { public string ResponseContent public NexoResponseResult ResponseResult { get; set; } public string ErrorCondition { get; set; } public string ResponseText { get; set; } };",
    "tags": "",
    "url": "/pax-terminal/NET/SwpTrmLib/Methods/handy/requestcustomerdigitstring/"
  },{
    "title": "Request To Display",
    "text": "Method Signatures void RequestToDisplay(string message) Task&lt;NexoRequestResult&gt; RequestToDisplayAsync(string message) Description Call RequestToDisplay / RequestToDisplayAsync to display a message on the terminal. The method may only be called before or after a PaymentRequest has been sent to the terminal, which means it may be sent after a GetPaymentInstrument but not during the actual payment which in general starts when the amount is known. The displayed message stays until next request. Returns A NexoRequestResult 1 2 3 4 5 6 7 public class NexoRequestResult { public virtual string ResponseContent { get; set; } public NexoResponseResult ResponseResult { get; set; } public string ErrorCondition { get; set; } public string ResponseText { get; set; } }",
    "tags": "",
    "url": "/pax-terminal/NET/SwpTrmLib/Methods/handy/requesttodisplayasync/"
  },{
    "title": "Request To Print",
    "text": "Method Signatures void RequestToPrint(List&lt;OutputText&gt; outputTexts) Task&lt;NexoRequestResult&gt; RequestToPrintAsync(List&lt;OutputText&gt; outputTexts) Description This method is typically used for printing the sale receipt for an integrated A920pro terminal. The method may only be called before or after a PaymentRequest has been sent to the terminal, which means it may be sent after a GetPaymentInstrument, but not during the actual payment which in general starts when the amount is known. Some formatting is possible regarding font size and alignment. An OutputText generates a line break. It is however possible to have one OutputText spanning several lines by using a 0x0A for line break in the Content member. OutputText Class OutputText class used when calling RequestToPrint to use the A920pro printer. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 namespace SwpTrmLib.Nexo { public class OutputText { public enum CharacterHeights { Normal, SingleHeight, DoubleHeight, HalfHeight }; public enum CharacterWidths { Normal, SingleWidth, DoubleWidth }; public enum Alignments { Left, Right, Centred, Justified }; public enum Colors { Black, White}; public CharacterHeights Height { get; set; } = CharacterHeights.Normal; public CharacterWidths Width { get; set; } = CharacterWidths.Normal; public Alignments Alignment { get; set; } = Alignments.Left; public Colors Color { get; set; } = Colors.Black; public int StartRow { get; set; } = 0; public string Content { get; set; } = string.Empty; public XElement XML(); } } Printing on A920Pro Example using RequestToPrint 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 // Prerequisites: PAX is an instace of ISwpTrmImp_1 using an A920pro. // Login has been made. using SwpTrmLib.Nexo; void MyTestOfA920proPrinter() { List&lt;OutputText&gt; textToPrint = new List&lt;OutputText&gt;(); textToPrint.Add(new OutputText() { Content = \"Text using default style\" }); textToPrint.Add(new OutputText() { Content = \"Larger text\", Height = CharacterHeights.DoubleHeight, Width = CharacterWidth.DoubleWidht, Alignment = Alignments.Centred }); // StartRow is paper feed in pixels textToPrint.Add(new OutputText() { StartRow = 200, Content = \"Space before this text\", Alignment = Alignments.Right }); // Text divided left and right using tab and alignment textToPrint.Add(new OutputText() { Content = \"Left\\tRight\", Alignment = Alignments.Justified }); textToPrint.Add(new OutputText() { Content = \"This text is\\x0a divided on several\\x0a lines with the\\x0a same formatting\", Alignment = Alignments.Justified }); PAX.RequestToPrint(textToPrint); } Printing Payment Result Example printing sale receipt on A920Pro 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 { NexoPaymentResult r = await PAX.Payment(amount); if (string(IsNullOrEmpty(r.ReceiptBlobNoHeader)) { // Create list for recipt print on A920Pro List&lt;OutputText&gt; items = new List&lt;OutputText&gt;(); // Add normal sale receipt AddSaleReceiptHeaderAndItems(items); // Add terminal receipt items.Add(new OutputText() { Content = \"Card payment:\" }); items.Add(new OutputText() { Content = r.ReceiptBlobNoHeader, StartRow = 40, }); AddFooter(items); _ = await PAX.RequestToPrint(items); } }",
    "tags": "",
    "url": "/pax-terminal/NET/SwpTrmLib/Methods/handy/requesttoprint/"
  },{
    "title": "Resource Models",
    "text": "Aborted Request 1 2 3 4 GET /psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/aborted HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.x/2.0 // Version optional for 3.0 and 2.0 Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x/2.0 api-supported-versions: 3.x/2.0 1 2 3 4 5 6 7 { \"paymentorder\": \"/psp/paymentorders/5adc265f-f87f-4313-577e-08d3dca1a26c\", \"aborted\": { \"id\": \"/psp/paymentorders/5adc265f-f87f-4313-577e-08d3dca1a26c/aborted\", \"abortReason\": \"Payment aborted by payer\" } } Field Type Description paymentOrder object The payment order object. aborted object The abort object. id string The relative URL and unique identifier of the paymentorder resource . Please read about URL Usage to understand how this and other URLs should be used in your solution. abortReason string Why the payment was aborted. Cancelled Request 1 2 3 4 GET /psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/cancelled HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.x/2.0 // Version optional for 3.0 and 2.0 Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x/2.0 api-supported-versions: 3.x/2.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 { \"paymentOrder\": \"/psp/paymentorders/5adc265f-f87f-4313-577e-08d3dca1a26c\", \"cancelled\": { \"id\": \"/psp/paymentorders/5adc265f-f87f-4313-577e-08d3dca1a26c/paid\", \"cancelReason\": \"&lt;should be the description from the merchant when doing cancel on the authorisation payment&gt;\", \"instrument\": \"Creditcard\", \"number\": 1234567890, \"payeeReference\": \"CD123\", \"orderReference\": \"AB1234\", \"transactionType\": \"Authorization\", \"amount\": 1500, \"submittedAmount\": 1500, \"feeAmount\": 0, \"discountAmount\": 0, \"tokens\": [ { \"type\": \"payment\", \"token\": \"12345678-1234-1234-1234-1234567890AB\", \"name\": \"4925xxxxxx000004\", \"expiryDate\" : \"mm/yyyy\" }, { \"type\": \"recurrence\", \"token\": \"87654321-4321-4321-4321-BA0987654321\", \"name\": \"4925xxxxxx000004\", \"expiryDate\" : \"mm/yyyy\" } ], \"details\": { \"nonPaymentToken\": \"12345678-1234-1234-1234-1234567890AB\", \"externalNonPaymentToken\": \"1234567890\", } } } Show fields Hide fields Field Type Description paymentOrder object The payment order object. cancelled object The cancel object. id string The relative URL and unique identifier of the paymentorder resource . Please read about URL Usage to understand how this and other URLs should be used in your solution. cancelReason string Why the payment was cancelled. instrument string The payment method used in the fulfillment of the payment. Do not use this field for code validation purposes. To determine if a capture is needed, we recommend using operations or the transactionType field. number integer The transaction number, useful when there’s need to reference the transaction in human communication. Not usable for programmatic identification of the transaction, where id should be used instead. payeeReference string A unique reference from the merchant system. Set per operation to ensure an exactly-once delivery of a transactional operation. Length and content validation depends on whether the transaction.number or the payeeReference is sent to the acquirer. If Swedbank Pay handles the settlement, the transaction.number is sent and the payeeReference must be in the format of A-Za-z0-9 and string(30). If you handle the settlement, Swedbank Pay will send the payeeReference and it will be limited to the format of string(12). All characters must be digits. orderReference string(50) The order reference should reflect the order reference found in the merchant’s systems. transactionType string This will either be set to Authorization or Sale. Can be used to understand if there is a need for doing a capture on this payment order. Swedbank Pay recommends using the different operations to figure out if a capture is needed. amount integer The transaction amount (including VAT, if any) entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The amount displayed is the final amount the payer paid for their order, including any payment method specific discounts or fees. submittedAmount integer This field will display the initial payment order amount, not including any discounts or fees specific to a payment method. The final payment order amount will be displayed in the amount field. feeAmount integer If the payment method used had a unique fee, it will be displayed in this field. discountAmount integer If the payment method used had a unique discount, it will be displayed in this field. tokens integer A list of tokens connected to the payment. type string payment, recurrence, transactionOnFile or unscheduled. The different types of available tokens. token string The token guid. name string The name of the token. In the example, a masked version of a card number. expiryDate string The expiry date of the token. details integer Details connected to the payment. nonPaymentToken string The result of our own card tokenization. Activated in POS for the merchant or merchant group. externalNonPaymentToken string The result of an external tokenization. This value will vary depending on card types, acquirers, customers, etc. For Mass Transit merchants, transactions redeemed by Visa will be populated with PAR. For Mastercard and Amex, it will be our own token. Failed Request 1 2 3 4 GET /psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/failed HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.x/2.0 // Version optional for 3.0 and 2.0 Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x/2.0 api-supported-versions: 3.x/2.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 { \"paymentOrder\": \"/psp/paymentorders/5adc265f-f87f-4313-577e-08d3dca1a26c\", \"failed\": { \"id\": \"/psp/paymentorders/5adc265f-f87f-4313-577e-08d3dca1a26c/failed\", \"problem\": { \"type\": \"https://api.payex.com/psp/errordetail/creditcard/acquirererror\", \"title\": \"Operation failed\", \"status\": 403, \"detail\": \"Unable to complete Authorization transaction, look at problem node!\", \"problems\": [ { \"name\": \"ExternalResponse\", \"description\": \"REJECTED_BY_ACQUIRER-unknown error, response-code: 51\" } ] } } } Show fields Hide fields Field Type Description paymentOrder object The payment order object. failed object The failed object. id string The relative URL and unique identifier of the paymentorder resource . Please read about URL Usage to understand how this and other URLs should be used in your solution. problem object The problem object. type string The type of problem that occurred. title string The title of the problem that occurred. status integer The HTTP status code that the problem was served with. detail string A detailed, human readable description of the error. problems array The array of problem detail objects. name string The name of the field, header, object, entity or likewise that was erroneous. description string The human readable description of what was wrong with the field, header, object, entity or likewise identified by name. FailedAttempts Request 1 2 3 4 GET /psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/failedattempts HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.x/2.0 // Version optional for 3.0 and 2.0 Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x/2.0 api-supported-versions: 3.x/2.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 { \"paymentorder\": \"/psp/paymentorders/5adc265f-f87f-4313-577e-08d3dca1a26c\", \"failedAttempts\": { \"id\": \"/psp/paymentorders/5adc265f-f87f-4313-577e-08d3dca1a26c/failedattempts\" \"failedAttemptList\": [ { \"created\": \"2020-03-03T07:21:01.1893466Z\", \"instrument\": \"CreditCard\", \"number\": 123456, \"status\": \"Aborted\", \"problem\": { \"type\": \"https://api.payex.com/psp/errordetail/creditcard/3dsecureusercanceled\", \"title\": \"Operation failed\", \"status\": 403, \"detail\": \"Unable to complete VerifyAuthentication transaction, look at problem node!\", \"problems\": [ { \"name\": \"ExternalResponse\", \"description\": \"UserCancelled-CANCELED\" } ] } }, { \"created\": \"2020-03-03T07:21:01.1893466Z\", \"instrument\": \"Vipps\", \"number\": 123457, \"status\": \"Failed\", \"operationalFee\": false, \"problem\": { \"type\": \"https://api.payex.com/psp/errordetail/vipps/vippsdeclined\", \"title\": \"Operation failed\", \"status\": 403, \"detail\": \"Unable to complete Vipps transaction. failedReason: VippsPaymentCancel,ErrorDescription: Received status USER_CANCEL from Vipps\", \"problems\": [] } }, { \"created\": \"2020-03-03T07:22:21.1893466Z\", \"instrument\": \"CreditCard\", \"number\": 123458, \"status\": \"Failed\", \"problem\": { \"type\": \"https://api.payex.com/psp/errordetail/creditcard/3dsecureacquirergatewayerror\", \"title\": \"Operation failed\", \"status\": 502, \"detail\": \"Unable to complete VerifyAuthentication transaction, look at problem node!\", \"problems\": [ { \"name\": \"ExternalResponse\", \"description\": \"ARCOT_MERCHANT_PLUGIN_ERROR-merchant plugin error [98]: This is a triggered error message.\" } ] } } ] } } Show fields Hide fields Field Type Description paymentOrder object The payment order object. id string The relative URL and unique identifier of the paymentorder resource . Please read about URL Usage to understand how this and other URLs should be used in your solution. failedAttempts object The failed attempt object. failedAttemptList array The array of failed attempts. created string The ISO-8601 date of when the payment order was created. instrument string Payment method used in the failed payment. number integer The paymentorder number, useful when there’s need to reference the paymentorder in human communication. Not usable for programmatic identification of the paymentorder, where id should be used instead. status string The status of the payment attempt. Failed or Aborted. operationalFee bool A field specific for Vipps. Set to true if an operational fee for receiving card information from Vipps has been generated. Set to false if no such fee has been generated. problem object The problem object. type string The type of problem that occurred. title string The title of the problem that occurred. status integer The HTTP status code that the problem was served with. detail string A detailed, human readable description of the error. problems array The array of problem detail objects. name string The name of the field, header, object, entity or likewise that was erroneous. description string The human readable description of what was wrong with the field, header, object, entity or likewise identified by name. FailedPostPurchaseAttempts Request 1 2 3 4 GET /psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/failedpostpurchaseattempts HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Accept: application/json;version=3.x Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x api-supported-versions: 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 { \"paymentorder\": \"/psp/paymentorders/5adc265f-f87f-4313-577e-08d3dca1a26c\", \"postPurchaseFailedAttempts\": { \"id\": \"/psp/paymentorders/5adc265f-f87f-4313-577e-08d3dca1a26c/postpurchasefailedattempts\", \"postpurchaseFailedAttemptList\": [ { \"created\": \"2020-03-03T07:21:01.1893466Z\", \"status\": \"Failed\", \"type\": \"Capture\", \"number\": 12345678, \"problem\": { \"type\": \"https://api.payex.com/psp/errordetail/creditcard/badrequest\", \"title\": \"Operation failed\", \"status\": 400, \"detail\": \"Unable to complete CreateCapture operation, look at problem node!\", \"problems\": [ { \"name\":\"Entitynotfound\", \"description\":\"Capture with identifier f1c8c67b-88cb-407c-98fb-08db6f56295e could not be found\" }, { \"name\":\"Component\", \"description\":\"pospay-ecommerce-financial-service\" }, { \"name\":\"Method\", \"description\":\"N/A\" } ] } } ] } } Show fields Hide fields Field Type Description paymentOrder object The payment order object. postpurchasefailedAttempts object The failed attempt object. id string The relative URL and unique identifier of the paymentorder resource . Please read about URL Usage to understand how this and other URLs should be used in your solution. postpurchaseFailedAttemptList array The array of failed attempts. created string The ISO-8601 date of when the payment order was created. status string The status of the payment attempt. Failed or Aborted. type string The type of post-purchase transaction. number string The attempt number of the post-purchase operation. problem object The problem object. type string The type of problem that occurred. title string The title of the problem that occurred. status integer The HTTP status code that the problem was served with. detail string A detailed, human readable description of the error. problems array The array of problem detail objects. name string The name of the field, header, object, entity or likewise that was erroneous. description string The human readable description of what was wrong with the field, header, object, entity or likewise identified by name. FinancialTransactions Request 1 2 3 4 GET /psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/financialtransactions HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.x/2.0 // Version optional for 3.0 and 2.0 Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x/2.0 api-supported-versions: 3.x/2.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 { \"paymentorder\": \"/psp/paymentorders/5adc265f-f87f-4313-577e-08d3dca1a26c\", \"financialTransactions\" { \"id\": \"/psp/paymentorders/5adc265f-f87f-4313-577e-08d3dca1a26c/financialtransactions\", \"financialTransactionsList\": [ { \"id\": \"/psp/paymentorders/5adc265f-f87f-4313-577e-08d3dca1a26c/financialtransactions/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"created\": \"2020-03-04T01:01:01.01Z\", \"updated\": \"2020-03-04T01:01:01.03Z\", \"type\": \"Capture\", \"number\": 123459, \"amount\": 1000, \"vatAmount\": 250, \"description\": \"Test transaction1\", \"payeeReference\": \"AH123456\", \"receiptReference\": \"OL1234\" \"orderItems\": { \"id\": \"/psp/paymentorders/5adc265f-f87f-4313-577e-08d3dca1a26c/financialtransactions/7e6cdfc3-1276-44e9-9992-7cf4419750e1/orderitems\" } }, { \"id\": \"/psp/paymentorders/5adc265f-f87f-4313-577e-08d3dca1a26c/financialtransactions/&lt;transactionId&gt;\", \"created\": \"2020-03-05T01:01:01.01Z\", \"updated\": \"2020-03-05T01:01:01.03Z\", \"type\": \"Capture\", \"number\": 123460, \"amount\": 500, \"vatAmount\": 125, \"description\": \"Test transaction2\", \"payeeReference\": \"AH234567\", \"receiptReference\": \"OL5678\" \"orderItems\": { \"id\": \"/psp/paymentorders/5adc265f-f87f-4313-577e-08d3dca1a26c/financialtransactions/7e6cdfc3-1276-44e9-9992-7cf4419750e1/orderitems\" } }, { \"id\": \"/psp/paymentorders/5adc265f-f87f-4313-577e-08d3dca1a26c/financialtransactions/&lt;transactionId&gt;\", \"created\": \"2020-04-02T01:01:01.01Z\", \"updated\": \"2020-04-02T01:01:01.03Z\", \"type\": \"Reversal\", \"number\": 123461, \"amount\": 1000, \"vatAmount\": 250, \"description\": \"Test transaction3\", \"payeeReference\": \"AH345678\", \"receiptReference\": \"OL1357\" \"orderItems\": { \"id\": \"/psp/paymentorders/5adc265f-f87f-4313-577e-08d3dca1a26c/financialtransactions/7e6cdfc3-1276-44e9-9992-7cf4419750e1/orderitems\" } } ] } } Show fields Hide fields Field Type Description paymentOrder object The payment order object. financialTransactions object The financial transactions object. id string The relative URL and unique identifier of the paymentorder resource . Please read about URL Usage to understand how this and other URLs should be used in your solution. financialTransactionsList array The array of financial transactions. id string The id of the financial transaction. created string The ISO-8601 date of when the payment order was created. updated string The ISO-8601 date of when the payment order was updated. type string The type of transaction. Capture, Authorization, Cancellation, Reversal, Sale. number integer The paymentorder number, useful when there’s need to reference the paymentorder in human communication. Not usable for programmatic identification of the paymentorder, where id should be used instead. amount integer The transaction amount (including VAT, if any) entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The amount displayed is the final amount the payer paid for their order, including any payment method specific discounts or fees. vatAmount integer The payment’s VAT (Value Added Tax) amount, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The vatAmount entered will not affect the amount shown on the payment page, which only shows the total amount. This field is used to specify how much of the total amount the VAT will be. Set to 0 (zero) if there is no VAT amount charged. description string The description of the payment order. payeeReference string A unique reference from the merchant system. Set per operation to ensure an exactly-once delivery of a transactional operation. Length and content validation depends on whether the transaction.number or the payeeReference is sent to the acquirer. If Swedbank Pay handles the settlement, the transaction.number is sent and the payeeReference must be in the format of A-Za-z0-9 and string(30). If you handle the settlement, Swedbank Pay will send the payeeReference and it will be limited to the format of string(12). All characters must be digits. receiptReference string(30) A unique reference to the transaction, provided by the merchant. Can be used as an invoice or receipt number as a supplement to payeeReference. orderItems array The array of items being purchased with the order. Note that authorization orderItems will not be printed on invoices, so lines meant for print must be added in the Capture request. The authorization orderItems will, however, be used in the Merchant Portal when captures or reversals are performed, and might be shown other places later. It is required to use this field to be able to send Capture orderItems. Capture requests should only contain items meant to be captured from the order. History We advise you to not build logic around the content of these fields. They are mainly for information purposes, and might be subject to name changes. If these should occur, updates will be available in the list below. Request 1 2 3 4 GET /psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/history HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.x/2.0 // Version optional for 3.0 and 2.0 Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x/2.0 api-supported-versions: 3.x/2.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 { \"paymentorder\": \"/psp/paymentorders/5adc265f-f87f-4313-577e-08d3dca1a26c\", \"history\": { \"id\": \"/psp/paymentorders/5adc265f-f87f-4313-577e-08d3dca1a26c/history\", \"historyList\": [ { \"created\": \"2020-03-04T01:00:00.00Z\", \"name\": \"PaymentCreated\", \"initiatedBy\" \"Merchant\" }, { \"created\": \"2020-03-04T01:01:00.00Z\", \"name\": \"PaymentLoaded\", \"initiatedBy\" \"System\" }, { \"created\": \"2020-03-04T01:00:15.00Z\", \"name\": \"CheckinInitiated\", \"initiatedBy\" \"System\" }, { \"created\": \"2020-03-04T01:00:16.00Z\", \"name\": \"PayerDetailsRetrieved\", \"initiatedBy\" \"System\" }, { \"created\": \"2020-03-04T01:00:20.00Z\", \"name\": \"PayerCheckedIn\", \"initiatedBy\" \"Consumer\" }, { \"created\": \"2020-03-04T01:01:01.01Z\", \"name\": \"PaymentInstrumentSelected\", \"instrument\": \"CreditCard\", \"initiatedBy\" \"Consumer\" }, { \"created\": \"2020-03-04T01:03:01.01Z\", \"name\": \"PaymentAttemptStarted\", \"instrument\": \"CreditCard\", \"number\": 123456, \"prefill\": true, \"initiatedBy\" \"Consumer\" }, { \"created\": \"2020-03-04T01:03:01.01Z\", \"name\": \"PaymentAttemptAborted\", \"number\": 123456, \"instrument\": \"CreditCard\", \"initiatedBy\" \"Consumer\" }, { \"created\": \"2020-03-04T02:01:01.01Z\", \"name\": \"PaymentInstrumentSelected\", \"instrument\": \"Vipps\", \"initiatedBy\" \"Consumer\" }, { \"created\": \"2020-03-04T03:01:01.01Z\", \"name\": \"PaymentInstrumentSelected\", \"instrument\": \"CreditCard\", \"initiatedBy\" \"Consumer\" }, { \"created\": \"2020-03-04T02:01:01.01Z\", \"name\": \"PaymentAttemptStarted\", \"instrument\": \"CreditCard\", \"number\": 123457, \"prefill\": true, \"initiatedBy\" \"Consumer\" }, { \"created\": \"2020-03-04T02:01:01.01Z\", \"name\": \"PaymentAttemptFailed\", \"instrument\": \"CreditCard\", \"number\": 123457, \"initiatedBy\" \"Consumer\" }, { \"created\": \"2020-03-04T02:01:01.01Z\", \"name\": \"PaymentAttemptStarted\", \"instrument\": \"CreditCard\", \"number\": 123458, \"prefill\": true, \"initiatedBy\" \"Consumer\" }, { \"created\": \"2020-03-04T02:01:01.01Z\", \"name\": \"PaymentPaid\", \"instrument\": \"CreditCard\" \"number\": 123458, \"initiatedBy\" \"Consumer\" }, { \"created\": \"2020-03-05T02:01:01.01Z\", \"name\": \"PaymentPartiallyCaptured\", \"instrument\": \"CreditCard\" \"number\": 123459, \"initiatedBy\" \"Merchant\" }, { \"created\": \"2020-03-06T02:01:01.01Z\", \"name\": \"PaymentPartiallyCaptured\", \"instrument\": \"CreditCard\" \"number\": 123460, \"initiatedBy\" \"Merchant\" }, { \"created\": \"2020-03-07T02:01:01.01Z\", \"name\": \"PaymentPartiallyReversed\", \"instrument\": \"CreditCard\" \"number\": 123461, \"initiatedBy\" \"Merchant\" }, { \"created\": \"2020-03-04T02:01:01.01Z\", \"name\": \"PaymentCapturedFailed\", \"instrument\": \"CreditCard\", \"number\": 123462, \"initiatedBy\" \"Merchant\" }, { \"created\": \"2020-03-04T02:01:01.01Z\", \"name\": \"PaymentPartiallyCapturedFailed\", \"instrument\": \"CreditCard\", \"number\": 123463, \"initiatedBy\" \"Merchant\" }, { \"created\": \"2020-03-04T02:01:01.01Z\", \"name\": \"PaymentReversedFailed\", \"instrument\": \"CreditCard\", \"number\": 123464, \"initiatedBy\" \"Merchant\" }, { \"created\": \"2020-03-04T02:01:01.01Z\", \"name\": \"PaymentPartiallyReversedFailed\", \"instrument\": \"CreditCard\", \"number\": 123465, \"initiatedBy\" \"Merchant\" }, { \"created\": \"2020-03-04T02:01:01.01Z\", \"name\": \"PaymentCancelledFailed\", \"instrument\": \"CreditCard\", \"number\": 123466, \"initiatedBy\" \"Merchant\" }, { \"created\": \"2020-03-04T02:01:01.01Z\", \"name\": \"PaymentPartiallyCancelledFailed\", \"instrument\": \"CreditCard\", \"number\": 123467, \"initiatedBy\" \"Merchant\" } ] } } Show fields Hide fields Field Type Description paymentOrder object The payment order object. history object The history object. id string The relative URL and unique identifier of the paymentorder resource . Please read about URL Usage to understand how this and other URLs should be used in your solution. historyList array The array of history objects. created string The ISO-8601 date of when the history event was created. name string Name of the history event. See list below for information. instrument string The payment method used when the event occurred. number integer Payment number associated with the event. prefill bool Indicates if payment info was prefilled or not. Show fields Hide fields History Event Name Description PaymentCreated This event will occur as soon as the merchant initiates the payment order. CheckinInitiated Will be set when checkin is started, if checkin is activated for the merchant. The merchant must be configured with ProductPackage=Checkout PayerDetailsRetrieved Will be set if a consumer profile is found. The merchant must be configured with ProductPackage=Checkout PayerCheckedIn Will be set when checkin is completed. The merchant must be configured with ProductPackage=Checkout PaymentInstrumentSet If the PaymentOrder is initiated in Instrument Mode, the first occurrence will be set to the value from the merchant´s POST statement. Following values will be set for each time the merchant to a PATCH to change the payment method used for that payment. The payment method set will be in the instrument parameter. PaymentLoaded Will be set the first time the payer loads the payment window. If this event hasn’t occurred, the payment window hasn’t been loaded. PaymentInstrumentSelected Will occur each time the payer expands a payment method in the payment UI. The payment method selected will be set in the instrument parameter. PaymentAttemptStarted Will occur when the payer presses the first button in the payment process (either “pay” or “next” if the payment has multiple steps). The instrument parameter will contain the payment method for this attempt. The prefill will be true if the payment page was prefilled with payment information. The transaction number for this payment will be available in the number field. PaymentAttemptAborted Will occur if the payer aborts the payment attempt. Both the number and instrument parameters will be available on this event. PaymentAttemptFailed Will occur if the payment failed. Both the number and instrument parameters will be available on this event. PaymentPaid Will occur if the payment succeeds. Both the number and instrument parameters will be available on this event. PaymentCaptured Will occur when the merchant has captured the full authorization amount. Both the number and instrument parameters will be available on this event. The number of this event will point to a number in the financialTransaction field for easy linking. PaymentPartiallyCaptured Will occur when the merchant has done a partial capture of authorization amount. Both the number and instrument parameters will be available on this event. The number of this event will point to a number in the financialTransaction field for easy linking. PaymentCancelled Will occur when the merchant has cancelled the full authorization amount. Both the number and instrument parameters will be available on this event. PaymentPartiallyCancelled Will occur when the merchant has cancelled part of the authorization amount. Both the number and instrument parameters will be available on this event. PaymentReversed Will occur when the merchant reverses the full authorization amount. Both the number and instrument parameters will be available on this event. The number of this event will point to a number in the financialTransaction field for easy linking. PaymentPartiallyReversed Will occur when the merchant reverses a part of the authorization amount. Both the number and instrument parameters will be available on this event. The number of this event will point to a number in the financialTransaction field for easy linking. PaymentCapturedFailed Will occur when the merchant has tried - but failed - to do a full capture of the authorization amount. The number (nullable) of this event will point to a number in the financialTransaction node for easy linking. PaymentPartiallyCapturedFailed Will occur when the merchant has tried - but failed - to do a partial capture of the authorization amount. The number (nullable) of this event will point to a number in the financialTransaction node for easy linking. PaymentReversedFailed Will occur when the merchant has tried - but failed - to do a reversal of the fully captured authorization amount. The number parameter might be available on this event. If present, it will point to a number in the financialTransaction field for easy linking. PaymentPartiallyReversedFailed Will occur when the merchant has tried - but failed - to do a partial reversal of the captured authorization amount. The number parameter might be available on this event. If present, it will point to a number in the financialTransaction field for easy linking. PaymentCancelledFailed Will occur when the merchant has tried - but failed - to do a full cancel of the authorization amount. The number (nullable) of this event will point to a number in the financialTransaction node for easy linking. PaymentPartiallyCancelledFailed Will occur when the merchant has tried - but failed - to cancel the remaining (uncaptured) parts of authorizated amount. The number (nullable) of this event will point to a number in the financialTransaction node for easy linking. Paid The payment order response with status equal to Paid, and the paid resource expanded. Please note that the main code example is of a card payment. We have included paid resources of the remaining payment methods below the main code example. Resource examples where details are empty indicate that no details are available. The wallets Apple Pay and Vipps do not return maskedPan. Please note that while MobilePay does return this field, the value present is actually a networkToken, which represents the PAN, but is not a PAN in itself. Request 1 2 3 4 GET /psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/paid HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.x/2.0 // Version optional for 3.0 and 2.0 Card Paid Resource Card Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x/2.0 api-supported-versions: 3.x/2.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 { \"paymentOrder\": \"/psp/paymentorders/5adc265f-f87f-4313-577e-08d3dca1a26c\", \"paid\": { \"id\": \"/psp/paymentorders/5adc265f-f87f-4313-577e-08d3dca1a26c/paid\", \"instrument\": \"Creditcard\", \"number\": 1234567890, \"payeeReference\": \"CD123\", \"orderReference\": \"AB1234\", \"transactionType\": \"Authorization\", \"amount\": 1500, \"submittedAmount\": 1500, \"feeAmount\": 0, \"discountAmount\": 0, \"paymentTokenGenerated\": false, \"tokens\": [ { \"type\": \"payment\", \"token\": \"12345678-1234-1234-1234-1234567890AB\", \"name\": \"4925xxxxxx000004\", \"expiryDate\" : \"mm/yyyy\" }, { \"type\": \"recurrence\", \"token\": \"87654321-4321-4321-4321-BA0987654321\", \"name\": \"4925xxxxxx000004\", \"expiryDate\" : \"mm/yyyy\" }, { \"type\": \"unscheduled\", \"token\": \"87654321-4321-4321-4321-BA0987654321\", \"name\": \"4925xxxxxx000004\", \"expiryDate\" : \"mm/yyyy\" }, { \"type\": \"transactionsOnFile\", \"token\": \"87654321-4321-4321-4321-BA0987654321\", \"name\": \"4925xxxxxx000004\", \"expiryDate\" : \"mm/yyyy\" } ], \"details\": { \"nonPaymentToken\": \"12345678-1234-1234-1234-1234567890AB\", \"externalNonPaymentToken\": \"1234567890\", \"paymentAccountReference\": \"43f6b6d2cbd30c36627ec02247259\", \"cardBrand\": \"Visa\", \"cardType\": \"Credit\", \"maskedPan\": \"492500******0004\", // Same format as maskedDpan for enrolled network tokenization cards \"maskedDPan\": \"***********1234\", \"expiryDate\": \"12/2022\", \"issuerAuthorizationApprovalCode\": \"L00302\", \"acquirerTransactionType\": \"STANDARD\", \"acquirerStan\": \"302\", \"acquirerTerminalId\": \"70101301389\", \"acquirerTransactionTime\": \"2022-06-15T14:12:55.029Z\", \"transactionInitiator\": \"CARDHOLDER\", \"bin\": \"492500\" } } Apple Pay Paid Resource Please note that this is an abbreviated example. See the main paid example for more context. Apple Pay Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x/2.0 api-supported-versions: 3.x/2.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 { \"paymentOrder\": \"/psp/paymentorders/5adc265f-f87f-4313-577e-08d3dca1a26c\", \"paid\": { \"id\": \"/psp/paymentorders/1f8d409e-8d8c-4ba1-a3ab-08da8caf7918/paid\", \"instrument\": \"ApplePay\", \"number\": 80100001190, \"payeeReference\": \"1662360210\", \"transactionType\": \"Authorization\", \"amount\": 1500, \"submittedAmount\": 1500, \"feeAmount\": 0, \"discountAmount\": 0, \"paymentTokenGenerated\": false, \"details\": { \"cardBrand\": \"Visa\", \"cardType\": \"Credit\", \"maskedDPan\": \"492500******0004\", \"expiryDate\": \"12/2023\", \"issuerAuthorizationApprovalCode\": \"L00392\", \"acquirerTransactionType\": \"WALLET\", \"acquirerStan\": \"392\", \"acquirerTerminalId\": \"80100001190\", \"acquirerTransactionTime\": \"2022-09-05T06:45:40.322Z\", \"transactionInitiator\": \"CARDHOLDER\", \"bin\": \"492500\" } } } Click to Pay paid Resource Please note that this is an abbreviated example. See the main paid example for more context. Click to Pay Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x/2.0 api-supported-versions: 3.x/2.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 { \"paymentOrder\": \"/psp/paymentorders/5adc265f-f87f-4313-577e-08d3dca1a26c\", \"paid\": { \"id\": \"/psp/paymentorders/1f8d409e-8d8c-4ba1-a3ab-08da8caf7918/paid\", \"instrument\": \"ClickToPay\", \"number\": 80100001190, \"payeeReference\": \"1662360210\", \"amount\": 1500, \"paymentTokenGenerated\": false, \"details\": { \"nonPaymentToken\": \"12345678-1234-1234-1234-1234567890AB\", \"externalNonPaymentToken\": \"1234567890\", \"cardBrand\": \"Visa\", \"cardType\": \"Credit\", \"maskedPan\": \"492500******0004\", \"maskedDPan\": \"492500******0004\", \"expiryDate\": \"12/0023\", \"issuerAuthorizationApprovalCode\": \"L00392\", \"acquirerTransactionType\": \"WALLET\", \"acquirerStan\": \"392\", \"acquirerTerminalId\": \"80100001190\", \"acquirerTransactionTime\": \"2022-09-05T06:45:40.322Z\", \"transactionInitiator\": \"CARDHOLDER\" \"bin\": \"489537\" } } } Google Pay™ paid Resource Please note that this is an abbreviated example. See the main paid example for more context. Google Pay&trade; Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x/2.0 api-supported-versions: 3.x/2.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 { \"paymentOrder\": \"/psp/paymentorders/5adc265f-f87f-4313-577e-08d3dca1a26c\", \"paid\": { \"id\": \"/psp/paymentorders/1f8d409e-8d8c-4ba1-a3ab-08da8caf7918/paid\", \"instrument\": \"GooglePay\", \"number\": 80100001190, \"payeeReference\": \"1662360210\", \"amount\": 1500, \"paymentTokenGenerated\": false, \"details\": { \"nonPaymentToken\": \"12345678-1234-1234-1234-1234567890AB\", \"externalNonPaymentToken\": \"1234567890\", \"cardBrand\": \"Visa\", \"cardType\": \"Credit\", \"maskedPan\": \"492500******0004\", \"maskedDPan\": \"492500******0004\", \"expiryDate\": \"12/0023\", \"issuerAuthorizationApprovalCode\": \"L00392\", \"acquirerTransactionType\": \"WALLET\", \"acquirerStan\": \"392\", \"acquirerTerminalId\": \"80100001190\", \"acquirerTransactionTime\": \"2022-09-05T06:45:40.322Z\", \"transactionInitiator\": \"CARDHOLDER\" \"bin\": \"489537\" } } } MobilePay Paid Resource Please note that this is an abbreviated example. See the main paid example for more context. MobilePay Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x/2.0 api-supported-versions: 3.x/2.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 { \"paymentOrder\": \"/psp/paymentorders/5adc265f-f87f-4313-577e-08d3dca1a26c\", \"paid\": { \"id\": \"/psp/paymentorders/efdcbf77-9a62-426b-a3b1-08da8caf7918/paid\", \"instrument\": \"MobilePay\", \"number\": 75100106637, \"payeeReference\": \"1662364327\", \"transactionType\": \"Authorization\", \"amount\": 1500, \"submittedAmount\": 1500, \"feeAmount\": 0, \"discountAmount\": 0, \"paymentTokenGenerated\": false, \"details\": { \"nonPaymentToken\": \"12345678-1234-1234-1234-1234567890AB\", \"externalNonPaymentToken\": \"1234567890\", \"cardBrand\": \"Visa\", \"maskedDPan\": \"492500******0004\", \"expiryDate\": \"12/2022\", \"issuerAuthorizationApprovalCode\": \"018117\", \"acquirerTransactionType\": \"MOBILEPAY\", \"acquirerStan\": \"53889\", \"acquirerTerminalId\": \"42\", \"acquirerTransactionTime\": \"2022-09-05T09:54:05Z\", \"bin\": \"489537\" } } } Vipps Paid Resource Please note that this is an abbreviated example. See the main paid example for more context. Vipps Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x/2.0 api-supported-versions: 3.x/2.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 { \"paymentOrder\": \"/psp/paymentorders/5adc265f-f87f-4313-577e-08d3dca1a26c\", \"paid\": { \"id\": \"/psp/paymentorders/a463b145-3278-4aa0-c4db-08da8f1813a2/paid\", \"instrument\": \"Vipps\", \"number\": 99463794, \"payeeReference\": \"1662366424\", \"transactionType\": \"Authorization\", \"amount\": 1500, \"submittedAmount\": 1500, \"feeAmount\": 0, \"discountAmount\": 0, \"paymentTokenGenerated\": false, \"details\": { \"nonPaymentToken\": \"12345678-1234-1234-1234-1234567890AB\", \"externalNonPaymentToken\": \"1234567890\", \"cardBrand\": \"Visa\", \"maskedDPan\": \"492500******0004\", \"acquirerTransactionType\": \"WALLET\", \"acquirerTerminalId\": \"99488282\", \"acquirerTransactionTime\": \"2022-09-05T09:54:05Z\", \"transactionInitiator\": \"CARDHOLDER\", \"bin\": \"489537\" } } } Swish Paid Resource Please note that this is an abbreviated example. See the main paid example for more context. Swish Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x/2.0 api-supported-versions: 3.x/2.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 { \"paymentOrder\": \"/psp/paymentorders/5adc265f-f87f-4313-577e-08d3dca1a26c\", \"paid\": { \"id\": \"/psp/paymentorders/b0410cd0-61df-4548-a3ad-08da8caf7918/paid\", \"instrument\": \"Swish\", \"number\": 74100413405, \"payeeReference\": \"1662360831\", \"transactionType\": \"Sale\", \"amount\": 1500, \"submittedAmount\": 1500, \"feeAmount\": 0, \"discountAmount\": 0, \"paymentTokenGenerated\": false, \"details\": { \"misidn\": \"+46739000001\" } } } Invoice Paid Resource Please note that this is an abbreviated example. See the main paid example for more context. Invoice Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x/2.0 api-supported-versions: 3.x/2.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 { \"paymentOrder\": \"/psp/paymentorders/5adc265f-f87f-4313-577e-08d3dca1a26c\", \"paid\": { \"id\": \"/psp/paymentorders/05a356df-05e2-49e6-8858-08da8cb4d651/paid\", \"instrument\": \"Invoice\", \"number\": 71100775379, \"payeeReference\": \"1662360980\", \"transactionType\": \"Authorization\", \"amount\": 1500, \"submittedAmount\": 1500, \"feeAmount\": 0, \"discountAmount\": 0, \"paymentTokenGenerated\": false, \"details\": {} } } Installment Account Paid Resource Please note that this is an abbreviated example. See the main paid example for more context. Installment Account Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x/2.0 api-supported-versions: 3.x/2.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 { \"paymentOrder\": \"/psp/paymentorders/5adc265f-f87f-4313-577e-08d3dca1a26c\", \"paid\": { \"id\": \"/psp/paymentorders/39eef759-a619-4c91-885b-08da8cb4d651/paid\", \"instrument\": \"CreditAccount\", \"number\": 77100038000, \"payeeReference\": \"1662361777\", \"transactionType\": \"Authorization\", \"amount\": 1500, \"submittedAmount\": 1500, \"feeAmount\": 0, \"discountAmount\": 0, \"paymentTokenGenerated\": false, \"details\": {} } } Trustly Paid Resource Please note that this is an abbreviated example. See the main paid example for more context. Trustly Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x/2.0 api-supported-versions: 3.x/2.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 { \"paymentOrder\": \"/psp/paymentorders/5adc265f-f87f-4313-577e-08d3dca1a26c\", \"paid\": { \"id\": \"/psp/paymentorders/bf660901-93d0-4245-4e6b-08da8f165366/paid\", \"instrument\": \"Trustly\", \"number\": 79100113652, \"payeeReference\": \"1662373401\", \"orderReference\": \"orderReference\", \"transactionType\": \"Sale\", \"amount\": 1500, \"submittedAmount\": 1500, \"feeAmount\": 0, \"discountAmount\": 0, \"paymentTokenGenerated\": false, \"details\": { \"trustlyOrderId\": 123456789 } } } Show fields Hide fields Field Type Description paymentOrder object The payment order object. paid object The paid object. id string The relative URL and unique identifier of the paymentorder resource . Please read about URL Usage to understand how this and other URLs should be used in your solution. instrument string The payment method used in the fulfillment of the payment. Do not use this field for code validation purposes. To determine if a capture is needed, we recommend using operations or the transactionType field. number integer The paymentorder number, useful when there’s need to reference the paymentorder in human communication. Not usable for programmatic identification of the paymentorder, where id should be used instead. payeeReference string A unique reference from the merchant system. Set per operation to ensure an exactly-once delivery of a transactional operation. Length and content validation depends on whether the transaction.number or the payeeReference is sent to the acquirer. If Swedbank Pay handles the settlement, the transaction.number is sent and the payeeReference must be in the format of A-Za-z0-9 and string(30). If you handle the settlement, Swedbank Pay will send the payeeReference and it will be limited to the format of string(12). All characters must be digits. orderReference string(50) The order reference should reflect the order reference found in the merchant’s systems. transactionType string This will either be set to Authorization or Sale. Can be used to understand if there is a need for doing a capture on this payment order. Swedbank Pay recommends using the different operations to figure out if a capture is needed. amount integer The transaction amount (including VAT, if any) entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The amount displayed is the final amount the payer paid for their order, including any payment method specific discounts or fees. submittedAmount integer This field will display the initial payment order amount, not including any discounts or fees specific to a payment method. The final payment order amount will be displayed in the amount field. feeAmount integer If the payment method used had a unique fee, it will be displayed in this field. discountAmount integer If the payment method used had a unique discount, it will be displayed in this field. paymentTokenGenerated bool Set to true or false. Used to show if a payment token has been generated or not. Will be set to true if the checkbox enabled by EnablePaymentDetailsConsentCheckbox has been checked by the payer during a payment, otherwise false. tokens integer A list of tokens connected to the payment. type string payment, recurrence, transactionOnFile or unscheduled. The different types of available tokens. token string The token guid. name string The name of the token. In the example, a masked version of a card number. expiryDate string The expiry date of the token. details integer Details connected to the payment. nonPaymentToken string The result of our own card tokenization. Activated in POS for the merchant or merchant group. externalNonPaymentToken string The result of an external tokenization. This value will vary depending on card types, acquirers, customers, etc. For Mass Transit merchants, transactions will be populated with the paymentAccountReference. paymentAccountReference string The result of an external tokenization. The value will vary depending on card types, acquirers, customers, etc. For Mass Transit merchants, the paymentAccountReference will also populate the externalNonPaymentToken field. cardType string Credit Card or Debit Card. Indicates the type of card used for the authorization. maskedPan string The masked PAN number of the card. maskedDPan string A masked version of a network token representing the card. It will only appear if the chosen payment method is tokenized and the card used is tokenized by Visa or MasterCard. expiryDate string The month and year of when the card expires. issuerAuthorizationApprovalCode string Payment reference code provided by the issuer. acquirerTransactionType string 3DSECURE or STANDARD. Indicates the transaction type of the acquirer. acquirerStan string The System Trace Audit Number assigned by the acquirer to uniquely identify the transaction. acquirerTerminalId string The ID of the acquirer terminal. acquirerTransactionTime string The ISO-8601 date and time of the acquirer transaction. transactionInitatior string The party which initiated the transaction. MERCHANT or CARDHOLDER. bin string The first six digits of the maskedPan. msisdn string The msisdn used in the purchase. Only available when paid with Swish. Payer Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x/2.0 api-supported-versions: 3.x/2.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 { \"paymentorder\": \"/psp/paymentorders/5adc265f-f87f-4313-577e-08d3dca1a26c\", \"payer\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/payers\", \"reference\": \"reference to payer\" \"name\": \"Azra Oliveira\", \"email\": \"azra@payex.com\", \"msisdn\": \"+46722345678\", \"gender\": \"male\", \"birthYear\": \"1980\", \"hashedFields\": { \"emailHash\": \"968e23eda8818f8647d15775c939b3bc32ba592e\", \"msisdnHash\": \"a23ec9d5b9def87cae2769cfffb0b8a0487a5afd\" , \"socialSecurityNumberHash\": \"50288c11d79c1ba0671e6426ffddbb4954347ba4\" }, \"shippingAddress\": { \"addressee\": \"firstName + lastName\", \"coAddress\": \"coAddress\", \"streetAddress\": \"streetAddress\", \"zipCode\": \"zipCode\", \"city\": \"city\", \"countryCode\": \"countryCode\" }, \"device\": { \"detectionAccuracy\": 48, \"ipAddress\": \"127.0.0.1\", \"userAgent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36 Edg/97.0.1072.62\", \"deviceType\": \"Desktop\", \"hardwareFamily\": \"Emulator\", \"hardwareName\": \"Desktop|Emulator\", \"hardwareVendor\": \"Unknown\", \"platformName\": \"Windows\", \"platformVendor\": \"Microsoft\", \"platformVersion\": \"10.0\", \"browserName\": \"Edge (Chromium) for Windows\", \"browserVendor\": \"Microsoft\", \"browserVersion\": \"95.0\", \"browserJavaEnabled\": false } } } Show fields Hide fields Field Type Description paymentOrder object The payment order object. payer object The payer object. id string The relative URL and unique identifier of the paymentorder resource . Please read about URL Usage to understand how this and other URLs should be used in your solution. reference string The reference to the payer. In checkout, this will be the consumerReference. name string The name of the payer. email string The email address of the payer. msisdn string The msisdn of the payer. gender string The gender of the payer. birthYear string The birth year of the payer. hashedFields object The hashedFields object, containing hashed versions of the payer’s email, msisdn and if present, Social Security Number. emailHash string A hashed version of the payer’s email. msisdnHash string A hashed version of the payer’s email. socialSecurityNumberHash string A hashed version of the payer’s social security number. shippingAddress object The shipping address object related to the payer. addressee string First and last name of the addressee – the receiver of the shipped goods. coAddress string Payer’s c/o address, if applicable. streetAddress string Payer’s street address. Maximum 50 characters long. coAddress string Payer’s c/o address, if applicable. zipCode string Payer’s zip code. city string Payer’s city of residence. countryCode string Country code for country of residence, e.g. SE, NO, or FI. device object The device detection object. detectionAccuracy string Indicates the accuracy of the device detection on a scale from 0 to 100. ipAddress string The IP address of the payer’s device. userAgent string The user agent of the payer. Should typically be set to the value of the User-Agent header sent by the payer’s web browser. deviceType string The type of device used by the payer. hardwareFamily string The type of hardware used by the payer. hardwareName string The name of the payer’s hardware. hardwareVendor string The vendor of the payer’s hardware. platformName string Name of the operating system used on the payer’s device. platformVendor string Vendor of the operating system used on the payer’s device. platformVersion string Version of the operating system used on the payer’s device. browserName string Name of the browser used on the payer’s device. browserVendor string Vendor of the browser used on the payer’s device. browserVersion string Version of the browser used on the payer’s device. browserJavaEnabled bool Indicates if the browser has Java enabled. Either true or false. Reversed The payment order response with status equal to Reversed, and the reversed resource expanded. Please note that the main code example is of a card reversal. Apart from the id and number fields, the output will be inherited from the corresponding Paid transaction. As several Reversed transactions can exist on a single payment, the number and payerReference will be from the latest Reversed. We have included reversal resources of the remaining payment methods below the main code example. Resource examples where details are empty indicate that no details are available. The wallets Apple Pay and Vipps do not return maskedPan. Please note that while MobilePay does return this field, the value present is actually a networkToken, which represents the PAN, but is not a PAN in itself. Request 1 2 3 4 GET /psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/reversed HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.x Card Reversed Resource Card Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x api-supported-versions: 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 { \"paymentOrder\": \"/psp/paymentorders/5adc265f-f87f-4313-577e-08d3dca1a26c\", \"reversed\": { \"id\": \"/psp/paymentorders/5adc265f-f87f-4313-577e-08d3dca1a26c/reversed\", \"instrument\": \"Creditcard\", \"number\": 1234567890, \"payeeReference\": \"CD123\", \"orderReference\": \"AB1234\", \"transactionType\": \"Authorization\", \"amount\": 1500, \"submittedAmount\": 1500, \"feeAmount\": 0, \"discountAmount\": 0, \"tokens\": [ { \"type\": \"payment\", \"token\": \"12345678-1234-1234-1234-1234567890AB\", \"name\": \"4925xxxxxx000004\", \"expiryDate\" : \"mm/yyyy\" }, { \"type\": \"recurrence\", \"token\": \"87654321-4321-4321-4321-BA0987654321\", \"name\": \"4925xxxxxx000004\", \"expiryDate\" : \"mm/yyyy\" }, { \"type\": \"unscheduled\", \"token\": \"87654321-4321-4321-4321-BA0987654321\", \"name\": \"4925xxxxxx000004\", \"expiryDate\" : \"mm/yyyy\" }, { \"type\": \"transactionsOnFile\", \"token\": \"87654321-4321-4321-4321-BA0987654321\", \"name\": \"4925xxxxxx000004\", \"expiryDate\" : \"mm/yyyy\" } ], \"details\": { \"nonPaymentToken\": \"12345678-1234-1234-1234-1234567890AB\", \"externalNonPaymentToken\": \"1234567890\", \"paymentAccountReference\": \"43f6b6d2cbd30c36627ec02247259\", \"cardBrand\": \"Visa\", \"cardType\": \"Credit\", \"maskedPan\": \"492500******0004\", \"maskedDPan\": \"49250000******04\", \"expiryDate\": \"12/2022\", \"issuerAuthorizationApprovalCode\": \"L00302\", \"acquirerTransactionType\": \"STANDARD\", \"acquirerStan\": \"302\", \"acquirerTerminalId\": \"70101301389\", \"acquirerTransactionTime\": \"2022-06-15T14:12:55.029Z\", \"transactionInitiator\": \"CARDHOLDER\", \"bin\": \"492500\" } } Apple Pay Reversed Resource Please note that this is an abbreviated example. See the main Reversed example for more context. Apple Pay Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x api-supported-versions: 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 { \"paymentOrder\": \"/psp/paymentorders/5adc265f-f87f-4313-577e-08d3dca1a26c\", \"reversed\": { \"id\": \"/psp/paymentorders/1f8d409e-8d8c-4ba1-a3ab-08da8caf7918/reversed\", \"instrument\": \"ApplePay\", \"number\": 80100001190, \"payeeReference\": \"1662360210\", \"transactionType\": \"Authorization\", \"amount\": 1500, \"submittedAmount\": 1500, \"feeAmount\": 0, \"discountAmount\": 0, \"details\": { \"cardBrand\": \"Visa\", \"cardType\": \"Credit\", \"maskedDPan\": \"49250000******04\", \"expiryDate\": \"12/2023\", \"issuerAuthorizationApprovalCode\": \"L00392\", \"acquirerTransactionType\": \"WALLET\", \"acquirerStan\": \"392\", \"acquirerTerminalId\": \"80100001190\", \"acquirerTransactionTime\": \"2022-09-05T06:45:40.322Z\", \"transactionInitiator\": \"CARDHOLDER\", \"bin\": \"492500\" } } } Click to Pay Reversed Resource Please note that this is an abbreviated example. See the main Reversed example for more context. Click to Pay Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x api-supported-versions: 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 { \"paymentOrder\": \"/psp/paymentorders/5adc265f-f87f-4313-577e-08d3dca1a26c\", \"reversed\": { \"id\": \"/psp/paymentorders/1f8d409e-8d8c-4ba1-a3ab-08da8caf7918/reversed\", \"instrument\": \"ClickToPay\", \"number\": 80100001190, \"payeeReference\": \"1662360210\", \"amount\": 1500, \"details\": { \"nonPaymentToken\": \"12345678-1234-1234-1234-1234567890AB\", \"externalNonPaymentToken\": \"1234567890\", \"cardBrand\": \"Visa\", \"cardType\": \"Credit\", \"maskedPan\": \"492500******0004\", \"maskedDPan\": \"49250000******04\", \"expiryDate\": \"12/0023\", \"issuerAuthorizationApprovalCode\": \"L00392\", \"acquirerTransactionType\": \"WALLET\", \"acquirerStan\": \"392\", \"acquirerTerminalId\": \"80100001190\", \"acquirerTransactionTime\": \"2022-09-05T06:45:40.322Z\", \"transactionInitiator\": \"CARDHOLDER\" \"bin\": \"489537\" } } } Google Pay™ Reversed Resource Please note that this is an abbreviated example. See the main Reversed example for more context. Google Pay&trade; Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x api-supported-versions: 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 { \"paymentOrder\": \"/psp/paymentorders/5adc265f-f87f-4313-577e-08d3dca1a26c\", \"reversed\": { \"id\": \"/psp/paymentorders/1f8d409e-8d8c-4ba1-a3ab-08da8caf7918/reversed\", \"instrument\": \"GooglePay\", \"number\": 80100001190, \"payeeReference\": \"1662360210\", \"amount\": 1500, \"details\": { \"nonPaymentToken\": \"12345678-1234-1234-1234-1234567890AB\", \"externalNonPaymentToken\": \"1234567890\", \"cardBrand\": \"Visa\", \"cardType\": \"Credit\", \"maskedPan\": \"492500******0004\", \"maskedDPan\": \"49250000******04\", \"expiryDate\": \"12/0023\", \"issuerAuthorizationApprovalCode\": \"L00392\", \"acquirerTransactionType\": \"WALLET\", \"acquirerStan\": \"392\", \"acquirerTerminalId\": \"80100001190\", \"acquirerTransactionTime\": \"2022-09-05T06:45:40.322Z\", \"transactionInitiator\": \"CARDHOLDER\" \"bin\": \"489537\" } } } MobilePay Reversed Resource Please note that this is an abbreviated example. See the main Reversed example for more context. MobilePay Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x api-supported-versions: 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 { \"paymentOrder\": \"/psp/paymentorders/5adc265f-f87f-4313-577e-08d3dca1a26c\", \"reversed\": { \"id\": \"/psp/paymentorders/efdcbf77-9a62-426b-a3b1-08da8caf7918/reversed\", \"instrument\": \"MobilePay\", \"number\": 75100106637, \"payeeReference\": \"1662364327\", \"transactionType\": \"Authorization\", \"amount\": 1500, \"submittedAmount\": 1500, \"feeAmount\": 0, \"discountAmount\": 0, \"details\": { \"nonPaymentToken\": \"12345678-1234-1234-1234-1234567890AB\", \"externalNonPaymentToken\": \"1234567890\", \"cardBrand\": \"Visa\", \"maskedDPan\": \"48953700******04\", \"expiryDate\": \"12/2022\", \"issuerAuthorizationApprovalCode\": \"018117\", \"acquirerTransactionType\": \"MOBILEPAY\", \"acquirerStan\": \"53889\", \"acquirerTerminalId\": \"42\", \"acquirerTransactionTime\": \"2022-09-05T09:54:05Z\", \"bin\": \"489537\" } } } Vipps Reversed Resource Please note that this is an abbreviated example. See the main Reversed example for more context. Vipps Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x api-supported-versions: 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 { \"paymentOrder\": \"/psp/paymentorders/5adc265f-f87f-4313-577e-08d3dca1a26c\", \"reversed\": { \"id\": \"/psp/paymentorders/a463b145-3278-4aa0-c4db-08da8f1813a2/reversed\", \"instrument\": \"Vipps\", \"number\": 99463794, \"payeeReference\": \"1662366424\", \"transactionType\": \"Authorization\", \"amount\": 1500, \"submittedAmount\": 1500, \"feeAmount\": 0, \"discountAmount\": 0, \"details\": { \"nonPaymentToken\": \"12345678-1234-1234-1234-1234567890AB\", \"externalNonPaymentToken\": \"1234567890\", \"cardBrand\": \"Visa\", \"maskedDPan\": \"49250000******04\", \"acquirerTransactionType\": \"WALLET\", \"acquirerTerminalId\": \"99488282\", \"acquirerTransactionTime\": \"2022-09-05T09:54:05Z\", \"transactionInitiator\": \"CARDHOLDER\", \"bin\": \"489537\" } } } Swish Reversed Resource Please note that this is an abbreviated example. See the main Reversed example for more context. Swish Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x api-supported-versions: 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 { \"paymentOrder\": \"/psp/paymentorders/5adc265f-f87f-4313-577e-08d3dca1a26c\", \"reversed\": { \"id\": \"/psp/paymentorders/b0410cd0-61df-4548-a3ad-08da8caf7918/reversed\", \"instrument\": \"Swish\", \"number\": 74100413405, \"payeeReference\": \"1662360831\", \"transactionType\": \"Sale\", \"amount\": 1500, \"submittedAmount\": 1500, \"feeAmount\": 0, \"discountAmount\": 0, \"details\": { \"misidn\": \"+46739000001\" } } } Invoice Reversed Resource Please note that this is an abbreviated example. See the main Reversed example for more context. Invoice Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x api-supported-versions: 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 { \"paymentOrder\": \"/psp/paymentorders/5adc265f-f87f-4313-577e-08d3dca1a26c\", \"reversed\": { \"id\": \"/psp/paymentorders/05a356df-05e2-49e6-8858-08da8cb4d651/reversed\", \"instrument\": \"Invoice\", \"number\": 71100775379, \"payeeReference\": \"1662360980\", \"transactionType\": \"Authorization\", \"amount\": 1500, \"submittedAmount\": 1500, \"feeAmount\": 0, \"discountAmount\": 0, \"details\": {} } } Installment Account Reversed Resource Please note that this is an abbreviated example. See the main Reversed example for more context. Installment Account Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x api-supported-versions: 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 { \"paymentOrder\": \"/psp/paymentorders/5adc265f-f87f-4313-577e-08d3dca1a26c\", \"reversed\": { \"id\": \"/psp/paymentorders/39eef759-a619-4c91-885b-08da8cb4d651/reversed\", \"instrument\": \"CreditAccount\", \"number\": 77100038000, \"payeeReference\": \"1662361777\", \"transactionType\": \"Authorization\", \"amount\": 1500, \"submittedAmount\": 1500, \"feeAmount\": 0, \"discountAmount\": 0, \"details\": {} } } Trustly Reversed Resource Please note that this is an abbreviated example. See the main Reversed example for more context. Trustly Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x api-supported-versions: 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 { \"paymentOrder\": \"/psp/paymentorders/5adc265f-f87f-4313-577e-08d3dca1a26c\", \"reversed\": { \"id\": \"/psp/paymentorders/bf660901-93d0-4245-4e6b-08da8f165366/reversed\", \"instrument\": \"Trustly\", \"number\": 79100113652, \"payeeReference\": \"1662373401\", \"orderReference\": \"orderReference\", \"transactionType\": \"Sale\", \"amount\": 1500, \"submittedAmount\": 1500, \"feeAmount\": 0, \"discountAmount\": 0, \"details\": { \"trustlyOrderId\": 123456789 } } } Show fields Hide fields Field Type Description paymentOrder object The payment order object. reversed object The reversed object. id string The relative URL and unique identifier of the paymentorder resource . Please read about URL Usage to understand how this and other URLs should be used in your solution. instrument string The payment method used in the fulfillment of the payment. Do not use this field for code validation purposes. To determine if a capture is needed, we recommend using operations or the transactionType field. number integer The paymentorder number, useful when there’s need to reference the paymentorder in human communication. Not usable for programmatic identification of the paymentorder, where id should be used instead. payeeReference string A unique reference from the merchant system. Set per operation to ensure an exactly-once delivery of a transactional operation. Length and content validation depends on whether the transaction.number or the payeeReference is sent to the acquirer. If Swedbank Pay handles the settlement, the transaction.number is sent and the payeeReference must be in the format of A-Za-z0-9 and string(30). If you handle the settlement, Swedbank Pay will send the payeeReference and it will be limited to the format of string(12). All characters must be digits. orderReference string(50) The order reference should reflect the order reference found in the merchant’s systems. transactionType string This will either be set to Authorization or Sale. Can be used to understand if there is a need for doing a capture on this payment order. Swedbank Pay recommends using the different operations to figure out if a capture is needed. amount integer The transaction amount (including VAT, if any) entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The amount displayed is the final amount the payer paid for their order, including any payment method specific discounts or fees. submittedAmount integer This field will display the initial payment order amount, not including any method specific discounts or fees. The final payment order amount will be displayed in the amount field. feeAmount integer If the payment method used had a unique fee, it will be displayed in this field. discountAmount integer If the payment method used had a unique discount, it will be displayed in this field. tokens integer A list of tokens connected to the payment. type string payment, recurrence, transactionOnFile or unscheduled. The different types of available tokens. token string The token guid. name string The name of the token. In the example, a masked version of a card number. expiryDate string The expiry date of the token. details integer Details connected to the payment. nonPaymentToken string The result of our own card tokenization. Activated in POS for the merchant or merchant group. externalNonPaymentToken string The result of an external tokenization. This value will vary depending on card types, acquirers, customers, etc. For Mass Transit merchants, transactions will be populated with the paymentAccountReference. paymentAccountReference string The result of an external tokenization. The value will vary depending on card types, acquirers, customers, etc. For Mass Transit merchants, the paymentAccountReference will also populate the externalNonPaymentToken field. cardType string Credit Card or Debit Card. Indicates the type of card used for the authorization. maskedPan string The masked PAN number of the card. maskedDPan string A masked version of a network token representing the card. It will only appear if the chosen payment method is tokenized and the card used is tokenized by Visa or MasterCard. expiryDate string The month and year of when the card expires. issuerAuthorizationApprovalCode string Payment reference code provided by the issuer. acquirerTransactionType string 3DSECURE or STANDARD. Indicates the transaction type of the acquirer. acquirerStan string The System Trace Audit Number assigned by the acquirer to uniquely identify the transaction. acquirerTerminalId string The ID of the acquirer terminal. acquirerTransactionTime string The ISO-8601 date and time of the acquirer transaction. transactionInitatior string The party which initiated the transaction. MERCHANT or CARDHOLDER. bin string The first six digits of the maskedPan. msisdn string The msisdn used in the purchase. Only available when paid with Swish.",
    "tags": "",
    "url": "/checkout-v3/features/technical-reference/resource-sub-models/"
  },{
    "title": "Reversal",
    "text": "Reversal A reversal is an immediate financial correction on a successful transaction that was just made. The reversal request needs information from the successul response that wants to be reversed. A reversal cannot be made without first getting a successful response. sequenceDiagram participant POS participant Terminal POS-&gt;&gt;Terminal: Http POST PaymentRequest Terminal-&gt;&gt;POS: rsp 200 PaymentResponse Success POS-&gt;&gt;Terminal: Http POST ReversalRequest Terminal-&gt;&gt;POS: rsp 200 ReversalResponse Success note over POS,Terminal: But fails if payment response was not approved POS-&gt;&gt;Terminal: Http POST PaymentRequest Terminal-&gt;&gt;POS: rsp 200 PaymentResponse Failure POS-&gt;&gt;Terminal: Http POST ReversalRequest Terminal-&gt;&gt;POS: rsp 200 ReversalResponse Failure sample ReversalRequest message 1 2 3 4 5 6 7 8 &lt;SaleToPOIRequest&gt; &lt;MessageHeader ProtocolVersion=\"3.1\" MessageClass=\"Service\" MessageCategory=\"Reversal\" MessageType=\"Request\" ServiceID=\"7\" SaleID=\"1\" POIID=\"A-POIID\"/&gt; &lt;ReversalRequest ReversalReason=\"MerchantCancel\"&gt; &lt;OriginalPOITransaction SaleID=\"1\" POIID=\"A-POIID\"&gt; &lt;POITransactionID TransactionID=\"8778880381\" TimeStamp=\"2023-10-04T14:25:08.647Z\"/&gt; &lt;/OriginalPOITransaction&gt; &lt;/ReversalRequest&gt; &lt;/SaleToPOIRequest&gt; :] Name Lev Attribute Description ReversalRequest 1 ReversalReason MerchantCancel when manually operation by POS operator, Malfunction if automatically made by software due to some problem. OriginalPOITransaction 2 SaleID SaleID used for transaction being reversed.     POIID POIID used for transaction being reversed. POITransactionID 3 TransactionID Copied form POITransactionID received in response for transaction being reversed.     TimeStamp Copied form POITransactionID received in response for transaction being reversed. Reversal Response A successful reversal response contains receipt information as a base64 encoded Json structure. Make sure to print the customer receipt information to give the customer. Sample ReversalResponse message 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 &lt;SaleToPOIResponse&gt; &lt;MessageHeader MessageClass=\"Service\" MessageCategory=\"Reversal\" MessageType=\"Response\" ServiceID=\"7\" SaleID=\"1\" POIID=\"A-POIID\"/&gt; &lt;ReversalResponse&gt; &lt;Response Result=\"Success\"/&gt; &lt;POIData&gt; &lt;POITransactionID TransactionID=\"8778880381\" TimeStamp=\"2023-10-04T14:25:08.647Z\"/&gt; &lt;/POIData&gt; &lt;PaymentReceipt DocumentQualifier=\"CustomerReceipt\"&gt; &lt;OutputContent OutputFormat=\"Text\"&gt; &lt;OutputText&gt;eyJDYXJkaG9sZGVyIjp7Ik1hbmRhdG9yeSI6eyJBY3F1aXJlciI6eyJDYXJkQWNjZXB0b3JOdW1iZXIiOiIxMDAyMDAwMSIsIlRlcm1pbmFsSUQiOiI4Nzc4ODgifSwiQ2FyZEFjY2VwdG9yIjp7IkFkZHJlc3MxIjoiSMOkbGxlc2vDpXJhbiAyOSIsIkJhbmtBZ2VudE5hbWUiOiJiYW5reS1iYW5rIiwiTmFtZSI6IlRlc3Qgc2hvcCIsIk9yZ2FuaXNhdGlvbk51bWJlciI6IjU1NjU2NzEtNjE2NSIsIlBvc3RaaXBDb2RlIjoiNTA1MCIsIlRvd25DaXR5IjoibWVyY2hhbnQtQmFzZTI0LUNpdHkifSwiQ2FyZERldGFpbHMiOnsiQXBwbGljYXRpb25JZGVudGlmaWVyIjoiQTAwMDAwMDAwNDEwMTAiLCJDYXJkU2NoZW1lTmFtZSI6eyJBcHBsaWNhdGlvbkxhYmVsIjoiTWFzdGVyY2FyZCJ9LCJQcmltYXJ5QWNjb3VudE51bWJlciI6IioqKioqKioqKioqKjk2NTkiLCJUZXJtaW5hbFZlcmlmaWNhdGlvblJlc3VsdCI6IjAwMDAwMDgwMDEiLCJUcmFuc2FjdGlvblN0YXR1c0luZm9ybWF0aW9uIjoiMDAwMCJ9LCJPdXRjb21lIjp7IkFwcHJvdmFsQ29kZSI6Ijc0MTU5MSIsIkF1dGhvcmlzYXRpb25SZXNwb25kZXIiOiIzIiwiQXV0aG9yaXNhdGlvblJlc3BvbnNlQ29kZSI6IjAwIiwiRGViaXRTdGF0dXMiOiI5MSJ9LCJQYXltZW50Ijp7IkF1dGhvcmlzYXRpb25DaGFubmVsIjoiMSIsIkNhcmRob2xkZXJWZXJpZmljYXRpb25NZXRob2QiOiIvIiwiQ3VycmVuY3kiOiJTRUsiLCJGaW5hbmNpYWxJbnN0aXR1dGlvbiI6IlNXRSIsIlBheW1lbnRBbW91bnQiOiI4OSwwMCIsIlJlY2VpcHROdW1iZXIiOiI4Nzc4ODgwMzgxIiwiU2lnbmF0dXJlQmxvY2siOmZhbHNlLCJUb3RhbEFtb3VudCI6Ijg5LDAwIiwiVHJhbnNhY3Rpb25Tb3VyY2UiOiJLIiwiVHJhbnNhY3Rpb25UeXBlIjoiMDAifSwiVGltZVN0YW1wIjp7IkRhdGVPZlBheW1lbnQiOiIyMDIzLTEwLTA0IiwiVGltZU9mUGF5bWVudCI6IjE2OjI1In19LCJPcHRpb25hbCI6eyJDYXJkQWNjZXB0b3IiOnsiQ291bnRyeU5hbWUiOiI3NTIiLCJQaG9uZU51bWJlciI6Iis0Njg0MDUxMDAwIn0sIkNhcmREZXRhaWxzIjp7IkNhcmRTY2hlbWVOYW1lIjp7IkFwcGxpY2F0aW9uTGFiZWwiOiJNYXN0ZXJjYXJkIn19LCJQYXltZW50Ijp7IlJlZmVyZW5jZSI6IjE2MjUwODMifSwiUmVjZWlwdFN0cmluZyI6WyJUZXN0IHNob3AiLCJIw6RsbGVza8OlcmFuIDI5IiwiNTA1MCBtZXJjaGFudC1CYXNlMjQtQ2l0eSIsIuKYjiArNDYgOCA0MDUgMTAgMDAiLCJPcmcgbnI6IFNFIDU1NjU2NzEtNjE2NSIsIjIwMjMtMTAtMDQgMTY6MjUiLCIiLCJNSUQvVElEOiAxMDAyMDAwMS84Nzc4ODgiLCIiLCJNYXN0ZXJjYXJkIiwiQ29udGFjdGxlc3MiLCIqKioqKioqKioqKio5NjU5IiwiIiwiSy8xIDMgMDAgU1dFIiwiQUlEOiBBMDAwMDAwMDA0MTAxMCIsIlRWUjogMDAwMDAwODAwMSIsIlRTSTogMDAwMCIsIlJSTjogODc3ODg4MDM4MSIsIkF1dGggY29kZTogNzQxNTkxIiwiQVJDOiAwMCIsIiIsIkvDllA6ICAgICAgICAgODksMDAgU0VLIiwiTWFrdWxlcmluZyIsIiIsIiIsIiIsIktvcnRpbm5laGF2YXJlbnMga3ZpdHRvIl19fX0=&lt;/OutputText&gt; &lt;/OutputContent&gt; &lt;/PaymentReceipt&gt; &lt;PaymentReceipt DocumentQualifier=\"CashierReceipt\"&gt; &lt;OutputContent OutputFormat=\"Text\"&gt; &lt;OutputText&gt;eyJNZXJjaGFudCI6eyJNYW5kYXRvcnkiOnsiQWNxdWlyZXIiOnsiQ2FyZEFjY2VwdG9yTnVtYmVyIjoiMTAwMjAwMDEiLCJUZXJtaW5hbElEIjoiODc3ODg4In0sIkNhcmRBY2NlcHRvciI6eyJBZGRyZXNzMSI6IkjDpGxsZXNrw6VyYW4gMjkiLCJCYW5rQWdlbnROYW1lIjoiYmFua3ktYmFuayIsIk5hbWUiOiJUZXN0IHNob3AiLCJPcmdhbmlzYXRpb25OdW1iZXIiOiI1NTY1NjcxLTYxNjUiLCJQb3N0WmlwQ29kZSI6IjUwNTAiLCJUb3duQ2l0eSI6Im1lcmNoYW50LUJhc2UyNC1DaXR5In0sIkNhcmREZXRhaWxzIjp7IkFwcGxpY2F0aW9uSWRlbnRpZmllciI6IkEwMDAwMDAwMDQxMDEwIiwiQ2FyZFNjaGVtZU5hbWUiOnsiQXBwbGljYXRpb25MYWJlbCI6Ik1hc3RlcmNhcmQifSwiUHJpbWFyeUFjY291bnROdW1iZXIiOiI1MTY4MTUqKioqKio5NjU5IiwiVGVybWluYWxWZXJpZmljYXRpb25SZXN1bHQiOiIwMDAwMDA4MDAxIiwiVHJhbnNhY3Rpb25TdGF0dXNJbmZvcm1hdGlvbiI6IjAwMDAifSwiT3V0Y29tZSI6eyJBcHByb3ZhbENvZGUiOiI3NDE1OTEiLCJBdXRob3Jpc2F0aW9uUmVzcG9uZGVyIjoiMyIsIkF1dGhvcmlzYXRpb25SZXNwb25zZUNvZGUiOiIwMCIsIkRlYml0U3RhdHVzIjoiOTEifSwiUGF5bWVudCI6eyJBdXRob3Jpc2F0aW9uQ2hhbm5lbCI6IjEiLCJDYXJkaG9sZGVyVmVyaWZpY2F0aW9uTWV0aG9kIjoiLyIsIkN1cnJlbmN5IjoiU0VLIiwiRmluYW5jaWFsSW5zdGl0dXRpb24iOiJTV0UiLCJQYXltZW50QW1vdW50IjoiODksMDAiLCJSZWNlaXB0TnVtYmVyIjoiODc3ODg4MDM4MSIsIlNpZ25hdHVyZUJsb2NrIjpmYWxzZSwiVG90YWxBbW91bnQiOiI4OSwwMCIsIlRyYW5zYWN0aW9uU291cmNlIjoiSyIsIlRyYW5zYWN0aW9uVHlwZSI6IjAwIn0sIlRpbWVTdGFtcCI6eyJEYXRlT2ZQYXltZW50IjoiMjAyMy0xMC0wNCIsIlRpbWVPZlBheW1lbnQiOiIxNjoyNSJ9fSwiT3B0aW9uYWwiOnsiQ2FyZEFjY2VwdG9yIjp7IkNvdW50cnlOYW1lIjoiNzUyIiwiUGhvbmVOdW1iZXIiOiIrNDY4NDA1MTAwMCJ9LCJDYXJkRGV0YWlscyI6eyJDYXJkU2NoZW1lTmFtZSI6eyJBcHBsaWNhdGlvbkxhYmVsIjoiTWFzdGVyY2FyZCJ9fSwiUGF5bWVudCI6eyJSZWZlcmVuY2UiOiIxNjI1MDgzIn0sIlJlY2VpcHRTdHJpbmciOlsiVGVzdCBzaG9wIiwiSMOkbGxlc2vDpXJhbiAyOSIsIjUwNTAgbWVyY2hhbnQtQmFzZTI0LUNpdHkiLCLimI4gKzQ2IDggNDA1IDEwIDAwIiwiT3JnIG5yOiBTRSA1NTY1NjcxLTYxNjUiLCIyMDIzLTEwLTA0IDE2OjI1IiwiIiwiTUlEL1RJRDogMTAwMjAwMDEvODc3ODg4IiwiIiwiTWFzdGVyY2FyZCIsIkNvbnRhY3RsZXNzIiwiNTE2ODE1KioqKioqOTY1OSIsIiIsIksvMSAzIDAwIFNXRSIsIkFJRDogQTAwMDAwMDAwNDEwMTAiLCJUVlI6IDAwMDAwMDgwMDEiLCJUU0k6IDAwMDAiLCJSUk46IDg3Nzg4ODAzODEiLCJBdXRoIGNvZGU6IDc0MTU5MSIsIkFSQzogMDAiLCIiLCJLw5ZQOiAgICAgICAgIDg5LDAwIFNFSyIsIk1ha3VsZXJpbmciLCIiLCIiLCIiLCJGw7Zyc8OkbGphcmVucyBrdml0dG8iXX19fQ==&lt;/OutputText&gt; &lt;/OutputContent&gt; &lt;/PaymentReceipt&gt; &lt;/ReversalResponse&gt; &lt;/SaleToPOIResponse&gt; The Json struct of customer receipt 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 { \"Cardholder\": { \"Mandatory\": { \"Acquirer\": { \"CardAcceptorNumber\": \"10020001\", \"TerminalID\": \"877888\" }, \"CardAcceptor\": { \"Address1\": \"Hälleskåran 29\", \"BankAgentName\": \"banky-bank\", \"Name\": \"Test shop\", \"OrganisationNumber\": \"5565671-6165\", \"PostZipCode\": \"5050\", \"TownCity\": \"merchant-Base24-City\" }, \"CardDetails\": { \"ApplicationIdentifier\": \"A0000000041010\", \"CardSchemeName\": { \"ApplicationLabel\": \"Mastercard\" }, \"PrimaryAccountNumber\": \"************9659\", \"TerminalVerificationResult\": \"0000008001\", \"TransactionStatusInformation\": \"0000\" }, \"Outcome\": { \"ApprovalCode\": \"741591\", \"AuthorisationResponder\": \"3\", \"AuthorisationResponseCode\": \"00\", \"DebitStatus\": \"91\" }, \"Payment\": { \"AuthorisationChannel\": \"1\", \"CardholderVerificationMethod\": \"/\", \"Currency\": \"SEK\", \"FinancialInstitution\": \"SWE\", \"PaymentAmount\": \"89,00\", \"ReceiptNumber\": \"8778880381\", \"SignatureBlock\": false, \"TotalAmount\": \"89,00\", \"TransactionSource\": \"K\", \"TransactionType\": \"00\" }, \"TimeStamp\": { \"DateOfPayment\": \"2023-10-04\", \"TimeOfPayment\": \"16:25\" } }, \"Optional\": { \"CardAcceptor\": { \"CountryName\": \"752\", \"PhoneNumber\": \"+4684051000\" }, \"CardDetails\": { \"CardSchemeName\": { \"ApplicationLabel\": \"Mastercard\" } }, \"Payment\": { \"Reference\": \"1625083\" }, \"ReceiptString\": [ \"Test shop\", \"Hälleskåran 29\", \"5050 merchant-Base24-City\", \"☎ +46 8 405 10 00\", \"Org nr: SE 5565671-6165\", \"2023-10-04 16:25\", \"\", \"MID/TID: 10020001/877888\", \"\", \"Mastercard\", \"Contactless\", \"************9659\", \"\", \"K/1 3 00 SWE\", \"AID: A0000000041010\", \"TVR: 0000008001\", \"TSI: 0000\", \"RRN: 8778880381\", \"Auth code: 741591\", \"ARC: 00\", \"\", \"KÖP: 89,00 SEK\", \"Makulering\", \"\", \"\", \"\", \"Kortinnehavarens kvitto\" ] } } } Back to PaymentResponse",
    "tags": "",
    "url": "/pax-terminal/Nexo-Retailer/Quick-guide/reversal/"
  },{
    "title": "Reversal",
    "text": "Reversal This transaction is used when a Capture or Sale payment needs to be reversed. Please note that you have a maximum of 5 consecutive failed attempts at a reversal. The payment will be locked after this, and you need to contact us for another attempt. If the full amount of a v3.1 sale transaction or a captured transaction is reversed, The transaction will now have status Reversed instead of Paid (which is used in earlier versions). Create Reversal Transaction If we want to reverse a previously captured amount, we need to perform reversal against the accompanying href returned in the operations list. Reversal Request Request Copy json to clipboard 1 2 3 4 POST /psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/reversals HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.0/2.0 // Version optional for 3.0 and 2.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 { \"transaction\": { \"description\": \"Reversal of captured transaction\", \"amount\": 1500, \"vatAmount\": 375, \"payeeReference\": \"ABC123\", \"receiptReference\": \"ABC122\", \"orderItems\": [ { \"reference\": \"P1\", \"name\": \"Product1\", \"type\": \"PRODUCT\", \"class\": \"ProductGroup1\", \"itemUrl\": \"https://example.com/products/123\", \"imageUrl\": \"https://example.com/product123.jpg\", \"description\": \"Product 1 description\", \"discountDescription\": \"Volume discount\", \"quantity\": 4, \"quantityUnit\": \"pcs\", \"unitPrice\": 300, \"discountPrice\": 200, \"vatPercent\": 2500, \"amount\": 1000, \"vatAmount\": 250 }, { \"reference\": \"P2\", \"name\": \"Product2\", \"type\": \"PRODUCT\", \"class\": \"ProductGroup1\", \"description\": \"Product 2 description\", \"quantity\": 1, \"quantityUnit\": \"pcs\", \"unitPrice\": 500, \"vatPercent\": 2500, \"amount\": 500, \"vatAmount\": 125 } ] } } Show fields Hide fields Required Field Type Description check transaction object The transaction object. check amount integer The transaction amount (including VAT, if any) entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The amount displayed is the final amount the payer paid for their order, including any payment method specific discounts or fees. check vatAmount integer The payment’s VAT (Value Added Tax) amount, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The vatAmount entered will not affect the amount shown on the payment page, which only shows the total amount. This field is used to specify how much of the total amount the VAT will be. Set to 0 (zero) if there is no VAT amount charged. check payeeReference string A unique reference from the merchant system. Set per operation to ensure an exactly-once delivery of a transactional operation. Length and content validation depends on whether the transaction.number or the payeeReference is sent to the acquirer. If Swedbank Pay handles the settlement, the transaction.number is sent and the payeeReference must be in the format of A-Za-z0-9 and string(30). If you handle the settlement, Swedbank Pay will send the payeeReference and it will be limited to the format of string(12). All characters must be digits. In Invoice Payments payeeReference is used as an invoice/receipt number, if the receiptReference is not defined.   receiptReference string(30) A unique reference to the transaction, provided by the merchant. Can be used as an invoice or receipt number as a supplement to payeeReference. check description string Textual description of why the transaction is reversed. check orderItems array The array of items being purchased with the order. Note that authorization orderItems will not be printed on invoices, so lines meant for print must be added in the Capture request. The authorization orderItems will, however, be used in the Merchant Portal when captures or reversals are performed, and might be shown other places later. It is required to use this field to be able to send Capture orderItems. Capture requests should only contain items meant to be captured from the order. check reference string A reference that identifies the order item. check name string The name of the order item. check type enum PRODUCT, SERVICE, SHIPPING_FEE, PAYMENT_FEE, DISCOUNT, VALUE_CODE or OTHER. The type of the order item. check class string The classification of the order item. Can be used for assigning the order item to a specific product category, such as MobilePhone. Note that class cannot contain spaces and must follow the regex pattern [\\w-]*. Swedbank Pay may use this field for statistics.   itemUrl string The URL to a page that can display the purchased item, product or similar.   imageUrl string The URL to an image of the order item.   description string The human readable description of the order item.   discountDescription string The human readable description of the possible discount. check quantity number The 4 decimal precision quantity of order items being purchased. check quantityUnit string The unit of the quantity, such as pcs, grams, or similar. This is used for your own book keeping. check unitPrice integer The price per unit of order item, including VAT.   discountPrice integer If the order item is purchased at a discounted price. This field should contain that price, including VAT. check vatPercent integer The percent value of the VAT multiplied by 100, so 25% becomes 2500. check amount integer The total amount including VAT to be paid for the specified quantity of this order item, in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 SEK and 5000 equals 50.00 SEK. check vatAmount integer The total amount of VAT to be paid for the specified quantity of this order item, in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 SEK and 5000 equals 50.00 SEK. Reversal Response If the reversal request succeeds, the response should be similar to the example below: Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.0/2.0 api-supported-versions: 3.0/2.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 { \"payment\": \"/psp/creditcard/payments/09ccd29a-7c4f-4752-9396-12100cbfecce\", \"reversal\": { \"id\": \"/psp/creditcard/payments/09ccd29a-7c4f-4752-9396-12100cbfecce/reversals/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"transaction\": { \"id\": \"/psp/pcreditcard/payments/09ccd29a-7c4f-4752-9396-12100cbfecce/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2022-01-26T14:00:03.4725904Z\", \"updated\": \"2022-01-26T14:00:04.3851302Z\", \"type\": \"Reversal\", \"state\": \"Completed\", \"number\": 71100730898, \"amount\": 1500, \"vatAmount\": 375, \"description\": \"Reversing the capture amount\", \"payeeReference\": \"ABC123\", \"receiptReference\": \"ABC122\" \"isOperational\": false, \"reconciliationNumber\": 738180, \"operations\": [] } } } Show fields Hide fields Property Type Description payment string The relative URL of the payment this reversal transaction belongs to. reversals object The reversal object, containing information about the reversal transaction. id string The relative URL of the reversal transaction. transaction object The object representation of the generic transaction resource, containing information about the current transaction. id string The relative URL of the current transaction resource. created string The ISO-8601 date and time of when the transaction was created. updated string The ISO-8601 date and time of when the transaction was updated. type string Indicates the transaction type. state string Indicates the state of the transaction, usually initialized, completed or failed. If a partial has been done and further transactions are possible, the state will be awaitingActivity. number integer The transaction number, useful when there’s need to reference the transaction in human communication. Not usable for programmatic identification of the transaction, where id should be used instead. amount integer The transaction amount (including VAT, if any) entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The amount displayed is the final amount the payer paid for their order, including any payment method specific discounts or fees. vatAmount integer The payment’s VAT (Value Added Tax) amount, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The vatAmount entered will not affect the amount shown on the payment page, which only shows the total amount. This field is used to specify how much of the total amount the VAT will be. Set to 0 (zero) if there is no VAT amount charged. description string A human readable description of maximum 40 characters of the transaction. payeeReference string A unique reference from the merchant system. Set per operation to ensure an exactly-once delivery of a transactional operation. Length and content validation depends on whether the transaction.number or the payeeReference is sent to the acquirer. If Swedbank Pay handles the settlement, the transaction.number is sent and the payeeReference must be in the format of A-Za-z0-9 and string(30). If you handle the settlement, Swedbank Pay will send the payeeReference and it will be limited to the format of string(12). All characters must be digits. In Invoice Payments payeeReference is used as an invoice/receipt number, if the receiptReference is not defined. receiptReference string(30) A unique reference to the transaction, provided by the merchant. Can be used as an invoice or receipt number as a supplement to payeeReference. isOperational boolean true if the transaction is operational; otherwise false . reconciliationNumber string The number of the reconciliation batch file where the transaction can be found. operations array The array of operations that are possible to perform on the payment order in its current state. Reversal Request v3.1 Request Copy json to clipboard 1 2 3 4 POST /psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/reversals HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.1 1 2 3 4 5 6 7 8 { \"transaction\": { \"description\": \"Reversal of captured transaction\", \"amount\": 1500, \"vatAmount\": 375, \"payeeReference\": \"ABC123\" } } Show fields Hide fields Required Field Type Description check transaction object The transaction object. check amount integer The transaction amount (including VAT, if any) entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The amount displayed is the final amount the payer paid for their order, including any payment method specific discounts or fees. check vatAmount integer The payment’s VAT (Value Added Tax) amount, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The vatAmount entered will not affect the amount shown on the payment page, which only shows the total amount. This field is used to specify how much of the total amount the VAT will be. Set to 0 (zero) if there is no VAT amount charged. check payeeReference string A unique reference from the merchant system. Set per operation to ensure an exactly-once delivery of a transactional operation. Length and content validation depends on whether the transaction.number or the payeeReference is sent to the acquirer. If Swedbank Pay handles the settlement, the transaction.number is sent and the payeeReference must be in the format of A-Za-z0-9 and string(30). If you handle the settlement, Swedbank Pay will send the payeeReference and it will be limited to the format of string(12). All characters must be digits. In Invoice Payments payeeReference is used as an invoice/receipt number, if the receiptReference is not defined.   receiptReference string(30) A unique reference to the transaction, provided by the merchant. Can be used as an invoice or receipt number as a supplement to payeeReference. check description string Textual description of why the transaction is reversed. check orderItems array The array of items being purchased with the order. Note that authorization orderItems will not be printed on invoices, so lines meant for print must be added in the Capture request. The authorization orderItems will, however, be used in the Merchant Portal when captures or reversals are performed, and might be shown other places later. It is required to use this field to be able to send Capture orderItems. Capture requests should only contain items meant to be captured from the order. check reference string A reference that identifies the order item. check name string The name of the order item. check type enum PRODUCT, SERVICE, SHIPPING_FEE, PAYMENT_FEE, DISCOUNT, VALUE_CODE or OTHER. The type of the order item. check class string The classification of the order item. Can be used for assigning the order item to a specific product category, such as MobilePhone. Note that class cannot contain spaces and must follow the regex pattern [\\w-]*. Swedbank Pay may use this field for statistics.   itemUrl string The URL to a page that can display the purchased item, product or similar.   imageUrl string The URL to an image of the order item.   description string The human readable description of the order item.   discountDescription string The human readable description of the possible discount. check quantity number The 4 decimal precision quantity of order items being purchased. check quantityUnit string The unit of the quantity, such as pcs, grams, or similar. This is used for your own book keeping. check unitPrice integer The price per unit of order item, including VAT.   discountPrice integer If the order item is purchased at a discounted price. This field should contain that price, including VAT. check vatPercent integer The percent value of the VAT multiplied by 100, so 25% becomes 2500. check amount integer The total amount including VAT to be paid for the specified quantity of this order item, in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 SEK and 5000 equals 50.00 SEK. check vatAmount integer The total amount of VAT to be paid for the specified quantity of this order item, in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 SEK and 5000 equals 50.00 SEK. Reversal Response v3.1 If the reversal request succeeds, the response should be similar to the example below: Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.1 api-supported-versions: 3.1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 { \"paymentOrder\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d\", \"created\": \"2020-03-03T07:19:27.5636519Z\", \"updated\": \"2020-03-03T07:21:00.5605905Z\", \"operation\": \"Purchase\", \"status\": \"Reversed\", \"currency\": \"SEK\", \"amount\": 1500, \"vatAmount\": 375, \"remainingCaptureAmount\": 0, // Only present after a partial reversal \"remainingReversalAmount\": 0, // Only present after a partial reversal \"description\": \"Test Purchase\", \"initiatingSystemUserAgent\": \"&lt;should be set by the system calling POST:/psp/paymentorders&gt;\", \"language\": \"sv-SE\", \"availableInstruments\": [ \"CreditCard\", \"Invoice-PayExFinancingSe\", \"Invoice-PayMonthlyInvoiceSe\", \"Swish\", \"CreditAccount\", \"Trustly\" ], \"implementation\": \"PaymentsOnly\", \"integration\": \"HostedView|Redirect\", \"instrumentMode\": true, \"guestMode\": true, \"orderItems\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/orderitems\" }, \"urls\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/urls\" }, \"payeeInfo\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/payeeInfo\" }, \"payer\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/payers\" }, \"history\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/history\" }, \"failed\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/failed\" }, \"aborted\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/aborted\" }, \"paid\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/paid\" }, \"cancelled\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/cancelled\" }, \"financialTransactions\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/financialtransactions\" }, \"failedAttempts\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/failedattempts\" }, \"postPurchaseFailedAttempts\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/postpurchasefailedattempts\" }, \"metadata\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/metadata\" } }, \"operations\": [ ] } Show fields Hide fields Property Type Description paymentOrder string The relative URL of the payment order this capture transaction belongs to. id string The relative URL of the created capture transaction. created string The ISO-8601 date and time of when the transaction was created. updated string The ISO-8601 date and time of when the transaction was updated. operation string Determines the initial operation, defining the type of payment order created. status string Initialized, Paid, Failed, Reversed Cancelled, or Aborted. Indicates the payment order’s current status. currency string The currency of the payment order. amount integer The transaction amount (including VAT, if any) entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The amount displayed is the final amount the payer paid for their order, including any payment method specific discounts or fees. vatAmount integer The payment’s VAT (Value Added Tax) amount, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The vatAmount entered will not affect the amount shown on the payment page, which only shows the total amount. This field is used to specify how much of the total amount the VAT will be. Set to 0 (zero) if there is no VAT amount charged. remainingCaptureAmount integer The remaining authorized amount that is still possible to capture. Only present after a partial reversal. remainingCancellationAmount integer The remaining authorized amount that is still possible to cancel. Only present after a partial reversal. remainingReversalAmount integer The remaining captured amount that is still available for reversal. This field will not appear in the initial response if the payment method used was Swish. It will first appear if and when you do a GET on the payment. description string A textual description of the purchase. Maximum length is 40 characters. initiatingSystemUserAgent string The user agent of the HTTP client making the request, reflecting the value sent in the User-Agent header with the initial POST request which created the Payment Order. language string sv-SE, nb-NO, da-DK, en-US or fi-FI. availableInstruments string A list of payment methods available for this payment. implementation string The merchant’s Digital Payments implementation type. Enterprise or PaymentsOnly. We ask that you don’t build logic around this field’s response. It is mainly for information purposes, as the implementation types might be subject to name changes. If this should happen, updated information will be available in this table. integration string The merchant’s Digital Payments integration type. HostedView (Seamless View) or Redirect. This field will not be populated until the payer has opened the payment UI, and the client script has identified if Swedbank Pay or another URI is hosting the container with the payment iframe. We ask that you don’t build logic around this field’s response. It is mainly for information purposes. as the integration types might be subject to name changes, If this should happen, updated information will be available in this table. instrumentMode bool Set to true or false. Indicates if the payment is initialized with only one payment methods available. guestMode bool Set to true or false. Indicates if the payer chose to pay as a guest or not. When using the Payments Only implementation, this is triggered by not including a payerReference in the original paymentOrder request. orderItems id The URL to the orderItems resource where information about the order items can be retrieved. urls id The URL to the urls resource where all URLs related to the payment order can be retrieved. payeeInfo id The URL to the payeeInfo resource where information related to the payee can be retrieved. payer id The URL to the payer resource where information about the payer can be retrieved. history id The URL to the history resource where information about the payment’s history can be retrieved. failed id The URL to the failed resource where information about the failed transactions can be retrieved. aborted id The URL to the aborted resource where information about the aborted transactions can be retrieved. paid id The URL to the paid resource where information about the paid transactions can be retrieved. cancelled id The URL to the cancelled resource where information about the cancelled transactions can be retrieved. financialTransactions id The URL to the financialTransactions resource where information about the financial transactions can be retrieved. failedAttempts id The URL to the failedAttempts resource where information about the failed attempts can be retrieved. postPurchaseFailedAttempts id The URL to the postPurchaseFailedAttempts resource where information about the failed capture, cancel or reversal attempts can be retrieved. metadata id The URL to the metadata resource where information about the metadata can be retrieved. operations array The array of operations that are possible to perform on the payment order in its current state. sequenceDiagram participant SwedbankPay as Swedbank Pay Merchant-&gt;&gt;SwedbankPay: POST &lt; reversal&gt; activate Merchant activate SwedbankPay SwedbankPay--&gt;&gt;Merchant: transaction resource deactivate SwedbankPay deactivate Merchant",
    "tags": "",
    "url": "/checkout-v3/features/payment-operations/reversal/"
  },{
    "title": "ReverseLast",
    "text": "Method Signatures void ReversLast() Task&lt;ReversalRequestResult&gt; ReverseLastAsync() Description ReverseLast / ReverseLastAsync will reverse the last transaction made if it was approved. Returns A ReversalRequestResult 1 2 3 4 5 6 7 8 9 10 11 12 13 14 public class NexoRequestResult { public virtual string ResponseContent { get; set; } public NexoResponseResult ResponseResult { get; set; } public string ErrorCondition { get; set; } public string ResponseText { get; set; } } public class ReversalRequestResult : NexoRequestResult { public JObject CustomerReceiptData { get; set; } public string FormattedReceipt { get; set; } public string ReceiptBlob { get; set; } public override string ResponseContent { get; set; } }",
    "tags": "",
    "url": "/pax-terminal/NET/SwpTrmLib/Methods/otheravailable/reversalastasync/"
  },{
    "title": "",
    "text": "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 namespace SwpTrmLib.Nexo { public class SaleItem { public enum UnitsOfMeasure { None, Litre, Centilitre, Kilometre, Kilogram, Gram, Metre, Centimetre, Other}; public UnitsOfMeasure UnitOfMeasure { get; set; } = UnitsOfMeasure.None; public string Quantity { get; set; } = string.Empty; public Decimal UnitPrice { get; set; } = Decimal.Zero; public string ProductLabel { get; set; } = string.Empty; public string AdditionalProductInfo { get; set; } = string.Empty; //Attributes public int ItemID { get; set; } = int.MinValue ; //digit strings public string ProductCode { get; set; } = string.Empty; public Decimal ItemAmount { get; set; } = Decimal.Zero; public SaleItem(); public XElement XML(); public override string ToString(); } } Type Name Description   UnitsOfMeasure UnitOfMeasures Litre or Kilogram Mandatory Decimal Quantity   Mandatory string ProductLabel Name of product Optional string AdditionalProductInfo   Optional int ItemID 0-n Mandatory string ProductCode Digits Mandatory Decimal ItemAmount Total product price Mandatory Functions       XElement XML Returns the nexo SaleItem element used internally Example creating a list of sale items for a purchase 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 ISwpTrmIf_1 PAX; . . . List&lt;SaleItem&gt; saleItems = new List&lt;SaleItem&gt;(); saleItems.Add(new SaleItem() { ItemID = 0, ItemAmount = (decimal)25.5, ProductCode = \"24601\", UnitOfMeasure = SaleItem.UnitsOfMeasure.Litre, Quantity = \"10\", UnitPrice = (decimal)2.55, ProductLabel = \"Stellar\", AdditionalProductInfo = \"The best there is\" }); saleItems.Add(new SaleItem() { ItemID = 1, ItemAmount = (decimal)29.5, ProductCode = \"2564\", Quantity = \"1\", UnitPrice = (decimal)29.5 }); PaymentRequestResult r = await PAX.Payment(new TransactionSetup(){ Amount = (decimal)55, SaleItems = saleItems });",
    "tags": "",
    "url": "/pax-terminal/NET/includes/saleitem/"
  },{
    "title": "Seamless View Events",
    "text": "Payment Menu Events During operation in the Payment Menu, several events can occur. They are described below. info Event Overrides: Adding an event handler to one of the following events overrides the default event handler, meaning your custom event handler will have to do what the default event handler did. If you don’t, the behavior of the event is going to be undefined. Just adding an event handler for logging purposes is therefore not possible, the event handler will have to perform some functionality similar to the event handler you are overriding. onAborted Triggered when the payer clicks the “Abort” link on the redirect page in Payment Menu. As the Seamless View payment menu doesn’t have a cancel button (present in the Redirect integration), you need to provide this button for the payer at your end. When the payer presses the cancel button, we recommend sending an API request aborting the payment so it can’t be completed at a later time. When we receive the request, an abort event will be raised the next time the UI fetches information from the server. Because of that, you should also refresh after aborting, as this will trigger the event. It will be raised with the following event argument object: onAborted event object Copy json to clipboard 1 2 3 4 5 { \"event\": \"OnAborted\", \"paymentOrder\": { \"id\": \"/psp/paymentorders/7e6cdfc3-1276-44e9-9992-7cf4419750e1\" }, \"redirectUrl\": \"https://example.com/cancelled\" } Field Type Description event string The name of the event raised. paymentOrder.id string The relative URL and unique identifier of the paymentOrder resource . Please read about URL Usage to understand how this and other URLs should be used in your solution. redirectUrl string The URL the user will be redirect to after a cancelled payment. onCheckoutLoaded Triggered when the payment menu is rendered after being opened. Subscribe to this event if you need total control over the height of Swedbank Pay’s payment frame. This is the initial height of the frame when loaded. If no callback method is set, no handling action will be done. It will be raised with the following event argument object: onCheckoutLoaded event object Copy json to clipboard 1 2 3 4 5 { \"event\": \"OnCheckoutLoaded\", \"paymentOrder\": { \"id\": \"/psp/paymentorders/7e6cdfc3-1276-44e9-9992-7cf4419750e1\" }, \"bodyHeight\": \"[clientHeight of iframe content]\" } Field Type Description event string The name of the event raised. paymentOrder.id string The relative URL and unique identifier of the paymentOrder resource . Please read about URL Usage to understand how this and other URLs should be used in your solution. bodyHeight string The height of the client’s iframe content. onCheckoutResized Triggered every time that a reconfiguration leads to resizing of the Checkout Seamless View. Subscribe to this event if you need total control over the height of Swedbank Pay’s payment frame. The payment methods require individual heights when rendering their content. This event triggers each time the iframe needs resizing during a payment. If no callback method is set, no handling action will be done. It will be raised with the following event argument object: onCheckoutResized event object Copy json to clipboard 1 2 3 4 5 { \"event\": \"OnCheckoutResized\", \"paymentOrder\": { \"id\": \"/psp/paymentorders/7e6cdfc3-1276-44e9-9992-7cf4419750e1\" }, \"bodyHeight\": \"[clientHeight of iframe content]\" } Field Type Description event string The name of the event raised. paymentOrder.id string The relative URL and unique identifier of the paymentOrder resource . Please read about URL Usage to understand how this and other URLs should be used in your solution. bodyHeight string The height of the client’s iframe content. onError Triggered during terminal errors or if the configuration fails validation. Subscribe to this event if you want some action to occur on your site when an error happens during the payment. If no callback method is set, no handling action will be done. It will be raised with the following event argument object: onError event object Copy json to clipboard 1 2 3 4 5 { \"event\": \"OnError\", \"paymentOrder\": { \"id\": \"/psp/paymentorders/7e6cdfc3-1276-44e9-9992-7cf4419750e1\" }, \"details\": \"English descriptive text of the error\" } Field Type Description event string The name of the event raised. paymentOrder.id string The relative URL and unique identifier of the paymentOrder resource . Please read about URL Usage to understand how this and other URLs should be used in your solution. details string A human readable and descriptive text of the error. onEventNotification Triggered whenever any other public event is called. It does not prevent their handling. Subscribe to this event in order to log actions that are happening in the payment flow at Swedbank Pay. onEventNotification is raised with the following event argument object: onEventNotification event object Copy json to clipboard 1 2 3 4 5 6 7 { \"event\": \"OnEventNotification\", \"paymentOrder\": { \"id\": \"/psp/paymentorders/7e6cdfc3-1276-44e9-9992-7cf4419750e1\" }, \"sourceEvent\": \"OnCheckoutLoaded | OnCheckoutResized | OnError | OnPayerIdentified | OnInstrumentSelected | OnPaid | OnAborted | OnOutOfViewRedirect | OnTermsOfServiceRequested | OnOutOfViewOpen\" } Field Type Description event string The name of the event raised. paymentOrder.id string The relative URL and unique identifier of the paymentOrder resource . Please read about URL Usage to understand how this and other URLs should be used in your solution. sourceEvent string A human readable and descriptive text with the event name. onInstrumentSelected Triggered when a user actively changes payment method in the Payment Menu. Subscribe to this event if actions, e.g. showing an information text, are required on your side if the payer changes payment method. If no callback method is set, no handling action will be done. It will be raised with the following event argument object: onInstrumentSelected event object Copy json to clipboard 1 2 3 4 5 { \"event\": \"OnInstrumentSelected\", \"paymentOrder\": { \"id\": \"/psp/paymentorders/7e6cdfc3-1276-44e9-9992-7cf4419750e1\" }, \"instrument\": \"creditcard | vipps | swish | invoice\", } Field Type Description event string The name of the event raised. paymentOrder.id string The relative URL and unique identifier of the paymentOrder resource . Please read about URL Usage to understand how this and other URLs should be used in your solution. instrument string Creditcard, vipps, swish, invoice. The payment method selected by the user. onOutOfViewOpen Triggered when another tab is opened in the browser, like the information page for onboarding of stored cards, or Swedbank Pay’s owner TOS. The event cannot be opened as a modal since the payer needs to see that this is a link on Swedbank Pay’s domain. Subscribe to this event if you do not want the default handling of these links. But e.g. want to redirect the payer to a new page, and not just another tab within the same browser. If no callback method is set, the url will be opened in a new tab. It will be raised with the following event argument object: onOutOfViewOpen event object Copy json to clipboard 1 2 3 4 5 { \"event\": \"OnOutOfViewOpen\", \"paymentOrder\": { \"id\": \"/psp/paymentorders/7e6cdfc3-1276-44e9-9992-7cf4419750e1\" }, \"openUrl\": \"https://example.com/external\" } Field Type Description event string The name of the event raised. paymentOrder.id string The relative URL and unique identifier of the paymentOrder resource . Please read about URL Usage to understand how this and other URLs should be used in your solution. openUrl string The external URL where the user will be redirected. onOutOfViewRedirect Triggered when a user is redirected to a separate web page, like 3-D Secure or BankID signing. Subscribe to this event if it’s not possible to redirect the payer directly from within Swedbank Pay’s payment frame. If no callback method is set, you will be redirected to the relevant url. It will be raised with the following event argument object: onOutOfViewRedirect event object Copy json to clipboard 1 2 3 4 5 { \"event\": \"OnOutOfViewRedirect\", \"paymentOrder\": { \"id\": \"/psp/paymentorders/7e6cdfc3-1276-44e9-9992-7cf4419750e1\" }, \"redirectUrl\": \"https://example.com/external\" } Field Type Description event string The name of the event raised. paymentOrder.id string The relative URL and unique identifier of the paymentOrder resource . Please read about URL Usage to understand how this and other URLs should be used in your solution. redirectUrl string The external URL where the user will be redirected. onPaid This event triggers when the payer successfully completes or cancels the payment. Subscribe to this event if actions are needed on your side other than the default handling of redirecting the payer to your completeUrl. Call GET on the paymentOrder to receive the actual payment status, and take appropriate actions according to it. It will be raised with the following event argument object: onPaid event object Copy json to clipboard 1 2 3 4 5 { \"event\": \"OnPaid\", \"paymentOrder\": { \"id\": \"/psp/paymentorders/7e6cdfc3-1276-44e9-9992-7cf4419750e1\" }, \"redirectUrl\": \"https://example.com/success\" } Field Type Description event string The name of the event raised. paymentOrder.id string The relative URL and unique identifier of the paymentOrder resource . Please read about URL Usage to understand how this and other URLs should be used in your solution. redirectUrl string The URL the user will be redirected to after completing the payment. onPaymentAttemptAborted This event mirrors onPaymentAborted from Checkout v2. Subscribe to it if you want to know when a user cancels their payment. The onPaymentAttemptAborted event is raised with the following event argument object: onPaymentAttemptAborted event object Copy json to clipboard 1 2 3 4 5 { \"event\": \"OnPaymentAttemptAborted\", \"paymentOrder\": { \"id\": \"/psp/paymentorders/7e6cdfc3-1276-44e9-9992-7cf4419750e1\" }, \"redirectUrl\": \"https://example.com/cancelled\" } Field Type Description event string The name of the event raised. paymentOrder.id string The relative URL and unique identifier of the paymentOrder resource . Please read about URL Usage to understand how this and other URLs should be used in your solution. redirectUrl string The URL the user will be redirected to after a cancelled payment. onPaymentAttemptFailed This event mirrors onPaymentTransactionFailed from Checkout v2. Subscribe to it if you want to know when a payment attempt fails, and further attempts can be made for the payment. An error message will appear in the payment UI, and the payer will be able to try again or choose another payment method. The onPaymentAttemptFailed event is raised with the following event argument object: onPaymentAttemptFailed event object Copy json to clipboard 1 2 3 4 5 { \"event\": \"OnPaymentAttemptFailed\", \"paymentOrder\": { \"id\": \"/psp/paymentorders/7e6cdfc3-1276-44e9-9992-7cf4419750e1\" }, \"details\": \"[HttpCode ProblemTitle]\" } Field Type Description event string The name of the event raised. paymentOrder.id string The relative URL and unique identifier of the paymentOrder resource . Please read about URL Usage to understand how this and other URLs should be used in your solution. details string A human readable and descriptive text of the error. onPaymentAttemptStarted This event mirrors onPaymentCreated from Checkout v2. Subscribe to it if you want to know when a payer has selected their payment method and actively attempts to perform a payment. The onPaymentAttemptStarted event is raised with the following event argument object: onPaymentAttemptStarted event object Copy json to clipboard 1 2 3 4 5 { \"event\": \"OnPaymentAttemptStarted\", \"paymentOrder\": { \"id\": \"/psp/paymentorders/7e6cdfc3-1276-44e9-9992-7cf4419750e1\" }, \"instrument\": \"creditcard\", } Field Type Description event string The name of the event raised. paymentOrder.id string The relative URL and unique identifier of the paymentOrder resource . Please read about URL Usage to understand how this and other URLs should be used in your solution. instrument string Creditcard, vipps, swish, invoice. The payment method selected when initiating the payment. onTermsOfServiceRequested Triggered when the user clicks on the “Display terms and conditions” link. Subscribe to this event if you don’t want the default handling of the termsOfServiceUrl. Swedbank Pay will open the termsOfServiceUrl in a new tab within the same browser by default. If no callback method is set, terms and conditions will be displayed in an overlay or a new tab. It will be raised with the following event argument object: onTermsOfServiceRequested event object Copy json to clipboard 1 2 3 4 5 { \"event\": \"OnTermsOfServiceRequested\", \"paymentOrder\": { \"id\": \"/psp/paymentorders/&lt;paymentorderId&gt;\"}, \"termsOfServiceUrl\": \"https://example.org/terms.html\" } Field Type Description event string The name of the event raised. paymentOrder.id string The relative URL and unique identifier of the paymentOrder resource . Please read about URL Usage to understand how this and other URLs should be used in your solution. termsOfServiceUrl string The URL containing Terms of Service and conditions.",
    "tags": "",
    "url": "/checkout-v3/features/technical-reference/seamless-view-events/"
  },{
    "title": "Seamless View",
    "text": "Display Seamless View Among the operations in the POST paymentOrders response, you will find the view-checkout. This is the one you need to display the purchase module. Response Copy json to clipboard 1 2 3 4 5 6 7 8 9 10 11 { \"paymentOrder\": { \"operations\": [ { \"method\": \"GET\", \"href\": \"https://ecom.externalintegration.payex.com/payment/core/js/px.payment.client.js?token=dd728a47e3ec7be442c98eafcfd9b0207377ce04c793407eb36d07faa69a32df&amp;culture=sv-SE&amp;_tc_tid=30f2168171e142d38bcd4af2c3721959\", \"rel\": \"view-checkout\", \"contentType\": \"application/javascript\" }, ] } Load The Seamless View Embed the href in a &lt;script&gt; element. That script will then load the Seamless View. To load the Checkout from the JavaScript URL obtained in the backend API response, it needs to be set as a script element’s src attribute. You can cause a page reload and do this with static HTML, or you can avoid the page refresh by invoking the POST to create the payment order through Ajax, and then create the script element with JavaScript. The HTML code will be unchanged in this example. JavaScript 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 var request = new XMLHttpRequest(); request.addEventListener('load', function () { response = JSON.parse(this.responseText); var script = document.createElement('script'); var operation = response.operations.find(function (o) { return o.rel === 'view-checkout'; }); script.setAttribute('src', operation.href); script.onload = function () { // When the 'view-checkout' script is loaded, we can initialize the // Payment Menu inside 'checkout-container'. payex.hostedView.checkout({ container: { checkout: \"checkout-container\" }, culture: 'nb-No', }).open(); }; // Append the Checkout script to the &lt;head&gt; var head = document.getElementsByTagName('head')[0]; head.appendChild(script); }); // Like before, you should replace the address here with // your own endpoint. request.open('GET', '&lt;Your-Backend-Endpoint-Here&gt;', true); request.setRequestHeader('Content-Type', 'application/json; charset=utf-8'); request.send(); HTML 1 2 3 4 5 6 7 8 9 10 11 &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;Swedbank Pay Checkout is Awesome!&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=\"checkout-container\"&gt;&lt;/div&gt; &lt;!-- Here you can specify your own javascript file --&gt; &lt;script src=\"&lt;Your-JavaScript-File-Here&gt;\"&gt;&lt;/script&gt; &lt;/body&gt; &lt;/html&gt; How Seamless View Looks The payment UI should appear in the iframe on your page, so the payer can select their preferred payment method and pay. Once the payer has completed the purchase, you can perform a GET towards the paymentOrders resource to see the purchase state. Monitoring The Script URL With the PCI-DSS v4 changes taking effect on March 31st 2025, merchants are responsible for ensuring the integrity of the HTML script used in their integration, including monitoring what is loaded into or over it. Specifically, Seamless View merchants must verify that the script URL embedded in their iframe originates from Swedbank Pay or another trusted domain. It is important to note that Swedbank Pay’s PCI responsibility is strictly limited to the content within the payment iframe. For further details, refer to section 4.6.3 in the linked document. To ensure compliance, we recommend implementing Content Security Policy rules to monitor and authorize scripts. Merchants must whitelist the following domains to restrict browser content retrieval to approved sources. While https://*.payex.com and https://*.swedbankpay.com cover most payment methods, digital wallets such as Apple Pay, Click to Pay, and Google Pay are delivered via Payair. Alongside the Payair URL, these wallets may also generate URLs from Apple, Google, MasterCard, and Visa. See the table below for more information. When it comes to ACS URLs, nothing is loaded from the ACS domain in the merchant’s end. It will either happen within Swedbank Pay’s domain or as a redirect, which will repeal the merchant’s CSP. info The list below includes important URLs, but may not be exhaustive. Merchants need to stay up to date in case of URL changes, or if you need to whitelist URLs not listed here. URL Description https://*.cdn-apple.com URL needed for Apple Pay. https://*.google.com URL needed for Google Pay. https://*.gstatic.com Domain used by Google that hosts images, CSS, and javascript code to reduce bandwidth usage online. https://*.mastercard.com URL needed for Click to Pay. https://*.payair.com URL for the digital wallets Apple Pay, Click to Pay and Google Pay. https://*.payex.com Universal URL for all payment methods except the digital wallets Apple Pay, Click to Pay and Google Pay. https://*.swedbankpay.com Universal URL for all payment methods except the digital wallets Apple Pay, Click to Pay and Google Pay. https://*.visa.com URL needed for Click to Pay. Events When integrating Seamless View we strongly recommend that you implement the onPaid event, which will give you the best setup. Even with this implemented, you need to check the payment status towards our APIs, as the payer can make changes in the browser at any time. You can read more about the different Seamless View Events available in the feature section. You are now ready to capture the funds. Follow the link below to read more about capture and the other options you have after the purchase. Seamless View Sequence Diagram info Note that in this diagram, the Payer refers to the merchant front-end (website) while Merchant refers to the merchant back-end. sequenceDiagram participant Payer participant Merchant participant SwedbankPay as Swedbank Pay participant 3rdParty rect rgba(238, 112, 35, 0.05) activate Payer Payer -&gt;&gt;+ Merchant: Initiate Purchase deactivate Payer Merchant -&gt;&gt;+ SwedbankPay: POST /psp/paymentorders (hostUrls, paymentUrl, payer information) deactivate Merchant SwedbankPay --&gt;&gt;+ Merchant: rel:view-checkout deactivate SwedbankPay Merchant --&gt;&gt;- Payer: Display SwedbankPay Payment Menu on Merchant Page activate Payer Payer -&gt;&gt; Payer: Initiate Purchase step deactivate Payer activate SwedbankPay SwedbankPay -&gt;&gt;+ Payer: Do purchase logic Payer -&gt;&gt; SwedbankPay: Do purchase logic deactivate Payer deactivate SwedbankPay opt Payer performs purchase out of iFrame activate Payer Payer -&gt;&gt; Payer: Redirect to 3rd party Payer -&gt;&gt;+ 3rdParty: Redirect to 3rdPartyUrl URL deactivate Payer 3rdParty --&gt;&gt;+ Payer: Redirect back to paymentUrl (merchant) deactivate 3rdParty Payer -&gt;&gt; Payer: Initiate Payment Menu Seamless View (open iframe) Payer -&gt;&gt;+ SwedbankPay: Show Payment UI page in iframe deactivate Payer end activate SwedbankPay SwedbankPay --&gt;&gt; Payer: Purchase status deactivate SwedbankPay alt If purchase is completed activate Payer Payer -&gt;&gt; Payer: Event: onPaid ① Payer -&gt;&gt;+ Merchant: Check purchase status deactivate Payer Merchant -&gt;&gt;+ SwedbankPay: GET &lt;paymentorder.id&gt; deactivate Merchant SwedbankPay -&gt;&gt;+ Merchant: Status: Paid deactivate SwedbankPay end activate Merchant Merchant --&gt;&gt;- Payer: Show Purchase complete end alt If purchase is failed Merchant -&gt;&gt;+ SwedbankPay: GET {paymentorder.id} deactivate Merchant SwedbankPay --&gt;&gt;+ Merchant: Status: Failed deactivate SwedbankPay activate Merchant Merchant --&gt;&gt;- Payer: Display SwedbankPay Payment Menu on merchant page end opt PaymentOrder Callback (if callbackUrls is set) ② activate SwedbankPay SwedbankPay -&gt;&gt; Merchant: POST Purchase Callback deactivate SwedbankPay end rect rgba(81,43,43,0.1) activate Merchant note left of Payer: Capture Merchant -&gt;&gt;+ SwedbankPay: rel:capture deactivate Merchant SwedbankPay --&gt;&gt;- Merchant: Capture status note right of Merchant: Capture here only if the purchased&lt;br/&gt;goods don't require shipping.&lt;br/&gt;If shipping is required, perform capture&lt;br/&gt;after the goods have shipped.&lt;br&gt;Should only be used for &lt;br&gt;payment methods that support &lt;br&gt;Authorizations. end ① See seamless view events for further information. ② Read more about callback handling in the technical reference. Display Payment UI Post-Purchase v3.0 Post-Purchase v3.1",
    "tags": "",
    "url": "/checkout-v3/get-started/display-payment-ui/seamless-view/"
  },{
    "title": "Search",
    "text": "",
    "tags": "",
    "url": "/search/"
  },{
    "title": "Set Payment Instrument",
    "text": "Method Signature bool SetPaymentInstrument(string paymentInstrument) Description SetPaymentInstrument starts a payment for supplied paymentInstrument. This method has to be called before PaymentAsync or RefundAsync and cannot be combined with GetPaymentInstrument. Using TransactionSetup.PaymentInstrument when starting a Payment or Refund is an other way to accomplish the same thing. Prefix and supplied PAN must be registred in the terminal setup and may not be a PCI regulated card. The normal usage is for giftcards or card numbers that are created on site such as financing. Parameter string PaymentInstrument - format is pan and expiry date separated by an equal sign. “PAN=MMYY” info There is an alternative: It is also possible to pass the payment instrument in a TransactionSetup object when calling Payment",
    "tags": "",
    "url": "/pax-terminal/NET/SwpTrmLib/Methods/handy/setpaymentinstrument/"
  },{
    "title": "Settlement &amp; Reconciliation",
    "text": "Settlement And Reconciliation Reconciliation is an important step in an economic transaction. When a payment is reconciled, captured amounts for the payment are matched against the corresponding settlement. The information needed to reconcile captured funds - the balance report and transactions list - are available for all merchants using Swedbank Pay. By default, the settlement files will be sent to you by via e-mail. We also have the option to send it via SFTP as well. If this is something you’d like, please inform your sales representative. They will in turn let the setup team know. The settlement frequency is defined in your agreement, but the default is monthly or weekly. You do not need to subscribe, the files will be delivered by default. Please contact kundsupport@swedbankpay.se for further inquiries regarding this. Settlement There are two main alternatives for settlement - either we handle the settlement process for you, or you handle the process yourself: If Swedbank Pay Handles The Settlement Process Swedbank Pay handles the settlement process on your behalf, (called “Redovisningsservice”). Swedbank Pay transfers the net amount to you directly. When choosing Swedbank Pay Checkout we will always handle the settlement process for you, gathering all your eCommerce payments in one place. Straighforward and time efficient. You Handle The Settlement Process Yourself If you will handle the settlement yourself, then Swedbank Pay will send you an invoice with the relevant fees, in addition to the report and transactions lists. Your acquirer will transfer settled funds to you. Balance Report The Balance Report (a .pdf file) specifies the total sales for a specific period, including fees and VAT. The report contains three parts: a payment summary and specifications for sales and for fees. Two versions of the balance report are currently in production, v1 and v2. All new customers are set up with v2, so if you are a new customer or have joined us within the last year, the v2 sections should be your focus. V1 will be phased out during 2023. The main differences are in the transaction list. Payment Summary Provides a summary of the Amount sold, Fees and VAT. If Swedbank Pay handles the settlement process, the Transferred amount shown in the balance report summary is equivalent to the disbursement on the bank statement (the remaining total amount after fees). Sales Specification Provides a specification over sales for the given period. The sales total is specified per payment area (CreditCard, Invoice) and underlying payment methods. Each sales row specify Quantity, Sum sales and Amount to pay out, the last one is only eligble if Swedbank Pay handles the Settlement process. A summary of payments through the last date of the report is also provided. Fees Specification Provides a specification of the fees in the given period. The fees total is specified per payment area (CreditCard, Invoice) and underlying payment methods. Each fees row specify Quantity (sales), Amount (sales), Unit price, Provision and fee Amount. If you handle the settlement process yourself, you will receive a separate invoice for fees. Transaction List The Transaction List (also called Sales Accounted Transactions) is provided in .xlsx and .xml formats and specifies all transactions for a specific period, including a summary of transactions grouped by payment method. Both formats contain the same information, but the xml file is meant for computer processing, while the excel workbook is meant for human interaction. The first row contains the name of the Swedbank Pay company (e.g. Swedbank Pay Solutions AB) that the merchant has the contract with, and the balance report number. The header fields contain a summary of the transactions displayed in the body. As with the Balance Report there are two versions of the Transaction List, and v1 will be phased out during 2023. V1 Header Fields Field Type Description Prefix string The Prefix used for transactions, only eligible if merchant uses prefix. Currency ISO 4217 Settlement currency (e.g. SEK, NOK, EUR). ServiceType string The service type of the service used (e.g. Creditcard). Service string The service used (e.g. Creditcard). NoOfDebet Decimal Total number of debit transactions for the given service. NoOfCredit Decimal Total number of credit transactions for the given service. Amount Decimal Total amount for the given service (e.g 100.00). FromDate ISO 8601 The earliest transaction date, YYYY-MM-DD. ToDate ISO 8601 The latest transaction date, YYYY-MM-DD. V1 Body Fields Field Type Description Swedbank Pay Batch Number Decimal A batch number common to all types of transactions processed by Swedbank Pay. Transaction Number Decimal A unique identifier of the transaction, can be traced in the Merchant Portal user interface. Order id string A unique identifier of the order, as sent from the merchant to Swedbank Pay. Transactions that are related to the same order are associated with this ID. Date Created ISO 8601 Transaction capture date/time. YYYY-MM-DD hh:mm:ss. Date Modified ISO 8601 Transaction settle date/time. YYYY-MM-DD hh:mm:ss. Provider string The service provider (e.g. Babs, Swedbank). Type string The service type of the related transaction (e.g. Creditcard). Amount Decimal Total amount of the related transaction (e.g 100.00). Currency ISO 4217 Settlement currency (e.g. SEK, NOK, EUR). Product Number string A product number, as sent by merchant to Swedbank Pay. Description string A textual description of the transaction, as sent by merchant to Swedbank Pay. VAT Amount Decimal VAT Amount for the given transaction (e.g 100.00). VAT Percentage Decimal VAT Percentage for the given transaction. Credit Card Batch Number Decimal The reference number from the credit card processor. Reference Decimal The transaction reference from processor. Swedbank Pay Account Number Decimal The Account number given, shown in the Merchant Portal. Referenced Transaction Number Decimal Transaction number for the Authoriation transaction for a two-stage transaction or the number of the debit transaction if it is a credit transaction. Sales Channel string The channel through which the transaction was sent to Swedbank Pay (e.g Transaction via eCommerce APIs). Brand string No longer populated when using Digital Payments integrations. Point Of Sale string If eligible, POS information as sent by merchant to Swedbank Pay. V2 Header Fields Field Type Description Subsite string The Subsite used for transactions, only eligible if merchant uses subsite. SubsiteDescription string Description of the Subsite, only eligible if merchant uses subsite. Currency ISO 4217 Settlement currency (e.g. SEK, NOK, EUR). ServiceType string The service type of the service used (e.g. Creditcard). ServiceName string The service used (e.g. Corporate Cards EU). NoOfDebet Decimal Total number of debit transactions for the given service. NoOfCredit Decimal Total number of credit transactions for the given service. Amount Decimal Total amount for the given service (e.g 100.00). FromDate ISO 8601 The earliest transaction date, YYYY-MM-DD. ToDate ISO 8601 The latest transaction date, YYYY-MM-DD. V2 Body Fields Field Type Description PayExAccountNo Decimal The Account number given, shown the Merchant Portal.. OrderIdentity string A unique identifier of the order, as sent from the merchant to Swedbank Pay. Transactions that are related to the same order are associated with this ID. TransactionIdentity string A unique guid identifier of the transaction, can be traced in the Merchant Portal user interface. Amount Decimal Total amount of the related transaction (e.g 100.00). Currency ISO 4217 Settlement currency (e.g. SEK, NOK, EUR). VAT Amount Decimal VAT Amount for the given transaction (e.g 100.00). VAT Percentage Decimal VAT Percentage for the given transaction. Date Created ISO 8601 Transaction capture date/time. YYYY-MM-DD hh:mm:ss. Date Modified ISO 8601 Transaction settle date/time. YYYY-MM-DD hh:mm:ss. ServiceName string The service used (e.g. Corporate Cards EU). Provider string The service provider (e.g. Swedbank Pay, PayEx, Swish). PayExTransactionNo Decimal A unique identifier of the transaction, can be traced in the Merchant Portal user interface. PayExBatchNo Decimal A batch number common to all types of transactions processed by Swedbank Pay. Subsite string The Subsite used for transactions, only eligible if merchant uses subsite. SubsiteDescription string Description of the Subsite, only eligible if merchant uses subsite. ReferencedTransaction Decimal Transaction number for the authorization transaction for a two-stage transaction, or the number of the debit transaction if it is a credit transaction. ExternalTransactionReference Decimal The transaction reference from processor. CreditCardBatchNo Decimal The reference number from the credit card processor. Description string A textual description of the transaction, as sent by merchant to Swedbank Pay. ProductCategory string A product number, as sent by merchant to Swedbank Pay. Sales Channel string The channel through which the transaction was sent to Swedbank Pay (e.g Transaction via eCommerce APIs). Brand string No longer populated when using Digital Payments integrations. Point Of Sale string If eligible, POS information as sent by merchant to Swedbank Pay. Reconciliation To do the reconciliation, you need to match the information in your system against the information provided by Swedbank Pay in the balance report and transaction list. Below is a sequence diagram detailing the interaction. Reconciliation Sequence Diagram sequenceDiagram participant SwedbankPay as Swedbank Pay activate Merchant activate SwedbankPay Merchant--&gt;&gt;SwedbankPay: Online payment transactions deactivate Merchant deactivate SwedbankPay activate Merchant SwedbankPay-&gt;&gt;Merchant: Balance Report (PDF-file) note left of Merchant: files are sent by e-mail or file transfer SwedbankPay-&gt;&gt;Merchant: Transaction list (XLSX-file) SwedbankPay-&gt;&gt;Merchant: Transaction list (XML-file) deactivate Merchant There are two ways for you to match the information from your system with the information given in the reconciliation files from Swedbank Pay: You can use information generated by your system (you will have to set a unique payeeReference when you make the transaction), or You can use the transaction number generated by Swedbank Pay (this is called transaction number and is returned from Swedbank Pay after you have created the transaction). A credit card transaction is made when you either make a capture or a reversal. In the input data for making a capture, you will set the payeeReference. The unique value of this field is the same as the field called OrderID in the reconciliation file. Request Copy json to clipboard 1 2 3 4 5 6 7 8 { \"transaction\": { \"amount\": 1500, \"vatAmount\": 0, \"description\": \"Test Reversal\", \"payeeReference\": \"ABC123\" } } When you receive the response from Swedbank Pay, the response will include transaction.number. This is the same as the field called TransactionNo in the reconciliation file. Response Copy json to clipboard 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 { \"payment\": \"/psp/paymentorders/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"capture\": { \"id\": \"/psp/paymentorders/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"transaction\": { \"id\": \"/psp/paymentorders/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2016-09-14T01:01:01.01Z\", \"updated\": \"2016-09-14T01:01:01.03Z\", \"type\": \"Capture\", \"state\": \"Initialized\", \"number\": 1234567890, \"amount\": 1500, \"vatAmount\": 250, \"description\": \"Test Capture\", \"payeeReference\": \"ABC123\", \"failedReason\": \"\", \"isOperational\": false, \"operations\": [] } } } payeeReference sent to Swedbank Pay is equal to OrderId in the reconciliation file. capture.transaction.number returned from Swedbank Pay is equal to TransactionNo in reconciliation file. Below you will see the API mapping tables to the fields in the settlement report for Capture and Reversal. Capture API XLSX XML     Swedbank Pay Batch Number SwedbankbatchNo   transaction.number Transaction Number TransactionNo   transaction.payeeReference Order id OrderId   transaction.created Date Created DateCreated     Date Modified DateModified     Provider Provider     Type Type   transaction.amount Amount Amount     Currency Currency     Product Number MerchantProductNo   transaction.description Description Description   transaction.vatAmount VAT Amount VATAmount     VAT Percentage VatoPercentage     Credit Card Batch Number CreditCardBatchNo   transaction.number if DirectDebit Direct Debit Bank Reference DirectDebitbankRef   transaction.number if DirectDebit Reference Reference     Swedbank Account Number SwedbankAccountNo   transaction.number if reversed later Referenced Transaction Number ReferencedTransaction     Sales Channel SalesChannel     Brand       Point Of Sale     Reversal API XLSX XML     Swedbank Pay Batch Number SwedbankbatchNo   transaction.number Transaction Number TransactionNo   transaction.payeeReference Order id OrderId   transaction.created Date Created DateCreated     Date Modified DateModified     Provider Provider     Type Type   transaction.amount Amount Amount     Currency Currency     Product Number MerchantProductNo   transaction.description Description Description   transaction.vatAmount VAT Amount VATAmount     VAT Percentage VatoPercentage     Credit Card Batch Number CreditCardBatchNo   transaction.number if DirectDebit Direct Debit Bank Reference DirectDebitbankRef   transaction.number if DirectDebit Reference Reference     Swedbank Account Number SwedbankAccountNo     Referenced Transaction Number ReferencedTransaction     Sales Channel SalesChannel     Brand       Point Of Sale     Report Samples The content of the files depends on the type of agreement you have made with Swedbank Pay. For some payment methods, only option A is available, while for other payment methods, only option B is available. The sample files can be downloaded below. Make sure that you choose the examples from your current version of the balance report (v1 or v2). V1 Option A: Swedbank Pay Handles The Settlement Process PDF Balance Report XLSX Transaction List XML Transaction List V1 Option B: You Handle The Settlement Process Yourself PDF Balance Report XLSX Transaction List XML Transaction List V2 Option A: Swedbank Pay Handles The Settlement Process PDF Balance Report XLSX Transaction List XML Transaction List V2 Option B: You Handle The Settlement Process Yourself PDF Balance Report XLSX Transaction List XML Transaction List",
    "tags": "",
    "url": "/checkout-v3/features/balancing-the-books/settlement-reconciliation/"
  },{
    "title": "Test Account Setup",
    "text": "info By creating a test account, you will not by default have a commercial relationship with Swedbank Pay, it is solely a test account for you to use and test towards our solution. To enjoy integration support, a commercial agreement with Swedbank Pay is required. Please contact Swedbank Pay Sales at sales@swedbankpay.se (Sweden), salg@swedbankpay.no (Norway) or salg@swedbankpay.dk (Denmark). Step 1: Sign Up For A Test Account A test account gives you access to our unified dashboard for managing your account across different platforms. We call this dashboard the Merchant Portal. Your test account request should be sent to: testaccount@swedbankpay.com in order to create an account for you, we need some specific information from your side: Company name: Your company name. Organization number: Your organization number. Technical contact: Email and phone number. Commercial contact: Email and phone number. Step 2: Wait For Response Within 8 working hours we will have created your account and sent you an email containing the following information: Merchant name: This represents your core business entity with us. Payee ID: This is how we identify you. Services: The payment options which are activated and ready for testing. Login credentials: You will receive a temporary password in a separate email. warning Please check your spam folder if you haven’t received this email. Step 3: Get Your Access Tokens To submit payments to us, you will be making API requests that are authenticated with an access token. How to generate your access token: Log in to: The External Integration Merchant Portal - For testing environment. Merchant details: Here you will find information about your account. An access token is necessary since it will be used together with Payee ID to validate transactions. The Payee ID will serve as the door and, your token is the key. Navigate to “Access Tokens” at the top of the page. Choose “Add” and name the token. We suggest you name it according to what environment it is created in. Your token will only be fully visible upon creation. For security purposes, we will mask it like this: 12a3**********bc4de56f when it is displayed later. If you need to keep track of it, please copy and save it externally in a safe place. The token will not be visible unmasked in any of our systems, so a lost token must be replaced by a new one. warning Please note that the production and staging environment need separate tokens. Back to Introduction Start Integrating",
    "tags": "",
    "url": "/checkout-v3/get-started/setup/"
  },{
    "title": "Loyalty The Easy Way",
    "text": "CNA - Card Number Alias The PAX terminal has a key for generating a one-way hash for the used PAN. The same PAN will give the same generated hash in all terminals and is therefore an easy way to use in a loyalty solution. This way of implementation will only collect “points” and discounts will be received elsewhere. The token is obtained by requesting it in the payment request in the SaleData element. 1 &lt;SaleData TokenRequestedType=\"Customer\"&gt; See payment request for detailed information The generated token is rececived in the payment response and with that you may store information in a loyalty solution. warning Heads up!: The token is generated locally in the terminal and if the customer is using phone or any IoT wearable or is using the physical card, there will be three different tokens. info Note: Allow more than one token as a reference to a customer. Later the centrally generated PAR token will be available and to have possibly more than one token makes a smooth transition PaymentResponse The following shows a payment response with a 70-byte long token Sample Payment Response for approved payment with physical payment card 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;SaleToPOIResponse&gt; &lt;MessageHeader MessageClass=\"Service\" MessageCategory=\"Payment\" MessageType=\"Response\" ServiceID=\"3\" SaleID=\"1\" POIID=\"A-POIID\"/&gt; &lt;PaymentResponse&gt; &lt;Response Result=\"Success\"/&gt; &lt;SaleData&gt; &lt;SaleTransactionID TransactionID=\"1703372\" TimeStamp=\"2023-08-24T17:03:37+02:00\"/&gt; &lt;/SaleData&gt; &lt;POIData&gt; &lt;POITransactionID TransactionID=\"8778880185\" TimeStamp=\"2023-08-24T15:04:00.498Z\"/&gt; &lt;/POIData&gt; &lt;PaymentResult PaymentType=\"Normal\"&gt; &lt;PaymentInstrumentData PaymentInstrumentType=\"Card\"&gt; &lt;CardData PaymentBrand=\"01,Mastercard Debit\" MaskedPAN=\"516815******9659\" EntryMode=\"Contactless\"&gt; &lt;PaymentToken TokenRequestedType=\"Customer\" TokenValue=\"6FD955C23A48A041D881003CDBF836DC59F89CE0ECA8288129696CDF9BB8B8DD67F233\"/&gt; &lt;/CardData&gt; &lt;/PaymentInstrumentData&gt; &lt;AmountsResp Currency=\"SEK\" AuthorizedAmount=\"56\" CashBackAmount=\"0.00\"/&gt; &lt;PaymentAcquirerData MerchantID=\"10020001\" AcquirerPOIID=\"877888\"&gt; &lt;ApprovalCode&gt;611506&lt;/ApprovalCode&gt; &lt;/PaymentAcquirerData&gt; &lt;/PaymentResult&gt; &lt;PaymentReceipt DocumentQualifier=\"CashierReceipt\"&gt; &lt;OutputContent OutputFormat=\"Text\"&gt; &lt;OutputText&gt;eyJNZXJjaGFudCI6eyJNYW5kYXRvcnkiOnsiQWNxdWlyZXIiOnsiQ2FyZEFjY2VwdG9yTnVtYmVyIjoiMTAwMjAwMDEiLCJUZXJtaW5hbElEIjoiODc3ODg4In0sIkNhcmRBY2NlcHRvciI6eyJBZGRyZXNzMSI6IkjDpGxsZXNrw6VyYW4gMjkiLCJCYW5rQWdlbnROYW1lIjoiYmFua3ktYmFuayIsIk5hbWUiOiJUZXN0IHNob3AiLCJPcmdhbmlzYXRpb25OdW1iZXIiOiI1NTY1NjcxLTYxNjUiLCJQb3N0WmlwQ29kZSI6IjUwNTAiLCJUb3duQ2l0eSI6Im1lcmNoYW50LUJhc2UyNC1DaXR5In0sIkNhcmREZXRhaWxzIjp7IkFwcGxpY2F0aW9uSWRlbnRpZmllciI6IkEwMDAwMDAwMDQxMDEwIiwiQ2FyZFNjaGVtZU5hbWUiOnsiQXBwbGljYXRpb25MYWJlbCI6Ik1hc3RlcmNhcmQifSwiUHJpbWFyeUFjY291bnROdW1iZXIiOiI1MTY4MTUqKioqKio5NjU5IiwiVGVybWluYWxWZXJpZmljYXRpb25SZXN1bHQiOiIwMDAwMDA4MDAxIiwiVHJhbnNhY3Rpb25TdGF0dXNJbmZvcm1hdGlvbiI6IjAwMDAifSwiT3V0Y29tZSI6eyJBcHByb3ZhbENvZGUiOiI2MTE1MDYiLCJBdXRob3Jpc2F0aW9uUmVzcG9uZGVyIjoiMyIsIkF1dGhvcmlzYXRpb25SZXNwb25zZUNvZGUiOiIwMCIsIkRlYml0U3RhdHVzIjoiMDAifSwiUGF5bWVudCI6eyJBdXRob3Jpc2F0aW9uQ2hhbm5lbCI6IjEiLCJDYXJkaG9sZGVyVmVyaWZpY2F0aW9uTWV0aG9kIjoiLyIsIkN1cnJlbmN5IjoiU0VLIiwiRmluYW5jaWFsSW5zdGl0dXRpb24iOiJTV0UiLCJQYXltZW50QW1vdW50IjoiNTYsMDAiLCJSZWNlaXB0TnVtYmVyIjoiODc3ODg4MDE4NSIsIlNpZ25hdHVyZUJsb2NrIjpmYWxzZSwiVG90YWxBbW91bnQiOiI1NiwwMCIsIlRyYW5zYWN0aW9uU291cmNlIjoiSyIsIlRyYW5zYWN0aW9uVHlwZSI6IjAwIn0sIlRpbWVTdGFtcCI6eyJEYXRlT2ZQYXltZW50IjoiMjAyMy0wOC0yNCIsIlRpbWVPZlBheW1lbnQiOiIxNzowNiJ9fSwiT3B0aW9uYWwiOnsiQ2FyZEFjY2VwdG9yIjp7IkNvdW50cnlOYW1lIjoiNzUyIiwiUGhvbmVOdW1iZXIiOiIrNDY4NDA1MTAwMCJ9LCJDYXJkRGV0YWlscyI6eyJDYXJkU2NoZW1lTmFtZSI6eyJBcHBsaWNhdGlvbkxhYmVsIjoiTWFzdGVyY2FyZCJ9fSwiUGF5bWVudCI6eyJSZWZlcmVuY2UiOiIxNzAzMzcyIn0sIlJlY2VpcHRTdHJpbmciOlsiVGVzdCBzaG9wIiwiSMOkbGxlc2vDpXJhbiAyOSIsIjUwNTAgbWVyY2hhbnQtQmFzZTI0LUNpdHkiLCIyMDIzLTA4LTI0IDE3OjA2IiwiIiwiTWFzdGVyY2FyZCIsIkNvbnRhY3RsZXNzIiwiNTE2ODE1KioqKioqOTY1OSIsIiIsIksvMSAzIDAwIFNXRSIsIkFJRDogQTAwMDAwMDAwNDEwMTAiLCJUVlI6IDAwMDAwMDgwMDEiLCJUU0k6IDAwMDAiLCJSUk46IDg3Nzg4ODAxODUiLCJBdXRoIGNvZGU6IDYxMTUwNiIsIkFSQzogMDAiLCIiLCJLw5ZQOiAgICAgICAgIDU2LDAwIFNFSyIsIkdvZGvDpG5kIiwiIiwiIiwiIiwiRsO2cnPDpGxqYXJlbnMga3ZpdHRvIl19fX0=&lt;/OutputText&gt; &lt;/OutputContent&gt; &lt;/PaymentReceipt&gt; &lt;PaymentReceipt DocumentQualifier=\"CustomerReceipt\"&gt; &lt;OutputContent OutputFormat=\"Text\"&gt; &lt;OutputText&gt;eyJDYXJkaG9sZGVyIjp7Ik1hbmRhdG9yeSI6eyJBY3F1aXJlciI6eyJDYXJkQWNjZXB0b3JOdW1iZXIiOiIxMDAyMDAwMSIsIlRlcm1pbmFsSUQiOiI4Nzc4ODgifSwiQ2FyZEFjY2VwdG9yIjp7IkFkZHJlc3MxIjoiSMOkbGxlc2vDpXJhbiAyOSIsIkJhbmtBZ2VudE5hbWUiOiJiYW5reS1iYW5rIiwiTmFtZSI6IlRlc3Qgc2hvcCIsIk9yZ2FuaXNhdGlvbk51bWJlciI6IjU1NjU2NzEtNjE2NSIsIlBvc3RaaXBDb2RlIjoiNTA1MCIsIlRvd25DaXR5IjoibWVyY2hhbnQtQmFzZTI0LUNpdHkifSwiQ2FyZERldGFpbHMiOnsiQXBwbGljYXRpb25JZGVudGlmaWVyIjoiQTAwMDAwMDAwNDEwMTAiLCJDYXJkU2NoZW1lTmFtZSI6eyJBcHBsaWNhdGlvbkxhYmVsIjoiTWFzdGVyY2FyZCJ9LCJQcmltYXJ5QWNjb3VudE51bWJlciI6IioqKioqKioqKioqKjk2NTkiLCJUZXJtaW5hbFZlcmlmaWNhdGlvblJlc3VsdCI6IjAwMDAwMDgwMDEiLCJUcmFuc2FjdGlvblN0YXR1c0luZm9ybWF0aW9uIjoiMDAwMCJ9LCJPdXRjb21lIjp7IkFwcHJvdmFsQ29kZSI6IjYxMTUwNiIsIkF1dGhvcmlzYXRpb25SZXNwb25kZXIiOiIzIiwiQXV0aG9yaXNhdGlvblJlc3BvbnNlQ29kZSI6IjAwIiwiRGViaXRTdGF0dXMiOiIwMCJ9LCJQYXltZW50Ijp7IkF1dGhvcmlzYXRpb25DaGFubmVsIjoiMSIsIkNhcmRob2xkZXJWZXJpZmljYXRpb25NZXRob2QiOiIvIiwiQ3VycmVuY3kiOiJTRUsiLCJGaW5hbmNpYWxJbnN0aXR1dGlvbiI6IlNXRSIsIlBheW1lbnRBbW91bnQiOiI1NiwwMCIsIlJlY2VpcHROdW1iZXIiOiI4Nzc4ODgwMTg1IiwiU2lnbmF0dXJlQmxvY2siOmZhbHNlLCJUb3RhbEFtb3VudCI6IjU2LDAwIiwiVHJhbnNhY3Rpb25Tb3VyY2UiOiJLIiwiVHJhbnNhY3Rpb25UeXBlIjoiMDAifSwiVGltZVN0YW1wIjp7IkRhdGVPZlBheW1lbnQiOiIyMDIzLTA4LTI0IiwiVGltZU9mUGF5bWVudCI6IjE3OjA2In19LCJPcHRpb25hbCI6eyJDYXJkQWNjZXB0b3IiOnsiQ291bnRyeU5hbWUiOiI3NTIiLCJQaG9uZU51bWJlciI6Iis0Njg0MDUxMDAwIn0sIkNhcmREZXRhaWxzIjp7IkNhcmRTY2hlbWVOYW1lIjp7IkFwcGxpY2F0aW9uTGFiZWwiOiJNYXN0ZXJjYXJkIn19LCJQYXltZW50Ijp7IlJlZmVyZW5jZSI6IjE3MDMzNzIifSwiUmVjZWlwdFN0cmluZyI6WyJUZXN0IHNob3AiLCJIw6RsbGVza8OlcmFuIDI5IiwiNTA1MCBtZXJjaGFudC1CYXNlMjQtQ2l0eSIsIjIwMjMtMDgtMjQgMTc6MDYiLCIiLCJNYXN0ZXJjYXJkIiwiQ29udGFjdGxlc3MiLCIqKioqKioqKioqKio5NjU5IiwiIiwiSy8xIDMgMDAgU1dFIiwiQUlEOiBBMDAwMDAwMDA0MTAxMCIsIlRWUjogMDAwMDAwODAwMSIsIlRTSTogMDAwMCIsIlJSTjogODc3ODg4MDE4NSIsIkF1dGggY29kZTogNjExNTA2IiwiQVJDOiAwMCIsIiIsIkvDllA6ICAgICAgICAgNTYsMDAgU0VLIiwiR29ka8OkbmQiLCIiLCIiLCIiLCJLb3J0aW5uZWhhdmFyZW5zIGt2aXR0byJdfX19&lt;/OutputText&gt; &lt;/OutputContent&gt; &lt;/PaymentReceipt&gt; &lt;/PaymentResponse&gt; &lt;/SaleToPOIResponse&gt; PaymentResponse in Detail Name Lev Attributes Description PaymentResponse 1     Response 2 Result Success or Failure.     ErrorCondition Only present if Failure: Common values are Busy- wait and try again, Refusal- Request not accepted. AdditionalResponse 3   Only present if Failure and should be a describing text. SaleData 2     SaleTransactionID 3 TransactionID ID of transaction provided by the sale system and may be seen in PosPay reports. Information will not be past to clearing and is not seen in Merchant Portal.     TimeStamp Timestamp set by sale system for when the transaction is started. Note that the format is local time. POIData 2     POITransactionID 3 TransactionID ID of transaction set by the terminal. This is seen in PosPay reports as well as on Merchant Portal. The complete element is needed if the transaction needs to be reversed.     TimeStamp Timestamp set by terminal when the transaction is started. Note that the format is UTC. PaymentResult 2 PaymentType Values: Normal for purchase and Refund for refund. PaymentInstrumentData 3 PaymentInstrumentType Values: Card for any transaction made by the terminal with a card or any consumer device. Mobile for an alternative payment instrument made via the terminal. CardData 4 PaymentBrand Comma separated string where the first part is card type. 01-payment card. 02-Combined payment and Loyalty, 03-Loyalty, 04-Neither. May be used instead of 03 for controlling the dialog in the terminal. Second part is the product name.     MaskedPAN       EntryMode ICC, Contactless, Magstripe. PaymentToken 5 TokenRequestedType Customer.     TokenValue An irreversible 70 byte hash computed locally in the terminal. A specific card will get the same CNA in all SwedbankPay PAX terminals. AmountsResp 3 Currency Needs to be configured in the terminal. Available DKK, EUR, NOK, SEK.     AuthorizedAmount Total amount for transaction.     CashBackAmount Amount included in AuthorizedAmount.     TipAmount Tip included in AuthorizedAmount. PaymentAquirerData 3 MerchantID Id of merchant set by Swedbank Pay.     AquirerPOIID A terminal id within Swedbank Pay. ApprovalCode 4   Authorization approval code. Only present if Result is Success. PaymentReceipt 2 DocumentQualifier CashierReceipt- Merchant copy. CustomerReceipt- receipt information for customer. Note! This element appears twice. OutputContent 3 OutputFormat Only value Text. OutputText 4   A Base64 encoded JSON structure with information for the receipt. PaymentReceipt in Detail 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 { \"Cardholder\": { \"Mandatory\": { \"Acquirer\": { \"CardAcceptorNumber\": \"10020001\", \"TerminalID\": \"877888\" }, \"CardAcceptor\": { \"Address1\": \"Hälleskåran 29\", \"BankAgentName\": \"banky-bank\", \"Name\": \"Test shop\", \"OrganisationNumber\": \"5565671-6165\", \"PostZipCode\": \"5050\", \"TownCity\": \"merchant-Base24-City\" }, \"CardDetails\": { \"ApplicationIdentifier\": \"A0000000041010\", \"CardSchemeName\": { \"ApplicationLabel\": \"Mastercard\" }, \"PrimaryAccountNumber\": \"************9659\", \"TerminalVerificationResult\": \"0000008001\", \"TransactionStatusInformation\": \"0000\" }, \"Outcome\": { \"ApprovalCode\": \"611506\", \"AuthorisationResponder\": \"3\", \"AuthorisationResponseCode\": \"00\", \"DebitStatus\": \"00\" }, \"Payment\": { \"AuthorisationChannel\": \"1\", \"CardholderVerificationMethod\": \"/\", \"Currency\": \"SEK\", \"FinancialInstitution\": \"SWE\", \"PaymentAmount\": \"56,00\", \"ReceiptNumber\": \"8778880185\", \"SignatureBlock\": false, \"TotalAmount\": \"56,00\", \"TransactionSource\": \"K\", \"TransactionType\": \"00\" }, \"TimeStamp\": { \"DateOfPayment\": \"2023-08-24\", \"TimeOfPayment\": \"17:06\" } }, \"Optional\": { \"CardAcceptor\": { \"CountryName\": \"752\", \"PhoneNumber\": \"+4684051000\" }, \"CardDetails\": { \"CardSchemeName\": { \"ApplicationLabel\": \"Mastercard\" } }, \"Payment\": { \"Reference\": \"1703372\" }, \"ReceiptString\": [ \"Test shop\", \"Hälleskåran 29\", \"5050 merchant-Base24-City\", \"2023-08-24 17:06\", \"\", \"Mastercard\", \"Contactless\", \"************9659\", \"\", \"K/1 3 00 SWE\", \"AID: A0000000041010\", \"TVR: 0000008001\", \"TSI: 0000\", \"RRN: 8778880185\", \"Auth code: 611506\", \"ARC: 00\", \"\", \"KÖP: 56,00 SEK\", \"Godkänd\", \"\", \"\", \"\", \"Kortinnehavarens kvitto\" ] } } }",
    "tags": "",
    "url": "/pax-terminal/Nexo-Retailer/simple-loyalty/"
  },{
    "title": "Customize Order Of Payment Menu",
    "text": "By using the field restrictedToInstruments, you can customize in what order the payment methods are listed in your payment UI, in addition to using it to restrict which payment methods you want to display. This gives you, as a merchant, the opportunity to promote selected payment methods, or tailor the payment UI specifically for your customers. If you detect that the customer is on a mobile, make their payment easier by having the digital wallets on top. On an Android phone? Lead with Google Pay. On an Apple device? Put Apple Pay first. Use the Paid resource to find what payment method the customer used to pay, and let it be the first option next time they visit you. Sort Or Restrict The Payment Menu Order Choosing the order is very easy. You simply add the array field restrictedToInstruments, and the order you enter the payment methods is the order they will appear in the menu. Please remember that restrictedToInstruments both sorts and restricts. Only the payment methods included in the array will appear, so it is crucial that you include all the payment methods you want to offer. I.e. if you populate the field with [“Swish”,”CreditCard”,”Trustly”], Swish will appear as the first option, card as the second and Trustly third. In this example, only these three will be present in the payment UI, even if you have an active contract for a fourth payment method. If you do not include an array in your request, the payment UI will be presented in the default order. Input Values The complete list of possible values to include in restrictedToInstruments are the following. You can find the payment methods activated for your merchant under availableInstruments in the initial paymentOrder response. Payment Method Input Apple Pay “ApplePay” Card “CreditCard” Click to Pay “ClickToPay” Google Pay “GooglePay” Installment Account Sweden “CreditAccount-CreditAccountSe” Invoice Norway “Invoice-PayExFinancingNo” Invoice Sweden “Invoice-PayExFinancingSe” MobilePay “MobilePay” Swish “Swish” Trustly “Trustly” Vipps “Vipps” Request Example The request with restrictedToInstruments included should look like the example below. The field will not be visible in the response, so we will only include the request here. The response will look like a basic paymentOrder response. Request Copy json to clipboard 1 2 3 4 POST /psp/paymentorders HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.1,3.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 { \"paymentorder\": { \"restrictedToInstruments\": [ \"Swish\", \"CreditCard\", \"Trustly\" ], \"operation\": \"Purchase\", \"currency\": \"SEK\", \"amount\": 1500, \"vatAmount\": 375, \"description\": \"Test Purchase\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"sv-SE\", \"urls\": { \"hostUrls\": [ \"https://example.com\", \"https://example.net\" ], \"paymentUrl\": \"https://example.com/perform-payment\", //Seamless View only \"completeUrl\": \"https://example.com/payment-completed\", \"cancelUrl\": \"https://example.com/payment-cancelled\", //Redirect only \"callbackUrl\": \"https://api.example.com/payment-callback\", \"logoUrl\": \"https://example.com/logo.png\" }, \"payeeInfo\": { \"payeeId\": \"5cabf558-5283-482f-b252-4d58e06f6f3b\", \"payeeReference\": \"AB832\", \"payeeName\": \"Merchant1\", \"orderReference\": \"or-123456\" } } }",
    "tags": "",
    "url": "/checkout-v3/features/customize-ui/sort-order-payment-menu/"
  },{
    "title": "Split Settlement",
    "text": "Split Settlement The split settlement feature is an easy way of doing settlements for companies with multiple sub-merchants. With only a few steps, the settlement process becomes more efficient with regards to invoicing, payouts and setup for both your sub-merchants and yourself. In short, it is a settlement feature where a company with a website or an app can attach specific subsite numbers to sub-merchants selling their goods or services through the company. The subsite number is used to match the transactions with the correct sub-merchant, so the settlement is automatically split between them. If you run a site selling tickets to concerts, theaters, sporting events etc., each venue gets its own subsite number. If you run a funeral home, the sub-merchants can be everything from flower shops to charities. What We Need From You As A Company Submit a KYC (Know Your Customer) form for each sub-merchant you want to include. We will also do a KYC check on your sub-merchants, providing extra security for both of us. Give every sub-merchant who sells goods/services through your website or in your app a unique subsite number. It must be in the format of A-Za-z0-9. This must be included in the KYC form. We recommend using the same customer number they have in your system. Attach the subsite number to all the goods/services the sub-merchant sells through your website or app, so the goods/services can be matched to the correct merchant in our back office system. A partner agreement is needed for automatic deduction of revenue cuts and fees. How It Works We set up the sub-merchant subsite number in our system. You add the number in the request’s subsite field when you create the payment for the goods or service. The customer selects a payment method and completes the payment. The payment goes into a client funds account. Swedbank Pay matches the transaction with the sub-merchant using the subsite number. The settlement is split and connected to the correct sub-merchant. Revenue cuts for the super merchant and fees from Swedbank Pay are deducted automatically. Payout to the sub-merchant is done. Create Request with Subsite The subsite field will is added in the payeeInfo node. If you offer Amex as a card payment option, a siteId is added if you need to specify to Amex which sub-merchant the payment is intended for. Request Copy json to clipboard 1 2 3 4 POST /psp/paymentorders HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.x/2.0 // Version optional for 3.0 and 2.0 1 2 3 4 5 6 7 8 9 10 11 { \"payeeInfo\": { \"subsite\": \"MySubsite\", \"siteId\": \"MySiteId\", \"payeeId\": \"5cabf558-5283-482f-b252-4d58e06f6f3b\", \"payeeReference\": \"AB832\", \"payeeName\": \"Merchant1\", \"orderReference\": \"or-123456\" } } } Show fields Hide fields Required Field Type Description   subsite string(40) The subsite field can be used to perform a split settlement on the payment. The different subsite values must be resolved with Swedbank Pay reconciliation before being used. If you send in an unknown subsite value, it will be ignored and the payment will be settled using the merchant’s default settlement account. Must be in the format of A-Za-z0-9.   siteId string(15) siteId is used for split settlement transactions when you, as a merchant, need to specify towards AMEX which sub-merchant the transaction belongs to. Must be in the format of A-Za-z0-9. The Upsides Of Split Settlement Connecting sub-merchants to Swedbank Pay through the super merchant instead of having separate setups has a lot of pros: You only need one agreement for each payment method (credit card, Vipps, Swish, MobilePay Online, invoice) and payment gateway. You only need one acquiring agreement. You only need one Vipps or Swish certificate. You can add more payment methods easily, as it only has to be done once. New sub-merchants can be set up quickly, as the only thing needed is a KYC form and a subsite number. This shortens the setup time to a matter of hours for both you and us. The automatic settlement split and deduction of fees and revenue cuts minimizes the work for your accounting department, as you won’t have to invoice your sub-merchants. The subsite split is available for all payment methods we offer on our eCom platform. Split Settlement Admin Functions With regards to admin functions, we offer a full integration towards our Merchant Portal system. This way, you do not have to log in to the Merchant Portal to perform these operations. Capture And Cancel Captures and cancels are done by the super merchant the same way as all other flows. Reversal In cases where you need to do reversals, this will be performed by the super merchant. The reversal amount will be charged from the sub-merchants subsite number. If the sub-merchants balance is 0 (zero), the super merchant will be invoiced. The super merchant will in turn have to invoice this amount to the sub merchant.",
    "tags": "",
    "url": "/checkout-v3/features/balancing-the-books/split-settlement/"
  },{
    "title": "Start",
    "text": "Start The start method initializes the PAXTrmImp_1 instance and starts the listener if default mode is desired. Whether default mode or client only mode is chosen depends on the SaleCapabilities string in the SaleApplInfo object. If default is desired the correct string is already there. For client only mode the SaleCapabilities string must only contain SaleCapabilities.PrinterReceipt. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 class PaxImplementation : ISwpTrmCallbackInterface { public ISwpTrmIf_1 PAX = {get; internal set; } = null; public bool ClientOnly {get; set} = false; . . . SaleApplInfo si = new SaleApplInfo() { // provider identification is company or brand name ProviderIdentification = \"The best\", SoftwareVersion = \"1.0\", ApplicationName = \"A Demo\", POIID = POIID, }; // If ClientOnly is desired, overwrite the default SaleCapabilities if (ClientOnly) { si.SaleCapabilities = SaleCapabilitiesEnum.PrinterReceipt.ToString(); } // Initialize and start listener unless ClientOnly PAX.Start(si); . . . Closer look at SaleApplInfo The only default value in SaleApplInfo is SaleCapabilities for default integration 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 namespace SwpTrmLib { // // Summary: // SaleApplInfo is information used in the LoginRequest towards the terminal. public class SaleApplInfo { public string ProviderIdentification { get; set; } public string ApplicationName { get; set; } public string SoftwareVersion { get; set; } public string POIID { get; set; } // Summary: // Default SaleCapabilities will result in a listener being started on a configured port. // To use Client Only Mode use only the value SaleCapabilitiesEnum.PrinterReceipt. public string SaleCapabilities public SaleTerminalEnvironment SaleTerminalEnvironment { get; set; } } } Next Back",
    "tags": "",
    "url": "/pax-terminal/NET/tutorial/quick-guide/start/"
  },{
    "title": "Start",
    "text": "Method Signature void Start(SaleApplInfo appinfo=null) Description The Start method initializes the created instance with, among other parameters, the very essential POIID. The POIID is decided together with Swedbank Pay and is an identifier of the Point Of Interaction. Its value should stay the same at all time. Through this id the terminal knows what parameters to fetch from the TMS. This makes it easy to replace a terminal with another since it will retrieve the same parameters that were used by the replaced terminal. With this call it is also decided whether to start a listener for terminal requests too, or if just running as a client. Leaving out the SalesCapabilities will use the default values and start a listener. If using more than one terminal methods Create and Start must be called for each instance. However, there will only be one listener started. info Note: If several terminals are used, there is only one listener and all terminals call the same port. 1 2 3 4 5 6 7 8 PAX.Start(new SaleApplInfo() { ApplicationName = \"Quick Demo\", ProviderIdentification = \"SwP\", SoftwareVersion = \"0.1\", POIID = \"A-POIID\", SaleCapabilities = SaleCapabilitiesEnum.PrinterReceipt.ToString() // Client only mode! });",
    "tags": "",
    "url": "/pax-terminal/NET/SwpTrmLib/Methods/essential/start/"
  },{
    "title": "Status Response Models",
    "text": "The status field indicates the payment order’s current status. Initialized is returned when the payment is created and still ongoing. The request example above has this status. Paid is returned when the payer has completed the payment successfully. Failed is returned when a payment has failed. You will find an error message in the failed section. Cancelled is returned when an authorized amount has been fully cancelled. Reversed is returned when the full amount of a sale transaction or a captured transaction has been reversed. The transaction will now have status Reversed instead of Paid. It will contain fields from both the cancelled description and paid section. Aborted is returned when the merchant has aborted the payment or if the payer cancelled the payment in the redirect integration (on the redirect page). Aborted A payment order response with the status Aborted. Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x api-supported-versions: 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 { \"paymentOrder\": { \"id\": \"/psp/paymentorders/2c3f7a3e-65ca-4493-ac93-08d9dcb313fd\", \"created\": \"2022-01-24T10:54:05.6243371Z\", \"updated\": \"2022-01-24T10:54:19.2679591Z\", \"operation\": \"Purchase\", \"status\": \"Aborted\", \"currency\": \"SEK\", \"amount\": 32000, \"vatAmount\": 0, \"description\": \"Abort test\", \"initiatingSystemUserAgent\": \"swedbankpay-sdk-dotnet/3.0.1\", \"language\": \"sv-SE\", \"availableInstruments\": [ \"CreditCard\", \"Invoice-PayExFinancingSe\", \"Invoice-PayMonthlyInvoiceSe\", \"Swish\", \"CreditAccount\", \"Trustly\" ], \"instrumentMode\": false, \"guestMode\": false, \"orderItems\": { \"id\": \"/psp/paymentorders/2c3f7a3e-65ca-4493-ac93-08d9dcb313fd/orderitems\" }, \"urls\": { \"id\": \"/psp/paymentorders/2c3f7a3e-65ca-4493-ac93-08d9dcb313fd/urls\" }, \"payeeInfo\": { \"id\": \"/psp/paymentorders/2c3f7a3e-65ca-4493-ac93-08d9dcb313fd/payeeinfo\" }, \"payer\": { \"id\": \"/psp/paymentorders/2c3f7a3e-65ca-4493-ac93-08d9dcb313fd/payers\" }, \"history\": { \"id\": \"/psp/paymentorders/2c3f7a3e-65ca-4493-ac93-08d9dcb313fd/history\" }, \"failed\": { \"id\": \"/psp/paymentorders/2c3f7a3e-65ca-4493-ac93-08d9dcb313fd/failed\" }, \"aborted\": { \"id\": \"/psp/paymentorders/2c3f7a3e-65ca-4493-ac93-08d9dcb313fd/aborted\" }, \"paid\": { \"id\": \"/psp/paymentorders/2c3f7a3e-65ca-4493-ac93-08d9dcb313fd/paid\" }, \"cancelled\": { \"id\": \"/psp/paymentorders/2c3f7a3e-65ca-4493-ac93-08d9dcb313fd/cancelled\" }, \"financialTransactions\": { \"id\": \"/psp/paymentorders/2c3f7a3e-65ca-4493-ac93-08d9dcb313fd/financialtransactions\" }, \"failedAttempts\": { \"id\": \"/psp/paymentorders/2c3f7a3e-65ca-4493-ac93-08d9dcb313fd/failedattempts\" }, \"metadata\": { \"id\": \"/psp/paymentorders/2c3f7a3e-65ca-4493-ac93-08d9dcb313fd/metadata\" } }, \"operations\": [ ] } Response fields not covered in the Initialized redirect or seamless view responses: Field Type Description operations array The array of operations that are possible to perform on the payment order in its current state. As this is an aborted payment, the available operations are redirect-checkout or view-checkout, depending on the integration. See Operations for details Cancelled The cancel response is not yet converted to the new standard. Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x api-supported-versions: 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 { \"payment\": \"/psp/paymentorders/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"cancellation\": { \"id\": \"/psp/paymentorders/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/cancellations/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"transaction\": { \"id\": \"/psp/paymentorders/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2022-01-31T09:49:13.7567756Z\", \"updated\": \"2022-01-31T09:49:14.7374165Z\", \"type\": \"Cancellation\", \"state\": \"Completed\", \"number\": 71100732065, \"amount\": 1500, \"vatAmount\": 375, \"description\": \"Test Cancellation\", \"payeeReference\": \"AB123\" } } } Show fields Hide fields Property Type Description payment string The relative URL of the payment this cancellation transaction belongs to. cancellation object The cancellation object, containing information about the cancellation transaction. id string The relative URL of the cancellation transaction. transaction object The object representation of the generic transaction resource, containing information about the current transaction. id string The relative URL of the current transaction resource. created string The ISO-8601 date and time of when the transaction was created. updated string The ISO-8601 date and time of when the transaction was updated. type string Indicates the transaction type. state string Initialized, Completed or Failed. Indicates the state of the transaction. number integer The transaction number, useful when there’s need to reference the transaction in human communication. Not usable for programmatic identification of the transaction, where id should be used instead. amount integer The transaction amount (including VAT, if any) entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The amount displayed is the final amount the payer paid for their order, including any payment method specific discounts or fees. vatAmount integer The payment’s VAT (Value Added Tax) amount, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The vatAmount entered will not affect the amount shown on the payment page, which only shows the total amount. This field is used to specify how much of the total amount the VAT will be. Set to 0 (zero) if there is no VAT amount charged. description string A human readable description of maximum 40 characters of the transaction. payeeReference string A unique reference from the merchant system. Set per operation to ensure an exactly-once delivery of a transactional operation. Length and content validation depends on whether the transaction.number or the payeeReference is sent to the acquirer. If Swedbank Pay handles the settlement, the transaction.number is sent and the payeeReference must be in the format of A-Za-z0-9 and string(30). If you handle the settlement, Swedbank Pay will send the payeeReference and it will be limited to the format of string(12). All characters must be digits. In Invoice Payments payeeReference is used as an invoice/receipt number, if the receiptReference is not defined. Failed The failed response is not yet converted to the new standard. Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x api-supported-versions: 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 { \"payment\": \"/psp/paymentorders/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"failed\": { \"id\": \"/psp/paymentorders/bc2832a7-0e0f-45f2-57d6-08d9ea4cff66/failed\", \"problem\": { \"type\": \"acquirerinsufficientfunds\", \"title\": \"Operation failed\", \"status\": 403, \"detail\": \"Unable to complete Recurrence transaction, look at problem node!\", \"problems\": [ { \"name\": \"ExternalResponse\", \"description\": \"REJECTED_BY_ACQUIRER_INSUFFICIENT_FUNDS-insufficient funds, response-code: 61\" } ] } } } Show fields Hide fields Field Type Description paymentOrder object The payment order object. failed object The failed object. id string The relative URL and unique identifier of the paymentorder resource . Please read about URL Usage to understand how this and other URLs should be used in your solution. problem object The problem object. type string The type of problem that occurred. title string The title of the problem that occurred. status integer The HTTP status code that the problem was served with. detail string A detailed, human readable description of the error. problems array The array of problem detail objects. name string The name of the field, header, object, entity or likewise that was erroneous. description string The human readable description of what was wrong with the field, header, object, entity or likewise identified by name. Initialized Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x api-supported-versions: 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 { \"paymentOrder\": { \"id\": \"/psp/paymentorders/ca59fa8a-3423-40e5-0f77-08d9d133750b\", \"created\": \"2022-01-07T07:58:26.1300282Z\", \"updated\": \"2022-01-07T08:17:44.6839034Z\", \"operation\": \"Purchase\", \"status\": \"Initialized\", \"currency\": \"SEK\", \"amount\": 1500, \"vatAmount\": 375, \"description\": \"Test Purchase\", \"initiatingSystemUserAgent\": \"swedbankpay-sdk-dotnet/3.0.1\", \"language\": \"sv-SE\", \"availableInstruments\": [ \"CreditCard\", \"Invoice-PayExFinancingSe\", \"Invoice-PayMonthlyInvoiceSe\", \"Swish\", \"CreditAccount\", \"Trustly\" ], \"instrumentMode\": false, \"guestMode\": false, \"payer\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/payers\" }, \"orderItems\": { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/orderitems\" }, \"history\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/history\" }, \"failed\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/failed\" }, \"aborted\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/aborted\" }, \"paid\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/paid\" }, \"cancelled\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/cancelled\" }, \"financialTransactions\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/financialtransactions\" }, \"failedAttempts\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/failedattempts\" }, \"metadata\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/metadata\" } }, \"operations\": [ { \"href\": \"https://api.payex.com/psp/paymentorders/222a50ca-b268-4b32-16fa-08d6d3b73224\", \"rel\":\"update-order\", \"method\":\"PATCH\", \"contentType\":\"application/json\" }, { \"href\": \"https://api.payex.com/psp/paymentorders/222a50ca-b268-4b32-16fa-08d6d3b73224\", \"rel\": \"abort\", \"method\": \"PATCH\", \"contentType\": \"application/json\" }, { \"href\": \"https://api.payex.com/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce\", \"rel\": \"abort-paymentattempt\", \"method\": \"PATCH\", \"contentType\": \"application/json\" } ] } Show fields Hide fields Field Type Description paymentOrder object The payment order object. id string The relative URL and unique identifier of the paymentorder resource . Please read about URL Usage to understand how this and other URLs should be used in your solution. created string The ISO-8601 date of when the payment order was created. updated string The ISO-8601 date of when the payment order was updated. operation string Determines the initial operation, defining the type of payment order created. status string Indicates the payment order’s current status. Initialized is returned when the payment is created and still ongoing. The request example above has this status. Paid is returned when the payer has completed the payment successfully. See the Paid section for further information. Failed is returned when a payment has failed. You will find an error message in the failed section. Further information here. Cancelled is returned when an authorized amount has been fully cancelled. See the Cancel feature section for further information. It will contain fields from both the cancelled description and paid section. Aborted is returned when the merchant has aborted the payment or if the payer cancelled the payment in the redirect integration (on the redirect page). See the Abort feature section for further information. currency string The currency of the payment order. amount integer The transaction amount (including VAT, if any) entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The amount displayed is the final amount the payer paid for their order, including any payment method specific discounts or fees. vatAmount integer The payment’s VAT (Value Added Tax) amount, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The vatAmount entered will not affect the amount shown on the payment page, which only shows the total amount. This field is used to specify how much of the total amount the VAT will be. Set to 0 (zero) if there is no VAT amount charged. description string(40) A textual description of the purchase. Maximum length is 40 characters. initiatingSystemUserAgent string The user agent of the HTTP client making the request, reflecting the value sent in the User-Agent header with the initial POST request which created the Payment Order. language string sv-SE, nb-NO, da-DK, en-US or fi-FI. availableInstruments string A list of payment methods available for this payment. implementation string The merchant’s Digital Payments implementation type. Enterprise or PaymentsOnly. We ask that you don’t build logic around this field’s response. It is mainly for information purposes, as the implementation types might be subject to name changes. If this should happen, updated information will be available in this table. integration string The merchant’s Digital Payments integration type. HostedView (Seamless View) or Redirect. This field will not be populated until the payer has opened the payment UI, and the client script has identified if Swedbank Pay or another URI is hosting the container with the payment iframe. We ask that you don’t build logic around this field’s response. It is mainly for information purposes, as the integration types might be subject to name changes. If this should happen, updated information will be available in this table. instrumentMode bool Set to true or false. Indicates if the payment is initialized with only one payment method available. guestMode bool Set to true or false. Indicates if the payer chose to pay as a guest or not. When using the Enterprise implementation, this is triggered by not including a payerReference or nationalIdentifier in the original payment order request. payer id The URL to the payer resource where information about the payer can be retrieved. orderItems id The URL to the orderItems resource where information about the order items can be retrieved. history id The URL to the history resource where information about the payment’s history can be retrieved. failed id The URL to the failed resource where information about the failed transactions can be retrieved. aborted id The URL to the aborted resource where information about the aborted transactions can be retrieved. paid id The URL to the paid resource where information about the paid transactions can be retrieved. cancelled id The URL to the cancelled resource where information about the cancelled transactions can be retrieved. financialTransactions id The URL to the financialTransactions resource where information about the financial transactions can be retrieved. failedAttempts id The URL to the failedAttempts resource where information about the failed attempts can be retrieved. metadata id The URL to the metadata resource where information about the metadata can be retrieved. operations array The array of operations that are possible to perform on the payment order in its current state. As this is an initialized payment, the available operations are abort, update-order and redirect-checkout or view-checkout, depending on the integration. See Operations for details. Paid The payment order response with status paid, and the paid resource expanded. Please note that the main code example is of a card payment. We have included paid resources of the remaining payment methods below the main code example. Resource examples where details are empty indicate that no details are available. The wallets Apple Pay and Vipps do not return maskedPan. Please note that while MobilePay does return this field, the value present is actually a networkToken, which represents the PAN, but is not a PAN in itself. Card Paid Resource Card Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x api-supported-versions: 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 { \"paymentOrder\": { \"id\": \"/psp/paymentorders/ca59fa8a-3423-40e5-0f77-08d9d133750b\", \"created\": \"2022-01-07T07:58:26.1300282Z\", \"updated\": \"2022-01-07T08:17:44.6839034Z\", \"operation\": \"Purchase\", \"status\": \"Paid\", \"currency\": \"SEK\", \"transactionType\": \"Authorization\", \"amount\": 1500, \"submittedAmount\": 1500, \"feeAmount\": 0, \"discountAmount\": 0, \"paymentTokenGenerated\": false, \"vatAmount\": 375, \"remainingCaptureAmount\": 1500, \"remainingCancellationAmount\": 1500, \"description\": \"Test Purchase\", \"initiatingSystemUserAgent\": \"swedbankpay-sdk-dotnet/3.0.1\", \"language\": \"sv-SE\", \"availableInstruments\": [ \"CreditCard\", \"Invoice-PayExFinancingSe\", \"Invoice-PayMonthlyInvoiceSe\", \"Swish\", \"CreditAccount\", \"Trustly\" ], \"instrumentMode\": false, \"guestMode\": false, \"orderItems\": { \"id\": \"/psp/paymentorders/ca59fa8a-3423-40e5-0f77-08d9d133750b/orderitems\" }, \"urls\": { \"id\": \"/psp/paymentorders/ca59fa8a-3423-40e5-0f77-08d9d133750b/urls\" }, \"payeeInfo\": { \"id\": \"/psp/paymentorders/ca59fa8a-3423-40e5-0f77-08d9d133750b/payeeinfo\" }, \"payer\": { \"id\": \"/psp/paymentorders/ca59fa8a-3423-40e5-0f77-08d9d133750b/payers\" }, \"history\": { \"id\": \"/psp/paymentorders/ca59fa8a-3423-40e5-0f77-08d9d133750b/history\" }, \"failed\": { \"id\": \"/psp/paymentorders/ca59fa8a-3423-40e5-0f77-08d9d133750b/failed\" }, \"aborted\": { \"id\": \"/psp/paymentorders/ca59fa8a-3423-40e5-0f77-08d9d133750b/aborted\" }, \"paid\": { \"id\": \"/psp/paymentorders/ca59fa8a-3423-40e5-0f77-08d9d133750b/paid\", \"instrument\": \"CreditCard\", \"number\": 99101548603, \"payeeReference\": \"1641542301\", \"amount\": 1500, \"details\": { \"nonPaymentToken\": \"12345678-1234-1234-1234-1234567890AB\", \"externalNonPaymentToken\": \"1234567890\", \"paymentAccountReference\": \"43f6b6d2cbd30c36627ec02247259\", \"cardBrand\": \"Visa\", \"cardType\": \"Credit\", \"maskedPan\": \"492500******0004\", \"maskedDPan\": \"49250000******04\", \"expiryDate\": \"12/2022\", \"issuerAuthorizationApprovalCode\": \"L00302\", \"acquirerTransactionType\": \"STANDARD\", \"acquirerStan\": \"302\", \"acquirerTerminalId\": \"70101301389\", \"acquirerTransactionTime\": \"2022-06-15T14:12:55.029Z\", \"transactionInitiator\": \"CARDHOLDER\", \"bin\": \"492500\" } }, \"cancelled\": { \"id\": \"/psp/paymentorders/ca59fa8a-3423-40e5-0f77-08d9d133750b/cancelled\" }, \"financialTransactions\": { \"id\": \"/psp/paymentorders/ca59fa8a-3423-40e5-0f77-08d9d133750b/financialtransactions\" }, \"failedAttempts\": { \"id\": \"/psp/paymentorders/ca59fa8a-3423-40e5-0f77-08d9d133750b/failedattempts\" }, \"metadata\": { \"id\": \"/psp/paymentorders/ca59fa8a-3423-40e5-0f77-08d9d133750b/metadata\" } }, \"operations\": [ { \"method\": \"POST\", \"href\": \"https://api.internaltest.payex.com/psp/paymentorders/ca59fa8a-3423-40e5-0f77-08d9d133750b/cancellations\", \"rel\": \"cancel\", \"contentType\": \"application/json\" }, { \"method\": \"POST\", \"href\": \"https://api.internaltest.payex.com/psp/paymentorders/ca59fa8a-3423-40e5-0f77-08d9d133750b/captures\", \"rel\": \"capture\", \"contentType\": \"application/json\" }, ] } Apple Pay paid Resource Please note that this is an abbreviated example. See the main paid example for more context. Apple Pay Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x api-supported-versions: 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 { \"paymentOrder\": \"/psp/paymentorders/5adc265f-f87f-4313-577e-08d3dca1a26c\", \"paid\": { \"id\": \"/psp/paymentorders/1f8d409e-8d8c-4ba1-a3ab-08da8caf7918/paid\", \"instrument\": \"ApplePay\", \"number\": 80100001190, \"payeeReference\": \"1662360210\", \"transactionType\": \"Authorization\", \"amount\": 1500, \"submittedAmount\": 1500, \"feeAmount\": 0, \"discountAmount\": 0, \"paymentTokenGenerated\": false, \"details\": { \"nonPaymentToken\": \"12345678-1234-1234-1234-1234567890AB\", \"externalNonPaymentToken\": \"1234567890\", \"cardBrand\": \"Visa\", \"cardType\": \"Credit\", \"maskedDPan\": \"49250000******04\", \"expiryDate\": \"12/0023\", \"issuerAuthorizationApprovalCode\": \"L00392\", \"acquirerTransactionType\": \"WALLET\", \"acquirerStan\": \"392\", \"acquirerTerminalId\": \"80100001190\", \"acquirerTransactionTime\": \"2022-09-05T06:45:40.322Z\", \"transactionInitiator\": \"CARDHOLDER\" \"bin\": \"489537\" } } } Click to Pay paid Resource Please note that this is an abbreviated example. See the main paid example for more context. Click to Pay Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x api-supported-versions: 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 { \"paymentOrder\": \"/psp/paymentorders/5adc265f-f87f-4313-577e-08d3dca1a26c\", \"paid\": { \"id\": \"/psp/paymentorders/1f8d409e-8d8c-4ba1-a3ab-08da8caf7918/paid\", \"instrument\": \"ClickToPay\", \"number\": 80100001190, \"payeeReference\": \"1662360210\", \"amount\": 1500, \"paymentTokenGenerated\": false, \"details\": { \"nonPaymentToken\": \"12345678-1234-1234-1234-1234567890AB\", \"externalNonPaymentToken\": \"1234567890\", \"cardBrand\": \"Visa\", \"cardType\": \"Credit\", \"maskedPan\": \"492500******0004\", \"maskedDPan\": \"49250000******04\", \"expiryDate\": \"12/0023\", \"issuerAuthorizationApprovalCode\": \"L00392\", \"acquirerTransactionType\": \"WALLET\", \"acquirerStan\": \"392\", \"acquirerTerminalId\": \"80100001190\", \"acquirerTransactionTime\": \"2022-09-05T06:45:40.322Z\", \"transactionInitiator\": \"CARDHOLDER\" \"bin\": \"489537\" } } } Google Pay™ paid Resource Please note that this is an abbreviated example. See the main paid example for more context. Google Pay&trade; Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x api-supported-versions: 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 { \"paymentOrder\": \"/psp/paymentorders/5adc265f-f87f-4313-577e-08d3dca1a26c\", \"paid\": { \"id\": \"/psp/paymentorders/1f8d409e-8d8c-4ba1-a3ab-08da8caf7918/paid\", \"instrument\": \"GooglePay\", \"number\": 80100001190, \"payeeReference\": \"1662360210\", \"amount\": 1500, \"paymentTokenGenerated\": false, \"details\": { \"nonPaymentToken\": \"12345678-1234-1234-1234-1234567890AB\", \"externalNonPaymentToken\": \"1234567890\", \"cardBrand\": \"Visa\", \"cardType\": \"Credit\", \"maskedPan\": \"492500******0004\", \"maskedDPan\": \"49250000******04\", \"expiryDate\": \"12/0023\", \"issuerAuthorizationApprovalCode\": \"L00392\", \"acquirerTransactionType\": \"WALLET\", \"acquirerStan\": \"392\", \"acquirerTerminalId\": \"80100001190\", \"acquirerTransactionTime\": \"2022-09-05T06:45:40.322Z\", \"transactionInitiator\": \"CARDHOLDER\" \"bin\": \"489537\" } } } MobilePay paid Resource Please note that this is an abbreviated example. See the main paid example for more context. MobilePay Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x api-supported-versions: 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 { \"paymentOrder\": \"/psp/paymentorders/5adc265f-f87f-4313-577e-08d3dca1a26c\", \"paid\": { \"id\": \"/psp/paymentorders/efdcbf77-9a62-426b-a3b1-08da8caf7918/paid\", \"instrument\": \"MobilePay\", \"number\": 75100106637, \"payeeReference\": \"1662364327\", \"transactionType\": \"Authorization\", \"amount\": 1500, \"submittedAmount\": 1500, \"feeAmount\": 0, \"discountAmount\": 0, \"paymentTokenGenerated\": false, \"details\": { \"nonPaymentToken\": \"12345678-1234-1234-1234-1234567890AB\", \"externalNonPaymentToken\": \"1234567890\", \"cardBrand\": \"Visa\", \"maskedPan\": \"492500******0004\", \"maskedDPan\": \"49250000******04\", \"expiryDate\": \"12/2022\", \"issuerAuthorizationApprovalCode\": \"018117\", \"acquirerTransactionType\": \"MOBILEPAY\", \"acquirerStan\": \"53889\", \"acquirerTerminalId\": \"42\", \"acquirerTransactionTime\": \"2022-09-05T09:54:05Z\" \"bin\": \"489537\" } } } Vipps paid Resource Please note that this is an abbreviated example. See the main paid example for more context. Vipps Response Vipps Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x api-supported-versions: 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 { \"paymentOrder\": \"/psp/paymentorders/5adc265f-f87f-4313-577e-08d3dca1a26c\", \"paid\": { \"id\": \"/psp/paymentorders/a463b145-3278-4aa0-c4db-08da8f1813a2/paid\", \"instrument\": \"Vipps\", \"number\": 99463794, \"payeeReference\": \"1662366424\", \"amount\": 1500, \"transactionType\": \"Authorization\", \"amount\": 1500, \"submittedAmount\": 1500, \"feeAmount\": 0, \"discountAmount\": 0, \"paymentTokenGenerated\": false, \"details\": { \"nonPaymentToken\": \"12345678-1234-1234-1234-1234567890AB\", \"externalNonPaymentToken\": \"1234567890\" \"cardBrand\": \"Visa\", \"maskedDPan\": \"49250000******04\", \"acquirerTransactionType\": \"WALLET\", \"acquirerTerminalId\": \"99488282\", \"acquirerTransactionTime\": \"2022-09-05T09:54:05Z\", \"transactionInitiator\": \"CARDHOLDER\", \"bin\": \"489537\" } } } Swish paid Resource Please note that this is an abbreviated example. See the main paid example for more context. Swish Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x api-supported-versions: 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 { \"paymentOrder\": \"/psp/paymentorders/5adc265f-f87f-4313-577e-08d3dca1a26c\", \"paid\": { \"id\": \"/psp/paymentorders/b0410cd0-61df-4548-a3ad-08da8caf7918/paid\", \"instrument\": \"Swish\", \"number\": 74100413405, \"payeeReference\": \"1662360831\", \"transactionType\": \"Sale\", \"amount\": 1500, \"submittedAmount\": 1500, \"feeAmount\": 0, \"discountAmount\": 0, \"paymentTokenGenerated\": false, \"details\": { \"misidn\": \"+46739000001\" } } } Invoice Paid Resource Please note that this is an abbreviated example. See the main Paid example for more context. Invoice Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x api-supported-versions: 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 { \"paymentOrder\": \"/psp/paymentorders/5adc265f-f87f-4313-577e-08d3dca1a26c\", \"paid\": { \"id\": \"/psp/paymentorders/05a356df-05e2-49e6-8858-08da8cb4d651/paid\", \"instrument\": \"Invoice\", \"number\": 71100775379, \"payeeReference\": \"1662360980\", \"transactionType\": \"Authorization\", \"amount\": 1500, \"submittedAmount\": 1500, \"feeAmount\": 0, \"discountAmount\": 0, \"paymentTokenGenerated\": false, \"details\": {} } } Installment Account Paid Resource Please note that this is an abbreviated example. See the main Paid example for more context. Installment Account Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x api-supported-versions: 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 { \"paymentOrder\": \"/psp/paymentorders/5adc265f-f87f-4313-577e-08d3dca1a26c\", \"paid\": { \"id\": \"/psp/paymentorders/39eef759-a619-4c91-885b-08da8cb4d651/paid\", \"instrument\": \"CreditAccount\", \"number\": 77100038000, \"payeeReference\": \"1662361777\", \"transactionType\": \"Authorization\", \"amount\": 1500, \"submittedAmount\": 1500, \"feeAmount\": 0, \"discountAmount\": 0, \"paymentTokenGenerated\": false, \"details\": {} } } Trustly Paid Resource Please note that this is an abbreviated example. See the main Paid example for more context. Trustly Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x api-supported-versions: 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 { \"paymentOrder\": \"/psp/paymentorders/5adc265f-f87f-4313-577e-08d3dca1a26c\", \"paid\": { \"id\": \"/psp/paymentorders/bf660901-93d0-4245-4e6b-08da8f165366/paid\", \"instrument\": \"Trustly\", \"number\": 79100113652, \"payeeReference\": \"1662373401\", \"orderReference\": \"orderReference\", \"transactionType\": \"Sale\", \"amount\": 1500, \"submittedAmount\": 1500, \"feeAmount\": 0, \"discountAmount\": 0, \"paymentTokenGenerated\": false, \"details\": { \"trustlyOrderId\": 123456789 } } } Response fields not covered in the Initialized redirect or seamless view responses: Show fields Hide fields Field Type Description remainingCaptureAmount integer The remaining authorized amount that is still possible to capture. remainingCancellationAmount integer The remaining authorized amount that is still possible to cancel. paid object The paid object. id string The relative URL and unique identifier of the paymentorder resource . Please read about URL Usage to understand how this and other URLs should be used in your solution. instrument string The payment method used in the fulfillment of the payment. Do not use this field for code validation purposes. To determine if a capture is needed, we recommend using operations or the transactionType field. number integer The transaction number, useful when there’s need to reference the transaction in human communication. Not usable for programmatic identification of the transaction, where id should be used instead. payeeReference string A unique reference from the merchant system. Set per operation to ensure an exactly-once delivery of a transactional operation. Length and content validation depends on whether the transaction.number or the payeeReference is sent to the acquirer. If Swedbank Pay handles the settlement, the transaction.number is sent and the payeeReference must be in the format of A-Za-z0-9 and string(30). If you handle the settlement, Swedbank Pay will send the payeeReference and it will be limited to the format of string(12). All characters must be digits. transactionType string This will either be set to Authorization or Sale. Can be used to understand if there is a need for doing a capture on this payment order. Swedbank Pay recommends using the different operations to figure out if a capture is needed. amount integer The transaction amount (including VAT, if any) entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The amount displayed is the final amount the payer paid for their order, including any payment method specific discounts or fees. submittedAmount integer This field will display the initial payment order amount, not including any discounts or fees specific to a payment method. The final payment order amount will be displayed in the amount field. feeAmount integer If the payment method used had a unique fee, it will be displayed in this field. discountAmount integer If the payment method used had a unique discount, it will be displayed in this field. paymentTokenGenerated bool Set to true or false. Used to show if a payment token has been generated or not. Will be set to true if the checkbox enabled by EnablePaymentDetailsConsentCheckbox has been checked by the payer during a payment, otherwise false. details integer Details connected to the payment. nonPaymentToken string The result of our own card tokenization. Activated in POS for the merchant or merchant group. externalNonPaymentToken string The result of an external tokenization. This value will vary depending on card types, acquirers, customers, etc. For Mass Transit merchants, transactions will be populated with the paymentAccountReference. paymentAccountReference string The result of an external tokenization. The value will vary depending on card types, acquirers, customers, etc. For Mass Transit merchants, the paymentAccountReference will also populate the externalNonPaymentToken field. cardType string Credit Card or Debit Card. Indicates the type of card used for the authorization. maskedPan string The masked PAN number of the card. maskedDPan string A masked version of a network token representing the card. It will only appear if the chosen payment method is tokenized and the card used is tokenized by Visa or MasterCard. expiryDate string The month and year of when the card expires. issuerAuthorizationApprovalCode string Payment reference code provided by the issuer. acquirerTransactionType string 3DSECURE or STANDARD. Indicates the transaction type of the acquirer. acquirerStan string The System Trace Audit Number assigned by the acquirer to uniquely identify the transaction. acquirerTerminalId string The ID of the acquirer terminal. acquirerTransactionTime string The ISO-8601 date and time of the acquirer transaction. transactionInitatior string The party which initiated the transaction. MERCHANT or CARDHOLDER. bin string The first six digits of the maskedPan. msisdn string The msisdn used in the purchase. Only available when paid with Swish. operations array The array of operations that are possible to perform on the payment order in its current state. As this is a paid payment, the available operations are capture, cancel and redirect-checkout or view-checkout, depending on the integration. See Operations for details Paid Examples With Connected Tokens If there e.g. is a recurrence or an unscheduled (below) token connected to the payment, it will appear like this. Recurrence Token Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x api-supported-versions: 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 { \"paid\": { \"id\": \"/psp/paymentorders/91c3ca0d-3710-40f0-0f78-08d9d133750b/paid\", \"instrument\": \"CreditCard\", \"number\": 99101548605, \"payeeReference\": \"1641543637\", \"amount\": 1500, \"tokens\": [ { \"type\": \"recurrence\", \"token\": \"48806524-6422-4db7-9fbd-c8b81611132f\", \"name\": \"492500******0004\", \"expiryDate\": \"02/2023\" } ], \"details\": {} } } Unscheduled Token Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x api-supported-versions: 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 { \"paid\": { \"id\": \"/psp/paymentorders/9f786139-3537-4a8b-0f79-08d9d133750b/paid\", \"instrument\": \"CreditCard\", \"number\": 99101548607, \"payeeReference\": \"1641543818\", \"amount\": 1500, \"tokens\": [ { \"type\": \"Unscheduled\", \"token\": \"6d495aac-cb2b-4d94-a5f1-577baa143f2c\", \"name\": \"492500******0004\", \"expiryDate\": \"02/2023\" } ], \"details\": {} } } Response fields not covered in the Initialized redirect or seamless view responses: Field Type Description tokens integer A list of tokens connected to the payment. type string payment, recurrence, transactionOnFile or unscheduled. The different types of available tokens. token string The token guid. name string The name of the token. In the example, a masked version of a card number. expiryDate string The expiry date of the token. Reversed The payment order response with status equal to Reversed, and the reversed resource expanded. Please note that the main code example is of a card reversal. Apart from the id and number fields, the output will be inherited from the corresponding Paid transaction. As several Reversed transactions can exist on a single payment, the number and payerReference will be from the latest Reversed. We have included reversal resources of the remaining payment methods below the main code example. Resource examples where details are empty indicate that no details are available. The wallets Apple Pay and Vipps do not return maskedPan. Please note that while MobilePay does return this field, the value present is actually a networkToken, which represents the PAN, but is not a PAN in itself. Request 1 2 3 4 GET /psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/reversed HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.x Card Reversed Resource Card Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x api-supported-versions: 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 { \"paymentOrder\": \"/psp/paymentorders/5adc265f-f87f-4313-577e-08d3dca1a26c\", \"reversed\": { \"id\": \"/psp/paymentorders/5adc265f-f87f-4313-577e-08d3dca1a26c/reversed\", \"instrument\": \"Creditcard\", \"number\": 1234567890, \"payeeReference\": \"CD123\", \"orderReference\": \"AB1234\", \"transactionType\": \"Authorization\", \"amount\": 1500, \"submittedAmount\": 1500, \"feeAmount\": 0, \"discountAmount\": 0, \"tokens\": [ { \"type\": \"payment\", \"token\": \"12345678-1234-1234-1234-1234567890AB\", \"name\": \"4925xxxxxx000004\", \"expiryDate\" : \"mm/yyyy\" }, { \"type\": \"recurrence\", \"token\": \"87654321-4321-4321-4321-BA0987654321\", \"name\": \"4925xxxxxx000004\", \"expiryDate\" : \"mm/yyyy\" }, { \"type\": \"unscheduled\", \"token\": \"87654321-4321-4321-4321-BA0987654321\", \"name\": \"4925xxxxxx000004\", \"expiryDate\" : \"mm/yyyy\" }, { \"type\": \"transactionsOnFile\", \"token\": \"87654321-4321-4321-4321-BA0987654321\", \"name\": \"4925xxxxxx000004\", \"expiryDate\" : \"mm/yyyy\" } ], \"details\": { \"nonPaymentToken\": \"12345678-1234-1234-1234-1234567890AB\", \"externalNonPaymentToken\": \"1234567890\", \"paymentAccountReference\": \"43f6b6d2cbd30c36627ec02247259\", \"cardBrand\": \"Visa\", \"cardType\": \"Credit\", \"maskedPan\": \"492500******0004\", \"maskedDPan\": \"49250000******04\", \"expiryDate\": \"12/2022\", \"issuerAuthorizationApprovalCode\": \"L00302\", \"acquirerTransactionType\": \"STANDARD\", \"acquirerStan\": \"302\", \"acquirerTerminalId\": \"70101301389\", \"acquirerTransactionTime\": \"2022-06-15T14:12:55.029Z\", \"transactionInitiator\": \"CARDHOLDER\", \"bin\": \"492500\" } } Apple Pay Reversed Resource Please note that this is an abbreviated example. See the main Reversed example for more context. Apple Pay Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x api-supported-versions: 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 { \"paymentOrder\": \"/psp/paymentorders/5adc265f-f87f-4313-577e-08d3dca1a26c\", \"reversed\": { \"id\": \"/psp/paymentorders/1f8d409e-8d8c-4ba1-a3ab-08da8caf7918/reversed\", \"instrument\": \"ApplePay\", \"number\": 80100001190, \"payeeReference\": \"1662360210\", \"transactionType\": \"Authorization\", \"amount\": 1500, \"submittedAmount\": 1500, \"feeAmount\": 0, \"discountAmount\": 0, \"details\": { \"cardBrand\": \"Visa\", \"cardType\": \"Credit\", \"maskedDPan\": \"49250000******04\", \"expiryDate\": \"12/2023\", \"issuerAuthorizationApprovalCode\": \"L00392\", \"acquirerTransactionType\": \"WALLET\", \"acquirerStan\": \"392\", \"acquirerTerminalId\": \"80100001190\", \"acquirerTransactionTime\": \"2022-09-05T06:45:40.322Z\", \"transactionInitiator\": \"CARDHOLDER\", \"bin\": \"492500\" } } } Click to Pay Reversed Resource Please note that this is an abbreviated example. See the main Reversed example for more context. Click to Pay Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x api-supported-versions: 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 { \"paymentOrder\": \"/psp/paymentorders/5adc265f-f87f-4313-577e-08d3dca1a26c\", \"reversed\": { \"id\": \"/psp/paymentorders/1f8d409e-8d8c-4ba1-a3ab-08da8caf7918/reversed\", \"instrument\": \"ClickToPay\", \"number\": 80100001190, \"payeeReference\": \"1662360210\", \"amount\": 1500, \"details\": { \"nonPaymentToken\": \"12345678-1234-1234-1234-1234567890AB\", \"externalNonPaymentToken\": \"1234567890\", \"cardBrand\": \"Visa\", \"cardType\": \"Credit\", \"maskedPan\": \"492500******0004\", \"maskedDPan\": \"49250000******04\", \"expiryDate\": \"12/0023\", \"issuerAuthorizationApprovalCode\": \"L00392\", \"acquirerTransactionType\": \"WALLET\", \"acquirerStan\": \"392\", \"acquirerTerminalId\": \"80100001190\", \"acquirerTransactionTime\": \"2022-09-05T06:45:40.322Z\", \"transactionInitiator\": \"CARDHOLDER\" \"bin\": \"489537\" } } } Google Pay™ Reversed Resource Please note that this is an abbreviated example. See the main Reversed example for more context. Google Pay&trade; Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x api-supported-versions: 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 { \"paymentOrder\": \"/psp/paymentorders/5adc265f-f87f-4313-577e-08d3dca1a26c\", \"reversed\": { \"id\": \"/psp/paymentorders/1f8d409e-8d8c-4ba1-a3ab-08da8caf7918/reversed\", \"instrument\": \"GooglePay\", \"number\": 80100001190, \"payeeReference\": \"1662360210\", \"amount\": 1500, \"details\": { \"nonPaymentToken\": \"12345678-1234-1234-1234-1234567890AB\", \"externalNonPaymentToken\": \"1234567890\", \"cardBrand\": \"Visa\", \"cardType\": \"Credit\", \"maskedPan\": \"492500******0004\", \"maskedDPan\": \"49250000******04\", \"expiryDate\": \"12/0023\", \"issuerAuthorizationApprovalCode\": \"L00392\", \"acquirerTransactionType\": \"WALLET\", \"acquirerStan\": \"392\", \"acquirerTerminalId\": \"80100001190\", \"acquirerTransactionTime\": \"2022-09-05T06:45:40.322Z\", \"transactionInitiator\": \"CARDHOLDER\" \"bin\": \"489537\" } } } MobilePay Reversed Resource Please note that this is an abbreviated example. See the main Reversed example for more context. MobilePay Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x api-supported-versions: 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 { \"paymentOrder\": \"/psp/paymentorders/5adc265f-f87f-4313-577e-08d3dca1a26c\", \"reversed\": { \"id\": \"/psp/paymentorders/efdcbf77-9a62-426b-a3b1-08da8caf7918/reversed\", \"instrument\": \"MobilePay\", \"number\": 75100106637, \"payeeReference\": \"1662364327\", \"transactionType\": \"Authorization\", \"amount\": 1500, \"submittedAmount\": 1500, \"feeAmount\": 0, \"discountAmount\": 0, \"details\": { \"nonPaymentToken\": \"12345678-1234-1234-1234-1234567890AB\", \"externalNonPaymentToken\": \"1234567890\", \"cardBrand\": \"Visa\", \"maskedDPan\": \"48953700******04\", \"expiryDate\": \"12/2022\", \"issuerAuthorizationApprovalCode\": \"018117\", \"acquirerTransactionType\": \"MOBILEPAY\", \"acquirerStan\": \"53889\", \"acquirerTerminalId\": \"42\", \"acquirerTransactionTime\": \"2022-09-05T09:54:05Z\", \"bin\": \"489537\" } } } Vipps Reversed Resource Please note that this is an abbreviated example. See the main Reversed example for more context. Vipps Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x api-supported-versions: 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 { \"paymentOrder\": \"/psp/paymentorders/5adc265f-f87f-4313-577e-08d3dca1a26c\", \"reversed\": { \"id\": \"/psp/paymentorders/a463b145-3278-4aa0-c4db-08da8f1813a2/reversed\", \"instrument\": \"Vipps\", \"number\": 99463794, \"payeeReference\": \"1662366424\", \"transactionType\": \"Authorization\", \"amount\": 1500, \"submittedAmount\": 1500, \"feeAmount\": 0, \"discountAmount\": 0, \"details\": { \"nonPaymentToken\": \"12345678-1234-1234-1234-1234567890AB\", \"externalNonPaymentToken\": \"1234567890\", \"cardBrand\": \"Visa\", \"maskedDPan\": \"49250000******04\", \"acquirerTransactionType\": \"WALLET\", \"acquirerTerminalId\": \"99488282\", \"acquirerTransactionTime\": \"2022-09-05T09:54:05Z\", \"transactionInitiator\": \"CARDHOLDER\", \"bin\": \"489537\" } } } Swish Reversed Resource Please note that this is an abbreviated example. See the main Reversed example for more context. Swish Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x api-supported-versions: 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 { \"paymentOrder\": \"/psp/paymentorders/5adc265f-f87f-4313-577e-08d3dca1a26c\", \"reversed\": { \"id\": \"/psp/paymentorders/b0410cd0-61df-4548-a3ad-08da8caf7918/reversed\", \"instrument\": \"Swish\", \"number\": 74100413405, \"payeeReference\": \"1662360831\", \"transactionType\": \"Sale\", \"amount\": 1500, \"submittedAmount\": 1500, \"feeAmount\": 0, \"discountAmount\": 0, \"details\": { \"misidn\": \"+46739000001\" } } } Invoice Reversed Resource Please note that this is an abbreviated example. See the main Reversed example for more context. Invoice Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x api-supported-versions: 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 { \"paymentOrder\": \"/psp/paymentorders/5adc265f-f87f-4313-577e-08d3dca1a26c\", \"reversed\": { \"id\": \"/psp/paymentorders/05a356df-05e2-49e6-8858-08da8cb4d651/reversed\", \"instrument\": \"Invoice\", \"number\": 71100775379, \"payeeReference\": \"1662360980\", \"transactionType\": \"Authorization\", \"amount\": 1500, \"submittedAmount\": 1500, \"feeAmount\": 0, \"discountAmount\": 0, \"details\": {} } } Installment Account Reversed Resource Please note that this is an abbreviated example. See the main Reversed example for more context. Installment Account Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x api-supported-versions: 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 { \"paymentOrder\": \"/psp/paymentorders/5adc265f-f87f-4313-577e-08d3dca1a26c\", \"reversed\": { \"id\": \"/psp/paymentorders/39eef759-a619-4c91-885b-08da8cb4d651/reversed\", \"instrument\": \"CreditAccount\", \"number\": 77100038000, \"payeeReference\": \"1662361777\", \"transactionType\": \"Authorization\", \"amount\": 1500, \"submittedAmount\": 1500, \"feeAmount\": 0, \"discountAmount\": 0, \"details\": {} } } Trustly Reversed Resource Please note that this is an abbreviated example. See the main Reversed example for more context. Trustly Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x api-supported-versions: 3.x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 { \"paymentOrder\": \"/psp/paymentorders/5adc265f-f87f-4313-577e-08d3dca1a26c\", \"reversed\": { \"id\": \"/psp/paymentorders/bf660901-93d0-4245-4e6b-08da8f165366/reversed\", \"instrument\": \"Trustly\", \"number\": 79100113652, \"payeeReference\": \"1662373401\", \"orderReference\": \"orderReference\", \"transactionType\": \"Sale\", \"amount\": 1500, \"submittedAmount\": 1500, \"feeAmount\": 0, \"discountAmount\": 0, \"details\": { \"trustlyOrderId\": 123456789 } } } Show fields Hide fields Field Type Description paymentOrder object The payment order object. reversed object The reversed object. id string The relative URL and unique identifier of the paymentorder resource . Please read about URL Usage to understand how this and other URLs should be used in your solution. instrument string The payment method used in the fulfillment of the payment. Do not use this field for code validation purposes. To determine if a capture is needed, we recommend using operations or the transactionType field. number integer The paymentorder number, useful when there’s need to reference the paymentorder in human communication. Not usable for programmatic identification of the paymentorder, where id should be used instead. payeeReference string A unique reference from the merchant system. Set per operation to ensure an exactly-once delivery of a transactional operation. Length and content validation depends on whether the transaction.number or the payeeReference is sent to the acquirer. If Swedbank Pay handles the settlement, the transaction.number is sent and the payeeReference must be in the format of A-Za-z0-9 and string(30). If you handle the settlement, Swedbank Pay will send the payeeReference and it will be limited to the format of string(12). All characters must be digits. orderReference string(50) The order reference should reflect the order reference found in the merchant’s systems. transactionType string This will either be set to Authorization or Sale. Can be used to understand if there is a need for doing a capture on this payment order. Swedbank Pay recommends using the different operations to figure out if a capture is needed. amount integer The transaction amount (including VAT, if any) entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The amount displayed is the final amount the payer paid for their order, including any payment method specific discounts or fees. submittedAmount integer This field will display the initial payment order amount, not including any discounts or fees specific to a payment method. The final payment order amount will be displayed in the amount field. feeAmount integer If the payment method used had a unique fee, it will be displayed in this field. discountAmount integer If the payment method used had a unique discount, it will be displayed in this field. tokens integer A list of tokens connected to the payment. type string payment, recurrence, transactionOnFile or unscheduled. The different types of available tokens. token string The token guid. name string The name of the token. In the example, a masked version of a card number. expiryDate string The expiry date of the token. details integer Details connected to the payment. nonPaymentToken string The result of our own card tokenization. Activated in POS for the merchant or merchant group. externalNonPaymentToken string The result of an external tokenization. This value will vary depending on card types, acquirers, customers, etc. For Mass Transit merchants, transactions will be populated with the paymentAccountReference. paymentAccountReference string The result of an external tokenization. The value will vary depending on card types, acquirers, customers, etc. For Mass Transit merchants, the paymentAccountReference will also populate the externalNonPaymentToken field. cardType string Credit Card or Debit Card. Indicates the type of card used for the authorization. maskedPan string The masked PAN number of the card. maskedDPan string A masked version of a network token representing the card. It will only appear if the chosen payment method is tokenized and the card used is tokenized by Visa or MasterCard. expiryDate string The month and year of when the card expires. issuerAuthorizationApprovalCode string Payment reference code provided by the issuer. acquirerTransactionType string 3DSECURE or STANDARD. Indicates the transaction type of the acquirer. acquirerStan string The System Trace Audit Number assigned by the acquirer to uniquely identify the transaction. acquirerTerminalId string The ID of the acquirer terminal. acquirerTransactionTime string The ISO-8601 date and time of the acquirer transaction. transactionInitatior string The party which initiated the transaction. MERCHANT or CARDHOLDER. bin string The first six digits of the maskedPan. msisdn string The msisdn used in the purchase. Only available when paid with Swish.",
    "tags": "",
    "url": "/checkout-v3/features/technical-reference/status-models/"
  },{
    "title": "Include Purchase Order Number",
    "text": "There is a possibility to forward information to the host by using the SaleToAquirerData of PaymentRequest - SaleData. The data must be a JSON object that is Base64 encoded. Eg. PurchaseRequest with purchase order in SaleToAquirerData 1 2 3 4 5 6 7 8 9 10 11 12 &lt;SaleToPOIRequest&gt; &lt;MessageHeader ProtocolVersion=\"3.1\" MessageClass=\"Service\" MessageCategory=\"Payment\" MessageType=\"Request\" ServiceID=\"5\" SaleID=\"1\" POIID=\"A-POIID\"/&gt; &lt;PaymentRequest&gt; &lt;SaleData TokenRequestedType=\"Customer\"&gt; &lt;SaleTransactionID TransactionID=\"202402060950219170\" TimeStamp=\"2024-02-06T09:50:21+01:00\"/&gt; &lt;SaleToAcquirerData&gt;ewogICAgInB1cmNoYXNlT3JkZXJOdW1iZXIiOiAiMTIzNDU2Nzg5Igp9&lt;/SaleToAcquirerData&gt; &lt;/SaleData&gt; &lt;PaymentTransaction&gt; &lt;AmountsReq RequestedAmount=\"60\" CashBackAmount=\"0\" Currency=\"SEK\"/&gt; &lt;/PaymentTransaction&gt; &lt;/PaymentRequest&gt; &lt;/SaleToPOIRequest&gt; Eg. SaleToAquirerData Base64 decoded JSON 1 2 3 &lt;SaleToAcquirerData&gt;{ \"purchaseOrderNumber\": \"123456789\" }&lt;/SaleToAcquirerData&gt;",
    "tags": "",
    "url": "/pax-terminal/Nexo-Retailer/submit-purchse-order-number/"
  },{
    "title": "Terminology",
    "text": "0-9 3-D Secure 2.0 (3DS2) The new authentication protocol for online card payments. The protocol is XML-based and designed to be an additional security layer for online credit and debit card transactions. 3.x The umbrella term for all Digital Payments versions 3.0 and newer. If (v)3.x is used instead of a specific version (like v3.1), the feature, section or code example is applicable for all versions. A Access Token The OAauth 2 Access token needed to access Swedbank Pay eCom APIs. Tokens are generated in the Merchant Portal. Learn how to get started in the Merchant Portal Manual. Note that it must follow the regex pattern [\\w-]*. Account Receivable Consumer The AccountReceivableConsumer API is the fundament for Swedbank Pay Invoice Payments service. It is a service where Swedbank Pay helps produce and distribute invoices to payers. Authorization The first part of a two-phase transaction where a certain amount is blocked on the payer’s account. The authorized amount is unavailable for the payer, ensuring that the merchant receives the money during the subsequent capture phase. C Callback If callbackURL is set, a Callback is triggered when a change or update from the back-end system is made on a payment or transaction. Swedbank Pay performs an async callback to inform the payee/merchant about this kind of update. Cancellation Used to cancel authorized and not yet captured transactions. If a cancellation is performed after doing a part-capture, it will only affect the not yet captured authorization amount. Capture The second part of a two-phase transaction where the authorized amount is sent from the payer to the payee. It is possible to do a part-capture on a subset of the authorized amount. Several captures on the same payment are possible, up to the total authorization amount. Checkin Checkin is the first part of the Swedbank Pay Checkout v2 flow (prior to displaying the Payment Menu), where the payer is identified by email and mobile phone number. Consumer The person doing the purchase, equivalent to Payer. Consumers The Consumers resource stores information about the consumer of the sold services or goods. It is the fundament of Checkin in Swedbank Pay Checkout v2. F Financing Consumer The FinancingConsumer Invoice API is the fundament for Swedbank Pay Invoice Payments service. It is a service where Swedbank Pay helps improve cashflow by purchasing merchant invoices. H Header An HTTP header used to carry information when doing an API Request. All API requests share some common headers. I Intent An intent is a payment parameter that determines the possible activity states available for a payment option (e.g. Purchase). Intents differ depening on the payment method used. Creating a payment within a one-phase payment flow (Swish, Direct debit) must have the intent to create a Sale. This is in contrast to a two-phase payment flow that have the intent to create an Authorization. M Merchant Portal The Merchant Portal interface where you perform day to day operations on payments processed by Swedbank Pay. The Merchant Portal manual consists of two parts, [Getting Started and Interface and Search. O One-phase payment flow A one-phase payment is a payment done in one step. The amount is settled in one transactional step. Operation A payment operation determines what kind of payment that should be implemented. Available payment operations vary, depending on payment method. The most common operation all payment methods share is the Purchase operation. Card Payments have several others, such as Verify and Recur. Operations Operations consist of an array of contextual links / actions that direct the payment flow in a given state of the payment resource (i.e. creating a capture transaction, creating a reversal transaction, returning a redirect URL, etc). Operations are HATEOAS driven and managed through API calls. P Payee The company that receive funds for the payment. Payee ID The ID of the company that receive funds for the payment. Also referred to as Merchant ID. Payer The person doing the purchase, equivalent to Consumer. Payment A payment is the main resource in all of Swedbank Pay RESTful APIs, and a fundamental building block for each payment method during the payment process. The payment resource of each payment method is architectually similar, although it is tailor-made to manage the specifics of each one. It can be in different states and contain several different types of transactions. The state of the payment decides the operations that are available. Payment Menu A menu containing all the payment methods you as a merchant can and want to offer to the payer. Shown on a redirect page or embedded on the merchant’s page (Seamless View) Payment Orders The Payment Orders resource is used when initiating a payment process using the Payment Menu v2 and Swedbank Pay Checkout. What payment method the payment order will make use of is up to the payer. The payment order is a container for the payment method object selected, acessed through the sub-resources payments and currentPayment. Payment token A payment token is generated through a card purchase or card verification. It contains all necessary payment details to enable subsequent server-to-server payments. Used in One-click payments and recurring payment scenarios (Card, Invoice and Swedbank Pay Checkout). PSD2 PSD2 is the second Payment Services Directive, being the requirement for strong customer authentication. It is performed with multi-factor authentication, on the majority of electronic payments. Purchase The payment operation that initiates a purchase payment process. R Recur The payment operation that initiates a recurring payment process. It is a payment that references a recurrenceToken created through a previous payment in order to charge the same card. Reversal Used to reverse a payment. It is only possible to reverse a payment that has been captured and not yet reversed. S Sale A one-phase transaction where the amount is settled when the transaction has succeeded. Payment methods using sales transactions are Swish and Direct Bank Debit. SCA Strong Customer Authentication, which is a requirement from EU Revised Directive on Payment Services (PSD2). This implements the multi-factor authentication, for stronger security of electronic payments. Swedbank Pay Direct API A payment flow where the implementer (Swedbank Pay customer) handles all user intreraction and make direct API calls to Swedbank Pay (server-to-server). Swedbank Pay Seamless View A payment flow were the payer interacts with pages developed by Swedbank Pay directly through an iframe, directly embedded in the webshop/merchant site. Swedbank Pay Payment Pages A payment flow where the payer is redirected to a payment page developed and hosted by Swedbank Pay. T Two-phase payment flow A payment done in two steps. Authorization and capture. The most common payment method using two-phase payments is card payments. U Unscheduled Purchase An unscheduled purchase, also called a Merchant Initiated Transaction (MIT), is a payment which uses an unscheduledToken generated through a previous payment in order to charge the same card at a later time. They are done by the merchant without the cardholder being present.. V Verify The payment operation that initiates a verification payment process. It is a payment that lets you post verifications to confirm the validity of card information, without reserving or charging any amount. This option is used to generate a payment- or recurrence token, that can be used in a recurring payments scenarios or for one-clickpayments, without charging the card in the process.",
    "tags": "",
    "url": "/checkout-v3/get-started/terminology/"
  },{
    "title": "Test Data",
    "text": "Swedbank Pay Checkout Test Data When implementing Digital Payments, you can use the test data related to the different payment methods listed below. To see Digital Payments in live action, please visit the Playground. To test a checked-in user in the Playground, please use the following test data: Checkout test data for Norway Type Data Description Email olivia.nyhuus@payex.com The e-mail address of the payer. Mobile number +47 98765432 The mobile phone number of the payer. Format Norway: +47 99999999. SSN 26026708248 The social security number of the payer. Format Norway: DDMMYYXXXXX ZipCode 1642 The city zip code. Format Norway: XXXX Checkout test data for Sweden Type Data Description Email leia.ahlstrom@payex.com The e-mail address of the payer. Mobile number +46 739000001 The mobile phone number of the payer. Format Sweden: +46 707777777. SSN 199710202392 The social security number of the payer. Format Sweden: YYYYMMDDXXXX. ZipCode 17674 The city zip code. Format Sweden: XXXXX Checkout test data for Denmark Type Data Description Mobile number +4522222222 The mobile phone number of the payer. Format Denmark: +45 22222222 Credit Card Test Data With regards to card payments, our external integration test environment is connected to our POS system instead of a fake service. It is set up with an internal acquirer. This gives us a production-like test environment, while also giving us sandbox testing opportunities, such as 3-D Secure card enrollment and error scenarios. No payment information will be sent to other acquiring institutions. 3-D Secure Cards Card type Card number Expiry CVC Type of test data Visa 4761739001010416 After the current month Any 3-D Secure enrolled MasterCard 5226612199533406 After the current month Any 3-D Secure enrolled 3-D Secure 2 For merchants using 3DS2, OTP (One-Time Password) is the ACS (Access Control Server) you will encounter. Use the Visa or MasterCard listed under 3-D Secure Cards above when doing a card payment. Click approved or cancel to select authentication status. Network Tokenization When testing Network Tokenization you can use one of the cards listed below, depending on if you want to use MasterCard or Visa, and if you want a frictionless flow or a challenge flow. These cards are test FPANs (Funding PAN, an actual card number). Make sure that your merchant contract is configured towards our internal acquirer (loopback), since they won’t work as intended if you are configured towards other acquirers. Each FPAN is connected to a DPAN (Network Token). The DPAN will not appear in the initial transaction response. It will only be displayed when you run the next transaction with the stored token. Once your card has been enrolled, you will enter into a rotation where the DPAN is updated with a new FPAN every 24h. This way you can notice the changes easily. The rotation consists of 10 cards and will run indefinitely, but the initial FPAN won’t appear again, as it is not a part of the DPANs set of cards. The four FPANs can be used again every day to store a card and initiate a fresh rotation. Note that in the response, the 6 first digits of the PAN will be shown in the BIN field. The maskedPan will only contain the last 4 digits. Error testing can be performed using the four bottom cards. They will all be rejected during tokenization. If you want to test Network Tokenization without card updates, simply use one of our other MasterCard or Visa test cards. You still need to be configured against our internal acquirer (loopback). Card type Card number Expiry CVC Type of test data MasterCard 5510000000001232 04/35 Any Frictionless MasterCard 5510000000002347 06/35 Any Challenge Visa 4111112000003211 09/35 Any Frictionless Visa 4111112000006545 11/35 Any Challenge Card type Card number Expiry CVC Type of test data MasterCard 5510000000009631 08/35 Any Rejected during tokenization MasterCard 5510000000005431 02/35 Any Rejected during tokenization Visa 4111112000004565 07/35 Any Rejected during tokenization Visa 4111112000007899 12/35 Any Rejected during tokenization Misc Cards A selection of cards not connected to Network Tokenization or 3D-Secure. Visa Card number Expiry CVC 4925000000000004 After the current month Any 4581097032723517 After the current month Any 4581099940323133 After the current month Any MasterCard Card number Expiry CVC 5226600159865967 After the current month Any 5226603115488031 After the current month Any 5226604266737382 After the current month Any 5226600156995650 After the current month Any American Express Card number Expiry CVC Type of test data 377601000000000 After the current month Any (4 digits) Amex &amp; loopback Maestro Card number Expiry CVC 6764429999947470 After the current month Any Dankort Card number Expiry CVC 5019994016316467 After the current month Any 5019994001307083 After the current month Any Visa/DanKort Card number Expiry CVC 4571994016401817 After the current month Any 4571994016471869 After the current month Any Forbrugsforeningen Card number Expiry CVC 6007220000000004 After the current month Any Failure Testing Cards There are two different ways of testing Card Payments error scenarios. You can test 3-D Secure errors using our 3-D Secure emulator, or you can use specific amounts set to trigger errors in our test environment. Magic Amounts (Error Testing Using Amounts) We have some preset amounts that will trigger error codes. While creating a payment (operation purchase), enter one of the amounts from the list below in the prices object (\"amount\": &lt;number&gt;) before submitting a payment. The error message displayed behind the amounts will be sent with your payment in the test environment. The amounts that can be used to trigger error codes (transactionThirdPartyError): Amount Error Code Description 900313 REJECTED_BY_ACQUIRER_INVALID_AMOUNT Invalid amount, response-code: 13 900330 REJECTED_BY_ACQUIRER_FORMAT_ERROR Format error, response-code: 30 900334 REJECTED_BY_ACQUIRER_POSSIBLE_FRAUD Possible fraud, response-code: 34 900343 REJECTED_BY_ACQUIRER_CARD_STOLEN Card stolen, response-code: 43 900354 REJECTED_BY_ACQUIRER_CARD_EXPIRED Card expired, response-code: 54 900351 REJECTED_BY_ACQUIRER Unknown error, response-code: 51 900359 REJECTED_BY_ACQUIRER_POSSIBLE_FRAUD Possible fraud, response-code: 59 900361 REJECTED_BY_ACQUIRER_INSUFFICIENT_FUNDS Insufficient funds, response-code: 61 900362 REJECTED_BY_ACQUIRER Unknown error, response-code: 62 900391 ACQUIRER_HOST_OFFLINE Acquirer host offline, response-code: 91 952400 DONOTRETRY Transaction declined, do not retry 952507 MODIFICATIONSREQUIRED Transaction is declined and needs modifications 952100 DAILYLIMITEXCEEDED The daily attempt limit has been exceeded 952100 MONTHLYLIMITEXCEEDED The monthly attempt limit has been exceeded The DAILYLIMITEXCEEDED must be performed 10 times to be triggered, and the MONTHLYLIMITEXCEEDED has to be performed 15 times to be triggered. The SuspensionWarning response message appears when the two limit exceeds have 5 attempts left (i.e. after 5 daily or 10 monthly attempts). Invoice Test Data Invoice test data for Norway Type Data SSN 26026708248 Name Olivia Nyhuus Address Saltnestoppen 43 City 1642 Saltnes Invoice test data for Sweden Type Data Alternative data SSN 600307-1161 971020-2392 Name Azra Oliveira Leia Ahlström Address Helgestavägen 9 Hökvägen 5 City 19792 Bro 17674 Järfälla MSISDN   +46739000001 email   leia.ahlstrom@payex.com Invoice Service Test Data Use any name, address etc. Swish Test Data Testing a successful Swish purchase (in our external integration test environment) can be done by using any valid Swedish mobile number. E.g: +46 739000001. As with Vipps, the external integration test environment uses a fake service with no app involved. To trigger an error message, set the description value in POST Create Payment or Create Payment Order to one of the following values: Description Simulates RF07 Transaction declined TM01 Swish timed out before the payment was started BANKIDCL Payer cancelled BankId signing",
    "tags": "",
    "url": "/checkout-v3/test-data/"
  },{
    "title": "Terms of Service URL",
    "text": "If you have specific terms of service you want to display and the payer to approve during the payment process, you can do this by adding a termsOfServiceUrl to the urls node of your paymentOrder request. The url will appear as a clickable hyperlink below the pay button in the payment UI. The terms of service open in a separate tab when clicked. Request Copy json to clipboard 1 2 3 4 POST /psp/paymentorders HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.x/2.0 // Version optional for 3.0 and 2.0 1 2 3 4 5 6 7 8 9 10 11 12 { \"urls\": { \"termsOfServiceUrl\": \"https://example.com/termsandconditions.pdf\", \"hostUrls\": [ \"https://example.com\", \"https://example.net\" ], \"completeUrl\": \"https://example.com/payment-completed\", \"cancelUrl\": \"https://example.com/payment-cancelled\", \"callbackUrl\": \"https://api.example.com/payment-callback\", \"logoUrl\": \"https://example.com/logo.png\" } } } Field Type Description   check urls object The urls object, containing the URLs relevant for the payment order. check termsOfServiceUrl string The URL to the terms of service document which the payer must accept in order to complete the payment. HTTPS is a requirement.",
    "tags": "",
    "url": "/checkout-v3/features/customize-ui/tos/"
  },{
    "title": "",
    "text": "TransactionSetup holds properties for a transaction and may be passed as an input parameter to functions that start a transaction sequence. All properties are not relevant depending on which function that is called. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 public interface ITransactionSetup { string AcquirerData { get; set; } decimal Amount { get; set; } string APMReference { get; set; } decimal CashBack { get; set; } string Currency { get; set; } string PaymentInstrument { get; set; } List&lt;SaleItem&gt; SaleItems { get; set; } bool SplitPayment { get; set; } string TransactionID { get; set; } PaymentTypes type { get; set; } string ToString(); } string AcquirerData Additional data to be sent to host. Used for sending special data to PosPay and that may be forwarded to other systems for customer purpose. JSON format. Content need to be agreed on Optional decimal Amount Total amount Mandatory string APMReference Used only if refund of a transaction made using an alternative payment instrument. The reference originates from the response of the APM transaction Only for Refund of APM transaction decimal CashBack included in Amount Optional string Currency As a 3 letter abbrivation - ISO-4217. Available are SEK, NOK, DKK, EUR. Needs to be configured in terminal. Optional. Default currency of current culture. string PaymentInstrument A non PCI regulated payment instrument. Prefix and supplied PAN must be registred in the terminal setup. The normal usage is for giftcards or card numbers that are created on site such as financing. Optional List&lt;SaleItem&gt; SaleItems Product details for fuel functionality Optional bool SplitPayment Just a flag sent to host to indicate this sale in part of a complete sale made in the sale system. Does only make sense for certain host. Optional string TransactionID A transaction id that may be set by sale system for tracking. If a transaction is started by calling GetPayementInstrument, the transaction id must be set in that call and cannot be changed when later calling Payment or Refund Optional Nexo.PaymentTypes type Normal or Refund Mandatory if used with GetPaymentInstrument or GetPaymentInstrumentAsync. Overridden when used with Refund or RefundAsync Example creating a list of sale items 1 2 3 4 5 6 NexoPayementResult r = await PAX.Payment(new TransactionSetup(){ Amount = 70, TransactionID = ATransactionIDFromSaleSystem });",
    "tags": "",
    "url": "/pax-terminal/NET/includes/transactionsetup/"
  },{
    "title": "Ask for transaction status",
    "text": "TransactionStatus The transaction status request is used for retrieving the transaction result for a transaction for which the result for some reason is lost. The simplest form is to ask for the result of the last transaction, but there are other options too, by specifying more detailed information. sequenceDiagram participant POS participant Terminal POS-&gt;&gt;+Terminal: Http POST PaymentRequest Terminal--x-POS: lost PaymentResponse POS-&gt;&gt;+Terminal: Http POST TransactionStatusRequest Terminal-&gt;&gt;-POS: rsp 200 TransactionStatusResponse Simplest form of TransactionStatus Request 1 2 3 4 &lt;SaleToPOIRequest&gt; &lt;MessageHeader ProtocolVersion=\"3.1\" MessageClass=\"Service\" MessageCategory=\"TransactionStatus\" MessageType=\"Request\" ServiceID=\"7\" SaleID=\"1\" POIID=\"A-POIID\"/&gt; &lt;TransactionStatusRequest/&gt; &lt;/SaleToPOIRequest&gt; Above request will receive a transaction status response containing the last response that the terminal has sent using the current POIID and SaleID of category Payment, CardAcquisition, or Reversal, nested within the response. TransactionStatus Response Layout 1 2 3 4 5 6 7 8 9 10 &lt;SaleToPOIResponse&gt; &lt;MessageHeader ProtocolVersion=\"3.1\" MessageClass=\"Service\" MessageCategory=\"TransactionStatus\" MessageType=\"Response\" ServiceID=\"18\" SaleID=\"1\" POIID=\"A-POIID\"/&gt; &lt;TransactionStatusResponse&gt; &lt;Response Result=\"Success\"/&gt; &lt;RepeatedMessageResponse&gt; &lt;MessageHeader&gt;...message header of the found response &lt;/MessageHeader&gt; &lt;PaymentResponse&gt;...the complete response of the found message. In this case a payment response&lt;/PaymentResponse&gt; &lt;/RepeatedMessageResponse&gt; &lt;/TransactionStatusResponse&gt; &lt;/SaleToPOIResponse&gt; The element RepeatedMessageResponse holds the complete response message asked for, excluding the SaleToPOIResponse element. If the transaction asked for is not yet completed, the Response Result attribute will say Failure with ErrorCondition Busy. Request for earlier than last An earlier transaction may be found if still in the database of the terminal. Add a MessageReference element as child to the TransactionStatusRequest element. The MessageReference may contain one or more attributes to look for. To request for a special ServiceID or just MessageCategory Payment is probably the most useful variants. 1 2 3 4 5 6 7 &lt;SaleToPOIRequest&gt; &lt;MessageHeader ProtocolVersion=\"3.1\" MessageClass=\"Service\" MessageCategory=\"TransactionStatus\" MessageType=\"Request\" ServiceID=\"002141\" SaleID=\"1\" POIID=\"A-POIID\"/&gt; &lt;TransactionStatusRequest&gt; &lt;MessageReference MessageCategory=”Payment” ServiceID=”002131” SaleID=”1” POIID=”A-POIID”/&gt; &lt;/TransactionStatusRequest&gt; &lt;/SaleToPOIRequest&gt; Back to PaymentRequest",
    "tags": "",
    "url": "/pax-terminal/Nexo-Retailer/Quick-guide/transactionstatus/"
  },{
    "title": "Trustly",
    "text": "Pay Smarter with Trustly! Experience seamless online payments with Trustly — the fast, secure, and direct way to pay from your bank account without cards or apps. Fast &amp; Easy: Complete transactions in seconds. Secure &amp; Reliable: Bank-level encryption protects your data. No Cards Needed: Pay directly from your bank account. Widely Accepted: Trusted by thousands of merchants worldwide. Overlay When using a payment menu integration (including Instrument Mode), Trustly will now be opened in a modal. (This is unlike the Trustly payment method implementation where it opens inside the same frame). The modal will close once the interaction at Trustly is finished. Trustly Express As a part of our Trustly offering, Trustly Express provides an even swifter payment process. Trustly Express is supported by a range of European banks, and the following in Sweden and Finland. Sweden: Handelsbanken, Länsförsäkringar and Nordea. Finland: Handelsbanken, Nordea, OmaSP, OP, POP Pankki, S-Pankki, Säästöpankki and Ålandsbanken. While it works mostly the same way as the payer aware payment menu, we have two recommendations to make the experience as smooth as possible. Include the first and last name of the payer in the payer object. Add the payer’s SSN. If you provide it in the payerReference field, the SSN has to be hashed. Back to Introduction",
    "tags": "",
    "url": "/checkout-v3/trustly-presentation/"
  },{
    "title": "Change UI Option",
    "text": "As parts of the PCI-DSS best practice becomes requirements with PCI-DSS v4 coming in April 2025, using the Seamless View integration to display the payment UI will give merchants more responsibilities than they currently have. This is because Seamless View is hosted by you. As the Redirect integration is hosted by Swedbank Pay, we also handle these responsibilities. The updated requirements will include stricter controls and monitoring, particularly around the security of your checkout process. Merchants are responsible for ensuring the integrity of the HTML script used in their integration, including monitoring what is loaded into or over it. Specifically, Seamless View merchants must verify that the script URL embedded in their iframe originates from Swedbank Pay or another trusted domain. It is important to note that Swedbank Pay’s PCI responsibility is strictly limited to the content within the payment iframe. For further details, refer to section 4.6.3 and 11.6.1 in the linked PCI-DSS document. Please note that this only applies to payment methods that are affected by PCI-DSS (Card and Click to Pay). If you only offer payment methods not affected by PCI-DSS, no actions are necessary. If you want to add PCI-DSS affected payment methods later, this is something you need to consider. To learn more about how PCI-DSS affects you, we also have reading available in Danish, Finnish, Norwegian and Swedish. If you currently have a Seamless View integration and don’t want the impending responsibilities, switcing to Redirect is a very manageable task. Here’s what you need to do: Use Redirect Operation In the operations node of the payment response, right next to view-checkout which you should currently be using, you’ll find redirect-checkout. The corresponding href contains a url which leads to a Swedbank Pay domain where the payment UI will be displayed and processed. All you need to do is direct the Payer to this url and wait until one of the functions are called (completeUrl, cancelUrl or callbackUrl) to proceed with the payment process. Redirect-Checkout Operation Copy json to clipboard 1 2 3 4 5 6 7 8 9 10 { \"operations\": [ { \"method\": \"GET\", \"href\": \"https://ecom.externalintegration.payex.com/payment/menu/b934d6f84a89a01852eea01190c2bbcc937ba29228ca7502df8592975ee3bb0d?_tc_tid=30f2168171e142d38bcd4af2c3721959\", \"rel\": \"redirect-checkout\", \"contentType\": \"text/html\" }, ] } Remove Seamless View Code You can remove all code related to the &lt;script&gt; element used to load the Seamless View. Change URLs Finally, you need to do some changes to the urls node in your payment request. The paymentUrl field is specific to Seamless View and can be removed. The url you need to add is the cancelUrl, so we know where to redirect the payer if they chose to cancel, or you chose to abort the payment. If you have permission to add your own logo in the payment UI and want to add one, you also need to include a logoUrl. Follow the guidelines in the section linked above. If no logoUrl is added, Swedbank Pay’s logo will be shown by default. The completeUrl, hostUrls and callbackUrl is universal and must be included regardless of your UI choice. Seamless View Specific URL Copy json to clipboard 1 2 3 4 5 { \"urls\": { \"paymentUrl\": \"https://example.com/perform-payment\" } } Redirect Specific URLs Copy json to clipboard 1 2 3 4 5 6 { \"urls\": { \"cancelUrl\": \"https://example.com/payment-cancelled\", \"logoUrl\": \"https://example.com/logo.png\" //Optional } } Monitoring The Script URL If you choose to stay with Seamless View, please take the following under advisement. To ensure compliance, we recommend implementing Content Security Policy rules to monitor and authorize scripts. Merchants must whitelist the following domains to restrict browser content retrieval to approved sources. While https://*.payex.com and https://*.swedbankpay.com cover most payment methods, digital wallets such as Apple Pay, Click to Pay, and Google Pay are delivered via Payair. Alongside the Payair URL, these wallets may also generate URLs from Apple, Google, MasterCard, and Visa. See the table below for more information. When it comes to ACS URLs, nothing is loaded from the ACS domain in the merchant’s end. It will either happen within Swedbank Pay’s domain or as a redirect, which will repeal the merchant’s CSP. info The list below includes important URLs, but may not be exhaustive. Merchants need to stay up to date in case of URL changes, or if you need to whitelist URLs not listed here. URL Description https://*.cdn-apple.com URL needed for Apple Pay. https://*.google.com URL needed for Google Pay. https://*.gstatic.com Domain used by Google that hosts images, CSS, and javascript code to reduce bandwidth usage online. https://*.mastercard.com URL needed for Click to Pay. https://*.payair.com URL for the digital wallets Apple Pay, Click to Pay and Google Pay. https://*.payex.com Universal URL for all payment methods except the digital wallets Apple Pay, Click to Pay and Google Pay. https://*.swedbankpay.com Universal URL for all payment methods except the digital wallets Apple Pay, Click to Pay and Google Pay. https://*.visa.com URL needed for Click to Pay.",
    "tags": "",
    "url": "/checkout-v3/get-started/display-payment-ui/ui-migration/"
  },{
    "title": "Unscheduled Purchase",
    "text": "Unscheduled Purchase An unscheduled purchase, also called a Merchant Initiated Transaction (MIT), is a payment which uses a unscheduledToken generated through a previous payment in order to charge the same card at a later time. They are done by the merchant without the cardholder being present. Unscheduled purchases can be used in cases where you have an agreement with your customer which handles both recurring orders and/or singular transactions. Observe - it’s important that the Terms of Service clearly and understandably states how the payment will be done towards your customer. Example use cases are car rental companies charging the payer’s card for toll road expenses after the rental period, or different subscription services and recurring orders where the periodicity and/or amount varies. Please note that you need to do a capture after sending the unscheduled request. We have added a capture section at the end of this page for that reason. Generating The Token First, you need an initial transaction where the unscheduledToken is generated and connected. You do that by adding the field generateUnscheduledToken in the PaymentOrder request and set the value to true. The payer must complete the purchase to activate the token. You can also use Verify to activate tokens. (Read more about deleting the unscheduled token here.) Initial Unscheduled Request The initial request should look like this: Request Copy json to clipboard 1 2 3 4 POST /psp/paymentorders HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.x/2.0 // Version optional for 3.0 and 2.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 { \"paymentorder\": { \"operation\": \"Purchase\", \"currency\": \"SEK\", \"amount\": 1500, \"vatAmount\": 375, \"description\": \"Test Purchase\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"sv-SE\", \"generateUnscheduledToken\": true, \"productName\": \"Checkout3\", // Removed in 3.1, can be excluded in 3.0 if version is added in header \"urls\": { \"hostUrls\": [ \"https://example.com\", \"https://example.net\" ], \"paymentUrl\": \"https://example.com/perform-payment\", // Seamless View only \"completeUrl\": \"https://example.com/payment-completed\", \"cancelUrl\": \"https://example.com/payment-cancelled\", \"callbackUrl\": \"https://api.example.com/payment-callback\", \"termsOfServiceUrl\": \"https://example.com/termsandconditions.pdf\", \"logoUrl\": \"https://example.com/logo.png\" }, \"payeeInfo\": { \"payeeId\": \"5cabf558-5283-482f-b252-4d58e06f6f3b\", \"payeeReference\": \"AB832\", \"payeeName\": \"Merchant1\", \"productCategory\": \"A123\", \"orderReference\": \"or-123456\", \"subsite\": \"MySubsite\", \"siteId\": \"MySiteId\", }, \"payer\": { \"digitalProducts\": false, \"firstName\": \"Leia\" \"lastName\": \"Ahlström\" \"email\": \"leia@payex.com\", \"msisdn\": \"+46787654321\", \"payerReference\": \"AB1234\", \"shippingAddress\": { \"firstName\": \"firstname/companyname\", \"lastName\": \"lastname\", \"email\": \"karl.anderssson@mail.se\", \"msisdn\": \"+46759123456\", \"streetAddress\": \"string\", \"coAddress\": \"string\", \"city\": \"Solna\", \"zipCode\": \"17674\", \"countryCode\": \"SE\" }, \"billingAddress\": { \"firstName\": \"firstname/companyname\", \"lastName\": \"lastname\", \"email\": \"karl.anderssson@mail.se\", \"msisdn\": \"+46759123456\", \"streetAddress\": \"string\", \"coAddress\": \"string\", \"city\": \"Solna\", \"zipCode\": \"17674\", \"countryCode\": \"SE\" }, \"accountInfo\": { \"accountAgeIndicator\": \"04\", \"accountChangeIndicator\": \"04\", \"accountPwdChangeIndicator\": \"01\", \"shippingAddressUsageIndicator\": \"01\", \"shippingNameIndicator\": \"01\", \"suspiciousAccountActivity\": \"01\", } }, \"orderItems\": [ { \"reference\": \"P1\", \"name\": \"Product1\", \"type\": \"PRODUCT\", \"class\": \"ProductGroup1\", \"itemUrl\": \"https://example.com/products/123\", \"imageUrl\": \"https://example.com/product123.jpg\", \"description\": \"Product 1 description\", \"discountDescription\": \"Volume discount\", \"quantity\": 5, \"quantityUnit\": \"pcs\", \"unitPrice\": 300, \"discountPrice\": 0, \"vatPercent\": 2500, \"amount\": 1500, \"vatAmount\": 375 } ], \"riskIndicator\": { \"deliveryEmailAddress\": \"olivia.nyhuus@payex.com\", \"deliveryTimeFrameIndicator\": \"01\", \"preOrderDate\": \"19801231\", \"preOrderPurchaseIndicator\": \"01\", \"shipIndicator\": \"01\", \"giftCardPurchase\": false, \"reOrderPurchaseIndicator\": \"01\", \"pickUpAddress\": { \"name\": \"Olivia Nyhus\", \"streetAddress\": \"Saltnestoppen 43\", \"coAddress\": \"\", \"city\": \"Saltnes\", \"zipCode\": \"1642\", \"countryCode\": \"NO\" } } } } Show fields Hide fields Required Field Type Description   check paymentOrder object The payment order object.   check operation string Determines the initial operation, defining the type of payment order created.   check currency string The currency of the payment.   check amount integer The transaction amount (including VAT, if any) entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The amount displayed is the final amount the payer paid for their order, including any payment method specific discounts or fees.   check vatAmount integer The payment’s VAT (Value Added Tax) amount, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The vatAmount entered will not affect the amount shown on the payment page, which only shows the total amount. This field is used to specify how much of the total amount the VAT will be. Set to 0 (zero) if there is no VAT amount charged.   check description string The description of the payment order.   check userAgent string The user agent of the payer. Should typically be set to the value of the User-Agent header sent by the payer’s web browser.   check language string The language of the payer.     generateUnscheduledToken boolean true or false. Set to true if you want to generate an unscheduledToken for future unscheduled purchases (Merchant Initiated Transactions).   check productName string Used to tag the payment as Digital Payments v3.0. Mandatory for Digital Payments v3.0, either in this field or the header, as you won’t get the operations in the response without submitting this field.     implementation string Indicates which implementation to use.   check urls object The urls object, containing the URLs relevant for the payment order.   check hostUrls array The array of valid host URLs.     paymentUrl string The paymentUrl represents the URL that Swedbank Pay will redirect back to when the view-operation needs to be loaded, to inspect and act on the current status of the payment, such as when the payer is redirected out of the Seamless View (the &lt;iframe&gt;) and sent back after completing the payment. paymentUrl is only used in Seamless Views and should point to the page of where the Payment Order Seamless View is hosted. If both cancelUrl and paymentUrl is sent, the paymentUrl will used.   check completeUrl string The URL that Swedbank Pay will redirect back to when the payer has completed their interactions with the payment. This does not indicate a successful payment, only that it has reached a final (complete) state. A GET request needs to be performed on the payment order to inspect it further. See completeUrl for details.     cancelUrl string The URL to redirect the payer to if the payment is cancelled, either by the payer or by the merchant trough an abort request of the payment or paymentorder.   check callbackUrl string The URL that Swedbank Pay will perform an HTTP POST against every time a transaction is created on the payment order. See callback for details. For recurring transactions, the callback will only be sent for Trustly transactions, not card.   check termsOfServiceUrl string The URL to the terms of service document which the payer must accept in order to complete the payment. HTTPS is a requirement.   check logoUrl string With permission and activation on your contract (if you are using Seamless View), sending in a logoUrl will replace the Swedbank Pay logo with the logo sent in. If you do not send in a logoUrl, then no logo and no text is shown. Without permission or activation on your contract, sending in a logoUrl has no effect. The logo must be a picture with maximum 50px height and 400px width. Requires HTTPS. Read more about this in Custom Logo .   check payeeInfo object The payeeInfo object, containing information about the payee (the recipient of the money). See payeeInfo for details.   check payeeId string The ID of the payee, usually the merchant ID.   check payeeReference string A unique reference from the merchant system. Set per operation to ensure an exactly-once delivery of a transactional operation. Length and content validation depends on whether the transaction.number or the payeeReference is sent to the acquirer. If Swedbank Pay handles the settlement, the transaction.number is sent and the payeeReference must be in the format of A-Za-z0-9 and string(30). If you handle the settlement, Swedbank Pay will send the payeeReference and it will be limited to the format of string(12). All characters must be digits. In Invoice Payments payeeReference is used as an invoice/receipt number, if the receiptReference is not defined.     payeeName string The name of the payee, usually the name of the merchant.     productCategory string(50) A product category or number sent in from the payee/merchant. This is not validated by Swedbank Pay, but will be passed through the payment process and may be used in the settlement process.     orderReference string(50) The order reference should reflect the order reference found in the merchant’s systems.     subsite string(40) The subsite field can be used to perform a split settlement on the payment. The different subsite values must be resolved with Swedbank Pay reconciliation before being used. If you send in an unknown subsite value, it will be ignored and the payment will be settled using the merchant’s default settlement account. Must be in the format of A-Za-z0-9.     siteId string(15) siteId is used for split settlement transactions when you, as a merchant, need to specify towards AMEX which sub-merchant the transaction belongs to. Must be in the format of A-Za-z0-9.     payer object The payer object containing information about the payer relevant for the payment order.     digitalProducts bool Set to true for merchants who only sell digital goods and only require email and/or msisdn as shipping details. Set to false if the merchant also sells physical goods.     firstName string The first name of the payer.     lastName string The last name of the payer.     email string The e-mail address of the payer. Will be used to prefill the Checkin as well as on the payer’s profile, if not already set. Increases the chance for frictionless 3-D Secure 2 flow .     msisdn string The mobile phone number of the Payer. Will be prefilled on Checkin page and used on the payer’s profile, if not already set. The mobile number must have a country code prefix and be 8 to 15 digits in length. The field is related to 3-D Secure 2 .     shippingAddress object The shipping address object related to the payer. The field is related to 3-D Secure 2 .     firstName string The first name of the addressee – the receiver of the shipped goods.     lastName string The last name of the addressee – the receiver of the shipped goods.     streetAddress string Payer’s street address. Maximum 50 characters long.     coAddress string Payer’ s c/o address, if applicable.     zipCode string Payer’s zip code     city string Payer’s city of residence.     countryCode string Country code for country of residence.   check billingAddress object The billing address object containing information about the payer’s billing address.     firstName string The first name of the payer.     lastName string The last name of the payer.   check︎︎︎︎ ︎ streetAddress string The street address of the payer. Maximum 50 characters long.     coAddress string The CO-address (if used)   check zipCode string The postal number (ZIP code) of the payer.   check city string The city of the payer.   check countryCode string SE, NO, or FI.     accountInfo object Object related to the payer containing info about the payer’s account.     accountAgeIndicator string Indicates the age of the payer’s account. 01 (No account, guest checkout) 02 (Created during this transaction) 03 (Less than 30 days old) 04 (30 to 60 days old) 05 (More than 60 days old)     accountChangeIndicator string Indicates when the last account changes occurred. 01 (Changed during this transaction) 02 (Less than 30 days ago) 03 (30 to 60 days ago) 04 (More than 60 days ago)     accountChangePwdIndicator string Indicates when the account’s password was last changed. 01 (No changes) 02 (Changed during this transaction) 03 (Less than 30 days ago) 04 (30 to 60 days ago) 05 (More than 60 days old)     shippingAddressUsageIndicator string Indicates when the payer’s shipping address was last used. 01(This transaction) 02 (Less than 30 days ago) 03 (30 to 60 days ago) 04 (More than 60 days ago)     shippingNameIndicator string Indicates if the account name matches the shipping name. 01 (Account name identical to shipping name) 02 (Account name different from shipping name)     suspiciousAccountActivity string Indicates if there have been any suspicious activities linked to this account. 01 (No suspicious activity has been observed) 02 (Suspicious activity has been observed)   check orderItems array The array of items being purchased with the order. Note that authorization orderItems will not be printed on invoices, so lines meant for print must be added in the Capture request. The authorization orderItems will, however, be used in the Merchant Portal when captures or reversals are performed, and might be shown other places later. It is required to use this field to be able to send Capture orderItems. Capture requests should only contain items meant to be captured from the order.   check reference string A reference that identifies the order item.   check name string The name of the order item.   check type string PRODUCT, SERVICE, SHIPPING_FEE, PAYMENT_FEE DISCOUNT, VALUE_CODE or OTHER. The type of the order item. PAYMENT_FEE is the amount you are charged with when you are paying with invoice. The amount can be defined in the amount field below.   check class string The classification of the order item. Can be used for assigning the order item to a specific product category, such as MobilePhone. Note that class cannot contain spaces and must follow the regex pattern [\\w-]*. Swedbank Pay may use this field for statistics.     itemUrl string The URL to a page that can display the purchased item, product or similar.   ︎︎︎ imageUrl string The URL to an image of the order item.     description string A textual description of the purchase. Maximum length is 40 characters.     discountDescription string The human readable description of the possible discount.   check quantity number The 4 decimal precision quantity of order items being purchased.   check quantityUnit string The unit of the quantity, such as pcs, grams, or similar. This is used for your own book keeping.   check unitPrice integer The price per unit of order item, including VAT.     discountPrice integer If the order item is purchased at a discounted price. This field should contain that price, including VAT.   check vatPercent integer The percent value of the VAT multiplied by 100, so 25% becomes 2500.   check amount integer The transaction amount (including VAT, if any) entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The amount displayed is the final amount the payer paid for their order, including any payment method specific discounts or fees.   check vatAmount integer The payment’s VAT (Value Added Tax) amount, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The vatAmount entered will not affect the amount shown on the payment page, which only shows the total amount. This field is used to specify how much of the total amount the VAT will be. Set to 0 (zero) if there is no VAT amount charged.     restrictedToInstruments array A list of the payment methods you wish to restrict the payment to. Currently Invoice only. Invoice supports the subtypes PayExFinancingNo, PayExFinancingSe and PayMonthlyInvoiceSe, separated by a dash, e.g.; Invoice-PayExFinancingNo. Default value is all supported payment methods. Use of this field requires an agreement with Swedbank Pay. You can restrict fees and/or discounts to certain payment methods by adding this field to the orderline you want to restrict. Use positive amounts to add fees and negative amounts to add discounts.     riskIndicator array This optional object consist of information that helps verifying the payer. Providing these fields decreases the likelihood of having to prompt for 3-D Secure 2.0 authentication of the payer when they are authenticating the purchase.     deliveryEmailAdress string For electronic delivery, the email address to which the merchandise was delivered. Providing this field when appropriate decreases the likelihood of a 3-D Secure authentication for the payer.     deliveryTimeFrameIndicator string Indicates the merchandise delivery timeframe. 01 (Electronic Delivery) 02 (Same day shipping) 03 (Overnight shipping) 04 (Two-day or more shipping)     preOrderDate string For a pre-ordered purchase. The expected date that the merchandise will be available. Format: YYYYMMDD     preOrderPurchaseIndicator string Indicates whether the payer is placing an order for merchandise with a future availability or release date. 01 (Merchandise available) 02 (Future availability)     shipIndicator string Indicates shipping method chosen for the transaction. 01 (Ship to cardholder’s billing address) 02 (Ship to another verified address on file with merchant)03 (Ship to address that is different than cardholder’s billing address)04 (Ship to Store / Pick-up at local store. Store address shall be populated in shipping address fields)05 (Digital goods, includes online services, electronic giftcards and redemption codes) 06 (Travel and Event tickets, not shipped) 07 (Other, e.g. gaming, digital service)     giftCardPurchase bool true if this is a purchase of a gift card.     reOrderPurchaseIndicator string Indicates whether the cardholder is reordering previously purchased merchandise. 01 (First time ordered) 02 (Reordered).     pickUpAddress object If shipIndicator set to 04, then prefill this with the payers pickUpAddress of the purchase to decrease the risk factor of the purchase.     name string If shipIndicator set to 04, then prefill this with the payers name of the purchase to decrease the risk factor of the purchase.     streetAddress string If shipIndicator set to 04, then prefill this with the payers streetAddress of the purchase to decrease the risk factor of the purchase. Maximum 50 characters long.     coAddress string If shipIndicator set to 04, then prefill this with the payers coAddress of the purchase to decrease the risk factor of the purchase.     city string If shipIndicator set to 04, then prefill this with the payers city of the purchase to decrease the risk factor of the purchase.     zipCode string If shipIndicator set to 04, then prefill this with the payers zipCode of the purchase to decrease the risk factor of the purchase.     countryCode string If shipIndicator set to 04, then prefill this with the payers countryCode of the purchase to decrease the risk factor of the purchase.   Initial Unscheduled Response Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x/2.0 api-supported-versions: 3.x/2.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 { \"paymentorder\": { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce\", \"created\": \"2020-06-22T10:56:56.2927632Z\", \"updated\": \"2020-06-22T10:56:56.4035291Z\", \"operation\": \"Purchase\", \"status\": \"Initialized\", \"currency\": \"SEK\", \"amount\": 1500, \"vatAmount\": 375, \"description\": \"Test Purchase\", \"initiatingSystemUserAgent\": \"swedbankpay-sdk-dotnet/3.0.1\", \"language\": \"sv-SE\", \"availableInstruments\": [ \"CreditCard\", \"Trustly\" ], \"integration\": \"HostedView\", //For Seamless View integrations \"integration\": \"Redirect\", //For Redirect integrations \"instrumentMode\": false, \"guestMode\": false, \"payer\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/payers\" }, \"orderItems\": { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/orderitems\" }, \"history\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/history\" }, \"failed\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/failed\" }, \"aborted\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/aborted\" }, \"paid\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/paid\" }, \"cancelled\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/cancelled\" }, \"financialTransactions\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/financialtransactions\" }, \"failedAttempts\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/failedattempts\" }, \"metadata\": { \"id\": \"/psp/paymentorders/8be318c1-1caa-4db1-e2c6-08d7bf41224d/metadata\" } }, \"operations\": [ { \"href\": \"https://api.payex.com/psp/paymentorders/222a50ca-b268-4b32-16fa-08d6d3b73224\", \"rel\":\"update-order\", \"method\":\"PATCH\", \"contentType\":\"application/json\" }, { \"href\": \"https://api.payex.com/psp/paymentorders/222a50ca-b268-4b32-16fa-08d6d3b73224\", \"rel\": \"abort\", \"method\": \"PATCH\", \"contentType\": \"application/json\" }, { \"href\": \"https://api.payex.com/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce\", \"rel\": \"abort-paymentattempt\", \"method\": \"PATCH\", \"contentType\": \"application/json\" } ] } Show fields Hide fields Field Type Description paymentOrder object The payment order object. id string The relative URL and unique identifier of the paymentorder resource . Please read about URL Usage to understand how this and other URLs should be used in your solution. created string The ISO-8601 date of when the payment order was created. updated string The ISO-8601 date of when the payment order was updated. operation string Purchase status string Indicates the payment order’s current status. Initialized is returned when the payment is created and still ongoing. The request example above has this status. Paid is returned when the payer has completed the payment successfully. See the Paid response. Failed is returned when a payment has failed. You will find an error message in the Failed response. Cancelled is returned when an authorized amount has been fully cancelled. See the Cancelled response. It will contain fields from both the cancelled description and paid section. Aborted is returned when the merchant has aborted the payment, or if the payer cancelled the payment in the redirect integration (on the redirect page). See the Aborted response. currency string The currency of the payment order. amount integer The transaction amount (including VAT, if any) entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The amount displayed is the final amount the payer paid for their order, including any payment method specific discounts or fees. vatAmount integer The payment’s VAT (Value Added Tax) amount, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The vatAmount entered will not affect the amount shown on the payment page, which only shows the total amount. This field is used to specify how much of the total amount the VAT will be. Set to 0 (zero) if there is no VAT amount charged. description string(40) A textual description of the purchase. Maximum length is 40 characters. initiatingSystemUserAgent string The user agent of the HTTP client making the request, reflecting the value sent in the User-Agent header with the initial POST request which created the Payment Order. language string sv-SE, nb-NO, da-DK, en-US or fi-FI. availableInstruments string A list of payment methods available for this payment. implementation string The merchant’s Digital Payments implementation type. Enterprise or PaymentsOnly. We ask that you don’t build logic around this field’s response. It is mainly for information purposes, as the implementation types might be subject to name changes. If this should happen, updated information will be available in this table. integration string The merchant’s Digital Payments integration type. HostedView (Seamless View) or Redirect. This field will not be populated until the payer has opened the payment UI, and the client script has identified if Swedbank Pay or another URI is hosting the container with the payment iframe. We ask that you don’t build logic around this field’s response. It is mainly for information purposes. as the integration types might be subject to name changes, If this should happen, updated information will be available in this table. instrumentMode bool Set to true or false. Indicates if the payment is initialized with only one payment method available. guestMode bool Set to true or false. Indicates if the payer chose to pay as a guest or not. When using the Payments Only implementation, this is triggered by not including a payerReference in the original paymentOrder request. payer id The URL to the payer resource where information about the payer can be retrieved. orderItems id The URL to the orderItems resource where information about the order items can be retrieved. history ic The URL to the history resource where information about the payment’s history can be retrieved. failed id The URL to the failed resource where information about the failed transactions can be retrieved. aborted id The URL to the aborted resource where information about the aborted transactions can be retrieved. paid id The URL to the paid resource where information about the paid transactions can be retrieved. cancelled id The URL to the cancelled resource where information about the cancelled transactions can be retrieved. financialTransactions id The URL to the financialTransactions resource where information about the financial transactions can be retrieved. failedAttempts id The URL to the failedAttempts resource where information about the failed attempts can be retrieved. metadata id The URL to the metadata resource where information about the metadata can be retrieved. operations array The array of operations that are possible to perform on the payment order in its current state. GET The Token The token can be retrieved by performing a GET towards paid. It will be visible under tokens in the paid field. Request 1 2 3 4 GET /psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/paid HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.x/2.0 // Version optional for 3.0 and 2.0 As an alternative, you can also retrieve it by using the expand option when you GET your payment. The GET request should look like the one below, with a ?$expand=paid after the paymentOrderId. The response should match the initial payment response, but with an expanded paid field. Request 1 2 3 4 GET /psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/ HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.x/2.0 // Version optional for 3.0 and 2.0 Performing The Unscheduled Purchase When you are ready to perform the unscheduled purchase, simply add the unscheduledToken field to the paymentOrder request and use the token as the value. Your request should look like the example below, and the response will match the paymentOrder response from the initial purchase. After The Unscheduled Purchase Please remember that the unscheduled request will reserve the amount, but not charge it. You will (i.e. when you are ready to ship purchased physical products) have to perform a Capture request later on to complete the unscheduled purchase. You can also Cancel it if needed. Unscheduled Request Request Copy json to clipboard 1 2 3 4 POST /psp/paymentorders HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.x/2.0 // Version optional for 3.0 and 2.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 { \"paymentorder\": { \"operation\": \"UnscheduledPurchase\", \"unscheduledToken\": \"7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"currency\": \"NOK\", \"amount\": 1500, \"vatAmount\": 0, \"description\": \"Test Unscheduled Purchase\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"nb-NO\", \"productName\": \"Checkout3\", // Removed in 3.1, can be excluded in 3.0 if version is added in header \"urls\": { \"callbackUrl\": \"https://example.com/payment-callback\" }, \"payeeInfo\": { \"payeeId\": \"5cabf558-5283-482f-b252-4d58e06f6f3b\" \"payeeReference\": \"CD1234\", \"payeeName\": \"Merchant1\", \"productCategory\": \"A123\", \"orderReference\": \"or-12456\", \"subsite\": \"MySubsite\", \"siteId\": \"MySiteId\", }, \"payer\": { \"payerReference\": \"AB1234\", }, \"orderItems\": [ { \"reference\": \"P1\", \"name\": \"Product1\", \"type\": \"PRODUCT\", \"class\": \"ProductGroup1\", \"itemUrl\": \"https://example.com/products/123\", \"imageUrl\": \"https://example.com/product123.jpg\", \"description\": \"Product 1 description\", \"discountDescription\": \"Volume discount\", \"quantity\": 4, \"quantityUnit\": \"pcs\", \"unitPrice\": 300, \"discountPrice\": 200, \"vatPercent\": 2500, \"amount\": 1000, \"vatAmount\": 250 } ] } } Show fields Hide fields Required Field Type Description check paymentOrder object The payment object. check operation object UnscheduledPurchase. check unscheduledToken string The generated unscheduledToken, if operation: Verify, operation: UnscheduledPurchase or generateUnscheduledToken: true was used. check currency string The currency of the payment order. check amount integer The transaction amount (including VAT, if any) entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The amount displayed is the final amount the payer paid for their order, including any payment method specific discounts or fees. check vatAmount integer The payment’s VAT (Value Added Tax) amount, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The vatAmount entered will not affect the amount shown on the payment page, which only shows the total amount. This field is used to specify how much of the total amount the VAT will be. Set to 0 (zero) if there is no VAT amount charged. check description string A textual description of the purchase. Maximum length is 40 characters. check userAgent string The user agent of the payer. Should typically be set to the value of the User-Agent header sent by the payer’s web browser. check language string sv-SE, nb-NO, da-DK, en-US or fi-FI. check productName string Used to tag the payment as Digital Payments v3.0. Mandatory for Digital Payments v3.0, either in this field or the header, as you won’t get the operations in the response without submitting this field.   implementation string Indicates which implementation to use. check urls string The URL to the urls resource where all URLs related to the payment order can be retrieved. check callbackUrl string The URL that Swedbank Pay will perform an HTTP POST against every time a transaction is created on the payment order. See callback for details. For recurring transactions, the callback will only be sent for Trustly transactions, not card. check payeeInfo object The payeeInfo object, containing information about the payee (the recipient of the money). See payeeInfo for details. check payeeId string This is the unique id that identifies this payee (like merchant) set by Swedbank Pay. check payeeReference string A unique reference from the merchant system. Set per operation to ensure an exactly-once delivery of a transactional operation. Length and content validation depends on whether the transaction.number or the payeeReference is sent to the acquirer. If Swedbank Pay handles the settlement, the transaction.number is sent and the payeeReference must be in the format of A-Za-z0-9 and string(30). If you handle the settlement, Swedbank Pay will send the payeeReference and it will be limited to the format of string(12). All characters must be digits. In Invoice Payments payeeReference is used as an invoice/receipt number, if the receiptReference is not defined.   receiptReference string(30) A unique reference to the transaction, provided by the merchant. Can be used as an invoice or receipt number as a supplement to payeeReference. check payeeName string The payee name (like merchant name) that will be displayed when redirected to Swedbank Pay. check productCategory string(50) A product category or number sent in from the payee/merchant. This is not validated by Swedbank Pay, but will be passed through the payment process and may be used in the settlement process. check orderReference string(50) The order reference should reflect the order reference found in the merchant’s systems. check subsite string(40) The subsite field can be used to perform a split settlement on the payment. The different subsite values must be resolved with Swedbank Pay reconciliation before being used. If you send in an unknown subsite value, it will be ignored and the payment will be settled using the merchant’s default settlement account. Must be in the format of A-Za-z0-9.   siteId string(15) siteId is used for split settlement transactions when you, as a merchant, need to specify towards AMEX which sub-merchant the transaction belongs to. Must be in the format of A-Za-z0-9.   payer string The payer object, containing information about the payer.   payerReference string The reference to the payer from the merchant system, like e-mail address, mobile number, customer number etc. Mandatory if generateRecurrenceToken, RecurrenceToken, generatePaymentToken or paymentToken is true.   metadata object A unique reference from the merchant system. Set per operation to ensure an exactly-once delivery of a transactional operation. Length and content validation depends on whether the transaction.number or the payeeReference is sent to the acquirer. If Swedbank Pay handles the settlement, the transaction.number is sent and the payeeReference must be in the format of A-Za-z0-9 and string(30). If you handle the settlement, Swedbank Pay will send the payeeReference and it will be limited to the format of string(12). All characters must be digits. In Invoice Payments payeeReference is used as an invoice/receipt number, if the receiptReference is not defined. check orderItems array The array of items being purchased with the order. Note that authorization orderItems will not be printed on invoices, so lines meant for print must be added in the Capture request. The authorization orderItems will, however, be used in the Merchant Portal when captures or reversals are performed, and might be shown other places later. It is required to use this field to be able to send Capture orderItems. Capture requests should only contain items meant to be captured from the order. check reference string A reference that identifies the order item. check name string The name of the order item. check type string PRODUCT, SERVICE, SHIPPING_FEE, PAYMENT_FEE DISCOUNT, VALUE_CODE or OTHER. The type of the order item. PAYMENT_FEE is the amount you are charged with when you are paying with invoice. The amount can be defined in the amount field below. check class string The classification of the order item. Can be used for assigning the order item to a specific product category, such as MobilePhone. Note that class cannot contain spaces and must follow the regex pattern [\\w-]*. Swedbank Pay may use this field for statistics.   itemUrl string The URL to a page that can display the purchased item, product or similar. ︎︎︎ imageUrl string The URL to an image of the order item.   description string A textual description of the purchase. Maximum length is 40 characters.   discountDescription string The human readable description of the possible discount. check quantity integer The 4 decimal precision quantity of order items being purchased. check quantityUnit string The unit of the quantity, such as pcs, grams, or similar. This is used for your own book keeping. check unitPrice integer The price per unit of order item, including VAT.   discountPrice integer If the order item is purchased at a discounted price. This field should contain that price, including VAT. check vatPercent integer The percent value of the VAT multiplied by 100, so 25% becomes 2500. check amount integer The transaction amount (including VAT, if any) entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The amount displayed is the final amount the payer paid for their order, including any payment method specific discounts or fees. check vatAmount integer The payment’s VAT (Value Added Tax) amount, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The vatAmount entered will not affect the amount shown on the payment page, which only shows the total amount. This field is used to specify how much of the total amount the VAT will be. Set to 0 (zero) if there is no VAT amount charged.   restrictedToInstruments array A list of the payment methods you wish to restrict the payment to. Currently Invoice only. Invoice supports the subtypes PayExFinancingNo, PayExFinancingSe and PayMonthlyInvoiceSe, separated by a dash, e.g.; Invoice-PayExFinancingNo. Default value is all supported payment methods. Use of this field requires an agreement with Swedbank Pay. You can restrict fees and/or discounts to certain payment methods by adding this field to the orderline you want to restrict. Use positive amounts to add fees and negative amounts to add discounts. Capture Captures are only possible when a payment has a successful Authorization transaction, naturally excluding one-phase payment methods like Swish and Trustly. They will be marked as a Sale transaction. Two-phase payment methods like card and Vipps however, require a Capture to be completed. Please note that you have a maximum of 5 consecutive failed attempts at a capture. The payment will be locked after the fifth, and you need to contact us for further attempts. In addition to full captures, it is possible to do partial captures of the authorized amount. You can do more captures on the same payment later, up to the total authorized amount. A useful tool for when you have to split orders into several shipments. First off, you must request the order information from the server to get the request link. With this, you can request the capture with the amount to capture, and get the status back. To capture the authorized payment, we need to perform capture against the accompanying href returned in the operations list. See the abbreviated request and response below: Capture Request Request Copy json to clipboard 1 2 3 4 POST /psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/captures HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.0/2.0 // Version optional 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 { \"transaction\": { \"description\": \"Capturing the authorized payment\", \"amount\": 1500, \"vatAmount\": 375, \"payeeReference\": \"AB832\", \"receiptReference\": \"AB831\", \"orderItems\": [ { \"reference\": \"P1\", \"name\": \"Product1\", \"type\": \"PRODUCT\", \"class\": \"ProductGroup1\", \"itemUrl\": \"https://example.com/products/123\", \"imageUrl\": \"https://example.com/product123.jpg\", \"description\": \"Product 1 description\", \"discountDescription\": \"Volume discount\", \"quantity\": 4, \"quantityUnit\": \"pcs\", \"unitPrice\": 300, \"discountPrice\": 200, \"vatPercent\": 2500, \"amount\": 1000, \"vatAmount\": 250 }, { \"reference\": \"P2\", \"name\": \"Product2\", \"type\": \"PRODUCT\", \"class\": \"ProductGroup1\", \"description\": \"Product 2 description\", \"quantity\": 1, \"quantityUnit\": \"pcs\", \"unitPrice\": 500, \"vatPercent\": 2500, \"amount\": 500, \"vatAmount\": 125 } ] } } Show fields Hide fields Required Field Type Description check transaction object The transaction object. check description string The description of the capture transaction. check amount integer The transaction amount (including VAT, if any) entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The amount displayed is the final amount the payer paid for their order, including any payment method specific discounts or fees. check vatAmount integer The payment’s VAT (Value Added Tax) amount, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The vatAmount entered will not affect the amount shown on the payment page, which only shows the total amount. This field is used to specify how much of the total amount the VAT will be. Set to 0 (zero) if there is no VAT amount charged. check payeeReference string A unique reference from the merchant system. Set per operation to ensure an exactly-once delivery of a transactional operation. Length and content validation depends on whether the transaction.number or the payeeReference is sent to the acquirer. If Swedbank Pay handles the settlement, the transaction.number is sent and the payeeReference must be in the format of A-Za-z0-9 and string(30). If you handle the settlement, Swedbank Pay will send the payeeReference and it will be limited to the format of string(12). All characters must be digits. In Invoice Payments payeeReference is used as an invoice/receipt number, if the receiptReference is not defined.   receiptReference string(30) A unique reference to the transaction, provided by the merchant. Can be used as an invoice or receipt number as a supplement to payeeReference. check orderItems array The array of items being purchased with the order. Note that authorization orderItems will not be printed on invoices, so lines meant for print must be added in the Capture request. The authorization orderItems will, however, be used in the Merchant Portal when captures or reversals are performed, and might be shown other places later. It is required to use this field to be able to send Capture orderItems. Capture requests should only contain items meant to be captured from the order. check reference string A reference that identifies the order item. check name string The name of the order item. check type enum PRODUCT, SERVICE, SHIPPING_FEE, PAYMENT_FEE, DISCOUNT, VALUE_CODE or OTHER. The type of the order item. check class string The classification of the order item. Can be used for assigning the order item to a specific product category, such as MobilePhone. Note that class cannot contain spaces and must follow the regex pattern [\\w-]*. Swedbank Pay may use this field for statistics.   itemUrl string The URL to a page that can display the purchased item, product or similar. ︎︎︎ imageUrl string The URL to an image of the order item.   description string The human readable description of the order item.   discountDescription string The human readable description of the possible discount. check quantity number The 4 decimal precision quantity of order items being purchased. check quantityUnit string The unit of the quantity, such as pcs, grams, or similar. This is used for your own book keeping. check unitPrice integer The price per unit of order item, including VAT.   discountPrice integer If the order item is purchased at a discounted price. This field should contain that price, including VAT. check vatPercent integer The percent value of the VAT multiplied by 100, so 25% becomes 2500. check amount integer The total amount including VAT to be paid for the specified quantity of this order item, in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 SEK and 5000 equals 50.00 SEK. check vatAmount integer The total amount of VAT to be paid for the specified quantity of this order item, in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 SEK and 5000 equals 50.00 SEK. check reference string A reference that identifies the order item. check name string The name of the order item. check type enum PRODUCT, SERVICE, SHIPPING_FEE, PAYMENT_FEE, DISCOUNT, VALUE_CODE or OTHER. The type of the order item. check class string The classification of the order item. Can be used for assigning the order item to a specific product category, such as MobilePhone. Note that class cannot contain spaces and must follow the regex pattern [\\w-]*. Swedbank Pay may use this field for statistics. ︎︎︎ itemUrl string The URL to a page that can display the purchased item, such as a product page ︎︎︎ imageUrl string The URL to an image of the order item. ︎︎︎ description string The human readable description of the order item. ︎︎︎ discountDescription string The human readable description of the possible discount. check quantity number The 4 decimal precision quantity of order items being purchased. check quantityUnit string The unit of the quantity, such as pcs, grams, or similar. check unitPrice integer The price per unit of order item, including VAT. ︎︎︎ discountPrice integer If the order item is purchased at a discounted price. This field should contain that price, including VAT. check vatPercent integer The percent value of the VAT multiplied by 100, so 25% becomes 2500. check amount integer The total amount including VAT to be paid for the specified quantity of this order item, in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 NOK and 5000 equals 50.00 NOK. check vatAmount integer The total amount of VAT to be paid for the specified quantity of this order item, in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 NOK and 5000 equals 50.00 NOK. Capture Response If the capture request succeeds, this should be the response: Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.0/2.0 api-supported-versions: 3.0/2.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 { \"payment\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"capture\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"transaction\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2020-06-22T10:56:56.2927632Z\", \"updated\": \"2020-06-22T10:56:56.4035291Z\", \"type\": \"Capture\", \"state\": \"Completed\", \"amount\": 1500, \"vatAmount\": 375, \"description\": \"Capturing the authorized payment\", \"payeeReference\": \"AB832\", \"receiptReference\": \"AB831\" } } } Show fields Hide fields Property Type Description payment string The relative URL of the payment this capture transaction belongs to. capture object The capture object, containing the information about the capture transaction. id string The relative URL of the created capture transaction. transaction object The object representation of the generic transaction resource, containing information about the current transaction. id string The relative URL of the current transaction resource. created string The ISO-8601 date and time of when the transaction was created. updated string The ISO-8601 date and time of when the transaction was updated. type string Indicates the transaction type. state string Indicates the state of the transaction, usually initialized, completed or failed. If a partial has been done and further transactions are possible, the state will be awaitingActivity. number integer The transaction number, useful when there’s need to reference the transaction in human communication. Not usable for programmatic identification of the transaction, where id should be used instead. amount integer The transaction amount (including VAT, if any) entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The amount displayed is the final amount the payer paid for their order, including any payment method specific discounts or fees. vatAmount integer The payment’s VAT (Value Added Tax) amount, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The vatAmount entered will not affect the amount shown on the payment page, which only shows the total amount. This field is used to specify how much of the total amount the VAT will be. Set to 0 (zero) if there is no VAT amount charged. description string A textual description of the purchase. Maximum length is 40 characters. payeeReference string A unique reference from the merchant system. Set per operation to ensure an exactly-once delivery of a transactional operation. Length and content validation depends on whether the transaction.number or the payeeReference is sent to the acquirer. If Swedbank Pay handles the settlement, the transaction.number is sent and the payeeReference must be in the format of A-Za-z0-9 and string(30). If you handle the settlement, Swedbank Pay will send the payeeReference and it will be limited to the format of string(12). All characters must be digits. In Invoice Payments payeeReference is used as an invoice/receipt number, if the receiptReference is not defined. receiptReference string(30) A unique reference from the merchant system. It is set per operation to ensure an exactly-once delivery of a transactional operation. It is used to supplement payeeReference as an additional receipt number. Capture Sequence Diagram sequenceDiagram participant Merchant participant SwedbankPay as Swedbank Pay rect rgba(81,43,43,0.1) activate Merchant note left of Payer: Capture Merchant -&gt;&gt;+ SwedbankPay: rel:capture deactivate Merchant SwedbankPay --&gt;&gt;- Merchant: Capture status note right of Merchant: Capture here only if the purchased&lt;br/&gt;goods don't require shipping.&lt;br/&gt;If shipping is required, perform capture&lt;br/&gt;after the goods have shipped.&lt;br&gt;Should only be used for &lt;br&gt;payment methods that support &lt;br&gt;Authorizations. end",
    "tags": "",
    "url": "/checkout-v3/features/optional/unscheduled/"
  },{
    "title": "Update Payment Order",
    "text": "Update Payment Order warning If a payment is attempted, failed or currently being processed, you will not be able to update the orderItems for the payment order. Should you need to update the orderItems, you will have to abort the payment order and create a new order with the updated orderItems. The UpdateOrder operation is used when there is a change in the amount, vat amount or there are added or removed order items in the payment order. This feature is available in Seamless View only. info If you implement UpdateOrder you need to refresh() the Payment Menu frontend after you have called the UpdateOrder API from the backend. In case the shopping cart is changed in another browser tab, that should also lead to an UpdateOrder. On window.onfocus in the tab that had Payment Menu initialized, refresh() should be invoked so the correct amount is authorized. If the page is refreshed by a full page reload, refresh() is not necessary. The response given when changing a payment order is equivalent to a GET request towards the paymentorders resource. Even though the fields are the same, the UpdateOrder request will overwrite the fields that were sent in the initial Purchase request. Request Copy json to clipboard 1 2 3 PATCH /psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce HTTP/1.1 Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.x/2.0 // Version optional for 3.0 and 2.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 { \"paymentorder\": { \"operation\": \"UpdateOrder\", \"amount\": 1500, \"vatAmount\": 375, \"orderItems\": [ { \"reference\": \"P1\", \"name\": \"Product1\", \"type\": \"PRODUCT\", \"class\": \"ProductGroup1\", \"itemUrl\": \"https://example.com/shop/products/1234\", \"imageUrl\": \"https://example.com/products/product1.jpg\", \"description\": \"Product description\", \"discountDescription\": \"Volume discount\", \"quantity\": 351.3514, \"quantityUnit\": \"pcs\", \"unitPrice\": 300, \"discountPrice\": 200, \"vatPercent\": 2500, \"amount\": 1000, \"vatAmount\": 250 }, { \"reference\": \"P2\", \"name\": \"Product2\", \"type\": \"PRODUCT\", \"class\": \"ProductGroup1\", \"description\": \"Product description\", \"quantity\": 9876.1531, \"quantityUnit\": \"pcs\", \"unitPrice\": 500, \"vatPercent\": 2500, \"amount\": 500, \"vatAmount\": 125 } ] } } Show fields Hide fields Required Field Type Description check paymentOrder object The payment order object. check operation string Determines the initial operation, defining the type of payment order created. check amount integer The transaction amount (including VAT, if any) entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The amount displayed is the final amount the payer paid for their order, including any payment method specific discounts or fees. check vatAmount integer The payment’s VAT (Value Added Tax) amount, entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The vatAmount entered will not affect the amount shown on the payment page, which only shows the total amount. This field is used to specify how much of the total amount the VAT will be. Set to 0 (zero) if there is no VAT amount charged. check description string The description of the payment order. check orderItems array The array of items being purchased with the order. Note that authorization orderItems will not be printed on invoices, so lines meant for print must be added in the Capture request. The authorization orderItems will, however, be used in the Merchant Portal when captures or reversals are performed, and might be shown other places later. It is required to use this field to be able to send Capture orderItems. Capture requests should only contain items meant to be captured from the order. check reference string A reference that identifies the order item. check name string The name of the order item. check type enum PRODUCT, SERVICE, SHIPPING_FEE, PAYMENT_FEE, DISCOUNT, VALUE_CODE or OTHER. The type of the order item. check class string The classification of the order item. Can be used for assigning the order item to a specific product category, such as MobilePhone. Note that class cannot contain spaces and must follow the regex pattern [\\w-]*. Swedbank Pay may use this field for statistics. check itemUrl string The URL to a page that can display the purchased item, product or similar. check imageUrl string The URL to an image of the order item. check description string The human readable description of the order item. check discountDescription string The human readable description of the possible discount. check quantity number The 4 decimal precision quantity of order items being purchased. check quantityUnit string The unit of the quantity, such as pcs, grams, or similar. This is used for your own book keeping. check unitPrice integer The price per unit of order item, including VAT. check discountPrice integer If the order item is purchased at a discounted price. This field should contain that price, including VAT. check vatPercent integer The percent value of the VAT multiplied by 100, so 25% becomes 2500. check amount integer The total amount including VAT to be paid for the specified quantity of this order item, in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 NOK and 5000 equals 50.00 NOK. check vatAmount integer The total amount of VAT to be paid for the specified quantity of this order item, in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 NOK and 5000 equals 50.00 NOK. Response 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x/2.0 api-supported-versions: 3.x/2.0 Show fields Hide fields Field Type Description payment object The payment object contains information about the specific payment. id string The relative URL and unique identifier of the payment resource . Please read about URL Usage to understand how this and other URLs should be used in your solution. number integer The payment number, useful when there’s need to reference the payment in human communication. Not usable for programmatic identification of the payment, where id should be used instead. created string The ISO-8601 date of when the payment was created. updated string The ISO-8601 date of when the payment was updated. state string Ready, Pending, Failed or Aborted. Indicates the state of the payment, not the state of any transactions performed on the payment. To find the state of the payment’s transactions (such as a successful authorization), see the transactions resource or the different specialized type-specific resources such as authorizations or sales. prices object The prices resource lists the prices related to a specific payment. id string The relative URL and unique identifier of the prices resource . Please read about URL Usage to understand how this and other URLs should be used in your solution. amount integer The transaction amount (including VAT, if any) entered in the lowest monetary unit of the selected currency. E.g.: 10000 = 100.00 SEK, 5000 = 50.00 SEK. The amount displayed is the final amount the payer paid for their order, including any payment method specific discounts or fees. remainingCaptureAmount integer The available amount to capture. remainingCancelAmount integer The available amount to cancel. remainingReversalAmount integer The available amount to reverse. description string(40) A textual description of the purchase. Maximum length is 40 characters. userAgent string The user agent of the payer. Should typically be set to the value of the User-Agent header sent by the payer’s web browser. language string sv-SE, nb-NO, da-DK, en-US or fi-FI. urls string The URL to the urls resource where all URLs related to the payment can be retrieved. payeeInfo object The payeeInfo object, containing information about the payee (the recipient of the money). See payeeInfo for details. payers string The URL to the payer resource where the information about the payer can be retrieved. operations array The array of operations that are possible to perform on the payment in its current state. method string The HTTP method to use when performing the operation. href string The target URL to perform the operation against. rel string The name of the relation the operation has to the current resource.",
    "tags": "",
    "url": "/checkout-v3/features/payment-operations/update/"
  },{
    "title": "UpdateTerminal",
    "text": "Method Signatures void UpdateTerminal() Task&lt;UpdateTerminalRequestResult&gt; UpdateTerminalAsync() Description The UpdateTerminalAsync method sends a status report to TMS to trigger possible program or parameter update. The call should be made during a login session (after open and before close), but in order to actually change parameters Close must be called. If default mode is used there will be an EventNotification indicating maintenance required. Then Close should be called to let the terminal update its parameters. If client only mode is used calling UpdateTerminal and then Close, even though the EventNotification will not occur, is a good idea. This is not a high priority function to implement. The same thing may be achieved by booting and a call to Open. Returns An UpdateTerminalRequestResult 1 public class UpdateTerminalRequestResult : NexoRequestResult; 1 2 3 4 5 6 7 public class NexoRequestResult { public string ResponseContent public NexoResponseResult ResponseResult { get; set; } public string ErrorCondition { get; set; } public string ResponseText { get; set; } };",
    "tags": "",
    "url": "/pax-terminal/NET/SwpTrmLib/Methods/otheravailable/updateterminalasync/"
  },{
    "title": "Urls",
    "text": "URLs When creating a Payment Order, the urls field of the paymentOrder contains the related URLs, including where the payer is redirected when going forward with or canceling a payment session, as well as the callback URL that is used to inform the payee (merchant) of changes or updates made to underlying payments or transaction. Show fields Hide fields Required Field Type Description check ︎︎︎︎︎ hostUrls array The array of valid host URLs. check completeUrl string The URL that Swedbank Pay will redirect back to when the payer has completed their interactions with the payment. This does not indicate a successful payment, only that it has reached a final (complete) state. A GET request needs to be performed on the payment to inspect it further. See completeUrl for details.   cancelUrl string The URL to redirect the payer to if the payment is cancelled, either by the payer or by the merchant trough an abort request of the payment or paymentorder.   paymentUrl string The paymentUrl represents the URL that Swedbank Pay will redirect back to when the view-operation needs to be loaded, to inspect and act on the current status of the payment, such as when the payer is redirected out of the Seamless View (the &lt;iframe&gt;) and sent back after completing the payment. paymentUrl is only used in Seamless Views and should point to the page of where the Payment Order Seamless View is hosted. If both cancelUrl and paymentUrl is sent, the paymentUrl will used.   callbackUrl string The URL that Swedbank Pay will perform an HTTP POST against every time a transaction is created on the payment order. See callback for details.   logoUrl string With permission and activation on your contract (if you are using Seamless View), sending in a logoUrl will replace the Swedbank Pay logo with the logo sent in. If you do not send in a logoUrl, then no logo and no text is shown. Without permission or activation on your contract, sending in a logoUrl has no effect. The logo must be a picture with maximum 50px height and 400px width. Requires HTTPS. Read more about this in Custom Logo . check termsOfServiceUrl string The URL to the terms of service document which the payer must accept in order to complete the payment. HTTPS is a requirement. Payment Url For our Seamless Views, the field called paymentUrl will be used when the payer is redirected out of the Seamless View (the iframe). The payer is redirected out of frame when selecting payment methods which trigger SCA. This includes 3-D Secure card payments, installment account, invoice, MobilePay, monthly invoice payments, Trustly and Vipps. The URL should represent the page of where the Payment Order Seamless View was hosted originally, such as the checkout page, shopping cart page, or similar. Basically, paymentUrl should be set to the same URL as that of the page where the JavaScript for the Seamless View was added to in order to initiate the payment process. info Please note that the paymentUrl must be able to invoke the same JavaScript URL from the same Payment Order as the one that initiated the payment process originally, so it should include some sort of state identifier in the URL. The state identifier is the ID of the order, shopping cart or similar that has the URL of the Payment stored. With paymentUrl in place, the retry process becomes much more convenient for both the integration and the payer. paymentUrl is used by the Seamless View flow and must be used for WebView-based app implementations. Some payment methods only work when owning the full browser page (no use of &lt;iframe&gt;), this will be solved by doing a full browser (top frame) redirect out of the Seamless View. 3-D Secure requires this, for example. For mobile flows, some payment methods work best when app-to-app switching is enabled and handled automatically (Swish, Vipps etc). To solve this, it is important that the third party app or site understand where to redirect the payer back to after the flow on their end is completed. info Refresh your payment menu after the payer’s return!: The paymentUrl is the URL Swedbank Pay will provide to the third party for handling the redirect back to your site or app. When the payer returns from the paymentUrl either in an app or a web page, it is vital that you refresh the Seamless View payment menu so the payment flow can be completed. Failing to do so could lead to issues. For in-app it is important that you either implement the onPaymentCompleted event or let the Seamless View redirect to the completeUrl before intercepting the WebView. If you intercept the WebView when the payer’s device is redirected to the paymentUrl it can lead to issues. If you want to handle payment errors in your own code, you should also subscribe to other events provided by the Seamless View JavaScript and shut down the Seamless View if any of these events occur. Events to subscribe to for full control over the payment flow are can be found in Seamless View Events. When implementing the Seamless View flow into a WebView in your mobile app, you should use a custom scheme or Universal Link in the paymentUrl for handling automatic switching between your app and the payment app on the mobile device. URLs Resource It is possible to perform a GET request on the urls resource to retrieve its contents. Request 1 2 3 4 GET /psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/urls/ HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.x/2.0 // Version optional for 3.0 and 2.0 Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x/2.0 api-supported-versions: 3.x/2.0 1 2 3 4 5 6 7 8 9 10 11 12 13 { \"paymentorder\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce\", \"urls\": { \"id\": \"/psp/payments/09ccd29a-7c4f-4752-9396-12100cbfecce/urls\", \"hostUrls\": [ \"https://example.com\", \"https://example.net\" ], \"completeUrl\": \"https://example.com/payment-complete\", \"cancelUrl\": \"https://example.com/payment-cancelled\", \"paymentUrl\": \"https://example.com/perform-payment\", \"callbackUrl\": \"http://api.example.com/payment-callback\", \"logoUrl\": \"http://merchant.com/path/to/logo.png\", \"termsOfServiceUrl\": \"https://example.com/termsandconditions.pdf\" } } Field Type Description paymentOrder string The relative URL and unique identifier of the payment resource this urls belongs to. Please read about URL Usage to understand how this and other URLs should be used in your solution. urls object The URLs object. id string The relative URL and unique identifier of the urls resource this urls belongs to. Please read about URL Usage to understand how this and other URLs should be used in your solution. hostsUrl string An array of the whitelisted URLs that are allowed as parents to a Hosted View, typically the URL of the web shop or similar that will embed a Hosted View within it. completeUrl string The URL that Swedbank Pay will redirect back to when the payer has completed their interactions with the payment. This does not indicate a successful payment, only that it has reached a final (complete) state. A GET request needs to be performed on the payment to inspect it further. See completeUrl for details. cancelUrl string The URL to redirect the payer to if the payment is cancelled, either by the payer or by the merchant trough an abort request of the payment or paymentorder. paymentUrl string The paymentUrl represents the URL that Swedbank Pay will redirect back to when the view-operation needs to be loaded, to inspect and act on the current status of the payment, such as when the payer is redirected out of the Seamless View (the &lt;iframe&gt;) and sent back after completing the payment. paymentUrl is only used in Seamless Views and should point to the page of where the Payment Order Seamless View is hosted. If both cancelUrl and paymentUrl is sent, the paymentUrl will used. callbackUrl string The URL that Swedbank Pay will perform an HTTP POST against every time a transaction is created on the payment. See callback for details. logoUrl string With permission and activation on your contract (if you are using Seamless View), sending in a logoUrl will replace the Swedbank Pay logo with the logo sent in. If you do not send in a logoUrl, then no logo and no text is shown. Without permission or activation on your contract, sending in a logoUrl has no effect. The logo must be a picture with maximum 50px height and 400px width. Requires HTTPS. Read more about this in Custom Logo . termsOfServiceUrl string The URL to the terms of service document which the payer must accept in order to complete the payment. HTTPS is a requirement.",
    "tags": "",
    "url": "/checkout-v3/features/technical-reference/urls/"
  },{
    "title": "Basic Information",
    "text": "Usage The SwpTrmLib only contains one implementation for using a PAX terminal from Swedbank Pay at the moment, but makes it possible to vary the style of use by configuration. There are two major styles that is decided by the SalesCapabilities string sent in a LoginRequest which happens on call to Open/OpenAsync: Act as both server and client - see code example for default style Act as client only - see code example for client only The intended default style requires the consumer of the SwpTrmLib to act as both a server and a client. The server handles requests from the terminal, such as display information, events, and possible input request from the terminal, such as a request to confirm that a receipt has been signed if needed. The second style is to act as a client only and then loose information from terminal such as events informing that a card has been inserted or removed or display information helping the operator to see what is going on. Transaction that need customer signing the receipt are under the hood done a bit differently, but have the exact same behavior as when using the default integration style. Synchronous methods Most available methods have an asynchronous and a synchronous version. Note that the synchronous versions internally renders a call to the asynchronous version. All results genereated due to synchronous calls are received in one callback method, SyncRequestResult, which parameter is the same result as described for the asynchronous version. warning Warning: Do not wrap the synchronous calls in async await since the methods themselves call async methods.",
    "tags": "",
    "url": "/pax-terminal/NET/usage/"
  },{
    "title": "Use A920pro printer",
    "text": "When using an A920pro as an integrated payment terminal it is possible to use the printer by sending a PrintRequest to the terminal. Typically this would be to print the sale receipt on the A920pro printer. The PrintRequest may be sent at any time during a login session when no other request is ongoing. sequenceDiagram participant POS participant A920pro POS -&gt;&gt; A920pro: LoginRequest A920pro -&gt;&gt; POS: LoginResponse Success POS -&gt;&gt; A920pro: PaymentRequest A920pro -&gt;&gt; POS: PaymentResponse Success Note left of A920pro: Containing terminal receipt data POS -&gt;&gt; A920pro: PrintRequest Note left of A920pro: Containing several OutputTexts&lt;br/&gt;with data to print. PrintRequest The PrintRequest message may holds attributes for some formatting. The attributes are optinal and if no attributes are set the default settings will be used. Name Lev Attribute Description PrintRequest 1     PrintOutput 2 DocumentQualifier Value: SaleReceipt     ResponseMode Value: PrintEnd OutputContent 3 OutputFormat Value: Text OutputText 4 Text to be printed. A new line is generated per OutputText. However, a text may span several rows if a byte of hex 0A is used as line break     StartRow Vertical pixel paper feed. It is recommended to end with an empty OutputText with StartRow set to 224 to feed paper past the cutter.     Alignment Enumeration: Left, Centred, Right, Justified     CharacterHeight Enumeration: HalfHeight, SingleHeight, DoubleHeight     CharacterWidth Enumeration: SingleWidth, DoubleWidth     Color Enumeration: Black, White - white on black background info Alignment Justified: A text including a Tab and alignment Justified renders one left justified and one right justified text Sample PrintRequest message 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 &lt;SaleToPOIRequest&gt; &lt;MessageHeader DeviceID=\"25\" MessageCategory=\"Print\" MessageClass=\"Device\" MessageType=\"Request\" POIID=\"A-POIID\" SaleID=\"1\" ServiceID=\"29\"/&gt; &lt;PrintRequest&gt; &lt;PrintOutput DocumentQualifier=\"SaleReceipt\" ResponseMode=\"PrintEnd\"&gt; &lt;OutputContent OutputFormat=\"Text\"&gt; &lt;OutputText Alignment=\"Left\" CharacterHeight=\"HalfHeight\" CharacterWidth=\"SingleWidth\" Color=\"Black\"&gt;8x16 font size&lt;/OutputText&gt; &lt;OutputText Alignment=\"Left\" CharacterWidth=\"SingleWidth\" Color=\"Black\"&gt;12x24 font size&lt;/OutputText&gt; &lt;OutputText Alignment=\"Justified\" CharacterHeight=\"SingleHeight\" CharacterWidth=\"SingleWidth\" Color=\"Black\" StartRow=\"20\"&gt;8x32 Justified alignment&lt;/OutputText&gt; &lt;OutputText Alignment=\"Left\" CharacterHeight=\"DoubleHeight\" CharacterWidth=\"SingleWidth\" Color=\"White\" StartRow=\"40\"&gt;12x48 black background&lt;/OutputText&gt; &lt;OutputText Alignment=\"Centred\" CharacterHeight=\"HalfHeight\" CharacterWidth=\"DoubleWidth\" Color=\"Black\" StartRow=\"50\"&gt;Centered 16x16&lt;/OutputText&gt; &lt;OutputText Alignment=\"Centred\" CharacterWidth=\"DoubleWidth\" Color=\"Black\" StartRow=\"20\"&gt;Centered 24x24&lt;/OutputText&gt; &lt;OutputText Alignment=\"Right\" CharacterHeight=\"SingleHeight\" CharacterWidth=\"DoubleWidth\" Color=\"Black\" StartRow=\"60\"&gt;Right aligned 16x32&lt;/OutputText&gt; &lt;OutputText Alignment=\"Right\" CharacterHeight=\"DoubleHeight\" CharacterWidth=\"DoubleWidth\" Color=\"Black\"&gt;Right aligned 24x48&lt;/OutputText&gt; &lt;OutputText StartRow=\"224\"/&gt; &lt;/OutputContent&gt; &lt;/PrintOutput&gt; &lt;/PrintRequest&gt; &lt;/SaleToPOIRequest&gt;",
    "tags": "",
    "url": "/pax-terminal/Nexo-Retailer/use-a920-printer/"
  },{
    "title": "User Agent",
    "text": "User-Agent The term user agent is used for both the web browser used by the payer as well as the system making HTTP requests towards Swedbank Pay’s APIs. The difference between these two and how they relate to each other is illustrated in the below sequence diagram:  Payer Payer Merchant Merchant Swedbank Pay Swedbank PayUser-Agent: P ①User-Agent: M { userAgent: \"P\" } ②Store request data{ \"initiatingSystemUserAgent\": \"M\" } ③ First, the payer makes an HTTP request with their web browser towards the merchant’s website. This HTTP request contains a User-Agent header, here given the value P (for “Payer”). The merchant performs an HTTP request towards Swedbank Pay. The merchant extracts the P value of the User-Agent header from the payer’s browser and sends it to Swedbank Pay in the userAgent field in the JSON request body. The merchant also composes its own user agent string and sends it to Swedbank Pay in the User-Agent HTTP request header, here represented as the value M (for “Merchant”). Swedbank Pay receives \"userAgent\": \"P\" and User-Agent: M, stores the values and returns the M value in the initiatingSystemUserAgent response JSON field. The user agent strings are used for statistical purposes by Swedbank Pay.",
    "tags": "",
    "url": "/checkout-v3/features/technical-reference/user-agent/"
  },{
    "title": "Validate Status",
    "text": "After the payer has completed their payment and returned to the CompleteUrl, you need to validate that the payment has the status Paid so you are able to capture funds. First of all, you need to find out if the transaction type needs to be captured or not. An Authorization needs to be captured (most payment methods generate these type of transactions), a Sale does not (Trustly and Swish transactions where the funds are captured instantly and automatically). Perform the GET You can do this by perfoming a GET on your payment. The status field should simply have the status Paid. As long as this is the case, you are good to go and proceed to doing the capture. We also recommend adding an expansion of the paid node. Do this by adding ?$expand=paid after the paymentOrderId. This way, you can retrieve more information about the payment while limiting the amount of calls you have to do towards the API. Not adding the expansion will result in the same response, apart from the paid node being collapsed. GET Request with expanded paid node 1 2 3 4 GET /psp/paymentorders/34761895-d1e4-412a-0a30-08dc43423140?$expand=paid HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.x/2.0 // Version optional for 3.0 and 2.0 GET Response with expanded paid node Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x/2.0 api-supported-versions: 3.x/2.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 { \"paymentOrder\": { \"id\": \"/psp/paymentorders/34761895-d1e4-412a-0a30-08dc43423140\", \"created\": \"2024-03-13T12:39:58.0608661Z\", \"updated\": \"2024-03-13T12:40:16.1887572Z\", \"operation\": \"Purchase\", \"status\": \"Paid\", \"currency\": \"SEK\", \"amount\": 100, \"vatAmount\": 0, \"remainingCaptureAmount\": 100, \"remainingCancellationAmount\": 100, \"description\": \"Test Purchase\", \"initiatingSystemUserAgent\": \"PostmanRuntime/7.37.0\", \"language\": \"sv-SE\", \"availableInstruments\": [ \"CreditCard\", \"Invoice-PayExFinancingSe\", \"Swish\", \"CreditAccount-CreditAccountSe\", \"Trustly\", \"MobilePay\", \"GooglePay\", \"ClickToPay\" ], \"implementation\": \"PaymentsOnly\", \"integration\": \"Redirect\", \"instrumentMode\": false, \"guestMode\": false, \"orderItems\": { \"id\": \"/psp/paymentorders/34761895-d1e4-412a-0a30-08dc43423140/orderitems\" }, \"urls\": { \"id\": \"/psp/paymentorders/34761895-d1e4-412a-0a30-08dc43423140/urls\" }, \"payeeInfo\": { \"id\": \"/psp/paymentorders/34761895-d1e4-412a-0a30-08dc43423140/payeeinfo\" }, \"payer\": { \"id\": \"/psp/paymentorders/34761895-d1e4-412a-0a30-08dc43423140/payers\" }, \"history\": { \"id\": \"/psp/paymentorders/34761895-d1e4-412a-0a30-08dc43423140/history\" }, \"failed\": { \"id\": \"/psp/paymentorders/34761895-d1e4-412a-0a30-08dc43423140/failed\" }, \"aborted\": { \"id\": \"/psp/paymentorders/34761895-d1e4-412a-0a30-08dc43423140/aborted\" }, \"paid\": { \"id\": \"/psp/paymentorders/34761895-d1e4-412a-0a30-08dc43423140/paid\", \"number\": 40129782830, \"instrument\": \"CreditCard\", \"payeeReference\": \"1710333598\", \"transactionType\": \"Authorization\", \"amount\": 100, \"submittedAmount\": 100, \"feeAmount\": 0, \"discountAmount\": 0, \"paymentTokenGenerated\": false, \"details\": { \"externalNonPaymentToken\": \"91dd1ea0eeafc2ac397d24e80abdc\", \"cardBrand\": \"MasterCard\", \"cardType\": \"Credit\", \"maskedPan\": \"522661******3406\", \"expiryDate\": \"12/2033\", \"issuerAuthorizationApprovalCode\": \"L00003\", \"acquirerTransactionType\": \"3DSECURE\", \"acquirerStan\": \"3\", \"acquirerTerminalId\": \"40129782830\", \"acquirerTransactionTime\": \"2024-03-13T12:40:30.361Z\", \"transactionInitiator\": \"CARDHOLDER\", \"bin\": \"522661\", \"paymentAccountReference\": \"91dd1ea0eeafc2ac397d24e80abdc\" } }, \"cancelled\": { \"id\": \"/psp/paymentorders/34761895-d1e4-412a-0a30-08dc43423140/cancelled\", \"paymentTokenGenerated\": false }, \"reversed\": { \"id\": \"/psp/paymentorders/34761895-d1e4-412a-0a30-08dc43423140/reversed\", \"paymentTokenGenerated\": false }, \"financialTransactions\": { \"id\": \"/psp/paymentorders/34761895-d1e4-412a-0a30-08dc43423140/financialtransactions\" }, \"failedAttempts\": { \"id\": \"/psp/paymentorders/34761895-d1e4-412a-0a30-08dc43423140/failedattempts\" }, \"postPurchaseFailedAttempts\": { \"id\": \"/psp/paymentorders/34761895-d1e4-412a-0a30-08dc43423140/postpurchasefailedattempts\" }, \"metadata\": { \"id\": \"/psp/paymentorders/34761895-d1e4-412a-0a30-08dc43423140/metadata\" } }, \"operations\": [ { \"method\": \"POST\", \"href\": \"https://api.externalintegration.payex.com/psp/paymentorders/34761895-d1e4-412a-0a30-08dc43423140/cancellations\", \"rel\": \"cancel\", \"contentType\": \"application/json\" }, { \"method\": \"POST\", \"href\": \"https://api.externalintegration.payex.com/psp/paymentorders/34761895-d1e4-412a-0a30-08dc43423140/captures\", \"rel\": \"capture\", \"contentType\": \"application/json\" }, { \"method\": \"GET\", \"href\": \"https://ecom.externalintegration.payex.com/checkout/19bd2693ba9f42c700c41eac68a26749987600be3d4757fcccef570754a671a6?_tc_tid=ea84679ddcfc4f879e3d972c62a09028\", \"rel\": \"redirect-checkout\", \"contentType\": \"text/html\" }, { \"method\": \"GET\", \"href\": \"https://ecom.externalintegration.payex.com/checkout/client/19bd2693ba9f42c700c41eac68a26749987600be3d4757fcccef570754a671a6?culture=sv-SE&amp;_tc_tid=ea84679ddcfc4f879e3d972c62a09028\", \"rel\": \"view-checkout\", \"contentType\": \"application/javascript\" } ] } An alternative option to expanding the paid node is performing a GET towards the paid resource. GET Request directly towards the paid resource 1 2 3 4 GET /psp/paymentorders/5adc265f-f87f-4313-577e-08d3dca1a26c/paid HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.x/2.0 // Version optional for 3.0 and 2.0 GET Response directly towards the paid resource Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x/2.0 api-supported-versions: 3.x/2.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 { \"paid\": { \"id\": \"/psp/paymentorders/5adc265f-f87f-4313-577e-08d3dca1a26c/paid\", \"instrument\": \"Creditcard\", \"number\": 1234567890, \"payeeReference\": \"CD123\", \"orderReference\": \"AB1234\", \"transactionType\": \"Authorization\", \"amount\": 1500, \"submittedAmount\": 1500, \"feeAmount\": 0, \"discountAmount\": 0, \"paymentTokenGenerated\": false, \"details\": { \"cardBrand\": \"Visa\", \"cardType\": \"Credit\", \"maskedPan\": \"492500******0004\", \"expiryDate\": \"12/2022\", \"issuerAuthorizationApprovalCode\": \"L00302\", \"acquirerTransactionType\": \"STANDARD\", \"acquirerStan\": \"302\", \"acquirerTerminalId\": \"70101301389\", \"acquirerTransactionTime\": \"2022-06-15T14:12:55.029Z\", \"transactionInitiator\": \"CARDHOLDER\", \"bin\": \"492500\" } } Other Statuses There are several statuses the payment might have in addition to Paid once the payer has reached the completeURL. If any of these appear, no capture is available. You can get more information by doing a GET with the field expanded or directly towards the resource, just like we showed above. The other statuses are: Failed Returned when a payment has failed. You will find an error message in the Failed response. Cancelled Returned when an authorized amount has been fully cancelled. It will contain fields from both the cancelled description and paid section. See the Cancelled response. Aborted Returned when the merchant has aborted the payment, or if the payer cancelled the payment in the redirect integration. See the Aborted response.",
    "tags": "",
    "url": "/checkout-v3/get-started/validate-status/"
  },{
    "title": "Verify",
    "text": "The Verify operation lets you post verification payments, which confirm the validity of card information without reserving or charging any amount. Introduction To Verify This option is commonly used when initiating a subsequent unscheduled purchase flow - where you do not want to charge the payer right away. info Please note that all boolean card attributes involving the rejection of certain card types are optional and require enabling in the contract with Swedbank Pay. Verification Through Swedbank Pay Payments When properly set up in your merchant/webshop site, and the payer initiates a verification operation, you make a POST request towards Swedbank Pay with your Verify information. This will create a payment resource with a unique id. You either receive a Redirect URL to a hosted page or a JavaScript source in response. You need to embed the script source on your site to create aSeamless View in an iframe; so that the payer can enter the card details in a secure Swedbank Pay hosted environment. Swedbank Pay will handle 3-D Secure authentication when this is required. Swedbank Pay will redirect the payer’s browser to - or display directly in the iframe - one of two specified URLs, depending on whether the payment session is followed through completely or cancelled beforehand. Please note that both a successful and rejected payment reach completion, in contrast to a cancelled payment. When you detect that the payer reach your completeUrl, you need to do a GET request to receive the state of the transaction. Finally you will make a GET request towards Swedbank Pay with the id of the payment received in the first step, which will return the payment result and a unscheduledToken that can be used for subsequent unscheduled server-to-server based payments. API Requests The API requests are displayed in the Verification flow below. The options you can choose from when creating a payment with key operation set to Value Verify are listed below. Please note that not including paymentUrl in the request will generate a redirect-verification operation in the response, meant to be used in the Redirect flow. Adding paymentUrl input will generate the response meant for Seamless View, which does not include the redirect-verification. The request below is the Redirect option. How It Looks You will redirect the payer to Swedbank Pay hosted pages to collect the card information. Verify Request Request Copy json to clipboard 1 2 3 4 POST /psp/paymentorders HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json;version=3.x/2.0 // Version optional for 3.0 and 2.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 { \"paymentorder\": { \"operation\": \"Verify\", \"currency\": \"NOK\", \"description\": \"Test Verification\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"nb-NO\", \"productName\": \"Checkout3\", // Removed in 3.1, can be excluded in 3.0 if version is added in header \"generateUnscheduledToken\": true, \"urls\": { \"hostUrls\": [\"https://example.com\", \"https://example.net\"], \"completeUrl\": \"https://example.com/payment-completed\", \"cancelUrl\": \"https://example.com/payment-cancelled\", \"logoUrl\": \"https://example.com/payment-logo.png\", \"termsOfServiceUrl\": \"https://example.com/payment-terms.html\" }, \"payeeInfo\": { \"payeeId\": \"5cabf558-5283-482f-b252-4d58e06f6f3b\", \"payeeReference\": \"CD1234\", \"payeeName\": \"Merchant1\", \"productCategory\": \"A123\", \"orderReference\": \"or-12456\", \"subsite\": \"MySubsite\", \"siteId\": \"MySiteId\", }, \"payer\": { \"payerReference\": \"AB1234\", } }, \"creditCard\": { \"rejectCreditCards\": false, \"rejectDebitCards\": false, \"rejectConsumerCards\": false, \"rejectCorporateCards\": false } } Verify Response Response Copy json to clipboard 1 2 3 HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8; version=3.x api-supported-versions: 3.x/2.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 { \"paymentOrder\": { \"id\": \"/psp/paymentorders/793dbd59-2b80-4acb-97bf-08dc64fc1777\", \"created\": \"2024-05-02T11:07:26.8110851Z\", \"updated\": \"2024-05-02T11:07:26.8270296Z\", \"operation\": \"Verify\", \"status\": \"Initialized\", \"currency\": \"NOK\", \"amount\": 0, \"vatAmount\": 0, \"description\": \"Test Verification\", \"initiatingSystemUserAgent\": \"PostmanRuntime/7.37.3\", \"language\": \"nb-NO\", \"availableInstruments\": [ \"CreditCard\" ], \"implementation\": \"PaymentsOnly\", \"integration\": \"\", \"instrumentMode\": false, \"guestMode\": true, \"urls\": { \"id\": \"/psp/paymentorders/793dbd59-2b80-4acb-97bf-08dc64fc1777/urls\" }, \"payeeInfo\": { \"id\": \"/psp/paymentorders/793dbd59-2b80-4acb-97bf-08dc64fc1777/payeeinfo\" }, \"payer\": { \"id\": \"/psp/paymentorders/793dbd59-2b80-4acb-97bf-08dc64fc1777/payers\" }, \"history\": { \"id\": \"/psp/paymentorders/793dbd59-2b80-4acb-97bf-08dc64fc1777/history\" }, \"failed\": { \"id\": \"/psp/paymentorders/793dbd59-2b80-4acb-97bf-08dc64fc1777/failed\" }, \"aborted\": { \"id\": \"/psp/paymentorders/793dbd59-2b80-4acb-97bf-08dc64fc1777/aborted\" }, \"paid\": { \"id\": \"/psp/paymentorders/793dbd59-2b80-4acb-97bf-08dc64fc1777/paid\", \"paymentTokenGenerated\": false }, \"cancelled\": { \"id\": \"/psp/paymentorders/793dbd59-2b80-4acb-97bf-08dc64fc1777/cancelled\", \"paymentTokenGenerated\": false }, \"reversed\": { \"id\": \"/psp/paymentorders/793dbd59-2b80-4acb-97bf-08dc64fc1777/reversed\", \"paymentTokenGenerated\": false }, \"financialTransactions\": { \"id\": \"/psp/paymentorders/793dbd59-2b80-4acb-97bf-08dc64fc1777/financialtransactions\" }, \"failedAttempts\": { \"id\": \"/psp/paymentorders/793dbd59-2b80-4acb-97bf-08dc64fc1777/failedattempts\" }, \"postPurchaseFailedAttempts\": { \"id\": \"/psp/paymentorders/793dbd59-2b80-4acb-97bf-08dc64fc1777/postpurchasefailedattempts\" }, \"metadata\": { \"id\": \"/psp/paymentorders/793dbd59-2b80-4acb-97bf-08dc64fc1777/metadata\" } }, \"operations\": [ { \"method\": \"PATCH\", \"href\": \"https://api.externalintegration.payex.com/psp/paymentorders/793dbd59-2b80-4acb-97bf-08dc64fc1777\", \"rel\": \"update-order\", \"contentType\": \"application/json\" }, { \"method\": \"PATCH\", \"href\": \"https://api.externalintegration.payex.com/psp/paymentorders/793dbd59-2b80-4acb-97bf-08dc64fc1777\", \"rel\": \"abort\", \"contentType\": \"application/json\" }, { \"method\": \"GET\", \"href\": \"https://ecom.externalintegration.payex.com/checkout/09d057c9e3c9e8e81c226254ce4ab4996215ed9623836922874023b4aa142962?_tc_tid=45523942b84943299b594bd08f9c46e7\", \"rel\": \"redirect-checkout\", \"contentType\": \"text/html\" }, { \"method\": \"GET\", \"href\": \"https://ecom.externalintegration.payex.com/checkout/client/09d057c9e3c9e8e81c226254ce4ab4996215ed9623836922874023b4aa142962?culture=nb-NO&amp;_tc_tid=45523942b84943299b594bd08f9c46e7\", \"rel\": \"view-checkout\", \"contentType\": \"application/javascript\" } ] } Verification Flow The sequence diagram below shows the two requests you have to send to Swedbank Pay to make a purchase. The links will take you directly to the API description for the specific request. The diagram also shows in high level, the sequence of the process of a complete purchase. When dealing with credit card payments, 3-D Secure authentication of the cardholder is an essential topic. There are three alternative outcome of a credit card payment: 3-D Secure enabled - by default, 3-D Secure should be enabled, and Swedbank Pay will check if the card is enrolled with 3-D Secure. This depends on the issuer of the card. If the card is not enrolled with 3-D Secure, no authentication of the cardholder is done. Card supports 3-D Secure - if the card is enrolled with 3-D Secure, Swedbank Pay will redirect the cardholder to the autentication mechanism that is decided by the issuing bank. Normally this will be done using BankID or Mobile BankID.",
    "tags": "",
    "url": "/checkout-v3/features/optional/verify/"
  },{
    "title": "Verify",
    "text": "Verify Payments Verify payments are also supported by the SDK. This is particularly useful e.g. when creating tokens to charge a card later. Android 1 2 3 4 val paymentOrder = PaymentOrder( operation = Operation.VERIFY ... ) iOS 1 paymentOrder.operation = .Verify",
    "tags": "",
    "url": "/checkout-v3/modules-sdks/mobile-sdk/features/optional/verify/"
  },{
    "title": "Vipps",
    "text": "Simplify payments with Vipps! With Vipps, paying is as easy as sending a text. Whether you’re shopping online, splitting a bill or paying a friend, Vipps makes every transaction fast, secure, and hassle-free. Quick Transfers: Send and receive money instantly. User-Friendly: Easy setup and seamless payments in just a few taps. Secure Transactions: Advanced encryption ensures your safety. Versatile: Pay businesses, friends, or invoices — all in one app. Back to Introduction",
    "tags": "",
    "url": "/checkout-v3/vipps-presentation/"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/checkout-v3/features/core/abort/"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/checkout-v3/features/optional/action-specific-text-on-payment-button/"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/payments/mobile-pay/after-payment"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/payments/invoice/after-payment"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/payments/card/after-payment"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/payments/swish/after-payment"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/payments/vipps/after-payment"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/payments/trustly/after-payment"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/checkout/after-payment"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/checkout-v3/features/core/callback/"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/checkout-v3/features/core/cancel/"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/payments/mobilepay/capture"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/payments/invoice/capture"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/payments/card/capture"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/payments/vipps/capture"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/checkout/capture"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/checkout/checkin"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/checkout-v3/features/optional/corporate-limited-menu/"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/checkout-v3/features/optional/custom-logo/"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/checkout-v3/features/optional/custom-styling/"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/payments/invoice/direct"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/payments/swish/direct"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/checkout-v3/features/optional/expand-method/"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/checkout-v3/features/optional/fees-discounts/"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/checkout-v3/features/core/frictionless-payments/"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/checkout-v3/modules-sdks/mobile-sdk/other-features"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/checkout-v3/resources/sdk-modules"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/payments/mobile-pay/"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/payments/invoice/"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/payments/card/"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/payments/swish/"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/payments/vipps/"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/payments/trustly/"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/payments/"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/checkout/other-features"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/checkout-v3/features/optional/instrument-mode/"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/checkout-v3/migration-guide"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/payments/card/mobile-card-payments"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/checkout/payment-menu"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/checkout-v3/features/core/payment-order-capture/"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/payments/mobile-pay/redirect"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/payments/invoice/redirect"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/payments/card/redirect"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/payments/swish/redirect"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/payments/vipps/redirect"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/payments/trustly/redirect"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/checkout-v3/features/core/reversal/"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/payments/mobile-pay/seamless-view"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/payments/invoice/seamless-view"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/payments/card/seamless-view"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/payments/swish/seamless-view"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/payments/vipps/seamless-view"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/checkout-v3/features/core/settlement-reconciliation/"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/checkout-v3/features/optional/sort-order-payment-menu/"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/checkout-v3/features/optional/split-settlement/"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/checkout-v3/resources/test-data/"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/checkout-v3/features/optional/tos/"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/checkout-v3/features/core/update/"
  }]};
