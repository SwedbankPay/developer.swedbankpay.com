#!/bin/bash

COMMIT_MSG_FILE=$1
# COMMIT_SOURCE=$2
# SHA1=$3

# Regex explanation:
# First group matches the branch type
# then we match a slash (/).
# After this we match one out of two things:
# The ticket number, not case sensitive, OR
# the number. This is to support release branches.
valid_branch_regex="^((develop-ecom|develop-sdk)|(hotfix|feature|release|bugfix)\/([a-zA-Z]+\-[0-9]+|[0-9]\..*)).*"
branch_name="$(git rev-parse --abbrev-ref HEAD)"

if [[ "$NO_VERIFY" ]]; then
    echo "NO_VERIFY environment variable set, skipping commit message preparation." 1>&2
    exit 0
fi

if [[ $branch_name == "HEAD" ]]; then
    echo "Branch is HEAD, skipping commit message preparation."  1>&2
    exit 0
fi

if [[ ! $branch_name =~ $valid_branch_regex ]]; then
    echo "Commit error!"
    echo "The branch '$branch_name' is not named according to our standards."
    echo ""
    echo "Expected format:"
    echo "  $valid_branch_regex"
    echo ""
    echo "Examples:"
    echo "  feature/dx-839_some_great_description"
    echo "  release/1.8.1"
    echo "  hotfix/dx-123_very_hot_fix"
    exit 1
fi

prefix=${BASH_REMATCH[1]}

if [[ "$prefix" == "release" ]]; then
    exit 0
fi

task_id=${BASH_REMATCH[2]}
task_id=$(echo "$task_id" | tr '[:lower:]' '[:upper:]')
commit_message="$(cat "$1")"
commit_message=$(echo "$commit_message" | tr '[:lower:]' '[:upper:]')

if [[ $commit_message != $task_id* ]]; then
    echo "Prefixing commit message with $task_id:"
    commit_message_content=$(cat "$COMMIT_MSG_FILE")
    echo "$task_id:"' '"$commit_message_content" > "$COMMIT_MSG_FILE"
fi
